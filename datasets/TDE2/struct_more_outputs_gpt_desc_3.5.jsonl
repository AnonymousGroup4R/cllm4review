{"id": "0-9", "oq_id": 0, "desc": "Input: a list of complex text values.\nOutput: a list of complex text values.\nFunctionality: The transformation replaces certain Greek characters in each element of the given sequence with specific characters, as indicated in the output sequence.\nExample: Input: ['\u03c3\u03b1\u03b4\u03b7\u03c3', '\u03bb\u03ba\u03cc\u03b9\u03ad\u03c5', '\u03c0\u03bd\u03bd\u03c1\u03c3\u03bd\u03bc\u03be\u03b5\u03c9\u03b6', '\u03ac\u03b5\u03b1\u03c5\u03bb', '\u03bc\u03c6\u03b3\u03b6\u03be\u03bc\u03bd\u03ba']; output: ['o\u03b1\u03b4\u03b7o', '\u03bb\u03ba\u03cc\u03b9\u03ad\u03c5', '\u03c0ii\u03c1oi\u03bc\u03be\u03b5\u03c9\u03b6', '\u03ac\u03b5\u03b1\u03c5\u03bb', '\u03bc\u03c6\u03b3\u03b6\u03be\u03bci\u03ba']"}
{"id": "0-8", "oq_id": 0, "desc": "Input: a list of strings containing various characters.\nOutput: a list of strings with specific characters replaced.\nFunctionality: The transformation replaces the character '\u03c5' with 'i', '\u03b7' with 'o', and '\u03b1' with 'o' in each element of the given sequence, and outputs the result list.\nExample: Input: ['\u03cc\u03bb\u03b9\u03bc', '\u03b9\u03cc\u03c3\u03b9\u03c5\u03b7', '\u03c0\u03bd\u03bd\u03b4\u03c4\u03c1\u03bd\u03be\u03b6\u03c7\u03b1', '\u03af\u03b1\u03c3\u03b4\u03b1', '\u03be\u03c6\u03bd\u03be\u03ba\u03c6\u03be']; output: ['\u03cc\u03bb\u03b9\u03bc', '\u03b9\u03cco\u03b9\u03c5\u03b7', '\u03c0ii\u03b4\u03c4\u03c1i\u03be\u03b6\u03c7\u03b1', '\u03af\u03b1o\u03b4\u03b1', '\u03be\u03c6i\u03be\u03ba\u03c6\u03be']"}
{"id": "0-3", "oq_id": 0, "desc": "Input: a list of complex text strings.\nOutput: a list of complex text strings.\nFunctionality: The transformation replaces all instances of Greek letter '\u03bd' with Latin letter 'i' in each element of the given sequence.\nExample: Input: ['\u03b1\u03c5\u03bb\u03c2\u03b5', 'omeu', '\u03ac\u03bd\u03bd\u03bd\u03ba\u03b5\u03be\u03cd\u03b6', 'v', '\u03b1\u03b9\u03bd\u03b4\u03b3\u03bd\u03ba\u03c5\u03c7\u03bd\u03bb']; output: ['\u03b1\u03c5\u03bb\u03c2\u03b5', 'omeu', '\u03aciii\u03ba\u03b5\u03be\u03cd\u03b6', 'v', 'aei\u03b4\u03b3i\u03ba\u03c5\u03c7i\u03bb']"}
{"id": "0-2", "oq_id": 0, "desc": "Input: a list of complex text values.\nOutput: a list of complex text values.\nFunctionality: The transformation replaces specific characters in each element of the given sequence according to a predefined rule, and outputs the modified sequence as a list.\nExample: Input: ['\u03b1\u03b9\u03ba\u03c1\u03b9', 'aeioi', '\u03c3\u03bd\u03bd\u03bd\u03ba\u03be\u03b5\u03c5\u03b6', 'pl\u00f6', '\u03b1\u03b9\u03b4\u03b3\u03c5\u03bd\u03bf\u03c5\u03bb\u03b9']; output: ['ae\u03ba\u03c1\u03b9', 'aeioi', 'oiii\u03ba\u03be\u03b5\u03c5\u03b6', 'pl\u00f6', 'ae\u03b4\u03b3\u03c5i\u03bf\u03c5\u03bb\u03b9']"}
{"id": "0-0", "oq_id": 0, "desc": "Input: a list of complex text values, containing a mix of characters including Greek and English alphabets.\nOutput: a list of complex text values, with specific characters replaced or transformed.\nFunctionality: The transformation involves replacing specific characters in each element of the sequence to match the desired output, based on a predefined rule.\nExample: Input: ['\u03b1\u03b9\u03c3\u03b7', 'aeio', '\u03b1\u03bd\u03bd\u03bd\u03b3\u03bf\u03be\u03c5', '\u03b1\u03bd\u03bf', '\u03b1\u03b9\u03b4\u03c4\u03bd\u03bc\u03c3\u03bf\u03c6\u03b7\u03b5']; output: ['aeo\u03b7', 'aeio', '\u03b1iii\u03b3\u03bf\u03be\u03c5', '\u03b1i\u03bf', 'ae\u03b4\u03c4i\u03bco\u03bf\u03c6\u03b7\u03b5']"}
{"id": "0-1", "oq_id": 0, "desc": "Input: a list of complex text strings.\nOutput: a list of complex text strings.\nFunctionality: The transformation replaces specific characters in each element of the given sequence with new characters, as specified in the transformation rule, and outputs the modified strings as a list.\nExample: Input: ['\u03bd\u03c5\u03c3\u03b9', '\u03c3\u03b5\u03bf\u03bc', '\u03b5\u00f3sanka', 'oin', '\u03bd\u03ac\u03c4\u03b9\u03be\u03bf\u03bc']; output: ['i\u03c5o\u03b9', 'o\u03b5\u03bf\u03bc', '\u03b5\u00f3sanka', 'oin', 'i\u03ac\u03c4\u03b9\u03be\u03bf\u03bc']"}
{"id": "0-5", "oq_id": 0, "desc": "Input: a list of complex text values, including both Greek and English characters.\nOutput: a list of complex text values, with some characters replaced by English letters.\nFunctionality: The transformation replaces specific Greek characters in each element of the given sequence with their corresponding English letters, and output the modified sequence as a list.\nExample: Input: ['\u03ac\u03c9\u03c5\u03c3\u03be\u03b9', '\u03c4\u03be\u03c5\u03b3\u03bb\u03bf\u03b9', '\u03bd\u03cc\u03c1\u03c4\u03b2\u03c4\u03be\u03bc\u03b6', '\u03b5\u03bd\u03cc\u03b9\u03bc', '\u03c6\u03cd\u03b3\u03bc\u03c9\u03c0']; output: ['\u03ac\u03c9\u03c5o\u03be\u03b9', '\u03c4\u03be\u03c5\u03b3\u03bb\u03bf\u03b9', 'i\u03cc\u03c1\u03c4\u03b2\u03c4\u03be\u03bc\u03b6', '\u03b5i\u03cc\u03b9\u03bc', '\u03c6\u03cd\u03b3\u03bc\u03c9\u03c0']"}
{"id": "0-4", "oq_id": 0, "desc": "Input: a list of complex text strings with Greek and Latin characters.\nOutput: a list of complex text strings with Greek and Latin characters.\nFunctionality: The transformation replaces specific Greek characters with their Latin counterparts in each element of the given sequence, and outputs the result as a list.\nExample: Input: ['\u03ba\u03b1\u03b9\u03bf', '\u03cc\u03bf\u03b9\u03b5\u03b9', '\u03be\u03bd\u03b4\u03c1\u03c5\u03b6\u03c7\u03bd\u03c5', '\u03c7\u03bf\u03b8', '\u03b1\u03b9\u03bd\u03cd\u03ba\u03c3\u03b3\u03c6\u03b9']; output: ['\u03baae\u03bf', '\u03cc\u03bf\u03b9\u03b5\u03b9', '\u03bei\u03b4\u03c1\u03c5\u03b6\u03c7i\u03c5', '\u03c7\u03bf\u03b8', 'aei\u03cd\u03bao\u03b3\u03c6\u03b9']"}
{"id": "0-6", "oq_id": 0, "desc": "Input: a list of string values with complex text extraction operations needed.\nOutput: a list of string values.\nFunctionality: The transformation does not alter the given sequence and outputs the same list as the result.\nExample: Input: ['\u03c5\u03b4\u03bf\u03c4\u03b9', '\u03af\u03cd\u03c0\u03c4\u03b5\u03b9', '\u03b5\u03bf\u03be\u03c0\u03be\u03c9\u03c9\u03be\u03b6', '\u03ad\u03c9\u03bb\u03bc', '\u03b2\u03c6\u03b4\u03c6\u03b2\u03b3\u03c6']; output: ['\u03c5\u03b4\u03bf\u03c4\u03b9', '\u03af\u03cd\u03c0\u03c4\u03b5\u03b9', '\u03b5\u03bf\u03be\u03c0\u03be\u03c9\u03c9\u03be\u03b6', '\u03ad\u03c9\u03bb\u03bc', '\u03b2\u03c6\u03b4\u03c6\u03b2\u03b3\u03c6']"}
{"id": "0-7", "oq_id": 0, "desc": "Input: a list of strings.\nOutput: a list of strings.\nFunctionality: The transformation replaces all occurrences of the letter '\u03bd' with 'i' in each element of the given sequence and outputs the modified strings as a list.\nExample: Input: ['\u03be\u03ac\u03c0\u03ae\u03c9\u03b9\u03be', '\u03bb\u03b5\u03b8\u03bc\u03b7\u03bd\u03ad', '\u03c0\u03bd\u03bd\u03be\u03be\u03bd\u03b3\u03bd\u03be\u03be\u03b6', '\u03ac\u03b5\u03b9\u03b7', '\u03be\u03b4\u03ae\u03bb\u03bc\u03ac\u03c9\u03bd\u03be']; output: ['\u03be\u03ac\u03c0\u03ae\u03c9\u03b9\u03be', '\u03bb\u03b5\u03b8\u03bc\u03b7i\u03ad', '\u03c0ii\u03be\u03bei\u03b3i\u03be\u03be\u03b6', '\u03ac\u03b5\u03b9\u03b7', '\u03be\u03b4\u03ae\u03bb\u03bc\u03ac\u03c9i\u03be']"}
{"id": "1-9", "oq_id": 1, "desc": "Input: a list of strings.\nOutput: a list of strings.\nFunctionality: The transformation takes the initial letters of each word in the given sequence and creates an abbreviation, outputting the result as a list.\nExample: Input: ['expandable networks and scalable systems', 'real-time analytics and stream processing', 'computational neuroscience and cognitive computing', 'artificial general intelligence and machine consciousness', 'security for quantum computing and post-quantum cryptography']; output: ['enass', 'raasp', 'cnacc', 'agiamc', 'sfqcapc']"}
{"id": "1-8", "oq_id": 1, "desc": "Input: a list of complex text values.\nOutput: a list of abbreviated text values.\nFunctionality: The transformation abbreviates each element in the given sequence by taking the first letter of each word in the phrase and concatenates them together.\nExample: Input: ['big data management and storage solutions', 'cloud-native application development and deployment', 'enterprise resource planning and business process management', 'web services and service-oriented architecture', 'computer forensics and incident response']; output: ['bdmass', 'cadad', 'erpabpm', 'wsasa', 'cfair']"}
{"id": "1-0", "oq_id": 1, "desc": "Input: a list of string values, each containing a phrase related to a specific field.\nOutput: a list of string values, each representing an abbreviation for the corresponding field.\n\nFunctionality: The transformation extracts the initial letters of each word in the phrase, excluding common words like \"and\" and \"for\", to create an abbreviation for the field. The abbreviations are then output as a list of strings.\n\nExample: Input: ['data science for business analytics', 'information technology and systems management', 'computer networking and communication protocols', 'machine learning algorithms and models', 'big data analytics and visualization']; output: ['dsfba', 'itasm', 'cnacp', 'mlaam', 'bdaav']"}
{"id": "1-1", "oq_id": 1, "desc": "Input: a list of strings containing phrases.\nOutput: a list of shortened acronyms for each phrase.\nFunctionality: The transformation creates an acronym by taking the first letter of each word in the phrase and outputting it as a string in the result list.\nExample: Input: ['operating systems and system programming', 'database design and management', 'software engineering principles and practices', 'computer architecture and organization', 'artificial intelligence and robotics']; output: ['osasp', 'ddam', 'sepap', 'caao', 'aiar']"}
{"id": "1-3", "oq_id": 1, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation abbreviates each element in the given sequence by extracting the first letter of each word in the string and joining them to form an abbreviation.\nExample: Input: ['programming paradigms and data structures', 'computer graphics and visualization techniques', 'human-computer interaction and user experience design', 'distributed systems and parallel computing', 'quantum computing and cryptography']; output: ['ppads', 'cgavt', 'hiaued', 'dsapc', 'qcac']"}
{"id": "1-2", "oq_id": 1, "desc": "Input: a list of strings containing phrases.\nOutput: a list of strings containing abbreviated terms.\nFunctionality: The transformation takes the first letters of each word in the phrase, excluding common words like \"and\" and \"the\", to create an abbreviation for each element in the given sequence.\nExample: Input: ['cybersecurity and information assurance', 'web development and programming languages', 'network security and cryptography', 'data mining and knowledge discovery', 'cloud computing and virtualization']; output: ['caia', 'wdapl', 'nsac', 'dmakd', 'ccav']"}
{"id": "1-6", "oq_id": 1, "desc": "Input: a list of string values with phrases.\nOutput: a list of abbreviated strings.\nFunctionality: The transformation generates an abbreviation for each phrase in the given sequence by taking the first letter of each word in the phrase.\nExample: Input: ['social media analytics and sentiment analysis', 'game development and virtual reality technology', 'bioinformatics and computational biology', 'augmented reality and wearable technology', 'security for internet of things and smart devices']; output: ['smaasa', 'gdavrt', 'bacb', 'arawt', 'sfiotasd']"}
{"id": "1-7", "oq_id": 1, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation abbreviates each element in the given sequence by extracting the first letter of each word in the string and joining them to form an abbreviation.\nExample: Input: ['health informatics and medical imaging', 'robotic process automation and artificial intelligence', 'data visualization and exploratory analysis', 'software-defined networking and network functions virtualization', 'knowledge representation and reasoning']; output: ['hiami', 'rpaaai', 'dvaea', 'snanfv', 'krar']"}
{"id": "1-5", "oq_id": 1, "desc": "Input: a list of string values, with text content.\nOutput: a list of abbreviated strings based on the first letter of each word in the input sequences.\nFunctionality: The transformation extracts the first letter of each word in the given strings, combines them, and outputs the abbreviated string as a list.\nExample: Input: ['algorithm design and analysis', 'computer vision and image processing', 'compiler construction and programming language theory', 'high performance computing and optimization', 'cryptocurrency and blockchain technology']; output: ['adaa', 'cvaip', 'ccaplt', 'hpcao', 'cabt']"}
{"id": "1-4", "oq_id": 1, "desc": "Input: a list of text strings.\nOutput: a list of abbreviated text strings.\nFunctionality: The transformation abbreviates each element in the given sequence by selecting the first letter of each word and concatenating them, resulting in an abbreviated string in the output list.\nExample: Input: ['software testing and quality assurance', 'embedded systems and real-time operating systems', 'mobile application development and design', 'natural language processing and computational linguistics', 'internet of things and sensor networks']; output: ['staqa', 'esaros', 'madad', 'nlpacl', 'iotasn']"}
{"id": "2-8", "oq_id": 2, "desc": "Input: a list of strings containing movie titles with alternative names.\nOutput: a list of strings containing movie titles without alternative names.\n\nFunctionality: The transformation removes the alternative names and colons from each movie title in the given sequence and outputs the result without alternative names.\n\nExample: Input: ['Transformers 3 aka Transformers: Dark of the Moon', 'New Fast and Furious aka Fast Five', 'Ant-Man 2 aka Ant-Man and the Wasp', 'Mission Impossible 6 aka Mission: Impossible - Fallout', 'New Spiderman aka Spider-Man: Far From Home']; output: ['Transformers: Dark of the Moon', 'Fast Five', 'Ant-Man and the Wasp', 'Mission: Impossible - Fallout', 'Spider-Man: Far From Home']"}
{"id": "2-9", "oq_id": 2, "desc": "Input: a list of complex text values.\nOutput: a list of text values.\nFunctionality: The transformation extracts the specified part of text after \"aka\" in each element from the given sequence and outputs it as a list.\nExample: Input: ['Jumanji 2 aka Jumanji: The Next Level', 'Shrek 4 aka Shrek Forever After', 'Puss in Boots 2 aka Puss in Boots: The Last Wish', 'Brave 2 aka Braveheart 2', 'New Aladdin aka Aladdin (2019)']; output: ['Jumanji: The Next Level', 'Shrek Forever After', 'Puss in Boots: The Last Wish', 'Braveheart 2', 'Aladdin (2019)']"}
{"id": "2-1", "oq_id": 2, "desc": "Input: a list of complex text values with movie titles in each element.\nOutput: a list of simplified movie titles.\nFunctionality: The transformation extracts the simplified movie title from each element in the given sequence, removing additional information such as \"aka\" or numbering.\nExample: Input: ['The Matrix 2 aka The Matrix Reloaded', 'New Batman aka The Dark Knight', 'Lord of the Rings 3 aka The Lord of the Rings: The Return of the King', 'The Avengers aka The Avengers', 'Fast and Furious 7 aka Furious 7']; output: ['The Matrix Reloaded', 'The Dark Knight', 'The Lord of the Rings: The Return of the King', 'The Avengers', 'Furious 7']"}
{"id": "2-0", "oq_id": 2, "desc": "Input: a list of complex text strings, each containing multiple words and phrases.\nOutput: a list of strings representing simplified movie titles.\nFunctionality: The transformation extracts the simplified movie titles from each element in the given sequence by removing unnecessary words and phrases, and formats the titles in the result list.\nExample: Input: ['Jurassic Park 3 aka Jurassic Park 3', 'New Terminator aka Terminator: Dark Fate', 'Oldboy aka Oldboy', 'Mad Max 4 aka Mad Max: Fury Road', 'New Spiderman aka Spider-Man: Homecoming']; output: ['Jurassic Park 3', 'Terminator: Dark Fate', 'Oldboy', 'Mad Max: Fury Road', 'Spider-Man: Homecoming']"}
{"id": "2-2", "oq_id": 2, "desc": "Input: a list of complex text values, each containing a movie title and possibly additional information.\nOutput: a list of simplified movie titles.\nFunctionality: The transformation extracts the main movie title from each element in the given sequence, removing any additional information such as \"aka\" and the alternate title. The simplified movie title is then output as a list.\nExample: Input: ['Pirates of the Caribbean 5 aka Pirates of the Caribbean: Dead Men Tell No Tales', 'Toy Story 3 aka Toy Story 3', 'New Ghostbusters aka Ghostbusters: Answer the Call', 'Spiderman 3 aka Spider-Man 3', 'Iron Man 2 aka Iron Man 2']; output: ['Pirates of the Caribbean: Dead Men Tell No Tales', 'Toy Story 3', 'Ghostbusters: Answer the Call', 'Spider-Man 3', 'Iron Man 2']"}
{"id": "2-3", "oq_id": 2, "desc": "Input: a list of string values, each containing multiple words.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specific part of the title after \"aka\" in each element of the given sequence and outputs them as separate strings in the result list.\nExample: Input: ['New Superman aka Man of Steel', 'James Bond 25 aka No Time to Die', 'The Lion King 2 aka The Lion King 2', 'Transformers 5 aka Transformers: The Last Knight', 'New Thor aka Thor: Ragnarok']; Output: ['Man of Steel', 'No Time to Die', 'The Lion King 2', 'Transformers: The Last Knight', 'Thor: Ragnarok']"}
{"id": "2-7", "oq_id": 2, "desc": "Input: a list of strings with movie titles and alternative titles.\nOutput: a list of strings representing the main movie titles.\n\nFunctionality: The transformation extracts the main movie title from each element in the given sequence by removing the alternative titles or aka mentions, and outputs the result as a list of strings.\n\nExample: Input: ['The Dark Knight Rises aka The Dark Knight Rises', 'New Ghost Rider aka Ghost Rider', 'The Hobbit 3 aka The Hobbit: The Battle of the Five Armies', 'Avatar 2 aka Avatar 2', 'Deadpool 3 aka Deadpool 3']; output: ['The Dark Knight Rises', 'Ghost Rider', 'The Hobbit: The Battle of the Five Armies', 'Avatar 2', 'Deadpool 3']"}
{"id": "2-6", "oq_id": 2, "desc": "Input: a list of strings with movie titles and alternative titles.\nOutput: a list of strings with only the main movie titles.\nFunctionality: The transformation extracts the main movie titles from each element in the given sequence by identifying the main title after \"aka\".\nExample: Input: ['New Sherlock Holmes aka Sherlock Holmes', 'The Incredibles 2 aka Incredibles 2', 'The Mummy 3 aka The Mummy: Tomb of the Dragon Emperor']; output: ['Sherlock Holmes', 'Incredibles 2', 'The Mummy: Tomb of the Dragon Emperor']"}
{"id": "2-4", "oq_id": 2, "desc": "Input: a list of complex text strings.\nOutput: a list of complex text strings.\nFunctionality: The transformation extracts the subtitle part after \"aka\" in each element from the given sequence and output the result as a list.\nExample: Input: ['Batman v Superman aka Batman v Superman: Dawn of Justice', 'Terminator 3 aka Terminator 3: Rise of the Machines', 'Star Wars 7 aka Star Wars: The Force Awakens', 'Maleficent 2 aka Maleficent: Mistress of Evil', 'Ghost Rider 2 aka Ghost Rider: Spirit of Vengeance']; output: ['Batman v Superman: Dawn of Justice', 'Terminator 3: Rise of the Machines', 'Star Wars: The Force Awakens', 'Maleficent: Mistress of Evil', 'Ghost Rider: Spirit of Vengeance']"}
{"id": "2-5", "oq_id": 2, "desc": "Input: a list of complex text values with a specific pattern: '<movie title> <number> aka <new movie title>'.\nOutput: a list of simplified movie titles.\nFunctionality: The transformation extracts the new movie titles from each element in the given sequence and outputs them as a list.\nExample: Input: ['Wonder Woman 2 aka Wonder Woman 1984', 'Doctor Strange 2 aka Doctor Strange in the Multiverse of Madness', 'Thor 3 aka Thor: Ragnarok', 'Frozen 2 aka Frozen II', 'New Jurassic Park aka Jurassic World']; output: ['Wonder Woman 1984', 'Doctor Strange in the Multiverse of Madness', 'Thor: Ragnarok', 'Frozen II', 'Jurassic World']"}
{"id": "3-8", "oq_id": 3, "desc": "Input: a list of string values, each representing a property listing.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the square footage value from each property listing in the given sequence and outputs it as a list of numerical values.\nExample: Input: ['Mar 22 Sunny Duplex Near the Beach. Relax and unwind! $1900 / 2br - 1000ft2 - (San Diego, CA) pic map']; Output: ['1000']"}
{"id": "3-9", "oq_id": 3, "desc": "Input: a list of complex text values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the numerical value representing square footage from each element in the given sequence, and outputs it as a list of numerical values.\nExample: Input: ['Mar 7 Historic Brownstone in the Historic District. Full of character! $2800 / 4br - 2200ft2 - (Boston, MA) pic']; output: ['2200']"}
{"id": "3-2", "oq_id": 3, "desc": "Input: a list of complex text values containing numerical information.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the number representing the square footage of the studio from each element in the given sequence, and outputs it as a list of numerical values.\nExample: Input: ['Mar 5 Cozy Studio in the Heart of Downtown. Great amenities! $1500 / studio - 700ft2 - (Chicago, IL) pic map']; output: ['700']"}
{"id": "3-3", "oq_id": 3, "desc": "Input: a list of string values, with text containing numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the numerical value (2500) from the given sequence and outputs it as a list.\nExample: Input: ['Mar 20 Spacious 4 Bedroom House with a Garden. Perfect for families! $3000 / 4br - 2500ft2 - (Miami, FL) pic']; output: ['2500']"}
{"id": "3-1", "oq_id": 3, "desc": "Input: a list of strings containing text with numerical values embedded.\nOutput: a list of strings representing numerical values extracted from the input strings.\nFunctionality: The transformation extracts the numerical value representing square footage from each element in the given sequence and outputs it as a string in the result list.\nExample: Input: [\"Mar 10 Stunning Loft with City Views. Don't miss out! $1800 / 1br - 900ft2 - (San Francisco, CA) pic map\"]; output: ['900']"}
{"id": "3-0", "oq_id": 3, "desc": "Input: a list of complex text values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the numerical value representing square footage from the given sequence and outputs it as a list.\nExample: Input: ['Mar 15 Gorgeous 2 Bedroom Apartment Available. Contact us now! $2000 / 2br - 1100ft2 - (Portland, OR) pic map']; output: ['1100']"}
{"id": "3-4", "oq_id": 3, "desc": "Input: a list of string values, with text containing numerical values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the numerical value representing square footage from each element in the given sequence and outputs it as a string in the result list.\nExample: Input: ['Mar 12 Modern Condo in a Trendy Neighborhood. Live in style! $2200 / 2br - 1200ft2 - (Austin, TX) pic map']; output: ['1200']"}
{"id": "3-5", "oq_id": 3, "desc": "Input: a list of strings containing text with numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the numerical value representing square footage from each element in the given sequence and outputs it as a list of numerical values.\nExample: Input: ['Mar 25 Charming Cottage by the Lake. Peaceful retreat! $1600 / 1br - 800ft2 - (Nashville, TN) pic']; output: ['800']"}
{"id": "3-7", "oq_id": 3, "desc": "Input: a list of string values, with text including numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the numerical value representing the square footage from each element in the given sequence, and outputs it as a list of strings.\nExample: Input: ['Mar 17 Luxury Penthouse with Rooftop Terrace. Breathtaking city views! $3500 / 3br - 3000ft2 - (Los Angeles, CA) pic']; output: ['3000']"}
{"id": "3-6", "oq_id": 3, "desc": "Input: a list of string values, each representing a property listing.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the square footage value from each property listing in the given sequence and outputs it as a list of numerical values.\nExample: Input: ['Mar 8 Renovated Townhouse with Mountain Views. Ideal location! $2500 / 3br - 1800ft2 - (Denver, CO) pic map']; Output: ['1800']"}
{"id": "4-8", "oq_id": 4, "desc": "Input: a list of strings containing text with numerical values.\nOutput: a list of strings with numerical values.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, and outputs it as a string in the result list.\nExample: Input: [\"Mar 25 Historic brownstone in Boston's Back Bay $6000 / 5br - 3500ft2 - (Boston, MA) pic\"]; output: ['6000']"}
{"id": "4-9", "oq_id": 4, "desc": "Input: a list of string values containing text with numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the numerical value representing the price from each element in the given sequence and outputs it as a string in the result list.\nExample: Input: ['Mar 8 Ski-in, ski-out chalet in Aspen $8000 / 4br - 2800ft2 - (Aspen, CO) pic']; output: ['8000']"}
{"id": "4-7", "oq_id": 4, "desc": "Input: a list of complex text values containing numerical information.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the numerical value representing the rental price from each element in the given sequence and outputs it as a list of strings.\nExample: Input: ['Mar 20 Beachfront villa in Honolulu overlooking Diamond Head $10000 / 4br - 4000ft2 - (Honolulu, HI) pic']; output: ['10000']"}
{"id": "4-6", "oq_id": 4, "desc": "Input: a list of string values containing information about rental properties.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the rental price from each element in the given sequence, and outputs it as a number in the result list.\nExample: Input: ['Mar 12 Modern condo in Downtown Austin $3500 / 1br - 800ft2 - (Austin, TX) pic map']; output: ['3500']"}
{"id": "4-4", "oq_id": 4, "desc": "Input: a list of complex text values containing numerical information.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the numerical value representing the rental price from each element in the given sequence and outputs it as a list of strings.\nExample: Input: ['Mar 27 Luxurious penthouse in Miami Beach $7000 / 3br - 2500ft2 - (Miami Beach, FL) pic map']; output: ['7000']"}
{"id": "4-5", "oq_id": 4, "desc": "Input: a list of strings containing text with numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, and outputs it as a list of numerical values.\nExample: Input: ['Apr 1 Charming cottage in Napa Valley wine country $4000 / 2br - 1500ft2 - (Napa, CA) pic']; output: ['4000']"}
{"id": "4-1", "oq_id": 4, "desc": "Input: a list of strings containing text with numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the numerical value representing the rent from each element in the given sequence and outputs it as a list of strings.\nExample: Input: ['Mar 15 Gorgeous house with backyard pool. Must see! $5000 / 4br - 3000ft2 - (Los Angeles, CA) pic']; output: ['5000']"}
{"id": "4-0", "oq_id": 4, "desc": "Input: a list of string values containing information about rental properties.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the rental price from each element in the given sequence, and outputs it as a list of numerical values.\nExample: Input: ['Apr 3 Cozy studio apartment in downtown San Francisco $2000 / 500ft2 - (San Francisco, CA) pic map']; output: ['2000']"}
{"id": "4-2", "oq_id": 4, "desc": "Input: a list of complex text strings containing numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the price value from the given sequence, converts it to a numerical value, and outputs it as a list.\nExample: Input: ['Mar 10 Spacious loft in Brooklyn Heights $3000 / 2br - 1200ft2 - (Brooklyn, NY) pic map']; output: ['3000']"}
{"id": "4-3", "oq_id": 4, "desc": "Input: a list of complex text strings.\nOutput: a list of strings representing numerical values.\nFunctionality: The transformation extracts the numerical value representing the rent from each element in the given sequence and outputs it as a string in the result list.\nExample: Input: ['Mar 5 Renovated townhouse in Chicago near Wrigley Field $2500 / 3br - 1800ft2 - (Chicago, IL) pic']; output: ['2500']"}
{"id": "5-8", "oq_id": 5, "desc": "Input: a list of string values, with dates in the format 'YYYYMMDD'.\nOutput: a list of string values, with dates transformed to 'MM-DD-YYYY'.\nFunctionality: The transformation re-formats each date element in the given sequence from 'YYYYMMDD' to 'MM-DD-YYYY' in the output list.\nExample: Input: ['19380804', '19771209', '19950223', '20120515', '19840919']; output: ['08-04-1938', '12-09-1977', '02-23-1995', '05-15-2012', '09-19-1984']"}
{"id": "5-9", "oq_id": 5, "desc": "Input: a list of string values, with dates in the format 'YYYYMMDD'.\nOutput: a list of string values, with dates transformed to 'MM-DD-YYYY'.\nFunctionality: The transformation re-formats the date from 'YYYYMMDD' to 'MM-DD-YYYY' for each element in the given sequence, and outputs the result as a list.\nExample: Input: ['19200711', '19490503', '19880420', '20011230', '20100410']; output: ['07-11-1920', '05-03-1949', '04-20-1988', '12-30-2001', '04-10-2010']"}
{"id": "5-4", "oq_id": 5, "desc": "Input: a list of string values, with dates in the format 'YYYYMMDD'.\nOutput: a list of string values, with dates transformed to 'MM-DD-YYYY' format.\nFunctionality: The transformation converts each date from the given sequence to the 'MM-DD-YYYY' format and outputs the result as a list of strings.\nExample: Input: ['19720429', '19981003', '20161108', '20010814', '19921102']; output: ['04-29-1972', '10-03-1998', '11-08-2016', '08-14-2001', '11-02-1992']"}
{"id": "5-5", "oq_id": 5, "desc": "Input: a list of string values, with dates in YYYYMMDD format.\nOutput: a list of string values, with dates formatted as MM-DD-YYYY.\nFunctionality: The transformation reformat each date in the input sequence from YYYYMMDD to MM-DD-YYYY format, and output the results as a list.\nExample: Input: ['19540108', '19870130', '19961120', '20031203', '20190817']; output: ['01-08-1954', '01-30-1987', '11-20-1996', '12-03-2003', '08-17-2019']"}
{"id": "5-7", "oq_id": 5, "desc": "Input: a list of string values, with dates in the format 'YYYYMMDD'.\nOutput: a list of string values, with dates transformed to 'MM-DD-YYYY'.\nFunctionality: The transformation reformat each date value from the given sequence to 'MM-DD-YYYY', and output the results as a list.\nExample: Input: ['19440317', '19610805', '20000827', '19880518', '19931210']; output: ['03-17-1944', '08-05-1961', '08-27-2000', '05-18-1988', '12-10-1993']"}
{"id": "5-6", "oq_id": 5, "desc": "Input: a list of string values, with dates in the format 'YYYYMMDD'.\nOutput: a list of string values, with dates in the format 'MM-DD-YYYY'.\nFunctionality: The transformation converts each date value from the given sequence into the 'MM-DD-YYYY' format and outputs the result as a list of strings.\nExample: Input: ['19580521', '19721222', '19900817', '20170329', '20041111']; output: ['05-21-1958', '12-22-1972', '08-17-1990', '03-29-2017', '11-11-2004']"}
{"id": "5-2", "oq_id": 5, "desc": "Input: a list of string values, with dates in YYYYMMDD format.\nOutput: a list of string values, with dates formatted as MM-DD-YYYY.\nFunctionality: The transformation reformat each date in the input sequence from YYYYMMDD to MM-DD-YYYY and output the result as a list.\nExample: Input: ['19760810', '19991111', '20080520', '19880402', '19690217']; output: ['08-10-1976', '11-11-1999', '05-20-2008', '04-02-1988', '02-17-1969']"}
{"id": "5-3", "oq_id": 5, "desc": "Input: a list of string values, with dates in YYYYMMDD format.\nOutput: a list of string values, with dates formatted as DD-MM-YYYY.\nFunctionality: The transformation reformat each date in the input sequence from YYYYMMDD to DD-MM-YYYY format, and output the results as a list.\nExample: Input: ['19651201', '19920315', '20150120', '19950730', '20021205']; output: ['12-01-1965', '03-15-1992', '01-20-2015', '07-30-1995', '12-05-2002']"}
{"id": "5-1", "oq_id": 5, "desc": "Input: a list of string values, with dates in YYYYMMDD format.\nOutput: a list of string values, with dates formatted as MM-DD-YYYY.\nFunctionality: The transformation reformat each date in the input sequence from YYYYMMDD to MM-DD-YYYY format, and output the results as a list.\nExample: Input: ['19630314', '19891030', '20000101', '19911225', '20170305']; output: ['03-14-1963', '10-30-1989', '01-01-2000', '12-25-1991', '03-05-2017']"}
{"id": "5-0", "oq_id": 5, "desc": "Input: a list of string values, with dates in YYYYMMDD format.\nOutput: a list of string values, with dates formatted as MM-DD-YYYY.\nFunctionality: The transformation reformat each date in the input sequence from YYYYMMDD to MM-DD-YYYY format, and output the results as a list.\nExample: Input: ['19880506', '20031225', '19990415', '20150718', '19870228']; output: ['05-06-1988', '12-25-2003', '04-15-1999', '07-18-2015', '02-28-1987']"}
{"id": "6-9", "oq_id": 6, "desc": "Input: a list of strings containing special characters and numerical values.\nOutput: a list of strings containing extracted text.\nFunctionality: The transformation extracts the text between double square brackets from each element in the given sequence, and formats the extracted text as strings in the result list.\nExample: Input: ['| style=\"text-align: center;\"| {{Sort|55|[[Super Bowl LV|LV]]}}', '| style=\"text-align: center;\"| {{Sort|56|[[Super Bowl LVI|LVI]]}}', '| style=\"text-align: center;\"| {{Sort|57|[[Super Bowl LVII|LVII]]}}', '| style=\"text-align: center;\"| {{Sort|58|[[Super Bowl LVIII|LVIII]]}}', '| style=\"text-align: center;\"| {{Sort|59|[[Super Bowl LIX|LIX]]}}']; output: ['Super Bowl LV', 'Super Bowl LVI', 'Super Bowl LVII', 'Super Bowl LVIII', 'Super Bowl LIX']"}
{"id": "6-8", "oq_id": 6, "desc": "Input: a list of string values containing text and special characters.\nOutput: a list of string values.\nFunctionality: The transformation extracts the text between double brackets ([[ ]]) from each element in the given sequence using text extraction operations and formats the extracted text as a string in the result list.\nExample: Input: ['| style=\"text-align: center;\"| {{Sort|50|[[Super Bowl L|L]]}}', '| style=\"text-align: center;\"| {{Sort|51|[[Super Bowl LI|LI]]}}', '| style=\"text-align: center;\"| {{Sort|52|[[Super Bowl LII|LII]]}}', '| style=\"text-align: center;\"| {{Sort|53|[[Super Bowl LIII|LIII]]}}', '| style=\"text-align: center;\"| {{Sort|54|[[Super Bowl LIV|LIV]]}}']; output: ['Super Bowl L', 'Super Bowl LI', 'Super Bowl LII', 'Super Bowl LIII', 'Super Bowl LIV']"}
{"id": "6-5", "oq_id": 6, "desc": "Input: a list of strings with text and numerical values.\nOutput: a list of strings extracting specific text.\nFunctionality: The transformation extracts the text within double square brackets after the pipe character from each element in the given sequence, and outputs the extracted text in a new list.\nExample: Input: ['| style=\"text-align: center;\"| {{Sort|35|[[Super Bowl XXXV|XXXV]]}}', '| style=\"text-align: center;\"| {{Sort|36|[[Super Bowl XXXVI|XXXVI]]}}', ...]; Output: ['Super Bowl XXXV', 'Super Bowl XXXVI', ...']"}
{"id": "6-4", "oq_id": 6, "desc": "Input: a list of strings with text and numerical values.\nOutput: a list of strings extracting specific text.\nFunctionality: The transformation extracts the text within double square brackets after the pipe character from each element in the given sequence and outputs it as a list.\nExample: Input: ['| style=\"text-align: center;\"| {{Sort|25|[[Super Bowl XXV|XXV]]}}', '| style=\"text-align: center;\"| {{Sort|26|[[Super Bowl XXVI|XXVI]]}}', ...]; output: ['Super Bowl XXV', 'Super Bowl XXVI', ...]"}
{"id": "6-6", "oq_id": 6, "desc": "Input: a list of strings containing special characters and numerical values.\nOutput: a list of strings containing extracted text.\nFunctionality: The transformation extracts the text between double square brackets from each element in the given sequence, and outputs the extracted text as a list.\nExample: Input: ['| style=\"text-align: center;\"| {{Sort|40|[[Super Bowl XL|XL]]}}', '| style=\"text-align: center;\"| {{Sort|41|[[Super Bowl XLI|XLI]]}}', '| style=\"text-align: center;\"| {{Sort|42|[[Super Bowl XLII|XLII]]}}', '| style=\"text-align: center;\"| {{Sort|43|[[Super Bowl XLIII|XLIII]]}}', '| style=\"text-align: center;\"| {{Sort|44|[[Super Bowl XLIV|XLIV]]}}']; output: ['Super Bowl XL', 'Super Bowl XLI', 'Super Bowl XLII', 'Super Bowl XLIII', 'Super Bowl XLIV']"}
{"id": "6-7", "oq_id": 6, "desc": "Input: a list of strings with text and numerical values.\nOutput: a list of strings extracting specific text.\nFunctionality: The transformation extracts the text within double square brackets after the pipe character from each element in the given sequence and outputs the extracted text in the result list.\nExample: Input: ['| style=\"text-align: center;\"| {{Sort|45|[[Super Bowl XLV|XLV]]}}', '| style=\"text-align: center;\"| {{Sort|46|[[Super Bowl XLVI|XLVI]]}}', '| style=\"text-align: center;\"| {{Sort|47|[[Super Bowl XLVII|XLVII]]}}', '| style=\"text-align: center;\"| {{Sort|48|[[Super Bowl XLVIII|XLVIII]]}}', '| style=\"text-align: center;\"| {{Sort|49|[[Super Bowl XLIX|XLIX]]}}']; output: ['Super Bowl XLV', 'Super Bowl XLVI', 'Super Bowl XLVII', 'Super Bowl XLVIII', 'Super Bowl XLIX']"}
{"id": "6-3", "oq_id": 6, "desc": "Input: a list of strings containing special characters and numerical values.\nOutput: a list of strings.\nFunctionality: The transformation extracts the text between the two sets of square brackets in each element of the given sequence, and formats the extracted text as strings in the result list.\nExample: Input: ['| style=\"text-align: center;\"| {{Sort|20|[[Super Bowl XX|XX]]}}', '| style=\"text-align: center;\"| {{Sort|21|[[Super Bowl XXI|XXI]]}}', '| style=\"text-align: center;\"| {{Sort|22|[[Super Bowl XXII|XXII]]}}', '| style=\"text-align: center;\"| {{Sort|23|[[Super Bowl XXIII|XXIII]]}}', '| style=\"text-align: center;\"| {{Sort|24|[[Super Bowl XXIV|XXIV]]}}']; output: ['Super Bowl XX', 'Super Bowl XXI', 'Super Bowl XXII', 'Super Bowl XXIII', 'Super Bowl XXIV']"}
{"id": "6-2", "oq_id": 6, "desc": "Input: a list of strings containing special characters and numerical values.\nOutput: a list of strings containing extracted text.\nFunctionality: The transformation extracts the text inside double square brackets from each element in the given sequence and output the extracted text as a list.\nExample: Input: ['| style=\"text-align: center;\"| {{Sort|30|[[Super Bowl XXX|XXX]]}}', '| style=\"text-align: center;\"| {{Sort|31|[[Super Bowl XXXI|XXXI]]}}', '| style=\"text-align: center;\"| {{Sort|32|[[Super Bowl XXXII|XXXII]]}}', '| style=\"text-align: center;\"| {{Sort|33|[[Super Bowl XXXIII|XXXIII]]}}', '| style=\"text-align: center;\"| {{Sort|34|[[Super Bowl XXXIV|XXXIV]]}}']; output: ['Super Bowl XXX', 'Super Bowl XXXI', 'Super Bowl XXXII', 'Super Bowl XXXIII', 'Super Bowl XXXIV']"}
{"id": "6-0", "oq_id": 6, "desc": "Input: a list of string values, each containing a formatted text with specific pattern.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specific text within double square brackets ([[...]]) from each element in the given sequence using regular expression, and formats the extracted text as individual strings in the result list.\nExample: Input: ['| style=\"text-align: center;\"| {{Sort|10|[[Super Bowl X|X]]}}', '| style=\"text-align: center;\"| {{Sort|11|[[Super Bowl XI|XI]]}}', '| style=\"text-align: center;\"| {{Sort|12|[[Super Bowl XII|XII]]}}', '| style=\"text-align: center;\"| {{Sort|13|[[Super Bowl XIII|XIII]]}}', '| style=\"text-align: center;\"| {{Sort|14|[[Super Bowl XIV|XIV]]}}']; output: ['Super Bowl X', 'Super Bowl XI', 'Super Bowl XII', 'Super Bowl XIII', 'Super Bowl XIV']"}
{"id": "6-1", "oq_id": 6, "desc": "Input: a list of strings with formatted text.\nOutput: a list of strings representing Super Bowl names.\n\nFunctionality: The transformation extracts the Super Bowl names from each element in the given sequence using text extraction operations and outputs the extracted names in the result list.\n\nExample: Input: ['| style=\"text-align: center;\"| {{Sort|15|[[Super Bowl XV|XV]]}}', '| style=\"text-align: center;\"| {{Sort|16|[[Super Bowl XVI|XVI]]}}', '| style=\"text-align: center;\"| {{Sort|17|[[Super Bowl XVII|XVII]]}}', '| style=\"text-align: center;\"| {{Sort|18|[[Super Bowl XVIII|XVIII]]}}', '| style=\"text-align: center;\"| {{Sort|19|[[Super Bowl XIX|XIX]]}}']; output: ['Super Bowl XV', 'Super Bowl XVI', 'Super Bowl XVII', 'Super Bowl XVIII', 'Super Bowl XIX']"}
{"id": "7-9", "oq_id": 7, "desc": "Input: a list of strings containing special characters and text.\nOutput: a list of strings containing specific text content.\nFunctionality: The transformation extracts the text enclosed in double square brackets from each element in the given sequence, and outputs the extracted text content in the result list.\nExample: Input: ['| styple = \"background #d0e7ff;\"|{{Sort|Seattle Seahawks 01|[[2013 Seattle Seahawks season|Seattle Seahawks]]<sup>^</sup>}}']; output: ['Seattle Seahawks']"}
{"id": "7-8", "oq_id": 7, "desc": "Input: a list of strings containing complex text extraction operations.\nOutput: a list of strings.\nFunctionality: The transformation extracts the text within a specific format from each element in the given sequence and outputs the extracted text as a list.\nExample: Input: ['| styple = \"background #d0e7ff;\"|{{Sort|Kansas City Chiefs 01|[[1970 Kansas City Chiefs season|Kansas City Chiefs]]<sup>^</sup>}}']; output: ['Kansas City Chiefs']"}
{"id": "7-6", "oq_id": 7, "desc": "Input: a list of complex text values containing formatting and text elements.\nOutput: a list of simple text values.\nFunctionality: The transformation extracts a specific text element from each element in the given sequence, removing all formatting and extra characters, and outputs the simplified text in the result list.\nExample: Input: ['| styple = \"background #d0e7ff;\"|{{Sort|Indianapolis Colts 01|[[2006 Indianapolis Colts season|Indianapolis Colts]]<sup>^</sup>}}']; output: ['Indianapolis Colts']"}
{"id": "7-7", "oq_id": 7, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the text between double brackets ([[ ]]) from each element in the given sequence and outputs the extracted text in the result list.\nExample: Input: ['| styple = \"background #d0e7ff;\"|{{Sort|Tampa Bay Buccaneers 01|[[2002 Tampa Bay Buccaneers season|Tampa Bay Buccaneers]]<sup>^</sup>}}']; output: ['Tampa Bay Buccaneers']"}
{"id": "7-5", "oq_id": 7, "desc": "Input: a list of strings containing complex text extraction operations.\nOutput: a list of strings.\nFunctionality: The transformation extracts the text within a specific format from each element in the given sequence and outputs the extracted text as a list.\nExample: Input: ['| styple = \"background #d0e7ff;\"|{{Sort|New Orleans Saints 01|[[2009 New Orleans Saints season|New Orleans Saints]]<sup>^</sup>}}']; output: ['New Orleans Saints']"}
{"id": "7-4", "oq_id": 7, "desc": "Input: a list of complex text strings containing elements with specific formatting.\nOutput: a list of simple text strings.\nFunctionality: The transformation extracts the text within double square brackets ([[ ]]) from each element in the given sequence and outputs them in a list format.\nExample: Input: ['| styple = \"background #d0e7ff;\"|{{Sort|Pittsburgh Steelers 01|[[1979 Pittsburgh Steelers season|Pittsburgh Steelers]]<sup>^</sup>}}']; output: ['Pittsburgh Steelers']"}
{"id": "7-0", "oq_id": 7, "desc": "Input: a list of strings containing complex text with patterns to be extracted.\nOutput: a list of strings containing specific extracted text.\nFunctionality: The transformation extracts the specific text \"New England Patriots\" from each element in the given sequence, and outputs the extracted text as a list.\nExample: Input: ['| styple = \"background #d0e7ff;\"|{{Sort|New England Patriots 01|[[2001 New England Patriots season|New England Patriots]]<sup>^</sup>}}']; output: ['New England Patriots']"}
{"id": "7-1", "oq_id": 7, "desc": "Input: a list of strings containing special characters and text.\nOutput: a list of strings containing specific text extracted from the original strings.\nFunctionality: The transformation extracts specific text between certain symbols '|' and '|[[' from each element in the given sequence and outputs it as a list.\nExample: Input: ['| styple = \"background #d0e7ff;\"|{{Sort|Dallas Cowboys 01|[[1971 Dallas Cowboys season|Dallas Cowboys]]<sup>^</sup>}}']; output: ['Dallas Cowboys']"}
{"id": "7-3", "oq_id": 7, "desc": "Input: a list of strings containing special characters and text.\nOutput: a list of strings containing specific text extracted.\nFunctionality: The transformation extracts the text between the double square brackets from each element in the given sequence and outputs it as a new list.\nExample: Input: ['| styple = \"background #d0e7ff;\"|{{Sort|Miami Dolphins 01|[[1972 Miami Dolphins season|Miami Dolphins]]<sup>^</sup>}}']; output: ['Miami Dolphins']"}
{"id": "7-2", "oq_id": 7, "desc": "Input: a list of strings containing special characters and text.\nOutput: a list of strings containing specific text content.\nFunctionality: The transformation extracts the text enclosed in double square brackets from each element in the given sequence, and outputs the extracted text in the result list.\nExample: Input: ['| styple = \"background #d0e7ff;\"|{{Sort|Chicago Bears 01|[[1985 Chicago Bears season|Chicago Bears]]<sup>^</sup>}}']; output: ['Chicago Bears']"}
{"id": "8-3", "oq_id": 8, "desc": "Input: a list of string values, representing dates in a specific format.\nOutput: a list of string values, representing dates in a different format.\nFunctionality: The transformation converts the date format from 'dd_mm_yyyy' to 'mm/dd/yyyy' in each element of the given sequence.\nExample: Input: ['12_2009_xyz.xls', '08_2013_abcd.xls', '02_2016_efgh.xls', '06_2011_ijkl.xls', '10_2017_mnop.xls']; output: ['12/01/2009', '08/01/2013', '02/01/2016', '06/01/2011', '10/01/2017']"}
{"id": "8-2", "oq_id": 8, "desc": "Input: a list of string values, representing filenames with dates in the format 'dd_yyyy'.\nOutput: a list of string values, formatted dates in the format 'dd/mm/yyyy'.\nFunctionality: The transformation extracts the date part from each filename in the given sequence, converts the date format to 'dd/mm/yyyy', and output the result as a list.\nExample: Input: ['01_2001_xyz.xls', '09_2006_abcd.xls', '07_2012_efgh.xls', '05_2018_ijkl.xls', '04_2015_mnop.xls']; output: ['01/01/2001', '09/01/2006', '07/01/2012', '05/01/2018', '04/01/2015']"}
{"id": "8-0", "oq_id": 8, "desc": "Input: a list of string values, with a specific date format in each element.\nOutput: a list of string values, with a different date format in each element.\nFunctionality: The transformation converts the date format from 'mm_yyyy' to 'mm/01/yyyy' in each element of the given sequence.\nExample: Input: ['05_2008_abcd.xls', '10_2010_efgh.xls', '08_2014_ijkl.xls', '06_2016_mnop.xls', '09_2012_qrst.xls']; output: ['05/01/2008', '10/01/2010', '08/01/2014', '06/01/2016', '09/01/2012']"}
{"id": "8-1", "oq_id": 8, "desc": "Input: a list of string values, each representing a date in a specific format.\nOutput: a list of string values, each representing a date in a different format.\nFunctionality: The transformation converts the date format from \"mm/yyyy\" in each element of the given sequence to \"mm/dd/yyyy\" in the result list.\nExample: Input: ['02_2004_abcde.xls', '07_2009_fghij.xls', '11_2013_klmno.xls', '05_2017_pqrst.xls', '03_2011_uvwx.xls']; output: ['02/01/2004', '07/01/2009', '11/01/2013', '05/01/2017', '03/01/2011']"}
{"id": "8-5", "oq_id": 8, "desc": "Input: a list of string values representing dates in a specific format.\nOutput: a list of string values representing dates in a different format.\nFunctionality: The transformation converts the date format from 'MM_YYYY' to 'MM/DD/YYYY' for each element in the given sequence and outputs the result as a list.\nExample: Input: ['10_2007_xyz.xls', '07_2013_abcd.xls', '01_2017_efgh.xls', '09_2012_ijkl.xls', '05_2019_mnop.xls']; output: ['10/01/2007', '07/01/2013', '01/01/2017', '09/01/2012', '05/01/2019']"}
{"id": "8-4", "oq_id": 8, "desc": "Input: a list of string values, representing dates in a specific format.\nOutput: a list of string values, representing dates in a different format.\nFunctionality: The transformation converts the date format from 'dd_mm_yyyy' to 'mm/dd/yyyy' in each element of the given sequence.\nExample: Input: ['11_2005_xyz.xls', '06_2010_abcd.xls', '04_2014_efgh.xls', '08_2018_ijkl.xls', '03_2013_mnop.xls']; output: ['11/01/2005', '06/01/2010', '04/01/2014', '08/01/2018', '03/01/2013']"}
{"id": "8-6", "oq_id": 8, "desc": "Input: a list of string values, representing dates in a specific format.\nOutput: a list of string values, representing dates in another specific format.\nFunctionality: The transformation extracts the date component from each element in the given sequence, rearranges the components, and formats them as dates in the result list.\nExample: Input: ['09_2003_xyz.xls', '03_2008_abcd.xls', '06_2012_efgh.xls', '11_2016_ijkl.xls', '08_2014_mnop.xls']; output: ['09/01/2003', '03/01/2008', '06/01/2012', '11/01/2016', '08/01/2014']"}
{"id": "8-7", "oq_id": 8, "desc": "Input: a list of string values representing dates in a specific format within filenames.\nOutput: a list of date strings in a different format.\nFunctionality: The transformation extracts the date portion from each element in the given sequence, restructures the date format, and outputs the result as a list.\nExample: Input: ['08_2004_xyz.xls', '05_2011_abcd.xls', '12_2015_efgh.xls', '07_2017_ijkl.xls', '02_2019_mnop.xls']; output: ['08/01/2004', '05/01/2011', '12/01/2015', '07/01/2017', '02/01/2019']"}
{"id": "8-9", "oq_id": 8, "desc": "Input: a list of string values, representing dates in a specific format.\nOutput: a list of string values, representing dates in a different format.\nFunctionality: The transformation extracts the month and year from each element in the given sequence, and formats them as a new date string with day set to the 1st day of the month and slashes separating the components.\nExample: Input: ['06_2006_xyz.xls', '04_2012_abcd.xls', '09_2016_efgh.xls', '08_2011_ijkl.xls', '12_2018_mnop.xls']; output: ['06/01/2006', '04/01/2012', '09/01/2016', '08/01/2011', '12/01/2018']"}
{"id": "8-8", "oq_id": 8, "desc": "Input: a list of string values, representing dates in a specific format.\nOutput: a list of string values, representing dates in a different format.\nFunctionality: The transformation extracts the date component from each element in the given sequence, rearranges the components, and formats them as dates in the result list.\nExample: Input: ['07_2002_xyz.xls', '11_2007_abcd.xls', '10_2013_efgh.xls', '01_2018_ijkl.xls', '04_2016_mnop.xls']; output: ['07/01/2002', '11/01/2007', '10/01/2013', '01/01/2018', '04/01/2016']"}
{"id": "9-0", "oq_id": 9, "desc": "Input: a list of string values, with repeated substrings in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the unique substring from each element in the given sequence and outputs them as a list.\nExample: Input: ['abcabcabc', 'defdef', 'ghighi', 'jkljkljkl', 'mnopqrstuv']; output: ['abc', 'def', 'ghi', 'jkl', 'mno']"}
{"id": "9-1", "oq_id": 9, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first three characters from each element in the given sequence and outputs them as a list of strings.\nExample: Input: ['zyxzyxzyx', 'wvuwvu', 'tsrtsr', 'qpoqpoqpo', 'nmlkjihgfe']; output: ['zyx', 'wvu', 'tsr', 'qpo', 'nml']"}
{"id": "9-3", "oq_id": 9, "desc": "Input: a list of string values, with special characters in each element.\nOutput: a list of string values.\nFunctionality: The transformation removes the extra character $ from each element in the given sequence and outputs the modified sequence as a list.\nExample: Input: ['$$$$$', '%%%', '&&&', '***', '###']; output: ['$$$', '%%%', '&&&', '***', '###']"}
{"id": "9-2", "oq_id": 9, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation removes the last character from each element in the given sequence, and outputs the resulting numbers as a list.\nExample: Input: ['1111', '22', '333', '44', '5555']; output: ['111', '22', '333', '44', '555']"}
{"id": "9-6", "oq_id": 9, "desc": "Input: a list of string values with a specific pattern of characters and numbers in each element.\nOutput: a list of string values with a specific pattern of characters only.\nFunctionality: The transformation removes the numerical part from each element in the given sequence, and outputs the result as a list with only the character pattern.\nExample: Input: ['###111', '###222', '###333', '###444', '###555']; output: ['###', '###', '###', '###', '###']"}
{"id": "9-7", "oq_id": 9, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation takes the first three characters of each element in the input sequence and outputs them as a new list of strings.\nExample: Input: ['random', 'words', 'to', 'generate', 'input']; output: ['ran', 'wor', 'to', 'gen', 'inp']"}
{"id": "9-5", "oq_id": 9, "desc": "Input: a list of string values, with numerical values embedded in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the numerical part from each element in the given sequence, and outputs a list of these extracted numerical values.\nExample: Input: ['111aaa', '222bbb', '333ccc', '444ddd', '555eee']; output: ['111', '222', '333', '444', '555']"}
{"id": "9-4", "oq_id": 9, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first three characters from each element in the given sequence and outputs them as a list.\nExample: Input: ['AAAAA', 'BBBB', 'CCCCC', 'DDDD', 'EEEEE']; output: ['AAA', 'BBB', 'CCC', 'DDD', 'EEE']"}
{"id": "9-9", "oq_id": 9, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation takes the first three characters of each element in the given sequence and outputs them as a list of strings.\nExample: Input: ['hello', 'world', 'python', 'data', 'science']; output: ['hel', 'wor', 'pyt', 'dat', 'sci']"}
{"id": "9-8", "oq_id": 9, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes the last character from each element in the given sequence, resulting in a list of shortened strings.\nExample: Input: ['abcd', 'efgh', 'ijkl', 'mnop', 'qrst']; output: ['abc', 'efg', 'ijk', 'mno', 'qrs']"}
{"id": "10-5", "oq_id": 10, "desc": "Input: a list of complex text values, containing names enclosed in double square brackets.\nOutput: a list of string values representing the names extracted from each element.\nFunctionality: The transformation extracts names from each element in the given sequence by finding text enclosed in double square brackets, and outputs the names as a list of strings.\nExample: Input: [\"* '''2006 [[Shahid Kapoor]] \\x96 ''[[Vivah]]''''' as '''Prem'''\", \"* '''2007 [[Kareena Kapoor]] \\x96 ''[[Jab We Met]]''''' as '''Geet'''\"]; output: ['Shahid Kapoor', 'Kareena Kapoor']"}
{"id": "10-4", "oq_id": 10, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the text between the double square brackets ([[ ]]) from each element in the given sequence, and outputs the extracted text as a list of strings.\nExample: Input: [\"* '''1987 [[Anil Kapoor]] \\x96 ''[[Mr. India]]''''' as '''Arun Verma'''\", \"* '''1988 [[Sridevi]] \\x96 ''[[Chandni]]''''' as '''Chandni'''\"]; output: ['Anil Kapoor', 'Sridevi']"}
{"id": "10-6", "oq_id": 10, "desc": "Input: a list of complex text strings containing names in specific format.\nOutput: a list of strings representing names extracted from the input list.\nFunctionality: The transformation extracts the names of individuals from each element in the given sequence by removing additional text and formatting, then output the names as a list of strings.\nExample: Input: [\"* '''1976 [[Amitabh Bachchan]] \\x96 ''[[Kabhi Kabhie]]''''' as '''Amit Malhotra'''\", \"* '''1977 [[Rekha]] \\x96 ''[[Amar Akbar Anthony]]''''' as '''Fakira'''\"]; output: ['Amitabh Bachchan', 'Rekha']"}
{"id": "10-7", "oq_id": 10, "desc": "Input: a list of complex text strings.\nOutput: a list of strings containing specific names extracted from the input strings.\nFunctionality: The transformation extracts the names of actors from each element in the given sequence by removing unnecessary text and formatting, and outputs the names as strings in the result list.\nExample: Input: [\"* '''1989 [[Sanjay Dutt]] \\x96 ''[[Hathyar]]''''' as '''Sanju'''\", \"* '''1990 [[Juhi Chawla]] \\x96 ''[[Swarg]]''''' as '''Kajal'''\"]; output: ['Sanjay Dutt', 'Juhi Chawla']"}
{"id": "10-3", "oq_id": 10, "desc": "Input: a list of complex text strings.\nOutput: a list of string values.\nFunctionality: The transformation extracts the text between double square brackets ([[ ]]) from each element in the given sequence and formats it as a string in the result list.\nExample: Input: [\"* '''2010 [[Salman Khan]] \\x96 ''[[Dabangg]]''''' as '''Chulbul Pandey'''\", \"* '''2011 [[Deepika Padukone]] \\x96 ''[[Yeh Jawaani Hai Deewani]]''''' as '''Naina Talwar'''\"]; output: ['Salman Khan', 'Deepika Padukone']"}
{"id": "10-2", "oq_id": 10, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\n\nFunctionality: The transformation extracts the name of the actor/actress mentioned within double square brackets from each element in the given sequence, and outputs the extracted names as a list of strings.\n\nExample: Input: [\"* '''1995 [[Shahrukh Khan]] \\x96 ''[[Dilwale Dulhania Le Jayenge]]''''' as '''Raj'''\", \"* '''1996 [[Madhuri Dixit]] \\x96 ''[[Raja]]''''' as '''Madhu'''\"]; output: ['Shahrukh Khan', 'Madhuri Dixit']"}
{"id": "10-0", "oq_id": 10, "desc": "Input: a list of complex text strings.\nOutput: a list of string values.\nFunctionality: The transformation extracts the names of actors from each element in the given sequence and formats them as strings in the result list.\nExample: Input: [\"* '''1970 [[Amitabh Bachchan]] \\x96 ''[[Anand (1970 film)|Anand]]''''' as '''Babu Moshai'''\", \"* '''1971 [[Rajesh Khanna]] \\x96 ''[[Haathi Mere Saathi]]''''' as '''Raju'''\"]; output: ['Amitabh Bachchan', 'Rajesh Khanna']"}
{"id": "10-1", "oq_id": 10, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the text within double square brackets ([[ ]]) from each element in the given sequence, and outputs the result as a list of strings.\nExample: Input: [\"* '''2001 [[Aamir Khan]] \\x96 ''[[Lagaan]]''''' as '''Bhuvan'''\", \"* '''2002 [[Hrithik Roshan]] \\x96 ''[[Koi Mil Gaya]]''''' as '''Rohit Mehra'''\"]; output: ['Aamir Khan', 'Hrithik Roshan']"}
{"id": "10-9", "oq_id": 10, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the text within double square brackets ([[ ]]) from each element in the given sequence, and outputs the result as a list of strings.\nExample: Input: [\"* '''1985 [[Sunny Deol]] \\x96 ''[[Arjun]]''''' as '''Arjun Malvankar'''\", \"* '''1986 [[Meenakshi Sheshadri]] \\x96 ''[[Meri Jung]]''''' as '''Radha Mathur'''\"]; output: ['Sunny Deol', 'Meenakshi Sheshadri']"}
{"id": "10-8", "oq_id": 10, "desc": "Input: a list of complex text strings with actor names embedded within.\nOutput: a list of actor names extracted from the input strings.\nFunctionality: The transformation extracts the actor names from each element in the given sequence and outputs them as a list of strings.\nExample: Input: [\"* '''2009 [[Ranbir Kapoor]] \\x96 ''[[Wake Up Sid]]''''' as '''Sid Mehra'''\", \"* '''2012 [[Priyanka Chopra]] \\x96 ''[[Barfi!]]''''' as '''Jhilmil Chatterjee'''\"]; output: ['Ranbir Kapoor', 'Priyanka Chopra']"}
{"id": "11-6", "oq_id": 11, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the specified text segment \"Anupama\" from each element in the given sequence, and outputs it as a list of strings.\nExample: Input: [\"* '''1966 [[Sharmila Tagore]] \\x96 ''[[Anupama (1966 film)|Anupama]]''''' as '''Anupama Sengupta'''\"]; output: ['Anupama']"}
{"id": "11-7", "oq_id": 11, "desc": "Input: a list of complex text values.\nOutput: a list of strings.\nFunctionality: The transformation extracts the specific text 'Mera Saaya' from each element in the given sequence and outputs it as a list of strings.\nExample: Input: [\"* '''1967 [[Nanda (actress)|Nanda]] \\x96 ''[[Mera Saaya]]''''' as '''Geeta Verma'''\"]; output: ['Mera Saaya']"}
{"id": "11-5", "oq_id": 11, "desc": "Input: a list of complex text values.\nOutput: a list of text values.\nFunctionality: The transformation extracts the specific text 'Waqt' from each element in the given sequence and outputs it as a list.\nExample: Input: [\"* '''1965 [[Sadhana Shivdasani]] \\x96 ''[[Waqt (1965 film)|Waqt]]''''' as '''Meena Kapoor'''\"]; output: ['Waqt']"}
{"id": "11-4", "oq_id": 11, "desc": "Input: a list of complex text values.\nOutput: a list of strings.\nFunctionality: The transformation extracts the specific text 'Gumrah' from each element in the given sequence and outputs it as a list of strings.\nExample: Input: [\"* '''1964 [[Mala Sinha]] \\x96 ''[[Gumrah (1963 film)|Gumrah]]''''' as '''Meena''\"]; output: ['Gumrah']"}
{"id": "11-0", "oq_id": 11, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the specific text 'Kohinoor' from each element in the given sequence and outputs it in a list.\nExample: Input: [\"* '''1960 [[Meena Kumari]] \\x96 ''[[Kohinoor (1960 film)|Kohinoor]]''''' as '''Shanti'''\"]; output: ['Kohinoor']"}
{"id": "11-1", "oq_id": 11, "desc": "Input: a list of complex text values containing special characters, links, and annotations.\nOutput: a list of text values.\nFunctionality: The transformation extracts the text inside double square brackets from each element in the given sequence and outputs it in a list.\nExample: Input: [\"* '''1961 [[Vyjayanthimala]] \\x96 ''[[Gunga Jumna]]''''' as '''Durga''\"]; output: ['Gunga Jumna']"}
{"id": "11-3", "oq_id": 11, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the text inside the square brackets [[ ]] from each element in the given sequence, and outputs those extracted text as a list of strings.\nExample: Input: [\"* '''1963 [[Waheeda Rehman]] \\x96 ''[[Teesri Kasam]]''''' as '''Heera'''\"]; output: ['Teesri Kasam']"}
{"id": "11-2", "oq_id": 11, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specified text 'Bandini' from each element in the given sequence and outputs it as a list of strings.\nExample: Input: [\"* '''1962 [[Nutan]] \\x96 ''[[Bandini (1963 film)|Bandini]]''''' as '''Kalyani'''\"]; output: ['Bandini']"}
{"id": "11-9", "oq_id": 11, "desc": "Input: a list of complex text strings containing various elements.\nOutput: a list of text strings.\nFunctionality: The transformation extracts the text enclosed in double quotes that follows the pattern \"'[[text_here]]'\" from each element in the given sequence and outputs them as separate elements in the result list.\nExample: Input: [\"* '''1969 [[Hema Malini]] \\x96 ''[[Satyam Shivam Sundaram: Love Sublime]]''''' as '''Rupa'''\"]; output: ['Satyam Shivam Sundaram: Love Sublime']"}
{"id": "11-8", "oq_id": 11, "desc": "Input: a list of strings containing complex text.\nOutput: a list of strings containing specific text extracted from the input strings.\nFunctionality: The transformation extracts the text 'Hare Rama Hare Krishna' from each element in the given sequence and outputs it as a list.\nExample: Input: [\"* '''1968 [[Zeenat Aman]] \\x96 ''[[Hare Rama Hare Krishna]]''''' as '''Jasbir Jaiswal'''\"]; output: ['Hare Rama Hare Krishna']"}
{"id": "12-7", "oq_id": 12, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the specific text 'Amrita' from the given sequence and outputs it as a list.\nExample: Input: [\"* '''1967 [[Hema Malini]] \\x96 ''[[Sapnon Ka Saudagar]]''''' as '''Amrita'''\"]; output: ['Amrita']"}
{"id": "12-6", "oq_id": 12, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specific text 'Asha' from the given sequence and outputs it as a list.\nExample: Input: [\"* '''1966 [[Sharmila Tagore]] \\x96 ''[[An Evening in Paris]]''''' as '''Asha'''\"]; Output: ['Asha']"}
{"id": "12-4", "oq_id": 12, "desc": "Input: a list of complex text values containing special characters, numerical values, and text strings.\nOutput: a list of text values.\nFunctionality: The transformation extracts the specific text 'Rosie' from each element in the given sequence, and outputs it as a list of text values.\nExample: Input: [\"* '''1964 [[Waheeda Rehman]] \\x96 ''[[Guide (1965 film)|Guide]]''''' as '''Rosie'''\"]; output: ['Rosie']"}
{"id": "12-5", "oq_id": 12, "desc": "Input: a list of complex text values.\nOutput: a list of strings.\nFunctionality: The transformation extracts the specific text 'Rita' from each element in the given sequence and outputs it as a list of strings.\nExample: Input: [\"* '''1965 [[Nargis Dutt]] \\x96 ''[[Junglee (1961 film)|Junglee]]''''' as '''Rita'''\"]; output: ['Rita']"}
{"id": "12-1", "oq_id": 12, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specific string 'Durga' from each element in the given sequence and outputs it as a list.\nExample: Input: [\"* '''1961 [[Vyjayanthimala]] \\x96 ''[[Ganga Jamuna]]''''' as '''Durga'''\"]; output: ['Durga']"}
{"id": "12-0", "oq_id": 12, "desc": "Input: a list of complex text strings.\nOutput: a list of strings representing character names.\nFunctionality: Extracts the character name mentioned within triple single quotes from each element in the given sequence, and outputs it as a list of strings.\nExample: Input: [\"* '''1960 [[Meena Kumari]] \\x96 ''[[Kohinoor (1960 film)|Kohinoor]]''''' as '''Shanti'''\"]; output: ['Shanti']"}
{"id": "12-2", "oq_id": 12, "desc": "Input: a list of complex text strings.\nOutput: a list of strings representing character names.\nFunctionality: Extracts the character name mentioned within the sequence and outputs it as a list of strings.\nExample: Input: [\"* '''1962 [[Nutan]] \\x96 ''[[Sahib Bibi Aur Ghulam]]''''' as '''Chandramukhi'''\"]; output: ['Chandramukhi']"}
{"id": "12-3", "oq_id": 12, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specific string 'Sita' from the given sequence and outputs it as a list.\nExample: Input: [\"* '''1963 [[Meena Kumari]] \\x96 ''[[Dil Ek Mandir]]''''' as '''Sita'''\"]; Output: ['Sita']"}
{"id": "12-8", "oq_id": 12, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the specific word 'Neena' from the given sequence and outputs it as a list.\nExample: Input: [\"* '''1968 [[Asha Parekh]] \\x96 ''[[Dil Deke Dekho]]''''' as '''Neena'''\"]; output: ['Neena']"}
{"id": "12-9", "oq_id": 12, "desc": "Input: a list of complex text values containing special characters, links, and annotations.\nOutput: a list of text values.\nFunctionality: The transformation extracts the text inside triple quotes (''' ''') and returns it as a list of strings.\nExample: Input: [\"* '''1969 [[Saira Banu]] \\x96 ''[[Aadmi Aur Insaan]]''''' as '''Sudha'''\"]; output: ['Sudha']"}
{"id": "13-4", "oq_id": 13, "desc": "Input: a list of complex text values containing sets of animals.\nOutput: a list of string values representing a single animal from each set.\nFunctionality: The transformation extracts a specific animal from each set in the given sequence and outputs it as a string in the result list.\nExample: Input: ['{{cat, dog}, {fish, bird}, {rabbit, hamster}}', '{{turtle, snake}, {lizard, frog}}', '{{horse}, {goat}, {sheep, pig, cow}}']; output: ['fish', 'lizard', 'goat']"}
{"id": "13-5", "oq_id": 13, "desc": "Input: a list of complex text values containing nested elements.\nOutput: a list of specific text values extracted from each element.\nFunctionality: The transformation extracts the specific text value provided in the sequence from each element and outputs them in a list format.\nExample: Input: ['{{math, science}, {history, geography}, {language, art}}', '{{music, physical}, {education, technology}}', '{{engineering}, {medicine}, {architecture, business, law}}']; output: ['history', 'education', 'medicine']"}
{"id": "13-7", "oq_id": 13, "desc": "Input: a list of complex text values with nested structures.\nOutput: a list of specific text values.\nFunctionality: The transformation extracts the specific text value provided in the sequence from each element in the given sequence, and outputs them as a list of strings.\nExample: Input: ['{{summer, autumn}, {winter, spring}, {morning, evening}}', '{{noon, night}, {dusk, dawn}}', '{{day}, {night}, {twilight, sunrise, sunset}}']; output: ['winter', 'dusk', 'night']"}
{"id": "13-6", "oq_id": 13, "desc": "Input: a list of complex text values (strings containing nested curly braces).\nOutput: a list of string values.\nFunctionality: The transformation extracts specific elements from each element in the given sequence based on the provided criteria, and outputs them in a new list.\nExample: Input: ['{{sun, moon}, {stars, planets}, {comets, asteroids}}', '{{galaxy, nebula}, {supernova, blackhole}}', '{{constellation}, {quasar}, {pulsar, supernova, blackhole}}']; output: ['stars', 'supernova', 'quasar']"}
{"id": "13-2", "oq_id": 13, "desc": "Input: a list of complex text strings containing color pairs.\nOutput: a list of simple color names extracted from the input strings.\nFunctionality: The transformation extracts the second color from each pair in the given sequences and outputs them as a list of simple color names.\nExample: Input: ['{{red, blue}, {green, yellow}, {purple, orange}}', '{{black, white}, {gray, silver}}', '{{gold}, {silver}, {copper, bronze, brass}}']; output: ['green', 'gray', 'silver']"}
{"id": "13-3", "oq_id": 13, "desc": "Input: a list of complex text values containing nested elements.\nOutput: a list of specific text values extracted from each element.\nFunctionality: The transformation extracts the specific text value provided in the output sequence from each element in the given sequence and outputs them as a list.\nExample: Input: ['{{Sunday, Monday}, {Tuesday, Wednesday}, {Thursday, Friday}}', '{{Saturday, August}, {January, February}}', '{{March}, {April}, {May, June, July}}']; output: ['Tuesday', 'January', 'April']"}
{"id": "13-1", "oq_id": 13, "desc": "Input: a list of complex text values containing nested lists.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specified fruit from each nested list in the input sequence and outputs them as strings in the result list.\nExample: Input: ['{{apple, banana}, {cherry, dates}, {elderberry, fig}}', '{{kiwi, lemon}, {mango, nectarine}}', '{{orange}, {papaya}, {quince, raspberry, strawberry}}']; output: ['cherry', 'mango', 'papaya']"}
{"id": "13-0", "oq_id": 13, "desc": "Input: a list of strings with nested values.\nOutput: a list of strings containing specific values extracted from each element.\nFunctionality: The transformation extracts the specified value from each element in the given sequence and outputs it as a list.\nExample: Input: ['{{pqr, xyz}, {lmn, opq}, {rst, uvw}}', '{{x, yyy}, {zzz, aaa}}', '{{1}, {2}, {3}}']; output: ['lmn', 'zzz', '2']"}
{"id": "13-8", "oq_id": 13, "desc": "Input: a list of complex text values containing sets of items.\nOutput: a list of specific items extracted from the text values.\nFunctionality: The transformation extracts a specific item from each element in the given sequence based on predetermined criteria, and outputs those items as a list.\nExample: Input: ['{{coffee, tea}, {juice, water}, {soda, milk}}', '{{wine, beer}, {cocktail, whisky}}', '{{vodka}, {rum}, {tequila, gin, brandy}}']; output: ['juice', 'cocktail', 'rum']"}
{"id": "13-9", "oq_id": 13, "desc": "Input: a list of complex text values containing nested lists.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first item from each inner list in the given sequence and outputs it as a string in the result list.\nExample: Input: ['{{pizza, pasta}, {burger, fries}, {sandwich, salad}}', '{{soup, sushi}, {ramen, curry}}', '{{taco}, {burrito}, {quesadilla, enchilada, fajita}}']; output: ['burger', 'ramen', 'burrito']"}
{"id": "14-1", "oq_id": 14, "desc": "Input: a list of string values, with words separated by commas and semicolons.\nOutput: None (inplace transformation of seq_a).\nFunctionality: The transformation removes all punctuation (commas and semicolons) from each element in the given sequence.\nExample: Input: ['carrot, broccoli; spinach, lettuce', 'tomato, cucumber']; output: ['carrot broccoli spinach lettuce', 'tomato cucumber']"}
{"id": "14-0", "oq_id": 14, "desc": "Input: a list of strings containing words separated by punctuation.\nOutput: None\nFunctionality: The transformation splits each string into individual words, removes punctuation, and outputs each word as a separate element in the list. No specific output is provided as the transformation does not generate a new sequence."}
{"id": "14-2", "oq_id": 14, "desc": "Input: a list of string values, with numerical values separated by commas and/or semicolons.\nOutput: None (in-place transformation)\nFunctionality: The transformation removes the commas and semicolons from each element in the given sequence, resulting in a sequence with numerical values separated by spaces instead of punctuation marks.\nExample: Input: ['123, 456; 789, 012; 345, 678']; output (in-place): ['123 456 789 012 345 678']"}
{"id": "14-3", "oq_id": 14, "desc": "Input: a list of strings.\nOutput: None.\nFunctionality: The transformation splits each element in the given sequence by the delimiter ', ' or '; ' and outputs a list of strings with the separated elements.\nExample: Input: ['red, green; blue, yellow']; output: None"}
{"id": "14-7", "oq_id": 14, "desc": "Input: a list of one string value.\nOutput: None.\nFunctionality: The transformation splits the string by delimiters such as comma and semicolon, removes any whitespace, and outputs each word as a separate element in a list. \nExample: Input: ['happy, sad; angry, excited']; output: ['happy', 'sad', 'angry', 'excited']"}
{"id": "14-6", "oq_id": 14, "desc": "Input: a list of one string value.\nOutput: None.\nFunctionality: The transformation splits the string by delimiters (',', ';', ' ') and removes whitespace to separate each word, outputting a list of strings.\nExample: Input: ['cat, dog; bird, fish']; output: ['cat', 'dog', 'bird', 'fish']"}
{"id": "14-4", "oq_id": 14, "desc": "Input: a list of string values, with multiple words separated by punctuation.\nOutput: None (no output list provided in seq_b).\nFunctionality: The transformation extracts each word from the given string sequence, removes any punctuation such as commas, semicolons, and outputs the result individually or in a new sequence.\nExample: Input: ['sun, moon; stars, sky; clouds, rain']; output: 'sun', 'moon', 'stars', 'sky', 'clouds', 'rain' (each word extracted individually)"}
{"id": "14-5", "oq_id": 14, "desc": "Input: a list of one string value.\nOutput: None.\nFunctionality: The transformation splits the string by delimiters such as comma and semicolon, removes spaces, and outputs the result as a list of separate seasons.\nExample: Input: ['summer, winter; spring, fall']; output: ['summer', 'winter', 'spring', 'fall']"}
{"id": "14-8", "oq_id": 14, "desc": "Input: a list of a single string value.\nOutput: None\nFunctionality: The transformation splits the single string into multiple substrings using the specified delimiters, then stores each substring as a separate element in a new list. Since seq_b is not specified, the output is None.\nExample: Input: ['pizza, pasta; burger, fries; salad, soup']; output: None"}
{"id": "14-9", "oq_id": 14, "desc": "Input: a list of string values, with multiple words separated by punctuation.\nOutput: None\nFunctionality: The transformation splits each element in the given sequence by punctuation (';', ','), removes any whitespace, and creates a new list with individual words.\nExample: Input: ['beach, mountain; forest, desert']; output: ['beach', 'mountain', 'forest', 'desert']"}
{"id": "15-2", "oq_id": 15, "desc": "Input: a list of string values, with tab-separated first and last name.\nOutput: a list of string values with concatenated first and last name, removing the tab.\nFunctionality: The transformation extracts the last name from each element in the given sequence by removing the tab and concatenating it with the first character of the first name.\nExample: Input: ['alex\\trodriguez', 'emily\\tnguyen', 'matt\\tanderson', 'victoria\\ttaylor', 'kevin\\tthompson']; output: ['arodriguez', 'enguyen', 'manderson', 'vtaylor', 'kthompson']"}
{"id": "15-3", "oq_id": 15, "desc": "Input: a list of string values, with tab-separated names.\nOutput: a list of string values, with concatenated names without tabs.\nFunctionality: The transformation removes the tabs and concatenates the first letters of each name in the given sequence, outputting the result as a list.\nExample: Input: ['natalie\\tmartin', 'andrew\\tdavis', 'laura\\troberts', 'brian\\thernandez', 'rebecca\\tscott']; output: ['nmartin', 'adavis', 'lroberts', 'bhernandez', 'rscott']"}
{"id": "15-1", "oq_id": 15, "desc": "Input: a list of string values with a tab-separated first and last name.\nOutput: a list of string values with the first initial of the first name followed by the last name, all in lowercase.\nFunctionality: The transformation extracts the first initial of the first name and concatenates it with the last name, all in lowercase.\nExample: Input: ['george\\tmiller', 'olivia\\tsanchez', 'samuel\\tstewart', 'elizabeth\\tking', 'daniel\\tmartinez']; output: ['gmiller', 'osanchez', 'sstewart', 'eking', 'dmartinez']"}
{"id": "15-0", "oq_id": 15, "desc": "Input: a list of string values, where each element consists of a first name and a last name separated by a tab character.\nOutput: a list of string values, where each element is a combination of the first initial of the first name and the full last name.\nFunctionality: The transformation concatenates the first initial of the first name and the full last name of each element in the given sequence, and outputs the result as a list.\nExample: Input: ['mary\\twhite', 'michael\\tbrown', 'sara\\tjones', 'peter\\tclark', 'linda\\tsmith']; output: ['mwhite', 'mbrown', 'sjones', 'pclark', 'lsmith']"}
{"id": "15-4", "oq_id": 15, "desc": "Input: a list of string values, where each element consists of two words separated by a tab.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first letter of the first word and combines it with the second word in each element of the given sequence to create the result list.\nExample: Input: ['justin\\twhite', 'sophia\\tyoung', 'benjamin\\tmiller', 'jennifer\\tadams', 'joshua\\tevans']; output: ['jwhite', 'syoung', 'bmiller', 'jadams', 'jevans']"}
{"id": "15-5", "oq_id": 15, "desc": "Input: a list of string values with first and last names separated by a tab.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first letter of the first name and concatenates it with the last name, removing the space and converting to lowercase, and output the result as a list.\nExample: Input: ['diana\\tjohnson', 'stephen\\twilson', 'katherine\\tbrown', 'ryan\\tgarcia', 'lauren\\tlopez']; output: ['djohnson', 'swilson', 'kbrown', 'rgarcia', 'llopez']"}
{"id": "15-7", "oq_id": 15, "desc": "Input: a list of string values, each containing a first name and a last name separated by a tab.\nOutput: a list of string values with the first name concatenated with the first letter of the last name.\nFunctionality: The transformation extracts the first name and the first letter of the last name from each element in the given sequence, then concatenates them to form the output list.\nExample: Input: ['brandon\\tjackson', 'ashley\\tmorris', 'luke\\twood', 'gabriella\\tprice', 'jonathan\\tbell']; output: ['bjackson', 'amorris', 'lwood', 'gprice', 'jbell']"}
{"id": "15-6", "oq_id": 15, "desc": "Input: a list of string values with a tab-separated format.\nOutput: a list of string values with specific pattern removed.\nFunctionality: The transformation removes the first letter of the first name and combines the first and last names from each element in the given sequence, outputting the formatted names as a list.\nExample: Input: ['megan\\tperez', 'nathan\\tcampbell', 'susan\\tross', 'jesse\\ttorres', 'chloe\\tdiaz']; output: ['mperez', 'ncampbell', 'sross', 'jtorres', 'cdiaz']"}
{"id": "15-8", "oq_id": 15, "desc": "Input: a list of string values, with tab-separated first and last name.\nOutput: a list of concatenated strings with first initial and last name.\nFunctionality: The transformation extracts the first initial and last name from each element in the given sequence, and concatenates them in the result list.\nExample: Input: ['hannah\\tcooper', 'paul\\tpeterson', 'erin\\tsullivan', 'miguel\\tgomez', 'kaitlyn\\tmurphy']; output: ['hcooper', 'ppeterson', 'esullivan', 'mgomez', 'kmurphy']"}
{"id": "15-9", "oq_id": 15, "desc": "Input: a list of string values, with tab-separated names.\nOutput: a list of string values, with concatenated names without tabs.\nFunctionality: The transformation removes the tab character from each element in the given sequence and concatenate the names, outputting the result as a list of strings.\nExample: Input: ['isaac\\tstevens', 'madison\\tcollins', 'christopher\\tmartin', 'jessica\\tbutler', 'adam\\twilcox']; output: ['istevens', 'mcollins', 'cmartin', 'jbutler', 'awilcox']"}
{"id": "16-3", "oq_id": 16, "desc": "Input: a list of string values, with names in \"last name, first name\" format.\nOutput: a list of string values, with names formatted as \"first initial\" + \"last name\".\nFunctionality: The transformation extracts the first initial and last name from each element in the given sequence, then combines them to form the desired output list.\nExample: Input: ['lee, michelle', 'perez, juan', 'hughes, patrick', 'phillips, amanda', 'garcia, josh']; output: ['mlee', 'jperez', 'phughes', 'aphillips', 'jgarcia']"}
{"id": "16-2", "oq_id": 16, "desc": "Input: a list of string values with names formatted as 'last_name, first_name'.\nOutput: a list of string values with names formatted as 'first_initial_last_name'.\nFunctionality: The transformation extracts the first initial and last name from each element in the given sequence and concatenates them to form the result list.\nExample: Input: ['stewart, linda', 'young, brian', 'lopez, carlos', 'scott, jennifer', 'mitchell, tom']; output: ['lstewart', 'byoung', 'clopez', 'jscott', 'tmitchell']"}
{"id": "16-0", "oq_id": 16, "desc": "Input: a list of string values, with each element containing a last name followed by a comma and a first name.\nOutput: a list of string values.\nFunctionality: The transformation removes the comma and space, and extracts the first letter of the first name to create a username format.\nExample: Input: ['lopez, maria', 'jackson, michael', 'brown, emily', 'harris, david', 'thompson, sarah']; output: ['mlopez', 'mjackson', 'ebrown', 'dharris', 'sthompson']"}
{"id": "16-1", "oq_id": 16, "desc": "Input: a list of string values, with a format of \"last name, first name\".\nOutput: a list of string values, with a format of \"first initial\" + \"last name\".\nFunctionality: The transformation extracts the first initial and last name from each element in the given sequence, and combines them as the result.\nExample: Input: ['miller, alex', 'martinez, laura', 'rodriguez, jason', 'lewis, christine', 'nguyen, sam']; output: ['amiller', 'lmartinez', 'jrodriguez', 'clewis', 'snguyen']"}
{"id": "16-5", "oq_id": 16, "desc": "Input: a list of string values, each containing a first name and a last name separated by a comma.\nOutput: a list of string values with the last name followed by the first initial, all lowercase and without spaces.\nFunctionality: The transformation extracts the last name and first initial from each element in the given sequence and formats them as the result list.\nExample: Input: ['gray, ryan', 'morales, sofia', 'olson, taylor', 'king, carolyn', 'ramirez, robert']; output: ['rgray', 'smorales', 'tolson', 'cking', 'rramirez']"}
{"id": "16-4", "oq_id": 16, "desc": "Input: a list of string values, with names formatted as \"last name, first name\".\nOutput: a list of string values, with names formatted as \"first initial\" + \"last name\".\nFunctionality: The transformation extracts the first initial and last name from each element in the given sequence, and combines them as the result.\nExample: Input: ['clark, kelly', 'bailey, eric', 'roberts, kevin', 'butler, angela', 'davis, lisa']; output: ['kclark', 'ebailey', 'kroberts', 'abutler', 'ldavis']"}
{"id": "16-6", "oq_id": 16, "desc": "Input: a list of string values, each containing a name in the format 'last_name, first_name'.\nOutput: a list of string values with the last name extracted and the first letter of the first name removed.\n\nFunctionality: The transformation extracts the last name from each element in the given sequence and formats it by removing the first letter of the first name.\nExample: Input: ['turner, elizabeth', 'hill, jacob', 'coleman, natalie', 'adams, mark', 'allen, rebecca']; output: ['eturner', 'jhill', 'ncoleman', 'madams', 'rallen']"}
{"id": "16-7", "oq_id": 16, "desc": "Input: a list of string values, with last name followed by a comma and first name.\nOutput: a list of concatenated strings with last name initials followed by the full first name.\nFunctionality: The transformation extracts the last name initial and combines it with the full first name, omitting spaces, commas, and keeping the original order of elements.\nExample: Input: ['carter, brenda', 'cooper, jordan', 'wright, diana', 'hernandez, mike', 'torres, beth']; output: ['bcarter', 'jcooper', 'dwright', 'mhernandez', 'btorres']"}
{"id": "16-9", "oq_id": 16, "desc": "Input: a list of string values, with a specific format of \"last name, first name\".\nOutput: a list of string values, formed by the concatenation of the first letter of the first name with the full last name.\nFunctionality: The transformation extracts the first letter of the first name and combines it with the full last name, removing the comma and space.\nExample: Input: ['evans, olivia', 'roman, pedro', 'kim, anna', 'woods, robert', 'jones, scott']; output: ['oevans', 'proman', 'akim', 'rwoods', 'sjones']"}
{"id": "16-8", "oq_id": 16, "desc": "Input: a list of string values, with names formatted as 'last name, first name'.\nOutput: a list of string values, with names formatted as 'first initial last name'.\nFunctionality: The transformation extracts the first initial and last name from each element in the given sequence, and constructs the new name format in the result list.\nExample: Input: ['ward, chris', 'kelly, mary', 'sanchez, carlos', 'ruiz, teresa', 'diaz, marco']; output: ['cward', 'mkelly', 'csanchez', 'truiz', 'mdiaz']"}
{"id": "17-0", "oq_id": 17, "desc": "Input: a list of string values, with tab-separated full names.\nOutput: a list of string values, with last name, first name and middle initial format.\nFunctionality: The transformation splits each element in the given sequence by tabs, rearranges the names into last name, first name and middle initial format, and output the result as a list.\nExample: Input: ['Smith\\tJohn\\tDoe', 'Johnson\\tA\\tMary', 'Brown\\tC\\tMichael', 'Davis\\tK\\tSarah', 'Wilson\\tL\\tJennifer']; output: ['Smith, Doe J.', 'Johnson, Mary A.', 'Brown, Michael C.', 'Davis, Sarah K.', 'Wilson, Jennifer L.']"}
{"id": "17-1", "oq_id": 17, "desc": "Input: a list of string values, each representing a full name with the format \"Last Name\\tFirst Initial\\tMiddle Name\".\nOutput: a list of string values, each representing a full name with the format \"Last Name, First Middle Initial\".\n\nFunctionality: The transformation splits each element in the given sequence by '\\t' to extract the Last Name, First Initial, and Middle Name parts, then reorders and formats these parts to create the desired full name format in the result list.\n\nExample: Input: ['Garcia\\tE\\tCarlos', 'Martinez\\tR\\tMaria', 'Hernandez\\tS\\tJose', 'Lopez\\tD\\tAna', 'Gonzalez\\tJ\\tDavid']; output: ['Garcia, Carlos E.', 'Martinez, Maria R.', 'Hernandez, Jose S.', 'Lopez, Ana D.', 'Gonzalez, David J.']"}
{"id": "17-3", "oq_id": 17, "desc": "Input: a list of string values, with three tab-separated fields in each element.\nOutput: a list of string values, with comma-separated fields in each element.\nFunctionality: The transformation reorders the fields in each element by swapping the first and last name and separating them with a comma, while keeping the middle initial in between. \nExample: Input: ['Young\\tH\\tSamuel', 'Lee\\tR\\tWilliam', 'Scott\\tM\\tOlivia', 'Adams\\tG\\tSophia', 'Baker\\tJ\\tJames']; output: ['Young, Samuel H.', 'Lee, William R.', 'Scott, Olivia M.', 'Adams, Sophia G.', 'Baker, James J.']"}
{"id": "17-2", "oq_id": 17, "desc": "Input: a list of string values, where each element contains a first name, last name, and a middle initial separated by tabs.\nOutput: a list of formatted string values with last name followed by a comma, then the first name, and finally the middle initial with a period.\nFunctionality: The transformation rearranges the elements in the given sequence to format the full names in the desired structure.\nExample: Input: ['Williams\\tA\\tEmily', 'Jones\\tB\\tChristopher', 'Taylor\\tC\\tJessica', 'Miller\\tD\\tMatthew', 'Anderson\\tE\\tSamantha']; output: ['Williams, Emily A.', 'Jones, Christopher B.', 'Taylor, Jessica C.', 'Miller, Matthew D.', 'Anderson, Samantha E.']"}
{"id": "17-6", "oq_id": 17, "desc": "Input: a list of strings with tab-separated values.\nOutput: a list of strings in a specific format.\nFunctionality: The transformation rearranges the elements in each string by swapping the order of the first and last name, and adding a comma and space in between. It also capitalizes the first character of each name.\nExample: Input: ['Gomez\\tA\\tMiguel', 'Rodriguez\\tB\\tElena', 'Perez\\tC\\tAntonio', 'Sanchez\\tD\\tIsabel', 'Rivera\\tE\\tJuan']; output: ['Gomez, Miguel A.', 'Rodriguez, Elena B.', 'Perez, Antonio C.', 'Sanchez, Isabel D.', 'Rivera, Juan E.']"}
{"id": "17-7", "oq_id": 17, "desc": "Input: a list of string values, with each element containing multiple substrings separated by tabs.\nOutput: a list of strings with substrings rearranged and formatted differently.\nFunctionality: The transformation reorganizes the substrings in each element in the given sequence, switching the order and adding commas and spaces to create the desired output format.\nExample: Input: ['Kim\\tS\\tHyejin', 'Park\\tH\\tSeong', 'Choi\\tJ\\tMinho', 'Lee\\tK\\tYeon', 'Jung\\tL\\tJong']; output: ['Kim, Hyejin S.', 'Park, Seong H.', 'Choi, Minho J.', 'Lee, Yeon K.', 'Jung, Jong L.']"}
{"id": "17-5", "oq_id": 17, "desc": "Input: a list of string values, with each element representing a full name in \"Last Name Initial Middle Name\" format.\nOutput: a list of string values, with each element representing a full name in \"Last Name, First Name Middle Initial.\" format.\nFunctionality: The transformation rearranges the elements in the given sequence to switch the order of Last Name and First Name, and the Middle Name is represented by its initial.\nExample: Input: ['Nguyen\\tT\\tLinh', 'Tran\\tP\\tDuc', 'Pham\\tK\\tThao', 'Le\\tM\\tHieu', 'Vo\\tN\\tAnh']; output: ['Nguyen, Linh T.', 'Tran, Duc P.', 'Pham, Thao K.', 'Le, Hieu M.', 'Vo, Anh N.']"}
{"id": "17-4", "oq_id": 17, "desc": "Input: a list of string values, representing names in a specific format.\nOutput: a list of string values, formatted as Last Name, First Name Middle Initial.\nFunctionality: The transformation reorders the elements in the given sequence to the desired format, with Last Name first followed by a comma, First Name, space, and Middle Initial with a period.\nExample: Input: ['Chen\\tY\\tWei', 'Zhao\\tX\\tLing', 'Wang\\tZ\\tYan', 'Liu\\tQ\\tHui', 'Sun\\tW\\tJing']; output: ['Chen, Wei Y.', 'Zhao, Ling X.', 'Wang, Yan Z.', 'Liu, Hui Q.', 'Sun, Jing W.']"}
{"id": "17-9", "oq_id": 17, "desc": "Input: a list of string values, each containing a full name with first name, middle initial, and last name separated by tabs.\nOutput: a list of string values, each containing the full name formatted as \"Last Name, First Name Middle Initial.\"\nFunctionality: The transformation splits each element in the given sequence by tabs, reorders and formats the parts, and output the result as a list of strings.\nExample: Input: ['Ramos\\tP\\tCarlos', 'Mendoza\\tQ\\tLuz', 'Reyes\\tR\\tDiego', 'Vargas\\tS\\tIsabella', 'Alvarez\\tT\\tMiguel']; output: ['Ramos, Carlos P.', 'Mendoza, Luz Q.', 'Reyes, Diego R.', 'Vargas, Isabella S.', 'Alvarez, Miguel T.']"}
{"id": "17-8", "oq_id": 17, "desc": "Input: a list of string values, where each element contains multiple words separated by tabs.\nOutput: a list of formatted string values with last name followed by a comma, then the first name and middle initial separated by a space.\nFunctionality: The transformation splits each element in the given sequence by tabs, rearranges the words to last name followed by a comma, then first name and middle initial separated by a space, and outputs the formatted strings as a list.\nExample: Input: ['Tan\\tH\\tWei', 'Wong\\tL\\tJing', 'Chow\\tM\\tHei', 'Lim\\tC\\tYan', 'Ong\\tP\\tXin']; output: ['Tan, Wei H.', 'Wong, Jing L.', 'Chow, Hei M.', 'Lim, Yan C.', 'Ong, Xin P.']"}
{"id": "18-9", "oq_id": 18, "desc": "Input: a list of string values with numerical characters.\nOutput: a list of string values formatted as phone numbers.\nFunctionality: The transformation formats each element in the given sequence as a phone number by adding parentheses and hyphens.\nExample: Input: ['1245783901', '1034856729', '9746102358', '3451896420', '1289387465']; output: ['(124) 578-3901', '(103) 485-6729', '(974) 610-2358', '(345) 189-6420', '(128) 938-7465']"}
{"id": "18-8", "oq_id": 18, "desc": "Input: a list of string values with numeric characters.\nOutput: a list of string values formatted as phone numbers.\nFunctionality: The transformation formats each element in the given sequence as a phone number in the format \"(###) ###-####\".\nExample: Input: ['6789012345', '4567890123', '0123456789', '8901234567', '5678901234']; output: ['(678) 901-2345', '(456) 789-0123', '(012) 345-6789', '(890) 123-4567', '(567) 890-1234']"}
{"id": "18-5", "oq_id": 18, "desc": "Input: a list of string values with numerical characters.\nOutput: a list of string values formatted as phone numbers.\nFunctionality: The transformation formats each element in the given sequence as a phone number by adding parentheses and hyphens in the correct positions.\nExample: Input: ['1347258910', '1082973465', '2387495019', '3472509182', '1234567890']; output: ['(134) 725-8910', '(108) 297-3465', '(238) 749-5019', '(347) 250-9182', '(123) 456-7890']"}
{"id": "18-4", "oq_id": 18, "desc": "Input: a list of string values with numerical characters.\nOutput: a list of string values formatted as phone numbers.\nFunctionality: The transformation formats each element in the given sequence as a phone number in the format '(###) ###-####' and output the result as a list.\nExample: Input: ['9872345091', '2345879120', '2387491052', '2910348756', '2390874561']; output: ['(987) 234-5091', '(234) 587-9120', '(238) 749-1052', '(291) 034-8756', '(239) 087-4561']"}
{"id": "18-6", "oq_id": 18, "desc": "Input: a list of string values with numerical characters.\nOutput: a list of string values formatted as phone numbers.\nFunctionality: The transformation formats each element in the given sequence as a phone number by adding parentheses and hyphens.\nExample: Input: ['2938475061', '0246871359', '1984752036', '9038561724', '1203948567']; output: ['(293) 847-5061', '(024) 687-1359', '(198) 475-2036', '(903) 856-1724', '(120) 394-8567']"}
{"id": "18-7", "oq_id": 18, "desc": "Input: a list of string values with numerical characters.\nOutput: a list of string values formatted as phone numbers.\nFunctionality: The transformation formats each element in the given sequence as a phone number in the format '(XXX) XXX-XXXX', where X represents a digit extracted from the input string.\nExample: Input: ['8903456127', '6540897231', '3456789012', '4321098765', '2345678901']; output: ['(890) 345-6127', '(654) 089-7231', '(345) 678-9012', '(432) 109-8765', '(234) 567-8901']"}
{"id": "18-3", "oq_id": 18, "desc": "Input: a list of string values with numerical characters.\nOutput: a list of string values formatted as phone numbers.\nFunctionality: The transformation formats each element in the given sequence as a phone number by adding parentheses and hyphens in the correct positions.\nExample: Input: ['6574839201', '2193847560', '9837460192', '0928374651', '1293847650']; output: ['(657) 483-9201', '(219) 384-7560', '(983) 746-0192', '(092) 837-4651', '(129) 384-7650']"}
{"id": "18-2", "oq_id": 18, "desc": "Input: a list of string values with numerical characters.\nOutput: a list of string values formatted as phone numbers.\nFunctionality: The transformation formats each element in the given sequence as a phone number in the format '(###) ###-####', by separating the string into groups of 3, 3, and 4 characters.\nExample: Input: ['6547890123', '9876543210', '8901234567', '1234567890', '4567890123']; output: ['(654) 789-0123', '(987) 654-3210', '(890) 123-4567', '(123) 456-7890', '(456) 789-0123']"}
{"id": "18-0", "oq_id": 18, "desc": "Input: a list of string values with numerical characters.\nOutput: a list of string values formatted as phone numbers.\nFunctionality: The transformation formats each element in the given sequence as a phone number in the format '(###) ###-####' by adding parentheses, space, and hyphen in specific positions.\nExample: Input: ['9876543210', '1234567890', '3456789012', '5678901234', '7890123456']; output: ['(987) 654-3210', '(123) 456-7890', '(345) 678-9012', '(567) 890-1234', '(789) 012-3456']"}
{"id": "18-1", "oq_id": 18, "desc": "Input: a list of string values with numerical characters.\nOutput: a list of string values formatted as phone numbers.\nFunctionality: The transformation formats each element in the given sequence as a phone number by adding parentheses and hyphens in the correct positions.\nExample: Input: ['8765432109', '0987654321', '2109876543', '4321098765', '6543210987']; output: ['(876) 543-2109', '(098) 765-4321', '(210) 987-6543', '(432) 109-8765', '(654) 321-0987']"}
{"id": "19-9", "oq_id": 19, "desc": "Input: a list of string values, each representing a phone number.\nOutput: a list of formatted phone numbers with consistent format.\nFunctionality: The transformation formats each phone number in the given sequence by removing any special characters, such as parentheses, periods, and spaces, and adding dashes in specific positions to create a consistent format in the result list.\nExample: Input: ['206-555-4567', '(360)-901-2345', '425.678.7890', '253 4567', '206-5678', '000-222-4444', '222 3333']; output: ['206-555-4567', '360-901-2345', '425-678-7890', '425-253-4567', '425-206-5678', '000-222-4444', '425-222-3333']"}
{"id": "19-8", "oq_id": 19, "desc": "Input: a list of string values, each representing a phone number.\nOutput: a list of formatted phone numbers with consistent format.\nFunctionality: The transformation formats each phone number in the given sequence to a consistent format (XXX-XXX-XXXX) and outputs the formatted phone numbers as a list.\nExample: Input: ['425-555-3456', '(206)-890-1234', '253.567.6789', '360 3456', '425-4567', '999-111-3333', '111 2222']; output: ['425-555-3456', '206-890-1234', '253-567-6789', '425-360-3456', '425-425-4567', '999-111-3333', '425-111-2222']"}
{"id": "19-6", "oq_id": 19, "desc": "Input: a list of string values, each representing a phone number.\nOutput: a list of formatted phone numbers with consistent area code formatting.\nFunctionality: The transformation standardizes the format of each phone number in the given sequence by removing any non-numeric characters and ensuring the area code is consistently formatted.\nExample: Input: ['253-555-1234', '(425)-678-9012', '360.123.4567', '206 1234', '253-2345', '777-999-1111', '999 0000']; output: ['253-555-1234', '425-678-9012', '360-123-4567', '425-206-1234', '425-253-2345', '777-999-1111', '425-999-0000']"}
{"id": "19-7", "oq_id": 19, "desc": "Input: a list of string values, each representing a phone number.\nOutput: a list of formatted phone numbers with consistent formatting.\nFunctionality: The transformation removes any non-numeric characters and formats the phone numbers in the given sequence with a consistent format (XXX-XXX-XXXX).\nExample: Input: ['360-555-2345', '(253)-789-0123', '206.345.5678', '425 2345', '360-3456', '888-000-2222', '000 1111']; output: ['360-555-2345', '253-789-0123', '206-345-5678', '425-425-2345', '425-360-3456', '888-000-2222', '425-000-1111']"}
{"id": "19-5", "oq_id": 19, "desc": "Input: a list of string values, each representing a phone number.\nOutput: a list of formatted phone numbers with consistent format.\nFunctionality: The transformation standardizes the phone numbers by removing any non-numeric characters, adding dashes between the area code, exchange code, and subscriber number, and ensuring a consistent format for all phone numbers.\nExample: Input: ['206-555-9012', '(360)-567-8901', '425.901.4567', '253 9012', '206-2345', '666-888-0000', '888 7777']; output: ['206-555-9012', '360-567-8901', '425-901-4567', '253-9012', '206-2345', '666-888-0000', '888-7777']"}
{"id": "19-4", "oq_id": 19, "desc": "Input: a list of string values, each representing a phone number.\nOutput: a list of formatted phone numbers with the area code added if missing.\nFunctionality: The transformation formats each phone number in the given sequence by adding the area code (425) if missing, and outputs the result as a list.\nExample: Input: ['425-555-8901', '(206)-456-7890', '253.890.3456', '360 8901', '253-1234', '555-777-9999', '777 8888']; output: ['425-555-8901', '206-456-7890', '253-890-3456', '425-360-8901', '425-253-1234', '555-777-9999', '425-777-8888']"}
{"id": "19-0", "oq_id": 19, "desc": "Input: a list of string values, each representing a phone number.\nOutput: a list of formatted phone numbers.\nFunctionality: The transformation formats the phone numbers in the given sequence to a specific format (XXX-XXX-XXXX), and outputs the result as a list.\nExample: Input: ['425-555-1234', '(206)-987-4567', '360.123.7890', '253 3456', '425-7890', '111-333-5555', '999 8888']; output: ['425-555-1234', '206-987-4567', '360-123-7890', '425-253-3456', '425-7890', '111-333-5555', '425-999-8888']"}
{"id": "19-1", "oq_id": 19, "desc": "Input: a list of string values representing phone numbers in various formats.\nOutput: a list of string values representing phone numbers in a standardized format.\nFunctionality: The transformation standardizes the phone numbers in the given sequence by removing any special characters (such as parentheses, periods, or spaces) and ensuring a consistent format (e.g. '###-###-####').\nExample: Input: ['206-555-4321', '(425)-123-4567', '503.789.4567', '360 5678', '206-7890', '222-444-6666', '777 6666']; output: ['206-555-4321', '425-123-4567', '503-789-4567', '425-360-5678', '425-206-7890', '222-444-6666', '425-777-6666']"}
{"id": "19-3", "oq_id": 19, "desc": "Input: a list of string values, each representing a phone number.\nOutput: a list of formatted phone numbers with consistent dashes.\nFunctionality: The transformation removes any additional characters or spaces from the phone numbers in the given sequence and formats them with consistent dashes.\nExample: Input: ['360-555-7890', '(253)-345-6789', '206.678.2345', '425 7890', '360-1234', '444-666-8888', '666 5555']; output: ['360-555-7890', '253-345-6789', '206-678-2345', '425-7890', '360-1234', '444-666-8888', '666-5555']"}
{"id": "19-2", "oq_id": 19, "desc": "Input: a list of string values, each representing a phone number.\nOutput: a list of formatted phone numbers with consistent format.\nFunctionality: The transformation standardizes the phone numbers by removing any non-numeric characters, adding dashes between the area code, prefix, and line number where necessary, and output the result as a list.\nExample: Input: ['253-555-6789', '(360)-234-5678', '425.567.1234', '206 6789', '253-7890', '333-555-7777', '555 4444']; output: ['253-555-6789', '360-234-5678', '425-567-1234', '206-6789', '253-7890', '333-555-7777', '555-4444']"}
{"id": "20-8", "oq_id": 20, "desc": "Input: a list of string values, with phone numbers in various formats.\nOutput: a list of string values with phone numbers in a standardized format.\nFunctionality: The transformation removes any non-numeric characters and formats the phone numbers in the standard XXX-XXX-XXXX format.\nExample: Input: ['567-8901', '(555)-666-7777', '999-333-2222', '123-456-7890', '(666)7778888']; output: ['425-567-8901', '555-666-7777', '999-333-2222', '123-456-7890', '666-777-8888']"}
{"id": "20-9", "oq_id": 20, "desc": "Input: a list of string values, with phone numbers in different formats.\nOutput: a list of string values with phone numbers in a consistent format.\nFunctionality: The transformation removes any non-numeric characters, adds the area code '425-' to each phone number, and formats the phone numbers with dashes.\nExample: Input: ['678-9012', '8765432', '(222)3334444', '999-1111', '(777)8889999']; output: ['425-678-9012', '425-876-5432', '425-222-333-4444', '425-999-1111', '425-777-888-9999']"}
{"id": "20-2", "oq_id": 20, "desc": "Input: a list of string values, with phone numbers in various formats.\nOutput: a list of phone numbers in a consistent format.\nFunctionality: The transformation removes any non-numeric characters and formats the phone numbers in the given sequence to the format '###-###-####'.\nExample: Input: ['555-9876', '(222)-333-4444', '7654321', '999-333-2222', '(555)6667777']; output: ['425-555-9876', '222-333-4444', '425-765-4321', '999-333-2222', '555-666-7777']"}
{"id": "20-3", "oq_id": 20, "desc": "Input: a list of string values, each containing a phone number in various formats.\nOutput: a list of string values, with phone numbers formatted in a specific way.\nFunctionality: The transformation converts each phone number in the given sequence to a specific format (e.g., adding area code or changing separators) and outputs the result as a list.\nExample: Input: ['234-5678', '876-543-2109', '(111)222-3333', '876-5432', '999-1111']; output: ['425-234-5678', '876-543-2109', '111-222-3333', '425-876-5432', '425-999-1111']"}
{"id": "20-1", "oq_id": 20, "desc": "Input: a list of string values, with phone numbers in different formats.\nOutput: a list of string values, with phone numbers in a specific format (XXX-XXX-XXXX).\nFunctionality: The transformation extracts only the digits from each element in the given sequence and formats them as XXX-XXX-XXXX in the result list.\nExample: Input: ['1234567', '876-5432', '999-1111', '(333)4445555', '876-543-2109']; output: ['425-123-4567', '425-876-5432', '425-999-1111', '333-444-5555', '876-543-2109']"}
{"id": "20-0", "oq_id": 20, "desc": "Input: a list of string values, each containing a phone number in various formats.\nOutput: a list of string values, with phone numbers formatted in a specific pattern.\nFunctionality: The transformation standardizes the phone number format by adding the area code '425-' to the beginning of each phone number in the given sequence.\nExample: Input: ['555-1234', '987-654-3210', '(111)222-3333', '4445555', '8765432']; output: ['425-555-1234', '987-654-3210', '111-222-3333', '425-444-5555', '425-876-5432']"}
{"id": "20-4", "oq_id": 20, "desc": "Input: a list of string values, with phone number formats in each element.\nOutput: a list of string values, with phone numbers in a specific format.\nFunctionality: The transformation reformats each phone number in the given sequence to a specific format (###-###-####), and output the results as a list.\nExample: Input: ['5556667777', '123-456-7890', '8765432', '999-1111', '234-5678']; output: ['555-666-7777', '123-456-7890', '425-876-5432', '425-999-1111', '425-234-5678']"}
{"id": "20-5", "oq_id": 20, "desc": "Input: a list of string values, with phone numbers in different formats in each element.\nOutput: a list of string values in a specific phone number format.\nFunctionality: The transformation standardizes the phone numbers by removing special characters and adding the area code '425-' in front of the number, and output the result as a list.\nExample: Input: ['345-6789', '(222)-333-4444', '999-333-2222', '876-5432', '(444)5556666']; output: ['425-345-6789', '425-222-333-4444', '999-333-2222', '425-876-5432', '444-555-6666']"}
{"id": "20-7", "oq_id": 20, "desc": "Input: a list of string values, each containing a phone number in various formats.\nOutput: a list of string values, with phone numbers formatted in a specific way.\nFunctionality: The transformation converts each phone number in the given sequence to a specific format (e.g., adding a specific area code), and outputs the result as a list.\nExample: Input: ['456-7890', '876-543-2109', '(444)-555-6666', '999-1111', '234-5678']; output: ['425-456-7890', '876-543-2109', '444-555-6666', '425-999-1111', '425-234-5678']"}
{"id": "20-6", "oq_id": 20, "desc": "Input: a list of string values, each containing a phone number in various formats.\nOutput: a list of string values, with each phone number formatted in a specific way.\nFunctionality: The transformation removes any non-numeric characters and adds the area code '425-' to each phone number in the given sequence.\nExample: Input: ['555-4321', '(333)444-5555', '876-5432', '999-333-2222', '123-4567']; output: ['425-555-4321', '333-444-5555', '425-876-5432', '999-333-2222', '425-123-4567']"}
{"id": "21-8", "oq_id": 21, "desc": "Input: a list of string values, representing different fields in the fashion industry.\nOutput: a list of string values, representing the abbreviations for each field.\nFunctionality: The transformation extracts the first letters of each word in the given sequence and combines them to create an abbreviation for each field, outputting the result as a list.\nExample: Input: ['Fashion Design and Merchandising', 'Textile Production and Apparel Manufacturing', 'Fashion Marketing and Retail Management', 'Fashion History and Costume Design', 'Sustainable Fashion and Ethical Practices']; output: ['FDM', 'TPAM', 'FMRM', 'FHCD', 'SFEP']"}
{"id": "21-9", "oq_id": 21, "desc": "Input: a list of text strings.\nOutput: a list of abbreviated text strings.\nFunctionality: The transformation abbreviates each element in the given sequence by selecting the first letter of each word and concatenating them, then outputting the result as a list.\nExample: Input: ['Biomedical Engineering and Biomechanics', 'Medical Imaging and Diagnostic Technologies', 'Biomedical Device Design and Development', 'Tissue Engineering and Regenerative Medicine', 'Clinical Engineering and Healthcare Technology']; output: ['BEB', 'MIDT', 'BDDD', 'TERM', 'CEHT']"}
{"id": "21-1", "oq_id": 21, "desc": "Input: a list of string values, where each element represents a program or course title.\nOutput: a list of string values, where each element represents an abbreviation of the program or course title.\nFunctionality: The transformation abbreviates each program or course title by taking the first letter of each word in the title and concatenating them to form the abbreviation.\nExample: Input: ['Information Technology and Cyber Security', 'Network Administration and Security', 'Database Management and Design', 'Programming Fundamentals', 'Ethical Hacking and Penetration Testing']; output: ['ITCS', 'NAS', 'DMD', 'PF', 'EHPT']"}
{"id": "21-0", "oq_id": 21, "desc": "Input: a list of strings representing course names.\nOutput: a list of strings representing course abbreviations.\nFunctionality: The transformation extracts the relevant abbreviation from each course name in the given sequence and outputs the abbreviations as a list.\nExample: Input: ['Computer Science and Engineering Department', 'Introduction to Artificial Intelligence', 'Machine Learning and Data Mining', 'Web Development and Design', 'Software Engineering Principles']; output: ['CSED', 'IAI', 'MLDM', 'WDD', 'SEP']"}
{"id": "21-2", "oq_id": 21, "desc": "Input: a list of strings containing phrases.\nOutput: a list of strings representing abbreviations.\n\nFunctionality: The transformation extracts the first letters of each word in the given strings to create abbreviations, and output the result as a list.\nExample: Input: ['Digital Media Production and Design', 'Visual Communication and Graphic Design', 'Multimedia Programming and Development', 'Interactive Web Design', 'Animation and Motion Graphics']; output: ['DMPD', 'VCGD', 'MPD', 'IWD', 'AMG']"}
{"id": "21-3", "oq_id": 21, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation abbreviates each element in the given sequence using the first letters of each word, and output the abbreviated strings as a list.\nExample: Input: ['Business Administration and Management', 'Marketing Strategies and Consumer Behavior', 'Financial Accounting and Analysis', 'Human Resource Management Principles', 'Entrepreneurship and Innovation']; output: ['BAM', 'MSCB', 'FAA', 'HRMP', 'EI']"}
{"id": "21-7", "oq_id": 21, "desc": "Input: a list of string values, each representing a research field.\nOutput: a list of acronym values.\nFunctionality: The transformation extracts the acronym from each element in the given sequence, and formats each acronym as a string in the result list.\nExample: Input: ['Astronomy and Astrophysics Research', 'Cosmology and Dark Matter Studies', 'Planetary Science and Space Exploration', 'Observational Astronomy and Data Analysis', 'Astrobiology and Extraterrestrial Life']; output: ['AAR', 'CDMS', 'PSSE', 'OADA', 'AEL']"}
{"id": "21-6", "oq_id": 21, "desc": "Input: a list of strings containing academic program names.\nOutput: a list of abbreviations for each program name.\n\nFunctionality: The transformation creates abbreviations for each program name by taking the first letter of each word in the name and combining them, outputting the result as a list of abbreviations.\nExample: Input: ['Education Psychology and Learning Theories', 'Curriculum Development and Instructional Design', 'Child Development and Early Childhood Education', 'Educational Leadership and Administration', 'Special Education and Inclusive Practices']; output: ['EPLT', 'CDID', 'CDECE', 'ELA', 'SEIP']"}
{"id": "21-4", "oq_id": 21, "desc": "Input: a list of strings containing text descriptions.\nOutput: a list of corresponding abbreviated codes as strings.\n\nFunctionality: The transformation extracts the first letter of each word in the given sequence and concatenates them to form an abbreviation, outputting the result as a list of strings.\nExample: Input: ['Civil Engineering and Infrastructure Planning', 'Structural Analysis and Design', 'Transportation Engineering and Planning', 'Environmental Sustainability and Resource Management', 'Construction Management and Project Coordination']; output: ['CEIP', 'SAD', 'TEP', 'ESRM', 'CMPC']"}
{"id": "21-5", "oq_id": 21, "desc": "Input: a list of string values, each containing a full course name.\nOutput: a list of string values, each representing an abbreviation of the course name.\n\nFunctionality: The transformation extracts the first letter of each word in the course name, capitalizes it, and combines them to form an abbreviation for the course. The result is a list of abbreviated course names.\n\nExample: Input: ['Healthcare Administration and Policy Making', 'Health Information Management and Technology', 'Epidemiology and Public Health Management', 'Medical Ethics and Legal Issues', 'Healthcare Quality and Patient Safety']; output: ['HAPM', 'HIMT', 'EPHM', 'MELI', 'HQPS']"}
{"id": "22-9", "oq_id": 22, "desc": "Input: a list of string values containing quoted phrases.\nOutput: a list of string values without quotes and punctuation.\nFunctionality: The transformation removes quotes and punctuation from each element in the given sequence, and outputs the cleaned phrases as a list.\nExample: Input: ['\"I can\\'t believe my eyes!\",', '\"-incredible-\",', '\"...unimaginable!\",', '\"Astounding\",', '\"mind-blowing experience\"?']; output: [\"I can't believe my eyes\", 'incredible', 'unimaginable', 'Astounding', 'mindblowing experience']"}
{"id": "22-8", "oq_id": 22, "desc": "Input: a list of complex text values, containing quotes and punctuation.\nOutput: a list of text values without quotes and punctuation.\nFunctionality: The transformation removes quotes, punctuation, and extra characters from each element in the given sequence, resulting in a clean text list.\nExample: Input: ['\"Unbelievable performance!\",', '\"-unbelievable-\",', '\"...unreal!\",', '\"Impressive\",', '\"absolutely phenomenal\"?']; output: ['Unbelievable performance', 'unbelievable', 'unreal', 'Impressive', 'absolutely phenomenal']"}
{"id": "22-0", "oq_id": 22, "desc": "Input: a list of string values, containing phrases with punctuation.\nOutput: a list of string values, with punctuation removed.\nFunctionality: The transformation removes punctuation from each element in the given sequence and outputs the modified phrases in the result list.\nExample: Input: ['\"What a beautiful day!\",', '\"-amazing-\",', '\"...great!\",', '\"Awesome\",', '\"this is the best\"?']; output: ['What a beautiful day', 'amazing', 'great', 'Awesome', 'this is the best']"}
{"id": "22-1", "oq_id": 22, "desc": "Input: a list of complex text strings, each containing punctuation and quotation marks.\nOutput: a list of simplified text strings without punctuation and quotation marks.\nFunctionality: The transformation removes punctuation and quotation marks from each element in the given sequence, and outputs the simplified text strings.\nExample: Input: ['\"I love this place!\",', '\"-fantastic-\",', '\"...super!\",', '\"Incredible\",', '\"absolutely amazing\"?']; output: ['I love this place', 'fantastic', 'super', 'Incredible', 'absolutely amazing']"}
{"id": "22-3", "oq_id": 22, "desc": "Input: a list of string values with text enclosed in quotes.\nOutput: a list of string values without quotes and punctuations.\nFunctionality: The transformation removes quotes and punctuations from each element in the given sequence and outputs the result as a list.\nExample: Input: ['\"Such a lovely evening!\",', '\"-serene-\",', '\"...peaceful!\",', '\"Tranquil\",', '\"feeling calm\"?']; output: ['Such a lovely evening', 'serene', 'peaceful', 'Tranquil', 'feeling calm']"}
{"id": "22-2", "oq_id": 22, "desc": "Input: a list of string values with text enclosed in quotes.\nOutput: a list of string values without quotes and punctuations.\nFunctionality: The transformation removes quotes and punctuations from each element in the given sequence and outputs the result as a list.\nExample: Input: ['\"This is so much fun!\",', '\"-exciting-\",', '\"...wonderful!\",', '\"Fantastic\",', '\"having a blast\"?']; output: ['This is so much fun', 'exciting', 'wonderful', 'Fantastic', 'having a blast']"}
{"id": "22-6", "oq_id": 22, "desc": "Input: a list of string values with special characters and punctuation.\nOutput: a list of string values without special characters and punctuation.\nFunctionality: The transformation removes special characters and punctuations from each element in the given sequence and outputs the cleaned strings in the result list.\nExample: Input: ['\"This is beyond words!\",', '\"-remarkable-\",', '\"...extraordinary!\",', '\"Phenomenal\",', '\"speechless\"?']; output: ['This is beyond words', 'remarkable', 'extraordinary', 'Phenomenal', 'speechless']"}
{"id": "22-7", "oq_id": 22, "desc": "Input: a list of string values, with text containing special characters and punctuation.\nOutput: a list of cleaned string values without special characters and punctuation.\nFunctionality: The transformation removes special characters and punctuation from each element in the given sequence, and outputs the cleaned text as a list.\nExample: Input: ['\"No words can describe!\",', '\"-indescribable-\",', '\"...incomprehensible!\",', '\"Astonishing\",', '\"pure magic\"?']; output: ['No words can describe', 'indescribable', 'incomprehensible', 'Astonishing', 'pure magic']"}
{"id": "22-5", "oq_id": 22, "desc": "Input: a list of string values, each containing a phrase enclosed in double quotes.\nOutput: a list of string values.\nFunctionality: The transformation removes the double quotes and any punctuation from each element in the given sequence and outputs the cleaned phrases as strings in the result list.\nExample: Input: ['\"I am so impressed!\",', '\"-outstanding-\",', '\"...exceptional!\",', '\"Remarkable\",', '\"truly remarkable\"?']; output: ['I am so impressed', 'outstanding', 'exceptional', 'Remarkable', 'truly remarkable']"}
{"id": "22-4", "oq_id": 22, "desc": "Input: a list of string values, each containing punctuation marks and quotation marks.\nOutput: a list of string values with punctuation marks and quotation marks removed.\nFunctionality: The transformation removes all punctuation marks and quotation marks from each element in the given sequence.\nExample: Input: ['\"Wow, that was incredible!\",', '\"-mind-blowing-\",', '\"...unbelievable!\",', '\"Unreal\",', '\"absolutely astonishing\"?']; output: ['Wow that was incredible', 'mindblowing', 'unbelievable', 'Unreal', 'absolutely astonishing']"}
{"id": "23-9", "oq_id": 23, "desc": "Input: a list of string values, each containing a phrase enclosed in double quotes.\nOutput: a list of string values, each containing the phrase without the double quotes.\nFunctionality: The transformation removes the double quotes from each element in the given sequence and outputs the phrases as strings.\nExample: Input: ['\"Find your passion\"', '\"Follow your dreams\"', '\"Believe in yourself\"', '\"You are capable\"', '\"Achieve greatness\"']; output: ['Find your passion', 'Follow your dreams', 'Believe in yourself', 'You are capable', 'Achieve greatness']"}
{"id": "23-8", "oq_id": 23, "desc": "Input: a list of string values, with quotes around each element.\nOutput: a list of string values, without quotes.\nFunctionality: The transformation removes the quotes from each element in the given sequence and outputs the result as a new list.\nExample: Input: ['\"Learning never stops\"', '\"Embrace growth\"', '\"Challenge yourself\"', '\"Seek knowledge\"', '\"Focus on progress\"']; output: ['Learning never stops', 'Embrace growth', 'Challenge yourself', 'Seek knowledge', 'Focus on progress']"}
{"id": "23-3", "oq_id": 23, "desc": "Input: a list of string values, each containing a phrase enclosed in double quotes.\nOutput: a list of string values, each containing the phrase without the double quotes.\nFunctionality: The transformation removes the double quotes from each element in the given sequence and outputs the phrases as strings.\nExample: Input: ['\"Feeling tired\"', '\"Need a break\"', '\"Get some rest\"', '\"Take it easy\"', '\"Relax and unwind\"']; output: ['Feeling tired', 'Need a break', 'Get some rest', 'Take it easy', 'Relax and unwind']"}
{"id": "23-2", "oq_id": 23, "desc": "Input: a list of string values, with phrases enclosed in double quotes.\nOutput: a list of string values.\nFunctionality: The transformation removes the double quotes from each element in the given sequence and outputs the modified phrases in the result list.\nExample: Input: ['\"I love coding\"', '\"Python is great\"', '\"Trying something new\"', '\"Keep it up\"', '\"Never give up\"']; output: ['I love coding', 'Python is great', 'Trying something new', 'Keep it up', 'Never give up']"}
{"id": "23-0", "oq_id": 23, "desc": "Input: a list of string values, with text enclosed in double quotes in each element.\nOutput: a list of string values without double quotes.\nFunctionality: The transformation removes the double quotes from each element in the given sequence and outputs the modified strings in a list.\nExample: Input: ['\"I am here\"', '\"Great job!\"', '\"Hey there!\"', '\"Almost done\"', '\"keep going\"']; output: ['I am here', 'Great job!', 'Hey there!', 'Almost done', 'keep going']"}
{"id": "23-1", "oq_id": 23, "desc": "Input: a list of string values containing text enclosed in double quotes.\nOutput: a list of string values with the quotes removed.\nFunctionality: The transformation removes the double quotes from each element in the given sequence and outputs the resulting strings in a list.\nExample: Input: ['\"What is your name?\"', '\"How are you?\"', '\"Good morning\"', '\"Long time no see\"', '\"Nice to meet you\"']; output: ['What is your name?', 'How are you?', 'Good morning', 'Long time no see', 'Nice to meet you']"}
{"id": "23-5", "oq_id": 23, "desc": "Input: a list of string values, each containing a phrase enclosed in double quotes.\nOutput: a list of string values, each containing the phrase without the double quotes.\nFunctionality: The transformation removes the double quotes from each element in the given sequence and outputs the phrases as strings.\nExample: Input: ['\"Happiness is key\"', '\"Spread positivity\"', '\"Enjoy the little things\"', '\"Be kind always\"', '\"Smile more\"']; output: ['Happiness is key', 'Spread positivity', 'Enjoy the little things', 'Be kind always', 'Smile more']"}
{"id": "23-4", "oq_id": 23, "desc": "Input: a list of string values containing text phrases.\nOutput: a list of string values containing text phrases.\n\nFunctionality: The transformation removes the double quotes from each element in the given sequence and outputs the modified text phrases in the result list.\nExample: Input: ['\"Ready for the challenge?\"', '\"Bring it on!\"', '\"Let\\'s do this!\"', '\"You got this\"', '\"No fear\"']; output: ['Ready for the challenge?', 'Bring it on!', \"Let's do this!\", 'You got this', 'No fear']"}
{"id": "23-6", "oq_id": 23, "desc": "Input: a list of string values containing quotes.\nOutput: a list of string values without quotes.\nFunctionality: The transformation removes the quotes from each element in the given sequence and outputs the result as a list.\nExample: Input: ['\"Life is a journey\"', '\"Every day is a new opportunity\"', '\"Make the most of it\"', '\"Live in the moment\"', '\"Dream big\"']; output: ['Life is a journey', 'Every day is a new opportunity', 'Make the most of it', 'Live in the moment', 'Dream big']"}
{"id": "23-7", "oq_id": 23, "desc": "Input: a list of string values with quotes.\nOutput: a list of string values without quotes.\nFunctionality: The transformation removes the quotes from each element in the given sequence and outputs the modified strings in a list.\nExample: Input: ['\"Work hard, play hard\"', '\"Balance is important\"', '\"Take care of yourself\"', '\"Stay motivated\"', '\"Keep pushing forward\"']; output: ['Work hard, play hard', 'Balance is important', 'Take care of yourself', 'Stay motivated', 'Keep pushing forward']"}
{"id": "24-9", "oq_id": 24, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation keeps each element in the given sequence unchanged and outputs the same sequence.\nExample: Input: ['apple', 'banana', 'cherry', 'date']; output: ['apple', 'banana', 'cherry', 'date']"}
{"id": "24-8", "oq_id": 24, "desc": "Input: a list of strings, each containing space-separated numerical values.\nOutput: a list of strings, each containing space-separated numerical values.\n\nFunctionality: The transformation keeps the structure of the input list but does not change the content. It outputs the same strings but maintains them as separate elements in the list.\n\nExample: Input: ['1 2 3 4', '5 6 7 8', '9 10 11 12']; output: ['1 2 3 4', '5 6 7 8', '9 10 11 12']"}
{"id": "24-6", "oq_id": 24, "desc": "Input: a list of string values, with words separated by multiple spaces in each element.\nOutput: a list of string values, with words separated by a single space in each element.\nFunctionality: The transformation removes extra spaces between words in each element of the given sequence and outputs the result as a list.\nExample: Input: ['cat dog', 'bird fish', 'rabbit turtle']; output: ['cat dog', 'bird fish', 'rabbit turtle']"}
{"id": "24-7", "oq_id": 24, "desc": "Input: a list of string values containing whitespace.\nOutput: a list of string values without leading or trailing whitespace.\nFunctionality: The transformation removes leading and trailing whitespace from each element in the given sequence and outputs the cleaned strings.\nExample: Input: ['  red   ', '  blue  ', '  green  ']; output: ['red', 'blue', 'green']"}
{"id": "24-5", "oq_id": 24, "desc": "Input: a list of string values, where each element contains spaces.\nOutput: a list of string values, where spaces within elements are reduced to a single space.\nFunctionality: The transformation removes extra spaces within each element of the given sequence and outputs the cleaned strings in a new list.\nExample: Input: ['a   b', 'c    d', 'e     f', 'g      h']; output: ['a b', 'c d', 'e f', 'g h']"}
{"id": "24-4", "oq_id": 24, "desc": "Input: a list of string values containing whitespace.\nOutput: a list of string values without leading or trailing whitespace.\nFunctionality: The transformation removes leading and trailing whitespace from each element in the given sequence and outputs the cleaned strings.\nExample: Input: ['  hello  ', '  world  ', '  python  ']; output: ['hello', 'world', 'python']"}
{"id": "24-0", "oq_id": 24, "desc": "Input: a list of string values, where each element consists of multiple words separated by spaces.\nOutput: a list of string values, with spaces removed between the words in each element.\nFunctionality: The transformation removes spaces between words in each element of the given sequence and outputs the result as a list.\nExample: Input: ['x y z', 'p q r', 'a b c']; output: ['x y z', 'p q r', 'a b c']"}
{"id": "24-1", "oq_id": 24, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation does not change the elements of the given sequence, outputting the sequence as it is.\nExample: Input: ['a', 'b', 'c', 'd', 'e']; output: ['a', 'b', 'c', 'd', 'e']"}
{"id": "24-3", "oq_id": 24, "desc": "Input: a list of string values with spaces between words.\nOutput: a list of string values with no extra spaces between words.\nFunctionality: The transformation removes extra spaces between words in each element of the given sequence and outputs the modified sequence as a list.\nExample: Input: ['apple  banana', 'orange     mango', 'grape   pineapple']; output: ['apple banana', 'orange mango', 'grape pineapple']"}
{"id": "24-2", "oq_id": 24, "desc": "Input: a list of string values, with numerical values separated by spaces in each element.\nOutput: a list of string values, with numerical values grouped by spaces in each element.\nFunctionality: The transformation removes extra spaces from each element in the given sequence and formats each element to have numerical values grouped by spaces in the result list.\nExample: Input: ['  1 2 3  ', '  4 5 6   ', '   7 8 9  ']; output: ['1 2 3', '4 5 6', '7 8 9']"}
{"id": "25-9", "oq_id": 25, "desc": "Input: a list of string values, each containing a comma-separated list of items.\nOutput: a list of string values, each representing the last item in the comma-separated list from the input.\nFunctionality: The transformation extracts the last item from each comma-separated list in the given sequence and outputs it in the result list.\nExample: Input: ['black, white, gray', 'book, pen, paper', 'Monday, Thursday, Saturday', 'cat, dog, bird, rabbit']; output: ['gray', 'paper', 'Saturday', 'rabbit']"}
{"id": "25-8", "oq_id": 25, "desc": "Input: a list of string values, each containing multiple words separated by commas.\nOutput: a list of string values.\nFunctionality: The transformation extracts the last word from each element in the given sequence, and outputs it as a list of strings.\nExample: Input: ['happy, sad, angry', 'London, Paris, New York', 'pen, pencil, eraser', 'flower, tree, grass']; output: ['angry', 'New York', 'eraser', 'grass']"}
{"id": "25-5", "oq_id": 25, "desc": "Input: a list of string values, each containing multiple words separated by commas.\nOutput: a list of string values.\nFunctionality: The transformation extracts the last word from each element in the given sequence, and outputs it in the result list.\nExample: Input: ['rain, snow, sunshine', 'January, February, March, April', 'piano, guitar, violin', 'apple, orange, banana']; output: ['sunshine', 'April', 'violin', 'banana']"}
{"id": "25-4", "oq_id": 25, "desc": "Input: a list of strings, each containing a sequence of items separated by commas.\nOutput: a list of strings, each representing one item from the original sequences.\nFunctionality: The transformation extracts the last item from each comma-separated sequence in the given list and outputs them as individual strings in the result list.\nExample: Input: ['10, 20, 30, 40, 50', 'x, y, z, a, b, c', 'red, green, blue', 'cat, rabbit, dog']; output: ['50', 'c', 'blue', 'dog']"}
{"id": "25-6", "oq_id": 25, "desc": "Input: a list of string values, each containing multiple words separated by commas.\nOutput: a list of string values.\nFunctionality: The transformation extracts the last word from each element in the given sequence and outputs it in the result list.\nExample: Input: ['yellow, orange, red', 'bike, car, bus', 'Monday, Tuesday, Wednesday, Thursday', 'cat, dog, bird']; output: ['red', 'bus', 'Thursday', 'bird']"}
{"id": "25-7", "oq_id": 25, "desc": "Input: a list of string values, with comma-separated items in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the last item from each comma-separated list in the given sequence and outputs them in a new list.\nExample: Input: ['apple, orange, banana, pear', 'sun, moon, stars, sky', '1, 2, 3, 4, 5, 6', 'dog, cat, rabbit']; output: ['pear', 'sky', '6', 'rabbit']"}
{"id": "25-3", "oq_id": 25, "desc": "Input: a list of strings, each containing multiple words separated by commas.\nOutput: a list of strings.\n\nFunctionality: The transformation extracts the last word from each element in the given sequence and outputs it in a new list.\n\nExample: Input: ['happy, sad, excited', 'summer, winter, fall', 'chocolate, vanilla, strawberry', 'pen, pencil, paper']; output: ['excited', 'fall', 'strawberry', 'paper']"}
{"id": "25-2", "oq_id": 25, "desc": "Input: a list of string values, with various elements containing multiple values separated by commas.\nOutput: a list of string values containing specific elements extracted from each element in the input list.\nFunctionality: The transformation extracts the last element from each comma-separated list in the input sequence and outputs them as strings in the result list.\nExample: Input: ['1, 2, 3, 4, 5', 'a, b, c', 'x, y, z', 'cat, dog']; output: ['5', 'c', 'z', 'dog']"}
{"id": "25-0", "oq_id": 25, "desc": "Input: a list of strings containing multiple words.\nOutput: a list of strings representing single words.\nFunctionality: The transformation extracts the last word from each element in the given sequence and outputs a list of these words.\nExample: Input: ['red, blue, green, yellow', 'apple, banana, orange', 'sun, moon, stars', 'cat, dog']; output: ['yellow', 'orange', 'stars', 'dog']"}
{"id": "25-1", "oq_id": 25, "desc": "Input: a list of string values, each containing a comma-separated list of items.\nOutput: a list of string values, each representing one of the items from the original sequence.\nFunctionality: The transformation extracts the last item from each comma-separated list in the given sequence and outputs it as a separate list of strings.\nExample: Input: ['Monday, Tuesday, Wednesday', 'January, February, March', 'Paris, London, New York', 'apple, orange, banana']; output: ['Wednesday', 'March', 'New York', 'banana']"}
{"id": "26-8", "oq_id": 26, "desc": "Input: a list of complex text values containing nested lists.\nOutput: a list of strings representing specific meal items.\n\nFunctionality: The transformation extracts the specific meal items from each nested list in the given sequence and outputs them as individual strings in the result list.\n\nExample: Input: ['{{breakfast, lunch, dinner}, {snack, dessert}}', '{{beverage, appetizer}, {soup, salad}}']; output: ['dinner', 'appetizer']"}
{"id": "26-9", "oq_id": 26, "desc": "Input: a list of complex text values containing nested lists.\nOutput: a list of specific values extracted from the input text values.\nFunctionality: The transformation extracts the specific sport mentioned in each element of the given sequence and outputs those sports as a list.\nExample: Input: ['{{football, basketball}, {soccer, baseball}}', '{{tennis, golf}, {volleyball, hockey}}']; output: ['basketball', 'golf']"}
{"id": "26-4", "oq_id": 26, "desc": "Input: a list of complex text values containing nested sets of animals.\nOutput: a list of single animal names.\nFunctionality: The transformation extracts the specified animal names from each element in the given sequence and outputs them as a list of strings.\nExample: Input: ['{{cat, dog, rabbit}, {hamster, guinea pig}}', '{{parrot, canary}, {goldfish, turtle}}']; output: ['rabbit', 'canary']"}
{"id": "26-5", "oq_id": 26, "desc": "Input: a list of complex text values where months are nested in curly braces.\nOutput: a list of specific month values extracted from the nested structures.\nFunctionality: The transformation extracts the specific months mentioned in the given sequence and outputs them as individual elements in a list.\nExample: Input: ['{{January, February}, {March, April}}', '{{May, June}, {July, August}}']; output: ['February', 'June']"}
{"id": "26-7", "oq_id": 26, "desc": "Input: a list of complex text values containing nested lists.\nOutput: a list of specific values extracted from the input text.\nFunctionality: The transformation extracts specific values (e.g., 'afternoon', 'dawn') from each element in the given sequence, and output the extracted values as a list.\nExample: Input: ['{{morning, afternoon}, {evening, night}}', '{{midnight, dawn}, {dusk, dawn}}']; output: ['afternoon', 'dawn']"}
{"id": "26-6", "oq_id": 26, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specific day mentioned in each element of the given sequence, and outputs those days as strings in the result list.\nExample: Input: ['{{Monday, Tuesday}, {Wednesday, Thursday}}', '{{Friday, Saturday}, {Sunday}}']; output: ['Tuesday', 'Saturday']"}
{"id": "26-2", "oq_id": 26, "desc": "Input: a list of complex text values (nested lists).\nOutput: a list of string values.\nFunctionality: The transformation extracts the specified element from each nested list in the given sequence, and outputs those elements as a list of strings.\nExample: Input: ['{{red, blue}, {green, yellow}, {purple, orange}}', '{{black, white}, {gray, brown}}']; output: ['yellow', 'white']"}
{"id": "26-3", "oq_id": 26, "desc": "Input: a list of complex text structures containing nested lists.\nOutput: a list of specific elements extracted from the text structures.\nFunctionality: The transformation retrieves the specified elements ('banana' and 'strawberry') from each complex text structure and outputs them in a list format.\nExample: Input: ['{{apple, banana}, {orange, grape}}', '{{kiwi, strawberry}, {watermelon, peach}}']; output: ['banana', 'strawberry']"}
{"id": "26-1", "oq_id": 26, "desc": "Input: a list of complex text values containing numerical values in a specific format.\nOutput: a list of numerical values as strings.\nFunctionality: The transformation involves extracting the second number from each element in the given sequence, converting it to a string, and storing it in the output list.\nExample: Input: ['{{1, 2}, {3, 4}}', '{{5, 6}, {7, 8}}', '{{9, 10}, {11, 12}}']; output: ['2', '6', '10']"}
{"id": "26-0", "oq_id": 26, "desc": "Input: a list of complex text extraction operations with multiple nested levels.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specified elements (y, c) from the nested structures in each element and outputs them as a list.\nExample: Input: ['{{x, y}, {z, a}}', '{{b, c}, {d, e}}']; output: ['y', 'c']"}
{"id": "27-8", "oq_id": 27, "desc": "Input: a list of string values containing alphanumeric characters separated by underscores.\nOutput: a list of string values.\nFunctionality: The transformation extracts the numeric part before the first underscore from each element in the given sequence and outputs it as a string in the result list.\nExample: Input: ['987_654_321_abcxyz']; output: ['987']"}
{"id": "27-9", "oq_id": 27, "desc": "Input: a list of string values, with a single string containing alphanumeric characters separated by underscores.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first four characters from the single element in the given sequence, and outputs it as a list.\nExample: Input: ['qwe_rty_uio_098iop']; output: ['qwio']"}
{"id": "27-7", "oq_id": 27, "desc": "Input: a list of string values, with a specific pattern of characters and numbers in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specific characters 'zxlk' from each element in the given sequence and outputs them in a list.\nExample: Input: ['zxc_vbn_mlk_912cpt']; output: ['zxlk']"}
{"id": "27-6", "oq_id": 27, "desc": "Input: a list of string values, with a mix of alphabetic characters and numbers in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first four characters from each element in the given sequence, and output the result as a list.\nExample: Input: ['poi_uio_yui_837bnn']; output: ['poui']"}
{"id": "27-4", "oq_id": 27, "desc": "Input: a list of strings containing letters, underscores, and numbers.\nOutput: a list of strings composed of specific letters from the input strings.\nFunctionality: The transformation extracts specific letters ('h', 'j', 'p', 'q') from the input strings and forms a new string with those letters in the output list.\nExample: Input: ['hjk_lmn_opq_765fgh']; output: ['hjpq']"}
{"id": "27-5", "oq_id": 27, "desc": "Input: a list of string values containing alphanumeric characters.\nOutput: a list of string values.\n\nFunctionality: The transformation extracts the alphanumeric characters from each element in the given sequence and outputs them as a list of strings.\n\nExample: Input: ['asd_fgh_jkl_432bob']; output: ['askl']"}
{"id": "27-1", "oq_id": 27, "desc": "Input: a list of string values, with alphanumeric characters separated by underscores.\nOutput: a list of string values.\nFunctionality: The transformation removes underscores and numbers from each element in the given sequence, and concatenates the remaining characters to form the result list.\nExample: Input: ['abc_def_xyz_123xyz']; output: ['abyz']"}
{"id": "27-0", "oq_id": 27, "desc": "Input: a list of string values, each containing a combination of characters and numbers.\nOutput: a list of string values.\nFunctionality: The transformation extracts specific characters ('klrs') from the given sequence and outputs them as elements in a new list.\nExample: Input: ['klm_nop_qrs_098lkd']; output: ['klrs']"}
{"id": "27-2", "oq_id": 27, "desc": "Input: a list of string values containing alphanumeric characters separated by underscores.\nOutput: a list of string values.\nFunctionality: The transformation extracts the numeric characters from the given sequence, removes underscores, and outputs the resulting numbers as strings in a list.\nExample: Input: ['123_456_789_abcxyz']; output: ['1289']"}
{"id": "27-3", "oq_id": 27, "desc": "Input: a list of string values, with a single string containing alphanumeric characters separated by underscores.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first four characters from the single element in the given sequence, and outputs those characters as a string in the result list.\nExample: Input: ['qwe_rty_uio_908ijh']; output: ['qwio']"}
{"id": "28-2", "oq_id": 28, "desc": "Input: a list of string values, where each element consists of numerical values.\nOutput: a list of string values with a specific format.\nFunctionality: The transformation formats each element in the given sequence by inserting dashes at specific positions, and outputs the result as a list.\nExample: Input: ['1234123412', '8765876587', '3210321032', '5553555355', '9999999999']; output: ['123-412-3412', '876-587-6587', '321-032-1032', '555-355-5355', '999-999-9999']"}
{"id": "28-3", "oq_id": 28, "desc": "Input: a list of string values, where each element consists of numerical values.\nOutput: a list of string values with a specific format.\nFunctionality: The transformation formats each element in the given sequence by adding dashes after every 3rd and 6th character.\nExample: Input: ['1111222233', '4444555566', '7777888899', '0000111122', '3333444455']; output: ['111-122-2233', '444-455-5566', '777-788-8899', '000-011-1122', '333-344-4455']"}
{"id": "28-1", "oq_id": 28, "desc": "Input: a list of string values, where each element represents a phone number in a specific format.\nOutput: a list of string values, with phone numbers formatted in a different way.\nFunctionality: The transformation changes the format of each phone number from the given sequence by adding dashes after the third and sixth digits, and outputs the reformatted phone numbers as a list.\nExample: Input: ['4444444444', '7777777777', '2222222222', '8888888888', '6666666666']; output: ['444-444-4444', '777-777-7777', '222-222-2222', '888-888-8888', '666-666-6666']"}
{"id": "28-0", "oq_id": 28, "desc": "Input: a list of string values, where each element consists of a 10-digit phone number.\nOutput: a list of string values, with each phone number formatted with dashes.\nFunctionality: The transformation adds dashes in the appropriate positions to format each phone number in the given sequence.\nExample: Input: ['9876543210', '5555555555', '1234567890', '8765432109', '9998887776']; output: ['987-654-3210', '555-555-5555', '123-456-7890', '876-543-2109', '999-888-7776']"}
{"id": "28-4", "oq_id": 28, "desc": "Input: a list of string values, where each element is a numerical string.\nOutput: a list of string values with a specific format.\nFunctionality: The transformation formats each numeric string in the input sequence into a specific pattern (###-###-####) in the output list.\nExample: Input: ['9876123456', '5432890123', '3218749302', '7564219876', '1234995678']; output: ['987-612-3456', '543-289-0123', '321-874-9302', '756-421-9876', '123-499-5678']"}
{"id": "28-5", "oq_id": 28, "desc": "Input: a list of string values, where each element consists of a numerical string.\nOutput: a list of string values, with each numerical string formatted in a specific pattern.\nFunctionality: The transformation formats each numerical string in the given sequence by adding hyphens at specific positions.\nExample: Input: ['7890123456', '6549873210', '1472583690', '9638527410', '7539514862']; output: ['789-012-3456', '654-987-3210', '147-258-3690', '963-852-7410', '753-951-4862']"}
{"id": "28-7", "oq_id": 28, "desc": "Input: a list of string values, where each element consists of numerical values.\nOutput: a list of string values with a specific format.\nFunctionality: The transformation formats each element in the given sequence by adding \"-\" after every 3rd and 6th character.\nExample: Input: ['4444111144', '2999222229', '8888777788', '5555666677', '3333444499']; output: ['444-411-1144', '299-922-2229', '888-877-7788', '555-566-6677', '333-344-4499']"}
{"id": "28-6", "oq_id": 28, "desc": "Input: a list of string values, where each element consists of numerical values.\nOutput: a list of string values with a specific format.\nFunctionality: The transformation formats each element in the given sequence by adding dashes after every 3rd and 6th character.\nExample: Input: ['3303320332', '2211215210', '5536654433', '8579642152', '6874224969']; output: ['330-332-0332', '221-121-5210', '553-665-4433', '857-964-2152', '687-422-4969']"}
{"id": "28-8", "oq_id": 28, "desc": "Input: a list of string values, where each element consists of a string of numerical characters.\nOutput: a list of string values, where each element follows a specific pattern of dividing the numbers with dashes.\nFunctionality: The transformation formats each element from the given sequence by inserting dashes after the third, sixth, and ninth character, and output the result as a list.\nExample: Input: ['7777777777', '8888888888', '9999999999', '1111111111', '2222222222']; output: ['777-777-7777', '888-888-8888', '999-999-9999', '111-111-1111', '222-222-2222']"}
{"id": "28-9", "oq_id": 28, "desc": "Input: a list of string values, each representing a phone number without formatting.\nOutput: a list of string values, each representing a phone number with formatting.\nFunctionality: The transformation adds dashes to separate the numbers in each element of the given sequence and outputs the result as a list.\nExample: Input: ['1234432156', '0987867856', '4567809873', '8765455678', '9086748900']; output: ['123-443-2156', '098-786-7856', '456-780-9873', '876-545-5678', '908-674-8900']"}
{"id": "29-1", "oq_id": 29, "desc": "Input: a list of string values with a tab-separated format.\nOutput: a list of string values with specific formatting.\nFunctionality: The transformation extracts the first letter of each word in the given sequence, capitalizes them, and concatenates them with the last name in the sequence, omitting spaces and tabs.\nExample: Input: ['david\\tharris', 'sara\\tparker', 'michael\\tbrown', 'lisa\\tmiller', 'steve\\troberts']; output: ['DHarris', 'SParker', 'MBrown', 'LMiller', 'SRoberts']"}
{"id": "29-0", "oq_id": 29, "desc": "Input: a list of string values, each containing a first name and a last name separated by a tab character.\nOutput: a list of string values, with the first initial of the first name concatenated with the last name in uppercase.\nFunctionality: The transformation extracts the first initial and last name from each element in the given sequence, formats them, and constructs the result list.\nExample: Input: ['john\\tdoe', 'mary\\twilliams', 'peter\\tjackson', 'susan\\tsmith']; output: ['JDoe', 'MWilliams', 'PJackson', 'SSmith']"}
{"id": "29-2", "oq_id": 29, "desc": "Input: a list of string values, with a first name and last name separated by a tab (\\t) in each element.\nOutput: a list of string values, formatted as InitialFirstNameLastName.\nFunctionality: The transformation extracts the first letter of the first name, capitalizes it, combines it with the full last name in uppercase, and outputs the result as a list.\nExample: Input: ['emily\\tthomas', 'george\\tsanchez', 'olivia\\tmartinez', 'edward\\twilson']; output: ['EThomas', 'GSanchez', 'OMartinez', 'EWilson']"}
{"id": "29-3", "oq_id": 29, "desc": "Input: a list of string values, with tab-separated first and last name.\nOutput: a list of concatenated string values in the format of uppercase initial of first name followed by full last name.\nFunctionality: The transformation splits each element in the given sequence by tab, extracts the first initial and last name, then concatenates them in uppercase format in the output list.\nExample: Input: ['grace\\tclark', 'adam\\trodriguez', 'natalie\\thughes', 'ryan\\tscott', 'victoria\\tbaker']; output: ['GClark', 'ARodriguez', 'NHughes', 'RScott', 'VBaker']"}
{"id": "29-7", "oq_id": 29, "desc": "Input: a list of string values, where each element consists of a first name and last name separated by a tab (\\t).\nOutput: a list of string values, where each element consists of the first initial of the first name followed by the full last name in uppercase.\nFunctionality: The transformation extracts the first initial of the first name and combines it with the full last name in uppercase for each element in the given sequence.\nExample: Input: ['patrick\\twilliams', 'linda\\tthompson', 'jordan\\tmiller', 'janet\\tsmith']; output: ['PWilliams', 'LThompson', 'JMiller', 'JSmith']"}
{"id": "29-6", "oq_id": 29, "desc": "Input: a list of string values, with names separated by a tab character.\nOutput: a list of string values with first letter of each name capitalized and concatenated without spaces.\nFunctionality: The transformation capitalizes the first letter of each name, removes any spaces or special characters, and concatenates the names together.\nExample: Input: ['carol\\twhite', 'jason\\tmurray', 'amy\\tanderson', 'kevin\\tcook', 'sophia\\tjameson']; output: ['CWhite', 'JMurray', 'AAnderson', 'KCook', 'SJameson']"}
{"id": "29-4", "oq_id": 29, "desc": "Input: a list of string values, each containing a first name and last name separated by a tab character.\nOutput: a list of string values representing the first letter of the first name in uppercase and the last name in uppercase, concatenated without space.\nFunctionality: The transformation extracts the first letter of the first name in uppercase and the last name in uppercase, then concatenates them together without any space, and outputs the result as a list.\nExample: Input: ['nathan\\tgarcia', 'michelle\\tlopez', 'chris\\tperez', 'lauren\\tdavis', 'samuel\\tcollins']; output: ['NGarcia', 'MLopez', 'CPerez', 'LDavis', 'SCollins']"}
{"id": "29-5", "oq_id": 29, "desc": "Input: a list of string values, where each element consists of two words separated by a tab character.\nOutput: a list of string values, with the first letter of each word capitalized and joined together without any spaces.\nFunctionality: The transformation capitalizes the first letter of each word in the given sequence, removes the tab character, and joins the words together to form a new string in the result list.\nExample: Input: ['laura\\tbell', 'jacob\\trock', 'katie\\tclarkson', 'brandon\\tkelly']; output: ['LBell', 'JRock', 'KClarkson', 'BKelly']"}
{"id": "29-8", "oq_id": 29, "desc": "Input: a list of string values, with names separated by a tab character.\nOutput: a list of string values.\nFunctionality: The transformation capitalizes the first letter of each name, removes the tab character, and combines the first letter with the last name to create a new name in the result list.\nExample: Input: ['jared\\tandrews', 'rebecca\\tphillips', 'stephen\\tdavies', 'penny\\trogers']; output: ['JAndrews', 'RPhillips', 'SDavies', 'PRogers']"}
{"id": "29-9", "oq_id": 29, "desc": "Input: a list of string values, with first name and last name separated by a tab.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first letter of the first name and combines it with the last name in uppercase, removing the tab.\nExample: Input: ['greg\\tbennett', 'maria\\tgonzalez', 'luke\\tsimmons', 'diana\\tbrown', 'jill\\tlawrence']; output: ['GBennett', 'MGonzalez', 'LSimmons', 'DBrown', 'JLawrence']"}
{"id": "30-0", "oq_id": 30, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the text within double square brackets from each element in the given sequence and formats it as a string in the result list.\nExample: Input: [\"* '''1960 [[Waheeda Rehman]] \\x96 ''[[Kala Bazar]]''''' as '''Alka'''\"]; output: ['kala bazar']"}
{"id": "30-1", "oq_id": 30, "desc": "Input: a list of complex text values containing special characters, links, and annotations.\nOutput: a list of text values.\nFunctionality: The transformation extracts the text inside double quotes and removes special characters, links, and annotations from each element in the given sequence, converting all text to lowercase in the result list.\nExample: Input: [\"* '''1961 [[Meena Kumari]] \\x96 ''[[Main Chup Rahungi]]''''' as '''Mala'''\"]; output: ['main chup rahungi']"}
{"id": "30-3", "oq_id": 30, "desc": "Input: a list of complex text strings.\nOutput: a list of simple text strings.\nFunctionality: The transformation extracts a specific substring from each element in the given sequence and outputs those substrings as a list of simple text strings.\nExample: Input: [\"* '''1963 [[Nutan]] \\x96 ''[[Tere Ghar Ke Samne]]''''' as '''Sulekha Chaturvedi'''\"]; output: ['tere ghar ke samne']"}
{"id": "30-2", "oq_id": 30, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the text within double quotes from each element in the given sequence, and converts it to lowercase in the result list.\nExample: Input: [\"* '''1962 [[Vyjayanthimala]] \\x96 ''[[Ganga Jamuna]]''''' as '''Ganga'''\"]; output: ['ganga jamuna']"}
{"id": "30-6", "oq_id": 30, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the text within double quotes from each element in the given sequence, and converts it to lowercase in the result list.\nExample: Input: [\"* '''1966 [[Sharmila Tagore]] \\x96 ''[[An Evening in Paris]]''''' as '''Deepa Malik'''\"]; output: ['an evening in paris']"}
{"id": "30-7", "oq_id": 30, "desc": "Input: a list of complex text strings.\nOutput: a list of simplified text strings.\nFunctionality: The transformation extracts the simplified text content enclosed in double quotes and removes special characters like ''' and [[]] from each element in the given sequence, and output the result as a list.\nExample: Input: [\"* '''1967 [[Hema Malini]] \\x96 ''[[Sapno Ka Saudagar]]''''' as '''Sapna'''\"]; output: ['sapno ka saudagar']"}
{"id": "30-5", "oq_id": 30, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\n\nFunctionality: The transformation extracts the word 'junglee' from the given sequence, and outputs it as a list containing only that word.\n\nExample: Input: [\"* '''1965 [[Saira Banu]] \\x96 ''[[Junglee (1961 film)|Junglee]]''''' as '''Rajkumari'''\"]; output: ['junglee']"}
{"id": "30-4", "oq_id": 30, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the text within double square brackets ([[ ]]) from each element in the given sequence, formats it as a string, and outputs it in the result list.\nExample: Input: [\"* '''1964 [[Nargis Dutt]] \\x96 ''[[Raat Aur Din]]''''' as '''Varuna'''\"]; output: ['raat aur din']"}
{"id": "30-9", "oq_id": 30, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the word 'guddi' from the given sequence and outputs it as a list with lowercase formatting.\nExample: Input: [\"* '''1969 [[Jaya Bachchan]] \\x96 ''[[Guddi (1971 film)|Guddi]]''''' as '''Guddi Kapoor'''\"]; output: ['guddi']"}
{"id": "30-8", "oq_id": 30, "desc": "Input: a list of complex text extraction operations.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specified text 'mahaan' from the given sequence, and outputs it as a string in the result list.\nExample: Input: [\"* '''1968 [[Madhubala]] \\x96 ''[[Mahaan]]''''' as '''Anju Kapoor'''\"]; output: ['mahaan']"}
{"id": "31-3", "oq_id": 31, "desc": "Input: a list of strings in JSON format.\nOutput: a list of strings representing numerical values extracted from the JSON strings.\nFunctionality: The transformation extracts the value of the \"useful\" key from each JSON string in the given sequence, and outputs those values as a list of strings.\nExample: Input: ['{\"funny\": 0, \"useful\": 4, \"cool\": 1}', '{\"funny\": 1, \"useful\": 3, \"cool\": 2}', '{\"funny\": 0, \"useful\": 2, \"cool\": 0}', '{\"funny\": 2, \"useful\": 1, \"cool\": 1}', '{\"funny\": 1, \"useful\": 5, \"cool\": 3}']; output: ['4', '3', '2', '1', '5']"}
{"id": "31-2", "oq_id": 31, "desc": "Input: a list of strings in JSON format.\nOutput: a list of strings representing numerical values.\nFunctionality: The transformation extracts the value associated with the key \"useful\" from each JSON string in the given sequence, and outputs those values as strings in the result list.\nExample: Input: ['{\"funny\": 2, \"useful\": 3, \"cool\": 1}', '{\"funny\": 1, \"useful\": 0, \"cool\": 2}', '{\"funny\": 0, \"useful\": 5, \"cool\": 1}', '{\"funny\": 3, \"useful\": 4, \"cool\": 0}', '{\"funny\": 1, \"useful\": 2, \"cool\": 1}']; output: ['3', '0', '5', '4', '2']"}
{"id": "31-0", "oq_id": 31, "desc": "Input: a list of strings in JSON format.\nOutput: a list of strings representing numerical values extracted from the JSON strings.\nFunctionality: The transformation extracts the numerical values corresponding to the key \"useful\" from each JSON string in the given sequence and outputs them as a list of strings.\nExample: Input: ['{\"funny\": 1, \"useful\": 5, \"cool\": 2}', '{\"funny\": 2, \"useful\": 3, \"cool\": 0}', '{\"funny\": 0, \"useful\": 1, \"cool\": 1}', '{\"funny\": 1, \"useful\": 4, \"cool\": 3}', '{\"funny\": 0, \"useful\": 2, \"cool\": 1}']; output: ['5', '3', '1', '4', '2']"}
{"id": "31-1", "oq_id": 31, "desc": "Input: a list of strings in JSON format.\nOutput: a list of strings representing numerical values extracted from the JSON strings.\nFunctionality: The transformation extracts the value of the \"useful\" key from each JSON string in the given sequence, and outputs these values as a list of strings.\nExample: Input: ['{\"funny\": 0, \"useful\": 3, \"cool\": 4}', '{\"funny\": 1, \"useful\": 2, \"cool\": 1}', '{\"funny\": 2, \"useful\": 0, \"cool\": 1}', '{\"funny\": 0, \"useful\": 1, \"cool\": 3}', '{\"funny\": 1, \"useful\": 3, \"cool\": 2}']; output: ['3', '2', '0', '1', '3']"}
{"id": "31-5", "oq_id": 31, "desc": "Input: a list of strings in JSON format.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the value corresponding to the key \"useful\" from each JSON string in the input list and outputs the values as a list of numerical values.\nExample: Input: ['{\"funny\": 1, \"useful\": 4, \"cool\": 3}', '{\"funny\": 0, \"useful\": 2, \"cool\": 1}', '{\"funny\": 2, \"useful\": 0, \"cool\": 1}', '{\"funny\": 0, \"useful\": 3, \"cool\": 2}', '{\"funny\": 1, \"useful\": 5, \"cool\": 1}']; output: ['4', '2', '0', '3', '5']"}
{"id": "31-4", "oq_id": 31, "desc": "Input: a list of strings in JSON format.\nOutput: a list of strings representing numerical values extracted from the JSON strings.\nFunctionality: The transformation extracts the value of the \"useful\" key from each JSON string in the given sequence, and outputs the result as a list of strings.\nExample: Input: ['{\"funny\": 2, \"useful\": 1, \"cool\": 3}', '{\"funny\": 1, \"useful\": 0, \"cool\": 2}', '{\"funny\": 3, \"useful\": 2, \"cool\": 1}', '{\"funny\": 0, \"useful\": 1, \"cool\": 4}', '{\"funny\": 1, \"useful\": 5, \"cool\": 0}']; output: ['1', '0', '2', '1', '5']"}
{"id": "31-6", "oq_id": 31, "desc": "Input: a list of strings in JSON format.\nOutput: a list of strings representing numerical values extracted from the JSON strings.\nFunctionality: The transformation extracts the value of the \"useful\" key from each JSON string in the given sequence and outputs the result as a list of strings.\nExample: Input: ['{\"funny\": 0, \"useful\": 3, \"cool\": 1}', '{\"funny\": 1, \"useful\": 5, \"cool\": 2}', '{\"funny\": 2, \"useful\": 3, \"cool\": 0}', '{\"funny\": 0, \"useful\": 2, \"cool\": 1}', '{\"funny\": 1, \"useful\": 4, \"cool\": 3}']; output: ['3', '5', '3', '2', '4']"}
{"id": "31-7", "oq_id": 31, "desc": "Input: a list of strings in JSON format.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the value corresponding to the key \"useful\" from each JSON string in the input list and outputs the values as a list of strings.\nExample: Input: ['{\"funny\": 1, \"useful\": 2, \"cool\": 1}', '{\"funny\": 0, \"useful\": 1, \"cool\": 3}', '{\"funny\": 1, \"useful\": 3, \"cool\": 2}', '{\"funny\": 3, \"useful\": 0, \"cool\": 1}', '{\"funny\": 0, \"useful\": 2, \"cool\": 4}']; output: ['2', '1', '3', '0', '2']"}
{"id": "31-9", "oq_id": 31, "desc": "Input: a list of strings in JSON format.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the value corresponding to the key \"useful\" from each JSON string in the input list, and outputs those values as a list of numerical values.\nExample: Input: ['{\"funny\": 2, \"useful\": 1, \"cool\": 3}', '{\"funny\": 1, \"useful\": 0, \"cool\": 2}', '{\"funny\": 3, \"useful\": 2, \"cool\": 1}', '{\"funny\": 0, \"useful\": 1, \"cool\": 4}', '{\"funny\": 1, \"useful\": 5, \"cool\": 0}']; Output: ['1', '0', '2', '1', '5']"}
{"id": "31-8", "oq_id": 31, "desc": "Input: a list of strings in JSON format.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the value corresponding to the key \"useful\" from each JSON string in the input list and outputs the values as a list of strings.\nExample: Input: ['{\"funny\": 0, \"useful\": 4, \"cool\": 1}', '{\"funny\": 1, \"useful\": 5, \"cool\": 3}', '{\"funny\": 0, \"useful\": 3, \"cool\": 1}', '{\"funny\": 2, \"useful\": 1, \"cool\": 2}', '{\"funny\": 1, \"useful\": 0, \"cool\": 1}']; output: ['4', '5', '3', '1', '0']"}
{"id": "32-2", "oq_id": 32, "desc": "Input: a list of complex text strings.\nOutput: a list of string values.\nFunctionality: The transformation extracts the zip code from each element in the given sequence, and outputs the zip codes as strings in the result list.\nExample: Input: ['1000 Beach Blvd Los Angeles, CA 90001', '567 Park Lane New York, NY 10001', '999 Grove St Orlando, FL 32801', '321 River Rd Portland, OR 97201', '888 Mountain Ave Phoenix, AZ 85004']; output: ['90001', '10001', '32801', '97201', '85004']"}
{"id": "32-3", "oq_id": 32, "desc": "Input: a list of string values, where each element contains an address with a postal code.\nOutput: a list of string values representing the postal codes.\nFunctionality: The transformation extracts the postal code from each address in the given sequence and outputs the postal codes in a new list.\nExample: Input: ['666 Elm St Las Vegas, NV 89101', '123 Pine Lane Austin, TX 78701', '400 Maple Ave Nashville, TN 37201', '900 Sunset Blvd Miami, FL 33133', '111 River Rd San Diego, CA 92101']; output: ['89101', '78701', '37201', '33133', '92101']"}
{"id": "32-1", "oq_id": 32, "desc": "Input: a list of string values, with address information in each element.\nOutput: a list of string values representing zip codes.\nFunctionality: The transformation extracts the zip code from each element in the given sequence and outputs them as a list of strings.\nExample: Input: ['10 Maple Ave Chicago, IL 60610', '456 Pine St Seattle, WA 98101', '777 Oak Dr Atlanta, GA 30303', '321 Broadway Ave Denver, CO 80202', '555 Elm St Houston, TX 77002']; output: ['60610', '98101', '30303', '80202', '77002']"}
{"id": "32-0", "oq_id": 32, "desc": "Input: a list of string values, each representing an address with a zip code.\nOutput: a list of strings containing only the zip codes.\nFunctionality: The transformation extracts the zip code from each address in the given sequence and outputs them as a list of strings.\nExample: Input: ['45 Elm Street Boston, MA 02129', '789 Main Street Miami, FL 33133', '550 Market St San Francisco, CA 94104', '1234 Country Rd Dallas, TX 75201', '890 Harbor Blvd San Diego, CA 92101']; Output: ['02129', '33133', '94104', '75201', '92101']"}
{"id": "32-4", "oq_id": 32, "desc": "Input: a list of string values with address information.\nOutput: a list of string values with extracted zip codes.\nFunctionality: The transformation extracts the zip code from each element in the given sequence and outputs them as a list of strings.\nExample: Input: ['234 Birch St Philadelphia, PA 19103', '777 Maple Ave Washington, DC 20001', '543 Spring St San Jose, CA 95134', '888 Oak Ln Charlotte, NC 28202', '999 Main St Tampa, FL 33602']; output: ['19103', '20001', '95134', '28202', '33602']"}
{"id": "32-5", "oq_id": 32, "desc": "Input: a list of string values, with address information in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the zip code from each address in the given sequence and outputs the zip codes as strings in the result list.\nExample: Input: ['543 Pine St Baltimore, MD 21201', '345 Oak Dr Cleveland, OH 44114', '765 Elm Ave Pittsburgh, PA 15219', '234 Maple Rd Detroit, MI 48226', '890 Forest St Indianapolis, IN 46204']; output: ['21201', '44114', '15219', '48226', '46204']"}
{"id": "32-7", "oq_id": 32, "desc": "Input: a list of string values, where each element contains an address with a postal code.\nOutput: a list of string values representing the postal codes.\nFunctionality: The transformation extracts the postal code from each address in the given sequence and outputs the postal codes in a new list.\nExample: Input: ['111 Birch Rd San Francisco, CA 94104', '222 Elm St Seattle, WA 98101', '333 Willow Dr San Diego, CA 92101', '444 Oak Ln Dallas, TX 75201', '555 Maple Ave Houston, TX 77002']; Output: ['94104', '98101', '92101', '75201', '77002']"}
{"id": "32-6", "oq_id": 32, "desc": "Input: a list of string values, with address information included.\nOutput: a list of string values representing zip codes.\nFunctionality: The transformation extracts the zip code from each element in the given sequence, and outputs them as strings in the result list.\nExample: Input: ['987 River Rd Phoenix, AZ 85004', '543 Lake St Denver, CO 80202', '765 Meadow Ln Portland, OR 97201', '234 Ocean Ave Nashville, TN 37201', '999 Hill St Boston, MA 02129']; output: ['85004', '80202', '97201', '37201', '02129']"}
{"id": "32-8", "oq_id": 32, "desc": "Input: a list of string values with address information.\nOutput: a list of string values representing ZIP codes.\n\nFunctionality: The transformation extracts the ZIP code from each address in the given sequence and outputs the ZIP codes as strings in the result list.\n\nExample: Input: ['777 Park Ave Atlanta, GA 30303', '888 Beach Blvd Orlando, FL 32801', '999 Hill St Charlotte, NC 28202', '111 River Dr Las Vegas, NV 89101', '222 Lake St Miami, FL 33133']; output: ['30303', '32801', '28202', '89101', '33133']"}
{"id": "32-9", "oq_id": 32, "desc": "Input: a list of strings with address information.\nOutput: a list of strings with zip codes extracted from each address.\nFunctionality: The transformation extracts the zip code from each address in the given sequence and outputs the result as a list of zip codes.\nExample: Input: ['321 Pine St St. Louis, MO 63101', '654 Birch Rd Milwaukee, WI 53202', '987 Oak Dr Salt Lake City, UT 84101', '543 Maple Ave Kansas City, MO 64102', '234 Elm Blvd Denver, CO 80202']; Output: ['63101', '53202', '84101', '64102', '80202']"}
{"id": "33-1", "oq_id": 33, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts exclamation marks from each element in the given sequence and outputs them as separate strings in a list.\nExample: Input: ['Just finished a great book! Highly recommend it! Amazing plot twists!']; output: ['!', '!', '!']"}
{"id": "33-0", "oq_id": 33, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts punctuation marks (!, in this case) from each element in the given sequence and outputs them as a list.\nExample: Input: ['I love summer days! Beach, sun, and waves! Best time of the year!']; output: ['!, !, !']"}
{"id": "33-2", "oq_id": 33, "desc": "Input: a list of string values, with text containing punctuations.\nOutput: a list of string values.\nFunctionality: The transformation extracts punctuations from each element in the given sequence, and outputs them as a list of strings.\nExample: Input: ['Looking forward to the weekend! Going hiking and camping with friends!']; output: ['!, !']"}
{"id": "33-3", "oq_id": 33, "desc": "Input: a list of string values\nOutput: a list of string values\nFunctionality: The transformation extracts punctuation marks ('!' and ',') from each element in the given sequence and outputs them as elements in the result list.\nExample: Input: [\"Celebrating my birthday soon! Can't wait for the party and cake!\"]; output: ['!, !']"}
{"id": "33-7", "oq_id": 33, "desc": "Input: a list of string values, with sentences as elements.\nOutput: a list of string values.\nFunctionality: The transformation extracts the punctuation marks (!, !) from each element in the given sequence, and outputs them as separate elements in the result list.\nExample: Input: ['Trying out a new recipe tonight! Hoping it turns out delicious!']; output: ['!', '!']"}
{"id": "33-6", "oq_id": 33, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts exclamation marks from each element in the given sequence and outputs them as separate strings in the result list.\nExample: Input: ['Attended a concert last night! The music was incredible, had a blast!']; output: ['!', '!']"}
{"id": "33-4", "oq_id": 33, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts exclamation marks from each element in the given sequence and outputs them as separate strings in the result list.\nExample: Input: ['Finally booked my dream vacation! Relaxing on a tropical island for a week!']; output: ['!', '!']"}
{"id": "33-5", "oq_id": 33, "desc": "Input: a list of string values, with text containing special characters.\nOutput: a list of strings with specific special characters removed.\nFunctionality: The transformation removes the specified special characters ('!, !') from each element in the given sequence and outputs the updated strings.\nExample: Input: ['Started a new hobby! Painting is so therapeutic and fun!']; output: ['Started a new hobby Painting is so therapeutic and fun']"}
{"id": "33-8", "oq_id": 33, "desc": "Input: a list of string values, each containing a sentence.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specified character sequences ('!, !') from each element in the given sequence and outputs them in a list.\nExample: Input: ['Completed a challenging workout! Feeling strong and accomplished!']; output: ['!, !']"}
{"id": "33-9", "oq_id": 33, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the exclamation marks from each element in the given sequence and outputs them as separate strings in the result list.\nExample: Input: [\"Planning a surprise for my partner! Can't wait to see their reaction!\"]; output: ['!', '!']"}
{"id": "34-4", "oq_id": 34, "desc": "Input: a list of complex text values.\nOutput: a list of text values.\n\nFunctionality: The transformation extracts specific word \"SMILE\" from each element in the given sequence if present and outputs it in the result list, else outputs an empty string.\nExample: Input: [\"I feel happiest when I'm surrounded by loved ones.\", 'She laughed so hard she cried.', 'The music moved me to tears.', 'His SMILE lit up the room.','The smell of fresh-baked cookies filled the house.','The hug was warm and comforting.','The laughter was infectious.','The story brought tears to my eyes.', 'The surprise brought joy to her face.', 'The kind words lifted my spirits.']; output: ['', '', '', 'SMILE', '', '', '', '', '', '']"}
{"id": "34-5", "oq_id": 34, "desc": "Input: a list of strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the capital words from each element in the given sequence and formats them as strings in the result list.\nExample: Input: ['The mountains are covered in snow in the winter.', 'She twirled in her sparkly DRESS.', 'The baby giggled at the silly faces.', 'The scent of lavender filled the room.', 'The sound of laughter echoed through the hallway.', 'The taste of strawberries was sweet and juicy.', 'The feeling of sand between her toes was warm and soft.', 'The sight of a rainbow in the sky was a rare treat.', 'The touch of a gentle hand brought comfort.', 'The warmth of the sun on her skin was a welcome sensation.']; output: ['', 'DRESS', '', '', '', '', '', '', '', '']"}
{"id": "34-7", "oq_id": 34, "desc": "Input: a list of sentences.\nOutput: a list of strings.\nFunctionality: The transformation extracts a specific word (in this case, 'ROOF') from each sentence in the given sequence, and output the extracted word in the result list.\nExample: Input: ['The cat stretched lazily in the sun.', 'She smiled brightly at the surprise.','The rain pattered softly on the ROOF.', 'The wind whispered through the trees.', 'The smell of fresh-brewed coffee wafted through the air.', 'The taste of a ripe peach was sweet and juicy.', 'The feeling of sand between his toes was warm and comforting.', 'The sight of a shooting star was a wondrous sight.', 'The touch of a gentle hand was soothing.', 'The warmth of a hug was reassuring.']; output: ['', '', 'ROOF', '', '', '', '', '', '', '']"}
{"id": "34-6", "oq_id": 34, "desc": "Input: a list of strings containing various phrases.\nOutput: a list of strings.\nFunctionality: The transformation extracts specific capitalized words from each element in the given sequence and outputs them in a new list.\nExample: Input: ['The sun rises in the east and sets in the west.', 'She danced gracefully across the stage.', 'The snow glistened in the MOONLIGHT.', 'The scent of fresh-baked bread filled the kitchen.', 'The laughter of children filled the air.', 'The taste of chocolate cake was rich and decadent.', 'The feeling of a warm embrace was comforting.', 'The sight of a shooting star was a magical moment.', 'The touch of a gentle breeze was refreshing.', 'The warmth of a cozy fire was inviting.']; output: ['', '', 'MOONLIGHT', '', '', '', '', '', '', '']"}
{"id": "34-2", "oq_id": 34, "desc": "Input: a list of textual sentences.\nOutput: a list of strings with specific words extracted.\nFunctionality: The transformation extracts specific capitalized words from each sentence in the given sequence and outputs them in a new list.\nExample: Input: ['The Earth revolves around the SUN.', 'Cats purr when they are HAPPY.', 'Cooking a meal takes time and effort.']; output: ['SUN', 'HAPPY', '']"}
{"id": "34-3", "oq_id": 34, "desc": "Input: a list of string values containing sentences.\nOutput: a list of string values containing specific words extracted from each sentence.\n\nFunctionality: The transformation extracts specific capitalized words from each element in the given sequence and outputs those words as strings in the result list.\n\nExample: Input: ['I woke up early to watch the SUNRISE.', 'She SINGS beautifully in the choir.', 'The rain poured down in sheets.', 'He RAN a marathon in under 3 hours.', 'The snowflakes gently fell from the sky.', 'The stars twinkled in the night sky.', 'The fire crackled in the fireplace.', 'The thunder rumbled in the distance.', 'The butterflies fluttered among the flowers.', 'The leaves rustled in the breeze.']; output: ['SUNRISE', 'SINGS', '', 'RAN', '', '', '', '', '', '']"}
{"id": "34-1", "oq_id": 34, "desc": "Input: a list of strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts specific capitalized words from each sentence in the given sequence and outputs them in a list. If no capitalized word is found in a sentence, an empty string is added to the result list.\nExample: Input: ['I love to eat PIZZA on Fridays.', 'He plays basketball every weekend.', 'The sun sets in the WEST.', 'My favorite color is BLUE.', 'Birds chirp in the morning.', 'The flowers bloom in the spring.', 'She dances gracefully on stage.', 'The moonlight shines on the water.', 'The wind whispers through the trees.', 'The waves crash against the shore.']; output: ['PIZZA', '', 'WEST', 'BLUE', '', '', '', '', '', '']"}
{"id": "34-0", "oq_id": 34, "desc": "Input: a list of strings with text data.\nOutput: a list of strings.\n\nFunctionality: The transformation extracts specific words provided in each element from the given sequence and outputs them as a list. If the word is not found in the element, an empty string is added to the output list.\nExample: Input: ['The quick brown fox jumps over the LAZY dog. Did you see it?', 'I scream, you scream, we all scream for ICE cream!', ...]; output: ['LAZY', 'ICE', '', '', '', '', '', '', '', '']"}
{"id": "34-8", "oq_id": 34, "desc": "Input: a list of text values.\nOutput: a list of text values.\nFunctionality: The transformation extracts specific words from each element in the given sequence, and output the extracted words in a new list.\nExample: Input: ['The smell of fresh flowers filled the ROOM.', 'She sang beautifully in the choir.', 'The rain dripped steadily from the eaves.', 'The wind howled through the trees.', 'The sound of birds chirping greeted the morning.', 'The taste of ripe strawberries was delicious.', 'The feeling of sand beneath her feet was soothing.', 'The sight of a shooting star was a rare treat.', 'The touch of a warm hand was comforting.', 'The warmth of a cozy blanket was inviting.']; Output: ['ROOM', '', '', '', '', '', '', '', '', '']"}
{"id": "34-9", "oq_id": 34, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts specific text (in this case, 'WINDOW') from each element in the given sequence, and outputs the extracted text as a list.\nExample: Input: ['The butterflies flitted among the flowers.', 'She giggled with delight at the surprise.', 'The rain tapped gently on the WINDOW pane.', 'The wind rustled through the leaves.', 'The scent of fresh-baked cookies filled the kitchen.', 'The taste of chocolate melted in her mouth.', 'The feeling of sand between her toes was warm and comforting.', 'The sight of a rainbow in the sky was a rare treat.', 'The touch of a gentle hand was soothing.', 'The warmth of a hug was reassuring.']; output: ['', '', 'WINDOW', '', '', '', '', '', '', '']"}
{"id": "35-7", "oq_id": 35, "desc": "Input: a list of string values, with numerical values and units in each element.\nOutput: a list of string values with the numerical value followed by the word \"centimeter\".\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, appends the word \"centimeter\" after the value, and outputs the result as a list.\nExample: Input: ['8.6 cm', '7.2 cm', '4.5 cm', '2.1 cm']; output: ['8.6 centimeter', '7.2 centimeter', '4.5 centimeter', '2.1 centimeter']"}
{"id": "35-6", "oq_id": 35, "desc": "Input: a list of string values, with numerical values and units in each element.\nOutput: a list of string values with the units converted to a different format.\nFunctionality: The transformation removes the units from each element in the given sequence and converts them to a different unit format in the result list.\nExample: Input: ['3.5 cm', '4.8 cm', '5.9 cm', '6.1 cm']; output: ['3.5 centimeter', '4.8 centimeter', '5.9 centimeter', '6.1 centimeter']"}
{"id": "35-4", "oq_id": 35, "desc": "Input: a list of string values, with numerical values and units in each element.\nOutput: a list of string values with the numerical value followed by the word \"centimeter\".\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, appends the word \"centimeter\" to the extracted number, and output the result as a list of strings.\nExample: Input: ['7.3 cm', '6.2 cm', '5.1 cm', '4.0 cm']; output: ['7.3 centimeter', '6.2 centimeter', '5.1 centimeter', '4.0 centimeter']"}
{"id": "35-5", "oq_id": 35, "desc": "Input: a list of string values, with numerical values and units in each element.\nOutput: a list of string values with number and unit spelled out.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it to a spelled-out version with the corresponding unit, and outputs the result as a new list.\nExample: Input: ['2.3 cm', '5.7 cm', '4.2 cm', '1.9 cm']; output: ['2.3 centimeter', '5.7 centimeter', '4.2 centimeter', '1.9 centimeter']"}
{"id": "35-1", "oq_id": 35, "desc": "Input: a list of string values, with numerical values and units in each element.\nOutput: a list of string values with the units converted to words.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence and converts the unit from abbreviation to words in the result list.\nExample: Input: ['0.5 cm', '2.7 cm', '8.8 cm', '3.9 cm']; output: ['0.5 centimeter', '2.7 centimeter', '8.8 centimeter', '3.9 centimeter']"}
{"id": "35-0", "oq_id": 35, "desc": "Input: a list of string values, with numerical values and units in each element.\nOutput: a list of string values with the numerical value followed by the word \"centimeter\".\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, appends the word \"centimeter\" to the extracted number, and output the result as a formatted string.\nExample: Input: ['2.5 cm', '3.2 cm', '4.6 cm', '5.3 cm']; output: ['2.5 centimeter', '3.2 centimeter', '4.6 centimeter', '5.3 centimeter']"}
{"id": "35-2", "oq_id": 35, "desc": "Input: a list of string values, with numerical values and units in each element.\nOutput: a list of string values with the numerical value followed by the word \"centimeter\".\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, appends the word \"centimeter\" to the extracted number, and output the result as a formatted string.\nExample: Input: ['1.0 cm', '2.0 cm', '3.0 cm', '4.0 cm']; output: ['1.0 centimeter', '2.0 centimeter', '3.0 centimeter', '4.0 centimeter']"}
{"id": "35-3", "oq_id": 35, "desc": "Input: a list of string values, with numerical values and units in each element.\nOutput: a list of string values with the numerical value followed by the word \"centimeter\".\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, appends the word \"centimeter\" to the extracted number, and output the result as a formatted string.\nExample: Input: ['5.6 cm', '8.7 cm', '6.1 cm', '3.2 cm']; output: ['5.6 centimeter', '8.7 centimeter', '6.1 centimeter', '3.2 centimeter']"}
{"id": "35-8", "oq_id": 35, "desc": "Input: a list of string values, with numerical values and units in each element.\nOutput: a list of string values with the units converted to words.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence and converts the unit \"cm\" to \"centimeter\" in the result list.\nExample: Input: ['1.8 cm', '3.7 cm', '5.6 cm', '6.9 cm']; output: ['1.8 centimeter', '3.7 centimeter', '5.6 centimeter', '6.9 centimeter']"}
{"id": "35-9", "oq_id": 35, "desc": "Input: a list of string values, with numerical values and units in each element.\nOutput: a list of string values with the numerical value followed by the word \"centimeter\".\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, appends the word \"centimeter\" to the extracted number, and output the result as a formatted string.\nExample: Input: ['2.8 cm', '5.4 cm', '8.3 cm', '9.1 cm']; output: ['2.8 centimeter', '5.4 centimeter', '8.3 centimeter', '9.1 centimeter']"}
{"id": "36-6", "oq_id": 36, "desc": "Input: a list of string values, with tab-separated pairs of strings in each element.\nOutput: a list of string values.\nFunctionality: The transformation converts each element in the given sequence to uppercase and outputs the result as a list.\nExample: Input: ['aaa\\tbbb', 'ccc\\tddd', 'eee\\tfff']; output: ['AAA', 'CCC', 'EEE']"}
{"id": "36-7", "oq_id": 36, "desc": "Input: a list of string values, with tab-separated pairs of alphanumeric characters in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first part (before tab) of each element in the given sequence, and converts it to uppercase in the result list.\nExample: Input: ['321\\t123', 'xyz\\tabc', 'def\\tghi']; output: ['321', 'XYZ', 'DEF']"}
{"id": "36-5", "oq_id": 36, "desc": "Input: a list of string values, with tab-separated segments.\nOutput: a list of string values.\nFunctionality: The transformation converts each element to uppercase and extracts the first segment before the tab separator.\nExample: Input: ['abcdef\\tghijkl', 'mnopqr\\tstuvwxyz']; output: ['ABCDEF', 'MNOPQR']"}
{"id": "36-4", "oq_id": 36, "desc": "Input: a list of string values, with tab-separated text in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first word from each element in the given sequence, converts it to uppercase, and outputs the result as a list.\nExample: Input: ['xyz\\tabc', 'def\\tghi', 'jkl\\tpqr']; output: ['XYZ', 'DEF', 'JKL']"}
{"id": "36-0", "oq_id": 36, "desc": "Input: a list of string values containing tab-separated words.\nOutput: a list of string values.\nFunctionality: The transformation converts each word in the given sequence to uppercase and appends them into a new list.\nExample: Input: ['def\\tghi', 'abc\\txyz', 'xyz\\tdef']; output: ['DEF', 'ABC', 'XYZ']"}
{"id": "36-1", "oq_id": 36, "desc": "Input: a list of string values, with alphanumeric values separated by a tab.\nOutput: a list of string values in uppercase.\nFunctionality: The transformation extracts the numerical part from each element in the given sequence, converts the alphabetic part to uppercase, and outputs the result as a list of strings.\nExample: Input: ['123\\taaa', 'bbb\\t456', 'ccc\\taaa']; Output: ['123', 'BBB', 'CCC']"}
{"id": "36-3", "oq_id": 36, "desc": "Input: a list of string values, with tab-separated pairs of alphanumeric characters in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first element from each tab-separated pair in the given sequence, converts it to uppercase, and outputs the result as a list.\nExample: Input: ['111\\t222', 'aaa\\tbbb', 'ccc\\tddd']; output: ['111', 'AAA', 'CCC']"}
{"id": "36-2", "oq_id": 36, "desc": "Input: a list of string values with tab-separated text.\nOutput: a list of string values in uppercase.\nFunctionality: The transformation converts each element in the input sequence to uppercase and outputs the result as a list.\nExample: Input: ['abc\\tdef', 'ghi\\tjkl', 'mno\\tpqr']; output: ['ABC', 'GHI', 'MNO']"}
{"id": "36-9", "oq_id": 36, "desc": "Input: a list of string values with tab-separated numerical values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first number from each element in the given sequence, converts it to uppercase, and outputs the result as a list.\nExample: Input: ['123\\t456', '456\\t789', 'abc\\tdef']; output: ['123', '456', 'ABC']"}
{"id": "36-8", "oq_id": 36, "desc": "Input: a list of string values containing tab-separated text.\nOutput: a list of string values in uppercase.\nFunctionality: The transformation extracts the initial word from each element in the given sequence, converts it to uppercase, and outputs as a list of strings.\nExample: Input: ['ijklmno\\tpqrstuv', 'abc\\tdefg', 'hijk\\tmnopq']; output: ['IJKLMNO', 'ABC', 'HIJK']"}
{"id": "37-5", "oq_id": 37, "desc": "Input: a list of string values containing both alphabetic and Greek characters.\nOutput: a list of string values with all alphabetic characters converted to uppercase.\nFunctionality: The transformation converts all alphabetic characters in each element to uppercase, while leaving the Greek characters unchanged, and outputs the result as a new list.\nExample: Input: ['a\u03b9v', 'aeiou', 'ae\u03bdouxyz', 'ae\u03bdo', 'ae\u03bdou\u03bd\u03c3\u03caz']; output: ['A\u0399V', 'AEIOU', 'AEIOUXYZ', 'AEIO', 'AEIOUIOUZ']"}
{"id": "37-4", "oq_id": 37, "desc": "Input: a list of string values, with mixed characters including Greek and Latin characters.\nOutput: a list of string values, with only uppercase Latin characters.\nFunctionality: The transformation extracts and converts any lowercase Latin characters to uppercase in each element of the given sequence, while preserving any other characters.\nExample: Input: ['\u03b1\u03b9\u03bd\u03c3\u03ca', 'aeiou', 'ae\u03c5ouxyz', '\u03b5\u03bdo', 'ae\u03bdou\u03bd\u03c3\u03caz']; output: ['AEIOU', 'AEIOU', 'AE\u03a5OUXYZ', '\u0395IO', 'AEIOUIOUZ']"}
{"id": "37-6", "oq_id": 37, "desc": "Input: a list of strings containing a mix of Greek and Latin characters.\nOutput: a list of strings with only Latin characters capitalized.\nFunctionality: The transformation capitalizes all Latin characters in each element of the given sequence.\nExample: Input: ['\u03b1\u03b9\u03bd\u03c3\u03ca', 'aeiou', '\u03b1e\u03bdouxyz', 'ae\u03bdo', 'oe\u03bdou\u03bd\u03c3\u03caz']; output: ['AEIOU', 'AEIOU', '\u0391EIOUXYZ', 'AEIO', 'OEIOUIOUZ']"}
{"id": "37-7", "oq_id": 37, "desc": "Input: a list of string values, containing mixed characters including Greek letters and Latin letters.\nOutput: a list of string values, with only Latin characters in uppercase.\nFunctionality: The transformation converts each element in the given sequence to uppercase and keeps only the Latin characters.\nExample: Input: ['\u03b1\u03b9\u03bd\u03c3\u03ca', '\u03b1e\u03b9\u03bf\u03c5', 'ae\u03bdouxyz', 'ae\u03bdo', '\u03bfe\u03bdou\u03bd\u03c3\u03caz']; output: ['AEIOU', '\u0391E\u0399\u039f\u03a5', 'AEIOUXYZ', 'AEIO', '\u039fEIOUIOUZ']"}
{"id": "37-3", "oq_id": 37, "desc": "Input: a list of strings with mixed characters.\nOutput: a list of strings with specific characters.\nFunctionality: The transformation converts each element in the given sequence to uppercase and removes any non-alphabetic characters, outputting the result as a list.\nExample: Input: ['\u03b1\u03b9\u03bd\u03c3\u03ca', 'ae\u03bf', 'ae\u03bdouxyz', 'ae\u03bdo', 'ae\u03bd']; output: ['AEIOU', 'AE\u039f', 'AEIOUXYZ', 'AEIO', 'AEI']"}
{"id": "37-2", "oq_id": 37, "desc": "Input: a list of complex text values.\nOutput: a list of complex text values.\nFunctionality: The transformation converts lowercase vowels to uppercase in each element of the given sequence, and outputs the modified text as a list.\nExample: Input: ['\u03b1\u03b9\u03bd\u03c3\u03ca', 'aeiou', 'ae\u00f3s', 'ae\u03bdo', 'ae\u03bdou\u03bd\u03c3\u03caz']; output: ['AEIOU', 'AEIOU', 'AE\u00d3S', 'AEIO', 'AEIOUIOUZ']"}
{"id": "37-0", "oq_id": 37, "desc": "Input: a list of string values, containing a mix of Greek and Latin characters.\nOutput: a list of string values with only Latin characters.\nFunctionality: The transformation replaces Greek characters in each element with their corresponding Latin characters, if available.\nExample: Input: ['\u03b1\u03b9\u03bd\u03c3\u03ca', 'aeiou', 'ae\u03bdouxyz', 'ae\u03bdo', 'ae\u03bdou\u03bd\u03c3\u03caz']; output: ['AEIOU', 'AEIOU', 'AEIOUXYZ', 'AEIO', 'AEIOUIOUZ']"}
{"id": "37-1", "oq_id": 37, "desc": "Input: a list of strings containing mixed characters.\nOutput: a list of strings containing only uppercase vowels.\nFunctionality: The transformation extracts and converts all uppercase vowels from each element in the given sequence to uppercase, and outputs the result as a list.\nExample: Input: ['\u03b1\u03b9\u03bd\u03c3\u03ca', 'aeiou', 'aeiou', 'ae\u03bdo', 'ae\u03bdou\u03bd\u03c3\u03caz']; Output: ['AEIOU', 'AEIOU', 'AEIOU', 'AEIO', 'AEIOUIOUZ']"}
{"id": "37-9", "oq_id": 37, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation capitalizes each vowel in each element from the given sequence, and output the modified strings in a list.\nExample: Input: ['aep', 'aeiou', 'e\u03bdouxyz', 'ae\u03bdo', 'aef']; output: ['AEP', 'AEIOU', 'EIOUXYZ', 'AEIO', 'AEF']"}
{"id": "37-8", "oq_id": 37, "desc": "Input: a list of complex text values, containing a mix of Greek and English characters.\nOutput: a list of text values with only uppercase English characters.\nFunctionality: The transformation converts each element in the given sequence to uppercase and keeps only the English characters, while ignoring the Greek characters.\nExample: Input: ['\u03b1\u03b9\u03bd\u03c3\u03ca', 'aei\u03bf\u03c5', '\u03b1e\u03bdouxyz', '\u03b1e\u03bdo', '\u03b1e\u03bdou\u03bd\u03c3\u03caz']; output: ['AEIOU', 'AEI\u039f\u03a5', '\u0391EIOUXYZ', '\u0391EIO', '\u0391EIOUIOUZ']"}
{"id": "38-9", "oq_id": 38, "desc": "Input: a list of complex text values.\nOutput: a list of string values representing names extracted from the text.\nFunctionality: The transformation extracts the name enclosed within double brackets after the first set of double quotes in each element, and outputs the names as strings in the result list.\nExample: Input: [\"* '''1972 [[Raakhee]] \\x96 ''[[Garam Hawa]]''''' as '''Amina'''\", \"* '''1973 [[Vyjayanthimala]] \\x96 ''[[Ganwaar]]''''' as '''Saraswati'''\"]; output: ['Raakhee', 'Vyjayanthimala']"}
{"id": "38-8", "oq_id": 38, "desc": "Input: a list of complex text strings containing names and additional information.\nOutput: a list of names extracted from the input strings.\n\nFunctionality: The transformation extracts the names of actors/actresses from each element in the given sequence and outputs them as a list of strings.\nExample: Input: [\"* '''1971 [[Jaya Bachchan]] \\x96 ''[[Guddi]]''''' as '''Kusum'''\", \"** [[Vyjayanthimala]] \\x96 ''[[Dharma (film)|Dharma]]'' as Seema\"]; output: ['Jaya Bachchan', 'Vyjayanthimala']"}
{"id": "38-0", "oq_id": 38, "desc": "Input: a list of complex text strings containing names of actresses.\nOutput: a list of strings representing the names of the actresses.\nFunctionality: The transformation extracts the names of the actresses from each element in the given sequence, considering the specific format of the input text.\nExample: Input: [\"* '''1960 [[Meena Kumari]] \\x96 ''[[Kohinoor (1960 film)|Kohinoor]]''''' as '''Shankar'''\", \"** [[Vyjayanthimala]] \\x96 ''[[Gunga Jumna]]'' as Dhanno\"]; Output: ['Meena Kumari', 'Vyjayanthimala']"}
{"id": "38-1", "oq_id": 38, "desc": "Input: a list of complex text strings.\nOutput: a list of string values representing names.\nFunctionality: The transformation extracts the names from each element in the given sequence based on a specific pattern, and outputs the names as strings in a list.\nExample: Input: [\"* '''1961 [[Nutan]] \\x96 ''[[Kanoon (1960 film)|Kanoon]]''''' as '''Asha'''\", \"** [[Waheeda Rehman]] \\x96 ''[[Chaudhvin Ka Chand]]'' as Jameela\"]; output: ['Nutan', 'Waheeda Rehman']"}
{"id": "38-3", "oq_id": 38, "desc": "Input: a list of complex text strings containing names and movie titles.\nOutput: a list of strings representing names extracted from each element in the input list.\nFunctionality: The transformation extracts the names of actresses from each element in the given sequence and outputs them as a list of strings.\nExample: Input: [\"* '''1964 [[Nutan]] \\x96 ''[[Bandini (1963 film)|Bandini]]''''' as '''Kalyani'''\", \"* '''1965 [[Waheeda Rehman]] \\x96 ''[[Guide (film)|Guide]]''''' as '''Rosie'''\"]; output: ['Nutan', 'Waheeda Rehman']"}
{"id": "38-2", "oq_id": 38, "desc": "Input: a list of complex text values.\nOutput: a list of strings.\nFunctionality: The transformation extracts specific text within the given sequence using a defined pattern and outputs the extracted text as strings in a new list.\nExample: Input: [\"* '''1962 [[Meena Kumari]] \\x96 ''[[Sahib Bibi Aur Ghulam]]''''' as '''Chhoti Bahu'''\", \"* '''1963 [[Vyjayanthimala]] \\x96 ''[[Sangam (1964 film)|Sangam]]''''' as '''Radha'''\"]; output: ['Meena Kumari', 'Vyjayanthimala']"}
{"id": "38-6", "oq_id": 38, "desc": "Input: a list of complex text strings containing names of individuals.\nOutput: a list of strings representing the names of individuals.\nFunctionality: The transformation extracts the names of individuals from each element in the given sequence, considering the specific format of names used in the strings.\nExample: Input: [\"* '''1968 [[Nutan]] \\x96 ''[[Brahmachari (film)|Brahmachari]]''''' as '''Sunita'''\", \"** [[Hema Malini]] \\x96 ''[[Johny Mera Naam]]'' as Rekha\"]; output: ['Nutan', 'Hema Malini']"}
{"id": "38-7", "oq_id": 38, "desc": "Input: a list of complex text strings.\nOutput: a list of string values.\n\nFunctionality: The transformation extracts the text within the double square brackets ([[ ]]) from each element in the given sequence, and outputs the extracted text as a list of strings.\nExample: Input: [\"* '''1969 [[Vidya Sinha]] \\x96 ''[[Rajnigandha]]''''' as '''Deepa Kapoor'''\", \"* '''1970 [[Vyjayanthimala]] \\x96 ''[[Gopi (1970 film)|Gopi]]''''' as '''Gopi'''\"]; output: ['Vidya Sinha', 'Vyjayanthimala']"}
{"id": "38-5", "oq_id": 38, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts specific text strings (names) from each element in the given sequence, and outputs them as a list of strings.\nExample: Input: [\"* '''1967 [[Vyjayanthimala]] \\x96 ''[[Safar (1970 film)|Safar]]''''' as '''Neela Khanna'''\", \"** [[Waheeda Rehman]] \\x96 ''[[Jeevan Mrityu]]'' as Lata\"]; Output: ['Vyjayanthimala', 'Waheeda Rehman']"}
{"id": "38-4", "oq_id": 38, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the text between the double square brackets ([[ ]]) from each element in the given sequence and outputs them as a list of string values.\nExample: Input: [\"* '''1966 [[Madhubala]] \\x96 ''[[Mughal-e-Azam]]''''' as '''Anarkali'''\", \"** [[Nutan]] \\x96 ''[[Milan (1967 film)|Milan]]'' as Radha\"]; output: ['Madhubala', 'Nutan']"}
{"id": "39-9", "oq_id": 39, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the specific text 'Silsila' from each element in the given sequence and outputs it as a list.\nExample: Input: [\"* '''1969 [[Rekha]] \\x96 ''[[Silsila (1981 film)|Silsila]]''''' as '''Chandni'''\"]; output: ['Silsila']"}
{"id": "39-8", "oq_id": 39, "desc": "Input: a list of complex text values.\nOutput: a list of complex text values.\nFunctionality: The transformation extracts a specific text segment from each element in the given sequence based on a predefined condition, and outputs the extracted segments in a new list.\nExample: Input: [\"* '''1968 [[Zeenat Aman]] \\x96 ''[[Hare Rama Hare Krishna (1971 film)|Hare Rama Hare Krishna]]''''' as '''Janice/Monica'''\"]; output: ['Hare Rama Hare Krishna']"}
{"id": "39-3", "oq_id": 39, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the specified word 'Bandini' from each text string in the given sequence and outputs it as a list.\nExample: Input: [\"* '''1963 [[Nutan]] \\x96 ''[[Bandini (film)|Bandini]]''''' as '''Kalyani'''\"]; output: ['Bandini']"}
{"id": "39-2", "oq_id": 39, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the specific text 'Junglee' from each element in the given sequence, and outputs it in a list.\nExample: Input: [\"* '''1962 [[Saira Banu]] \\x96 ''[[Junglee (1961 film)|Junglee]]''''' as '''Rajkumari'''\"]; output: ['Junglee']"}
{"id": "39-0", "oq_id": 39, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specified text \"Kabir Singh\" from each element in the given sequence and outputs it as a list of strings.\nExample: Input: [\"* '''1960 [[Waheeda Rehman]] \\x96 ''[[Kabir Singh (2019 film)|Kabir Singh]]''''' as '''Preeti'''\"]; Output: ['Kabir Singh']"}
{"id": "39-1", "oq_id": 39, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the specific text 'Mughal-E-Azam' from each element in the given sequence and outputs it in a list.\nExample: Input: [\"* '''1961 [[Madhubala]] \\x96 ''[[Mughal-E-Azam]]''''' as '''Anarkali'''\"]; output: ['Mughal-E-Azam']"}
{"id": "39-5", "oq_id": 39, "desc": "Input: a list of complex text values.\nOutput: a list of complex text values.\nFunctionality: The transformation extracts the specific text \"Aradhana\" from each element in the given sequence and outputs it in a list.\nExample: Input: [\"* '''1965 [[Sharmila Tagore]] \\x96 ''[[Aradhana (1969 film)|Aradhana]]''''' as '''Vandana'''\"]; output: ['Aradhana']"}
{"id": "39-4", "oq_id": 39, "desc": "Input: a list of complex text strings.\nOutput: a list of strings representing movie titles.\nFunctionality: Extracts the movie title from each element in the given sequence based on a specific format, and outputs the titles as a list of strings.\nExample: Input: [\"* '''1964 [[Vyjayanthimala]] \\x96 ''[[Sangam (1964 film)|Sangam]]''''' as '''Radha'''\"]; output: ['Sangam']"}
{"id": "39-6", "oq_id": 39, "desc": "Input: a list of complex text strings.\nOutput: a list of text strings.\nFunctionality: The transformation extracts the text within a specific set of characters ([[ ]]) from each element in the given sequence and outputs them in a list.\nExample: Input: [\"* '''1966 [[Hema Malini]] \\x96 ''[[Sapno Ka Saudagar (1968 film)|Sapno Ka Saudagar]]''''' as '''Madhoo Rai'''\"]; output: ['Sapno Ka Saudagar']"}
{"id": "39-7", "oq_id": 39, "desc": "Input: a list of complex text strings.\nOutput: a list of specific text strings.\nFunctionality: The transformation extracts the specific text 'Love in Tokyo' from each element in the given sequence, and outputs it in a list.\nExample: Input: [\"* '''1967 [[Asha Parekh]] \\x96 ''[[Love in Tokyo (1966 film)|Love in Tokyo]]''''' as '''Sakura'''\"]; output: ['Love in Tokyo']"}
{"id": "40-9", "oq_id": 40, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the specific word 'Sita' from each text string in the given sequence and outputs it as a list.\nExample: Input: [\"* '''1969 [[Hema Malini]] \\x96 ''[[Johny Mera Naam]]''''' as '''Sita'''\"]; output: ['Sita']"}
{"id": "40-8", "oq_id": 40, "desc": "Input: a list of complex text extraction operations.\nOutput: a list of strings.\nFunctionality: The transformation extracts the specific text 'Bindu' from the given sequence, and outputs it as a single-element list.\nExample: Input: [\"* '''1968 [[Saira Banu]] \\x96 ''[[Padosan]]''''' as '''Bindu'''\"]; output: ['Bindu']"}
{"id": "40-0", "oq_id": 40, "desc": "Input: a list of strings containing complex text.\nOutput: a list of strings.\nFunctionality: The transformation extracts the text inside triple quotes (''' ''') and outputs it as a list.\nExample: Input: [\"* '''1960 [[Saira Banu]] \\x96 ''[[Junglee (1961 film)|Junglee]]''''' as '''Rajkumari'''\"]; output: ['Rajkumari']"}
{"id": "40-1", "oq_id": 40, "desc": "Input: a list of strings containing complex text.\nOutput: a list of strings.\nFunctionality: The transformation extracts the substring inside triple quotes from each element in the given sequence, and outputs it as a list of strings.\nExample: Input: [\"* '''1961 [[Waheeda Rehman]] \\x96 ''[[Sahib Bibi Aur Ghulam]]''''' as '''Chandramukhi'''\"]; Output: ['Chandramukhi']"}
{"id": "40-3", "oq_id": 40, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specified text 'Ganga' from the given sequence and outputs it as a list.\nExample: Input: [\"* '''1963 [[Vyjayanthimala]] \\x96 ''[[Ganga Jamuna]]''''' as '''Ganga'''\"]; Output: ['Ganga']"}
{"id": "40-2", "oq_id": 40, "desc": "Input: a list of complex text strings.\nOutput: a list of strings.\nFunctionality: The transformation extracts the text within the two sets of triple quotes and outputs it as a list.\nExample: Input: [\"* '''1962 [[Madhubala]] \\x96 ''[[Mughal-e-Azam]]''''' as '''Anarkali'''\"]; output: ['Anarkali']"}
{"id": "40-6", "oq_id": 40, "desc": "Input: a list of complex text extraction operations.\nOutput: a list of strings.\n\nFunctionality: The transformation extracts the specific text 'Madhu' from the given sequence, and outputs it as a single-element list.\n\nExample: Input: [\"* '''1966 [[Asha Parekh]] \\x96 ''[[Love in Tokyo]]''''' as '''Madhu'''\"]; output: ['Madhu']"}
{"id": "40-7", "oq_id": 40, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specific string 'Vandana' from each element in the given sequence and outputs it as a list.\nExample: Input: [\"* '''1967 [[Sharmila Tagore]] \\x96 ''[[Aradhana (1969 film)|Aradhana]]''''' as '''Vandana'''\"]; output: ['Vandana']"}
{"id": "40-5", "oq_id": 40, "desc": "Input: a list of complex text extraction operations.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specific string 'Aarti' from the given sequence and outputs it as a list.\nExample: Input: [\"* '''1965 [[Sadhana Shivdasani]] \\x96 ''[[Waqt]]''''' as '''Aarti'''\"]; output: ['Aarti']"}
{"id": "40-4", "oq_id": 40, "desc": "Input: a list of complex text strings.\nOutput: a list of strings representing specific text elements.\nFunctionality: The transformation extracts the text enclosed in triple quotes and double brackets from each element in the given sequence and outputs them as a list of strings.\nExample: Input: [\"* '''1964 [[Meena Kumari]] \\x96 ''[[Kaajal (1965 film)|Kaajal]]''''' as '''Kaajal'''\"]; Output: ['Kaajal']"}
{"id": "41-9", "oq_id": 41, "desc": "Input: a list of complex text values containing JSON strings.\nOutput: a list of strings representing extracted values from the JSON strings.\nFunctionality: The transformation extracts the \"business_id\" value from each JSON string in the given sequence and outputs it as a string in the result list.\nExample: Input: ['{\"checkin_info\": {\"3-4\": 1, \"13-5\": 1, \"6-6\": 1, ...}\", '...']; output: ['sH1FuwJgKBlQ5xAMWoN6YUqA']"}
{"id": "41-8", "oq_id": 41, "desc": "Input: a list of complex text strings containing JSON-like structures.\nOutput: a list of strings extracted from the \"business_id\" field in each element.\nFunctionality: The transformation extracts the value of the \"business_id\" field from each element in the given sequence and outputs it as a list of strings.\nExample: Input: ['{\"checkin_info\": {\"9-3\": 1, \"12-5\": 1, ... \"business_id\": \"AMWoN6YUqA-sH1FuwJgKBlQ\"}']; output: ['AMWoN6YUqA-sH1FuwJgKBlQ']"}
{"id": "41-3", "oq_id": 41, "desc": "Input: a list of string values containing JSON objects.\nOutput: a list of string values representing specific key values extracted from the JSON objects.\nFunctionality: The transformation extracts the \"business_id\" key value from each JSON object in the given sequence and outputs it as a list.\nExample: Input: ['{\"checkin_info\": {\"6-6\": 1, \"16-3\": 1, ... \"business_id\": \"AMWoN6YUqA-sH1FuwJgKBlQ\"}']; output: ['AMWoN6YUqA-sH1FuwJgKBlQ']"}
{"id": "41-2", "oq_id": 41, "desc": "Input: a list of string values, where each element is a JSON string with key-value pairs.\nOutput: a list of string values, extracting a specific key's value from each element.\nFunctionality: The transformation extracts the value associated with the key \"business_id\" from each JSON string in the given sequence and outputs it as a list.\nExample: Input: ['{\"checkin_info\": {\"6-6\": 1, \"16-3\": 1, \"8-5\": 1, \"10-5\": 1, \"11-6\": 2, \"11-0\": 1, \"12-6\": 1, \"12-0\": 2, \"19-4\": 1, \"16-0\": 1, \"16-4\": 1, \"17-0\": 1}, \"type\": \"checkin\", \"business_id\": \"LRKJF43s9-3jG9Lgx4zODg\"}']; Output: ['LRKJF43s9-3jG9Lgx4zODg']"}
{"id": "41-0", "oq_id": 41, "desc": "Input: a list of strings containing JSON data.\nOutput: a list of strings.\nFunctionality: The transformation extracts the \"business_id\" value from each element in the given sequence and outputs it as a list.\nExample: Input: ['{\"checkin_info\": {\"6-6\": 1, \"16-3\": 1, \"8-5\": 1, \"10-5\": 1, \"11-6\": 2, \"11-0\": 1, \"12-6\": 1, \"12-0\": 2, \"19-4\": 1, \"16-0\": 1, \"16-4\": 1, \"17-0\": 1, \"8-1\": 1}, \"type\": \"checkin\", \"business_id\": \"JwUE5GmEO-sH1FuwJgKBlQ\"}']; output: ['JwUE5GmEO-sH1FuwJgKBlQ']"}
{"id": "41-1", "oq_id": 41, "desc": "Input: a list of strings, each containing JSON-formatted information.\nOutput: a list of string values.\n\nFunctionality: The transformation extracts the value of the \"business_id\" key from each JSON string in the input sequence and outputs it as a single element in the result list.\n\nExample: Input: ['{\"checkin_info\": {\"6-6\": 1, \"16-3\": 1, \"8-5\": 2, \"10-5\": 1, \"11-6\": 2, \"11-0\": 1, \"6-5\": 1, \"12-6\": 1, \"12-3\": 1, \"12-0\": 2, \"9-6\": 1, \"17-6\": 1, \"16-0\": 1, \"16-1\": 1, \"16-6\": 2, \"16-4\": 1, \"17-0\": 1, \"10-0\": 2, \"8-2\": 1}, \"type\": \"checkin\", \"business_id\": \"uGykseHzyS5xAMWoN6YUqA\"}']; Output: ['uGykseHzyS5xAMWoN6YUqA']"}
{"id": "41-5", "oq_id": 41, "desc": "Input: a list of strings with JSON format.\nOutput: a list of strings.\nFunctionality: The transformation extracts the value associated with the key \"business_id\" from each JSON string in the input sequence, and outputs it as a list of strings.\nExample: Input: ['{\"checkin_info\": {\"3-4\": 1, \"13-5\": 1, ... \"business_id\": \"JwUE5GmEO-sH1FuwJgKBlQ\"}']; output: ['JwUE5GmEO-sH1FuwJgKBlQ']"}
{"id": "41-4", "oq_id": 41, "desc": "Input: a list of complex text values containing JSON strings.\nOutput: a list of strings representing extracted values.\nFunctionality: The transformation extracts the 'business_id' value from each JSON string in the given sequence and outputs it as a list of strings.\nExample: Input: ['{\"checkin_info\": {\"3-4\": 1, ... \"business_id\": \"sH1FuwJgKBlQ5xAMWoN6YUqA\"}']; output: ['sH1FuwJgKBlQ5xAMWoN6YUqA']"}
{"id": "41-6", "oq_id": 41, "desc": "Input: a list of complex text strings with JSON-like format.\nOutput: a list of strings containing specific values extracted from each element.\n\nFunctionality: The transformation extracts the value of \"business_id\" from each JSON-like string in the given sequence and outputs it as a string in the result list.\n\nExample: Input: ['{\"checkin_info\": {\"9-3\": 1, \"12-5\": 1, \"15-3\": 1, \"15-5\": 1, \"7-6\": 1, \"7-5\": 1, \"15-6\": 1, \"16-3\": 1, \"10-0\": 1, \"15-4\": 1, \"6-6\": 2, \"8-5\": 2, \"6-5\": 1, \"10-4\": 1, \"10-5\": 1, \"8-2\": 1}, \"type\": \"checkin\", \"business_id\": \"uGykseHzyS5xAMWoN6YUqA\"}']; output: ['uGykseHzyS5xAMWoN6YUqA']"}
{"id": "41-7", "oq_id": 41, "desc": "Input: a list of string values, each containing a JSON formatted text.\nOutput: a list of string values.\nFunctionality: The transformation extracts the value associated with the key \"business_id\" from each JSON element in the given sequence and outputs it as a list.\nExample: Input: ['{\"checkin_info\": {...}, \"type\": \"checkin\", \"business_id\": \"LRKJF43s9-3jG9Lgx4zODg\"}']; output: ['LRKJF43s9-3jG9Lgx4zODg']"}
{"id": "42-8", "oq_id": 42, "desc": "Input: a list of strings in JSON format.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the value corresponding to the key \"useful\" from each JSON string in the input list, and outputs those values as a list of numerical values.\nExample: Input: ['{\"funny\": 2, \"useful\": 1, \"cool\": 0}', '{\"funny\": 3, \"useful\": 3, \"cool\": 1}', '{\"funny\": 5, \"useful\": 2, \"cool\": 2}', '{\"funny\": 4, \"useful\": 1, \"cool\": 3}', '{\"funny\": 1, \"useful\": 0, \"cool\": 4}']; Output: ['1', '3', '2', '1', '0']"}
{"id": "42-9", "oq_id": 42, "desc": "Input: a list of strings in JSON format.\nOutput: a list of strings representing numerical values.\nFunctionality: The transformation extracts the value associated with the key \"useful\" from each JSON string in the given sequence, and outputs those values as strings in the result list.\nExample: Input: ['{\"funny\": 0, \"useful\": 4, \"cool\": 1}', '{\"funny\": 1, \"useful\": 3, \"cool\": 2}', '{\"funny\": 2, \"useful\": 2, \"cool\": 3}', '{\"funny\": 3, \"useful\": 1, \"cool\": 4}', '{\"funny\": 4, \"useful\": 0, \"cool\": 5}']; output: ['4', '3', '2', '1', '0']"}
{"id": "42-2", "oq_id": 42, "desc": "Input: a list of strings in JSON format.\nOutput: a list of strings representing numerical values extracted from the JSON strings.\nFunctionality: The transformation extracts the value of the \"useful\" key from each JSON string in the given sequence, and outputs those values as a list of strings.\nExample: Input: ['{\"funny\": 1, \"useful\": 0, \"cool\": 1}', '{\"funny\": 2, \"useful\": 1, \"cool\": 2}', '{\"funny\": 3, \"useful\": 2, \"cool\": 3}', '{\"funny\": 4, \"useful\": 3, \"cool\": 4}', '{\"funny\": 5, \"useful\": 4, \"cool\": 5}']; output: ['0', '1', '2', '3', '4']"}
{"id": "42-3", "oq_id": 42, "desc": "Input: a list of strings in JSON format.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the value corresponding to the key \"useful\" from each JSON string in the input list, and outputs those values as a list of numerical values.\nExample: Input: ['{\"funny\": 3, \"useful\": 1, \"cool\": 2}', '{\"funny\": 4, \"useful\": 3, \"cool\": 4}', '{\"funny\": 2, \"useful\": 0, \"cool\": 1}', '{\"funny\": 0, \"useful\": 1, \"cool\": 0}', '{\"funny\": 1, \"useful\": 2, \"cool\": 3}']; Output: ['1', '3', '0', '1', '2']"}
{"id": "42-1", "oq_id": 42, "desc": "Input: a list of strings in JSON format.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the value corresponding to the key \"useful\" from each JSON string in the input list and outputs the values as a list of numerical values.\nExample: Input: ['{\"funny\": 2, \"useful\": 3, \"cool\": 1}', '{\"funny\": 1, \"useful\": 1, \"cool\": 0}', '{\"funny\": 0, \"useful\": 2, \"cool\": 1}', '{\"funny\": 3, \"useful\": 5, \"cool\": 2}', '{\"funny\": 4, \"useful\": 3, \"cool\": 4}']; output: ['3', '1', '2', '5', '3']"}
{"id": "42-0", "oq_id": 42, "desc": "Input: a list of strings in JSON format.\nOutput: a list of numerical values in string format.\nFunctionality: The transformation extracts the value associated with the key \"useful\" from each JSON string in the given sequence, and formats each value as a string in the output list.\nExample: Input: ['{\"funny\": 1, \"useful\": 5, \"cool\": 3}', '{\"funny\": 2, \"useful\": 4, \"cool\": 2}', '{\"funny\": 3, \"useful\": 3, \"cool\": 1}', '{\"funny\": 4, \"useful\": 2, \"cool\": 0}', '{\"funny\": 5, \"useful\": 1, \"cool\": 4}']; output: ['5', '4', '3', '2', '1']"}
{"id": "42-4", "oq_id": 42, "desc": "Input: a list of strings in JSON format.\nOutput: a list of strings representing numerical values extracted from the JSON strings.\nFunctionality: The transformation extracts the value of \"useful\" from each JSON string in the input sequence, and outputs those values as a list of strings.\nExample: Input: ['{\"funny\": 0, \"useful\": 3, \"cool\": 0}', '{\"funny\": 1, \"useful\": 2, \"cool\": 1}', '{\"funny\": 2, \"useful\": 1, \"cool\": 2}', '{\"funny\": 3, \"useful\": 0, \"cool\": 3}', '{\"funny\": 4, \"useful\": 5, \"cool\": 4}']; Output: ['3', '2', '1', '0', '5']"}
{"id": "42-5", "oq_id": 42, "desc": "Input: a list of strings in JSON format.\nOutput: a list of numerical values in string format.\nFunctionality: The transformation extracts the value associated with the key \"useful\" from each JSON string in the given sequence and outputs it as a string in the result list.\nExample: Input: ['{\"funny\": 5, \"useful\": 4, \"cool\": 0}', '{\"funny\": 3, \"useful\": 2, \"cool\": 1}', '{\"funny\": 1, \"useful\": 0, \"cool\": 2}', '{\"funny\": 2, \"useful\": 1, \"cool\": 3}', '{\"funny\": 0, \"useful\": 3, \"cool\": 4}']; output: ['4', '2', '0', '1', '3']"}
{"id": "42-7", "oq_id": 42, "desc": "Input: a list of strings in JSON format.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the value corresponding to the key \"useful\" from each JSON string in the input list and outputs the values as a list of strings.\nExample: Input: ['{\"funny\": 3, \"useful\": 2, \"cool\": 1}', '{\"funny\": 1, \"useful\": 0, \"cool\": 2}', '{\"funny\": 0, \"useful\": 1, \"cool\": 3}', '{\"funny\": 2, \"useful\": 3, \"cool\": 4}', '{\"funny\": 4, \"useful\": 4, \"cool\": 5}']; output: ['2', '0', '1', '3', '4']"}
{"id": "42-6", "oq_id": 42, "desc": "Input: a list of strings in JSON format.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the value corresponding to the key \"useful\" from each JSON string in the input list, and outputs those values as a list of numerical values.\nExample: Input: ['{\"funny\": 4, \"useful\": 2, \"cool\": 1}', '{\"funny\": 3, \"useful\": 1, \"cool\": 0}', '{\"funny\": 1, \"useful\": 3, \"cool\": 2}', '{\"funny\": 0, \"useful\": 1, \"cool\": 3}', '{\"funny\": 2, \"useful\": 0, \"cool\": 4}']; Output: ['2', '1', '3', '1', '0']"}
{"id": "43-8", "oq_id": 43, "desc": "Input: a list of strings containing text.\nOutput: a list of strings containing consecutive exclamation points of length 2 or more.\nFunctionality: The transformation extracts consecutive exclamation points of length 2 or more from each element in the given sequence, and outputs them as separate strings in the result list.\nExample: Input: [\"Booked tickets for a vacation!! Can't wait to relax on the beach!!\"]; output: ['!!', '!!']"}
{"id": "43-9", "oq_id": 43, "desc": "Input: a list of string values with complex text.\nOutput: a list of strings containing consecutive exclamation points of length 2 or more.\nFunctionality: The transformation extracts consecutive exclamation points of length 2 or more from each element in the given sequence, and outputs them in a new list.\nExample: Input: ['Managed to solve a difficult puzzle!! It was so satisfying!!']; output: ['!!, !!']"}
{"id": "43-1", "oq_id": 43, "desc": "Input: a list of string values containing complex text with multiple exclamation points.\nOutput: a list of strings containing consecutive exclamation points of length 2 or more.\nFunctionality: The transformation extracts consecutive exclamation points of length 2 or more from each element in the given sequence and outputs them as strings in the result list.\nExample: Input: ['This movie is amazing!!! The acting is superb and the plot is so engaging!!']; output: ['!!!', '!!']"}
{"id": "43-0", "oq_id": 43, "desc": "Input: a list of string values, containing text with multiple exclamation points.\nOutput: a list of string values.\nFunctionality: The transformation extracts consecutive exclamation points of length 2 or more from each element in the given sequence and outputs them as a list of strings.\nExample: Input: [\"What a beautiful day!! I can't wait to go for a hike!!\"]; output: ['!!, !!']"}
{"id": "43-2", "oq_id": 43, "desc": "Input: a list of string values containing text with exclamation points.\nOutput: a list of string values.\nFunctionality: The transformation extracts consecutive exclamation points of length 2 or more from each element in the given sequence and outputs them as a list of strings.\nExample: Input: ['Had the best time at the concert!! The music was fantastic!!']; output: ['!!, !!']"}
{"id": "43-3", "oq_id": 43, "desc": "Input: a list of string values containing text.\nOutput: a list of strings containing consecutive exclamation points of length 2 or more.\nFunctionality: The transformation extracts consecutive exclamation points of length 2 or more from each element in the given sequence, and outputs them as separate strings in the result list.\nExample: Input: [\"Just finished writing my first novel!!! It's such a great feeling!!\"]; output: ['!!!', '!!']"}
{"id": "43-7", "oq_id": 43, "desc": "Input: a list of string values, with text containing consecutive exclamation points.\nOutput: a list of strings containing consecutive exclamation points.\nFunctionality: The transformation extracts consecutive exclamation point occurrences from each element in the given sequence and outputs a list of strings with consecutive exclamation points.\nExample: Input: ['Completed a marathon this morning!! Feeling accomplished!!']; output: ['!!, !!']"}
{"id": "43-6", "oq_id": 43, "desc": "Input: a list of strings with text content.\nOutput: a list of strings representing consecutive exclamation points of length 2 or more.\nFunctionality: The transformation extracts consecutive exclamation points of length 2 or more from each element in the given sequence and outputs them as a list of strings.\nExample: Input: ['Visited a new art exhibition!! The paintings were breathtaking!!']; Output: ['!!, !!']"}
{"id": "43-4", "oq_id": 43, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts consecutive exclamation points of length 2 or more from each element in the given sequence and outputs them as a list.\nExample: Input: ['Celebrating my birthday today!! So excited for the party!!']; output: ['!!, !!']"}
{"id": "43-5", "oq_id": 43, "desc": "Input: a list of string values containing text with exclamation points.\nOutput: a list of string values.\nFunctionality: The transformation extracts consecutive exclamation points of length 2 or more from each element in the given sequence and outputs them as a list.\nExample: Input: ['Attended a cooking class yesterday!! Learned so many new recipes!!']; output: ['!!, !!']"}
{"id": "44-8", "oq_id": 44, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes all non-alphabetic characters from each element in the given sequence, and outputs the result as a list.\nExample: Input: ['I baked a cake for the first time!', 'It turned out delicious!', \"I'm so proud of myself!\", \"I can't wait to bake more!\"]; output: ['!']"}
{"id": "44-9", "oq_id": 44, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes everything except the last character from each element in the given sequence, and outputs those characters as a list of strings.\nExample: Input: ['I ran a marathon!', 'It was tough but I did it!', 'I feel so accomplished!', \"I'm on cloud nine!\"]; output: ['!', '!', '!', '!']"}
{"id": "44-4", "oq_id": 44, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes all characters except for '!' from each element in the given sequence, and outputs those '!' as a list.\nExample: Input: ['I won the lottery!', \"I'm rich!\", 'This is a dream come true!', \"I can't believe my luck!\"]; output: ['!', '!', '!', '!']"}
{"id": "44-5", "oq_id": 44, "desc": "Input: a list of string values containing sentences.\nOutput: a list of string values containing only the last character of each sentence.\nFunctionality: The transformation extracts the last character from each element in the given sequence and outputs a list of these characters as strings.\nExample: Input: ['The sunset was breathtaking!', 'The colors were stunning!', 'Nature is so beautiful!', 'I took some amazing photos!']; output: ['!', '!', '!', '!']"}
{"id": "44-7", "oq_id": 44, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes all non-letter characters from each element in the given sequence, and outputs the remaining characters as a list.\nExample: Input: ['I adopted a puppy!', \"He's so cute!\", 'I love him so much!', 'He brings so much joy to my life!']; output: ['!', '!', '!', '!']"}
{"id": "44-6", "oq_id": 44, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes all characters except the exclamation mark '!' from each element in the given sequence and outputs a list of strings containing only '!' characters.\nExample: Input: ['I got a promotion at work!', 'I worked so hard for it!', \"I'm so grateful!\", 'I feel on top of the world!']; output: ['!', '!', '!', '!']"}
{"id": "44-2", "oq_id": 44, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes everything except the last character from each element in the given sequence, and outputs those characters as a list of strings.\nExample: Input: ['I aced my exam!', 'I studied hard for it!', 'All my hard work paid off!', \"I'm so happy!\"]; output: ['!', '!', '!', '!']"}
{"id": "44-3", "oq_id": 44, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes all characters from each element in the given sequence, except for the exclamation marks, and output the result as a list.\nExample: Input: ['The movie was so scary!', 'I screamed multiple times!', 'My heart was racing!', \"I couldn't sleep afterwards!\"]; output: ['!', '!', '!', '!']"}
{"id": "44-1", "oq_id": 44, "desc": "Input: a list of string values containing sentences.\nOutput: a list of string values containing only the last character of each sentence.\n\nFunctionality: The transformation extracts the last character from each element in the given sequence and outputs a list of these characters.\n\nExample: Input: ['The concert was fantastic!', 'I had so much fun!', 'The music was great!', 'I danced all night!']; output: ['!', '!', '!', '!']"}
{"id": "44-0", "oq_id": 44, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes the text part of each element in the given sequence, keeping only the exclamation mark, and output the result as a list.\nExample: Input: [\"I can't believe it!\", 'This is amazing!', 'Wow!', 'Incredible!']; output: ['!', '!', '!', '!']"}
{"id": "45-8", "oq_id": 45, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts capitalized words from the given sentence and outputs them as a list.\nExample: Input: ['The SECRET AGENT went on a MISSION to save the world']; output: ['SECRET', 'AGENT', 'MISSION']"}
{"id": "45-9", "oq_id": 45, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation splits the input sentence into individual words and outputs a list of these words.\nExample: Input: [\"The CAT IN THE HAT is a popular children's book\"]; output: ['CAT', 'IN', 'THE', 'HAT']"}
{"id": "45-7", "oq_id": 45, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts specific words (RAINING, UMBRELLA) from the given sentence and outputs them as a list.\nExample: Input: [\"It's RAINING outside, remember to bring an UMBRELLA\"]; output: ['RAINING, UMBRELLA']"}
{"id": "45-6", "oq_id": 45, "desc": "Input: a list of string values, with a single string sentence.\nOutput: a list of string values.\n\nFunctionality: The transformation extracts specific words ('CAN' and 'WAIT') from the given sentence and outputs them as elements in a list.\n\nExample: Input: [\"I CAN'T WAIT for the concert this weekend\"]; output: ['CAN', 'WAIT']"}
{"id": "45-4", "oq_id": 45, "desc": "Input: a list of strings containing text.\nOutput: a list of strings containing specific text.\nFunctionality: The transformation extracts specific words or phrases from each element in the given sequence and outputs them as a new list.\nExample: Input: ['HELLO, how are you doing TODAY?']; Output: ['HELLO, TODAY']"}
{"id": "45-5", "oq_id": 45, "desc": "Input: a list of string values, with a sentence in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts specific words (DRINKS, TEA) from the input sentence and outputs them as a list.\nExample: Input: ['She DRINKS TEA every morning before work']; output: ['DRINKS, TEA']"}
{"id": "45-1", "oq_id": 45, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the word \"MARVEL\" from the input sentence and outputs it as a single-element list.\nExample: Input: ['Have you seen the new MARVEL movie yet?']; output: ['MARVEL']"}
{"id": "45-0", "oq_id": 45, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts specific words (LOVE, PIZZA, FRIDAYS) from the given sentence and outputs them as a list.\nExample: Input: ['I LOVE to eat PIZZA on FRIDAYS!']; output: ['LOVE', 'PIZZA', 'FRIDAYS']"}
{"id": "45-2", "oq_id": 45, "desc": "Input: a list of string values with a sentence as a single element.\nOutput: a list of string values representing individual words.\nFunctionality: The transformation splits the sentence into individual words, removing punctuation and converting each word to uppercase, then outputs a list of these words.\nExample: Input: ['The QUICK BROWN FOX jumps over the LAZY DOG']; output: ['QUICK', 'BROWN', 'FOX', 'LAZY', 'DOG']"}
{"id": "45-3", "oq_id": 45, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts specific words (AM, GOING, HAWAII) from the given sentence and outputs them as a list of strings.\nExample: Input: ['I AM GOING on a vacation to HAWAII next month']; output: ['AM, GOING, HAWAII']"}
{"id": "46-9", "oq_id": 46, "desc": "Input: a list of string values in time format (HH:MM:SS).\nOutput: a list of string values in decimal hours format.\nFunctionality: The transformation converts the time in each element from HH:MM:SS format to decimal hours format in the result list.\nExample: Input: ['10:00:00', '7:30:15', '08:08:08', '03:30:30', '19:19:19']; output: ['10.0000 hours', '7.5042 hours', '8.1356 hours', '3.5083 hours', '19.3219 hours']"}
{"id": "46-8", "oq_id": 46, "desc": "Input: a list of string values in the format of \"hh:mm:ss\".\nOutput: a list of string values in decimal hours format.\nFunctionality: The transformation converts the time in each element from hours, minutes, and seconds format to decimal hours format.\nExample: Input: ['01:01:01', '0:59:59', '10:10:10', '05:05:05', '13:13:13']; output: ['1.0169 hours', '0.9997 hours', '10.1694 hours', '5.0847 hours', '13.2203 hours']"}
{"id": "46-6", "oq_id": 46, "desc": "Input: a list of string values in the format of \"hh:mm:ss\".\nOutput: a list of string values in the format of \"x.xxxx hours\".\nFunctionality: The transformation converts the time in each element from the given sequence to decimal hours and formats the output as a string with the decimal hours.\nExample: Input: ['03:30:45', '2:15:30', '09:08:10', '04:44:44', '17:17:17']; output: ['3.5125 hours', '2.2583 hours', '9.1361 hours', '4.7456 hours', '17.2881 hours']"}
{"id": "46-7", "oq_id": 46, "desc": "Input: a list of string values in the format of \"hh:mm:ss\".\nOutput: a list of string values in the format of \"X.XXXX hours\".\nFunctionality: The transformation converts the time in each element from the given sequence to decimal hours and formats the output as a string in the result list.\nExample: Input: ['09:10:20', '6:06:06', '12:12:12', '06:03:45', '21:21:21']; output: ['9.1722 hours', '6.1017 hours', '12.2033 hours', '6.0625 hours', '21.3558 hours']"}
{"id": "46-5", "oq_id": 46, "desc": "Input: a list of string values in time format (HH:MM:SS).\nOutput: a list of string values representing time in decimal hours.\nFunctionality: The transformation converts each time value in the given sequence to decimal hours format and outputs the result as a list of strings.\nExample: Input: ['07:45:00', '5:30:20', '11:15:10', '07:59:59', '23:59:59']; output: ['7.7500 hours', '5.5056 hours', '11.2528 hours', '7.9997 hours', '23.9997 hours']"}
{"id": "46-4", "oq_id": 46, "desc": "Input: a list of string values in time format (HH:MM:SS).\nOutput: a list of string values representing time in decimal hours.\nFunctionality: The transformation converts the time in HH:MM:SS format to decimal hours by dividing the minutes and seconds by 60 and adding them to the hours.\nExample: Input: ['02:00:00', '1:30:15', '10:10:10', '03:45:30', '20:20:20']; output: ['2.0000 hours', '1.5042 hours', '10.1694 hours', '3.7583 hours', '20.3389 hours']"}
{"id": "46-0", "oq_id": 46, "desc": "Input: a list of string values in time format (HH:MM:SS).\nOutput: a list of numerical values in decimal format representing hours.\nFunctionality: The transformation converts the time in HH:MM:SS format to decimal hours by dividing the minutes and seconds by 60 and adding them to the hours.\nExample: Input: ['08:15:30', '4:45:10', '10:20:50', '06:30:15', '18:18:18']; output: ['8.2583 hours', '4.7528 hours', '10.3472 hours', '6.5042 hours', '18.3050 hours']"}
{"id": "46-1", "oq_id": 46, "desc": "Input: a list of string values in time format (HH:MM:SS).\nOutput: a list of numerical values in decimal format representing hours.\nFunctionality: The transformation converts the time in HH:MM:SS format to decimal hours by dividing the minutes and seconds by 60 and adding them to the hours.\nExample: Input: ['05:55:55', '3:33:33', '09:09:09', '07:07:07', '15:15:15']; output: ['5.9319 hours', '3.5592 hours', '9.1525 hours', '7.1186 hours', '15.2542 hours']"}
{"id": "46-3", "oq_id": 46, "desc": "Input: a list of string values in the format of \"hh:mm:ss\".\nOutput: a list of string values in the format of \"X.XXXX hours\".\nFunctionality: The transformation converts the time in each element from the given sequence to decimal hours and appends \"hours\" to the result list.\nExample: Input: ['06:06:06', '3:03:03', '09:09:09', '12:12:12', '15:15:15']; output: ['6.1017 hours', '3.0508 hours', '9.1525 hours', '12.2033 hours', '15.2542 hours']"}
{"id": "46-2", "oq_id": 46, "desc": "Input: a list of string values in the format of \"hh:mm:ss\".\nOutput: a list of string values in the format of \"x.xxxx hours\".\nFunctionality: The transformation converts the time in each element from the given sequence to decimal hours and appends \"hours\" to the result list.\nExample: Input: ['04:40:40', '2:20:20', '08:08:08', '03:03:03', '12:12:12']; output: ['4.6778 hours', '2.3389 hours', '8.1356 hours', '3.0508 hours', '12.2033 hours']"}
{"id": "47-9", "oq_id": 47, "desc": "Input: a list of binary numerical strings.\nOutput: a list of hexadecimal numerical strings.\nFunctionality: The transformation converts each binary string from the input sequence to its equivalent hexadecimal representation, and outputs the results in a list.\nExample: Input: ['100110', '01100110', '1111000', '1001', '1000']; output: ['26', '66', '78', '9', '8']"}
{"id": "47-8", "oq_id": 47, "desc": "Input: a list of binary strings.\nOutput: a list of hexadecimal strings.\nFunctionality: The transformation converts each binary string to its hexadecimal equivalent.\nExample: Input: ['001110', '11100011', '1100110', '1000', '0110']; output: ['E', 'E3', '66', '8', '6']"}
{"id": "47-5", "oq_id": 47, "desc": "Input: a list of binary strings.\nOutput: a list of hexadecimal strings.\nFunctionality: The transformation converts each binary string in the given sequence to its equivalent hexadecimal representation and outputs the result as a list.\nExample: Input: ['001001', '10010010', '0101011', '1001', '0011']; output: ['9', '92', '2B', '9', '3']"}
{"id": "47-4", "oq_id": 47, "desc": "Input: a list of binary values represented as strings.\nOutput: a list of hexadecimal values represented as strings.\nFunctionality: The transformation converts each binary string to a hexadecimal string in the output list.\nExample: Input: ['011010', '11110000', '1010101', '0101', '1101']; output: ['1A', 'F0', '55', '5', 'D']"}
{"id": "47-6", "oq_id": 47, "desc": "Input: a list of binary strings.\nOutput: a list of hexadecimal strings.\nFunctionality: The transformation converts each binary string to its hexadecimal equivalent and outputs the result as a list of hexadecimal strings.\nExample: Input: ['110011', '00111001', '1101010', '1010', '1001']; output: ['33', '39', '6A', 'A', '9']"}
{"id": "47-7", "oq_id": 47, "desc": "Input: a list of binary strings.\nOutput: a list of hexadecimal strings.\nFunctionality: The transformation converts each binary string to its hexadecimal equivalent and outputs the result as a list of hexadecimal strings.\nExample: Input: ['101011', '01010101', '0011001', '1100', '0010']; output: ['2B', '55', '19', 'C', '2']"}
{"id": "47-3", "oq_id": 47, "desc": "Input: a list of binary strings.\nOutput: a list of hexadecimal strings.\nFunctionality: The transformation converts each binary string in the given sequence to its equivalent hexadecimal representation and outputs the result as a list.\nExample: Input: ['100101', '10101010', '0000000', '0011', '1110']; output: ['25', 'AA', '0', '3', 'E']"}
{"id": "47-2", "oq_id": 47, "desc": "Input: a list of binary values.\nOutput: a list of hexadecimal values.\nFunctionality: The transformation converts each binary value from the input sequence to its hexadecimal equivalent, and outputs the results as a list of hexadecimal values.\nExample: Input: ['010101', '11100000', '1111111', '1111', '101010']; output: ['15', 'E0', '7F', 'F', '2A']"}
{"id": "47-0", "oq_id": 47, "desc": "Input: a list of binary strings.\nOutput: a list of hexadecimal strings.\nFunctionality: The transformation converts each binary string in the given sequence to its equivalent hexadecimal representation and outputs the result as a list.\nExample: Input: ['100100', '11011011', '0101010', '101', '1011']; output: ['24', 'DB', '2A', '5', 'B']"}
{"id": "47-1", "oq_id": 47, "desc": "Input: a list of binary strings.\nOutput: a list of hexadecimal strings.\nFunctionality: The transformation converts each binary string to its hexadecimal equivalent and outputs the result as a list of hexadecimal strings.\nExample: Input: ['111000', '00110000', '1000111', '101010', '1100']; output: ['38', '30', '47', '2A', 'C']"}
{"id": "48-0", "oq_id": 48, "desc": "Input: a list of string values, with roman numerals in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each roman numeral to its corresponding normal number in the given sequence and outputs the result as a list.\nExample: Input: ['IV', 'XXI', 'XLV', 'LXVIII', 'XCIX']; output: ['4', '21', '45', '68', '99']"}
{"id": "48-1", "oq_id": 48, "desc": "Input: a list of string values, representing Roman numerals.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each Roman numeral to a normal number and outputs the result as a list.\nExample: Input: ['IX', 'XL', 'LXX', 'XCIII', 'CXX']; output: ['9', '40', '70', '93', '120']"}
{"id": "48-3", "oq_id": 48, "desc": "Input: a list of string values, with roman numerals representing numbers in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each roman numeral to its corresponding normal number in the given sequence, and outputs the result as a list.\nExample: Input: ['XII', 'XXXI', 'LIV', 'LXXXV', 'XCII']; output: ['12', '31', '54', '85', '92']"}
{"id": "48-2", "oq_id": 48, "desc": "Input: a list of string values, with roman numerals in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each roman numeral to its corresponding normal number in the given sequence and outputs the result as a list.\nExample: Input: ['VIII', 'XVII', 'XXXV', 'LV', 'LXXXIX']; output: ['8', '17', '35', '55', '89']"}
{"id": "48-6", "oq_id": 48, "desc": "Input: a list of strings representing Roman numerals.\nOutput: a list of strings representing normal numerical values.\nFunctionality: The transformation converts each Roman numeral to its corresponding normal number and outputs the result as a list of strings.\nExample: Input: ['XVII', 'XXVI', 'XXXVII', 'LXII', 'LXXXVII']; output: ['17', '26', '37', '62', '87']"}
{"id": "48-7", "oq_id": 48, "desc": "Input: a list of string values representing Roman numerals.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each Roman numeral to its corresponding normal number and outputs as a list of numerical values.\nExample: Input: ['X', 'XVIII', 'XXX', 'LX', 'LXXX']; output: ['10', '18', '30', '60', '80']"}
{"id": "48-5", "oq_id": 48, "desc": "Input: a list of string values, with roman numerals representing numbers in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each roman numeral to its corresponding normal number in the given sequence, and outputs the result as a list.\nExample: Input: ['XVIII', 'XX', 'XXIX', 'XLVI', 'LXI']; output: ['18', '20', '29', '46', '61']"}
{"id": "48-4", "oq_id": 48, "desc": "Input: a list of string values, with roman numerals representing numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each roman numeral element from the input sequence to normal numbers and outputs the result as a list.\nExample: Input: ['XV', 'XXVII', 'XXXVI', 'LVIII', 'LXIV']; output: ['15', '27', '36', '58', '64']"}
{"id": "48-9", "oq_id": 48, "desc": "Input: a list of string values, representing Roman numerals.\nOutput: a list of string values, representing normal numbers.\nFunctionality: The transformation converts each Roman numeral to its equivalent normal number and outputs the result as a list.\nExample: Input: ['I', 'V', 'X', 'L', 'C']; output: ['1', '5', '10', '50', '100']"}
{"id": "48-8", "oq_id": 48, "desc": "Input: a list of string values, with roman numerals representing numbers in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each roman numeral to its corresponding normal number in the given sequence, and outputs the result as a list.\nExample: Input: ['XIV', 'XXII', 'XL', 'LIV', 'LXVI']; output: ['14', '22', '40', '54', '66']"}
{"id": "49-3", "oq_id": 49, "desc": "Input: a list of string values, with percentage values in each element.\nOutput: a list of string values, with degree values in each element.\nFunctionality: The transformation converts the percentage values to degrees by multiplying each value by 3.6, then appends ' Degrees' to the result.\nExample: Input: ['33%', '22%', '55%', '42%', '67%']; output: ['18.26 Degrees', '12.41 Degrees', '28.81 Degrees', '22.78 Degrees', '33.82 Degrees']"}
{"id": "49-2", "oq_id": 49, "desc": "Input: a list of string values, with percentage values in each element.\nOutput: a list of string values, with degree values in each element.\nFunctionality: The transformation converts the percentage values to degrees by multiplying each value by 3.6, then appends 'Degrees' to the result list.\nExample: Input: ['20%', '50%', '32%', '18%', '9%']; output: ['11.31 Degrees', '26.57 Degrees', '17.74 Degrees', '10.20 Degrees', '5.14 Degrees']"}
{"id": "49-0", "oq_id": 49, "desc": "Input: a list of string values, with percentage values in each element.\nOutput: a list of string values, with degree values in each element.\nFunctionality: The transformation converts the percentage values to degrees by multiplying each value by 3.6, then appends ' Degrees' to the result.\nExample: Input: ['15%', '56%', '37%', '8%', '21%']; output: ['8.53 Degrees', '29.25 Degrees', '20.30 Degrees', '4.57 Degrees', '11.86 Degrees']"}
{"id": "49-1", "oq_id": 49, "desc": "Input: a list of string values, with percentage values in each element.\nOutput: a list of string values, with degree values in each element.\nFunctionality: The transformation converts the percentage values to degrees by multiplying each value by 180/100, then appends ' Degrees' to the result.\nExample: Input: ['10%', '25%', '40%', '60%', '75%']; output: ['5.71 Degrees', '14.04 Degrees', '21.80 Degrees', '30.96 Degrees', '36.87 Degrees']"}
{"id": "49-5", "oq_id": 49, "desc": "Input: a list of string values, with percentage values in each element.\nOutput: a list of string values, with degree values in each element.\nFunctionality: The transformation converts the percentage values to degrees by multiplying each value by 360/100, then appends the \"Degrees\" suffix, and output the result as a list.\nExample: Input: ['7%', '28%', '39%', '58%', '41%']; output: ['4.00 Degrees', '15.64 Degrees', '21.31 Degrees', '30.11 Degrees', '22.29 Degrees']"}
{"id": "49-4", "oq_id": 49, "desc": "Input: a list of string values, with percentage values in each element.\nOutput: a list of string values, with degree values in each element.\nFunctionality: The transformation converts the percentage values to degrees by multiplying each value by 3.6, then appends the \"Degrees\" suffix, and output the result as a list.\nExample: Input: ['19%', '48%', '70%', '13%', '26%']; output: ['10.76 Degrees', '25.64 Degrees', '34.99 Degrees', '7.41 Degrees', '14.57 Degrees']"}
{"id": "49-6", "oq_id": 49, "desc": "Input: a list of string values, with percentage values in each element.\nOutput: a list of string values, with degree values in each element.\nFunctionality: The transformation converts the percentage values to degrees by dividing each value by 100 and multiplying by 360 (since 100% equals 360 degrees).\nExample: Input: ['16%', '59%', '48%', '35%', '11%']; output: ['9.09 Degrees', '30.54 Degrees', '25.64 Degrees', '19.29 Degrees', '6.28 Degrees']"}
{"id": "49-7", "oq_id": 49, "desc": "Input: a list of string values, with percentage values in each element.\nOutput: a list of string values, with degree values in each element.\nFunctionality: The transformation converts the percentage values to degrees by multiplying each value by 360/100, then appends 'Degrees' to the result.\nExample: Input: ['22%', '44%', '33%', '27%', '17%']; output: ['12.41 Degrees', '23.75 Degrees', '18.26 Degrees', '15.11 Degrees', '9.65 Degrees']"}
{"id": "49-9", "oq_id": 49, "desc": "Input: a list of string values, with percentage values in each element.\nOutput: a list of string values, with degree values in each element.\nFunctionality: The transformation converts the percentage values to degrees by multiplying each value by 1.8, and appends the 'Degrees' suffix to each result.\nExample: Input: ['3%', '12%', '27%', '52%', '64%']; output: ['5.4 Degrees', '21.6 Degrees', '48.6 Degrees', '93.6 Degrees', '115.2 Degrees']"}
{"id": "49-8", "oq_id": 49, "desc": "Input: a list of string values, with percentage values in each element.\nOutput: a list of string values, with degree values in each element.\nFunctionality: The transformation converts the percentage values to degrees by multiplying each value by 360/100, then appends 'Degrees' to the result list.\nExample: Input: ['13%', '29%', '36%', '63%', '71%']; output: ['46.8 Degrees', '104.4 Degrees', '129.6 Degrees', '226.8 Degrees', '255.6 Degrees']"}
{"id": "50-2", "oq_id": 50, "desc": "Input: a list of string values, representing regular time in AM/PM format.\nOutput: a list of string values, representing time in 24-hour format.\nFunctionality: The transformation converts each time in the given sequence from regular time to military time format, and outputs the result as a list of strings.\nExample: Input: ['1:45 PM', '10:15 AM', '7:20 PM', '2:10 PM', '11:45 AM']; output: ['1345', '1015', '1920', '1410', '1145']"}
{"id": "50-3", "oq_id": 50, "desc": "Input: a list of string values, representing regular time in AM or PM format.\nOutput: a list of string values, representing military time in 24-hour format.\nFunctionality: The transformation converts each element from regular time format to military time format, removing the colon and AM/PM indicator, and output the result as a list.\nExample: Input: ['5:30 AM', '8:00 PM', '3:00 PM', '6:45 PM', '12:00 PM']; output: ['0530', '2000', '1500', '1845', '1200']"}
{"id": "50-1", "oq_id": 50, "desc": "Input: a list of string values, representing regular time in AM/PM format.\nOutput: a list of string values, representing military time format.\nFunctionality: The transformation converts each element from regular time in AM/PM format to military time format, removing the delimiter and padding zeros if necessary, and output the result as a list.\nExample: Input: ['9:00 AM', '12:30 PM', '6:45 AM', '4:00 PM', '8:15 PM']; output: ['0900', '1230', '0645', '1600', '2015']"}
{"id": "50-0", "oq_id": 50, "desc": "Input: a list of string values, representing regular time in AM/PM format.\nOutput: a list of string values, representing military time in 24-hour format.\nFunctionality: The transformation converts each element from regular time (AM/PM) to military time (24-hour format) and outputs the result as a list.\nExample: Input: ['3:30 PM', '7:45 AM', '2:15 PM', '10:30 AM', '5:00 PM']; output: ['1530', '0745', '1415', '1030', '1700']"}
{"id": "50-4", "oq_id": 50, "desc": "Input: a list of string values, representing regular time in AM/PM format.\nOutput: a list of string values, representing military time.\nFunctionality: The transformation converts each element in the given sequence from regular time to military time format.\nExample: Input: ['11:30 AM', '4:15 PM', '9:30 AM', '7:00 PM', '1:15 PM']; output: ['1130', '1615', '0930', '1900', '1315']"}
{"id": "50-5", "oq_id": 50, "desc": "Input: a list of string values, representing regular time in AM/PM format.\nOutput: a list of string values, representing military time without colons.\nFunctionality: The transformation converts each time from regular AM/PM format to military time format, removing the colons and leading zeros when necessary.\nExample: Input: ['10:45 AM', '2:30 PM', '3:45 AM', '6:15 PM', '12:30 AM']; output: ['1045', '1430', '0345', '1815', '0030']"}
{"id": "50-7", "oq_id": 50, "desc": "Input: a list of string values, representing regular time in AM/PM format.\nOutput: a list of string values, representing time in military format (24-hour clock).\nFunctionality: The transformation converts each time in the given sequence from regular time format to military time format and outputs the result as a list.\nExample: Input: ['1:15 PM', '5:45 PM', '10:00 AM', '8:15 AM', '3:30 PM']; output: ['1315', '1745', '1000', '0815', '1530']"}
{"id": "50-6", "oq_id": 50, "desc": "Input: a list of string values, representing regular time in AM/PM format.\nOutput: a list of string values, representing military time in 24-hour format.\nFunctionality: The transformation converts each element from regular time format to military time format, removing the colon and AM/PM indicator, and output the result as a list.\nExample: Input: ['4:30 PM', '9:00 PM', '5:45 AM', '8:30 AM', '2:00 PM']; output: ['1630', '2100', '0545', '0830', '1400']"}
{"id": "50-8", "oq_id": 50, "desc": "Input: a list of string values, representing regular time in AM and PM format.\nOutput: a list of string values, representing military time in 24-hour format.\nFunctionality: The transformation converts each element from regular time to military time by removing the space, AM, and PM, and adding leading zeros as necessary.\nExample: Input: ['7:00 AM', '11:45 AM', '2:30 PM', '6:15 AM', '9:30 PM']; output: ['0700', '1145', '1430', '0615', '2130']"}
{"id": "50-9", "oq_id": 50, "desc": "Input: a list of string values, representing regular time in AM/PM format.\nOutput: a list of string values, representing military time format.\nFunctionality: The transformation converts each element from regular time in AM/PM format to military time format, removing the delimiter and converting to a 4-digit string.\nExample: Input: ['12:00 PM', '4:30 AM', '7:45 PM', '9:15 AM', '3:45 PM']; output: ['1200', '0430', '1945', '0915', '1545']"}
{"id": "51-1", "oq_id": 51, "desc": "Input: a list of string values, where each element represents a pair of latitude and longitude coordinates.\nOutput: a list of string values, where each element represents the corresponding UTM coordinates.\nFunctionality: The transformation converts each pair of latitude and longitude coordinates in the given sequence to UTM coordinates and formats them as strings in the output list.\nExample: Input: ['25.55, -77.33', '47.99, 23.22', '33.11, -117.66', '55.44, -2.11', '20.22, 100.33']; output: ['265897mE, 2827904mN', '665629mE, 5317573mN', '438421mE, 3663675mN', '556306mE, 6144116mN', '638940mE, 2236384mN']"}
{"id": "51-0", "oq_id": 51, "desc": "Input: a list of strings with latitude and longitude values in the format 'latitude, longitude'.\nOutput: a list of strings in UTM coordinate format.\n\nFunctionality: The transformation converts the latitude and longitude coordinates provided in each element of the given list into UTM coordinates and formats them accordingly in the result list.\n\nExample: Input: ['50.88, 70.55', '55.22, 37.11', '38.99, -77.22', '42.33, -115.11', '30.11, 112.44']; output: ['609040mE, 5637624mN', '379769mE, 6120902mN', '307729mE, 4318011mN', '655716mE, 4688146mN', '638738mE, 3331849mN']"}
{"id": "51-2", "oq_id": 51, "desc": "Input: a list of string values, where each element represents a pair of latitude and longitude coordinates.\nOutput: a list of string values, where each element represents UTM coordinates.\n\nFunctionality: The transformation converts each pair of latitude and longitude coordinates to UTM coordinates.\nExample: Input: ['39.66, -104.88', '41.11, 71.22', '35.77, 139.33', '28.22, -25.88', '50.44, 9.11']; output: ['510293mE, 4390028mN', '686401mE, 4553343mN', '349044mE, 3959724mN', '609900mE, 3122081mN', '507811mE, 5587559mN']"}
{"id": "51-3", "oq_id": 51, "desc": "Input: a list of strings with latitude and longitude values in the format 'latitude, longitude'.\nOutput: a list of strings with UTM coordinate values in the format 'Easting, Northing'.\nFunctionality: The transformation converts the latitude and longitude values in each element of the given sequence to UTM coordinate values and outputs them as strings in the result list.\nExample: Input: ['48.33, 11.11', '37.77, -122.44', '53.55, -113.22', '60.22, 3.33', '45.44, 25.66']; output: ['656386mE, 5355130mN', '549319mE, 4180444mN', '352925mE, 5935748mN', '186102mE, 6689409mN', '395199mE, 5032703mN']"}
{"id": "51-7", "oq_id": 51, "desc": "Input: a list of strings with latitude and longitude values.\nOutput: a list of strings with UTM coordinates.\nFunctionality: The transformation converts each pair of latitude and longitude values to UTM coordinates and outputs them as strings in the result list.\nExample: Input: ['20.66, -103.88', '23.11, -82.22', '25.77, 55.33', '28.22, 2.77', '21.44, -97.11']; output: ['616667mE, 2284922mN', '375067mE, 2556218mN', '332531mE, 2851274mN', '477431mE, 3121594mN', '695870mE, 2372026mN']"}
{"id": "51-6", "oq_id": 51, "desc": "Input: a list of strings with latitude and longitude values in the format 'latitude, longitude'.\nOutput: a list of strings with UTM coordinate values in the format 'Easting, Northing'.\nFunctionality: The transformation converts the latitude and longitude values in each element of the given sequence to UTM coordinate values and outputs them as a list of strings.\nExample: Input: ['41.33, -82.22', '37.77, -122.44', '53.55, -113.22', '60.22, 3.33', '45.44, 25.66']; output: ['397908mE, 4576109mN', '549319mE, 4180444mN', '352925mE, 5935748mN', '186102mE, 6689409mN', '395199mE, 5032703mN']"}
{"id": "51-4", "oq_id": 51, "desc": "Input: a list of string values, where each element represents a pair of latitude and longitude coordinates.\nOutput: a list of string values, where each element represents the corresponding UTM coordinates.\nFunctionality: The transformation converts each pair of latitude and longitude coordinates in the given sequence to UTM coordinates and formats them as strings in the output list.\nExample: Input: ['32.88, -117.33', '39.22, 125.11', '43.99, -75.22', '36.33, 136.11', '55.11, 37.44']; output: ['469131mE, 3638032mN', '682149mE, 4343311mN', '482358mE, 4870785mN', '599625mE, 4021123mN', '400486mE, 6108143mN']"}
{"id": "51-5", "oq_id": 51, "desc": "Input: a list of strings with latitude and longitude values.\nOutput: a list of strings converted to UTM coordinates.\nFunctionality: The transformation converts each latitude and longitude pair in the given sequence to UTM coordinates and outputs the result as a list.\nExample: Input: ['38.66, -85.88', '33.11, -88.22', '36.77, 62.33', '31.22, 121.77', '42.44, -71.11']; Output: ['597446mE, 4279642mN', '386170mE, 3664143mN', '440206mE, 4069567mN', '382842mE, 3454635mN', '326460mE, 4700787mN']"}
{"id": "51-8", "oq_id": 51, "desc": "Input: a list of string values, where each element represents a pair of latitude and longitude values.\nOutput: a list of string values, where each element represents the corresponding UTM coordinates.\nFunctionality: The transformation converts each pair of latitude and longitude values in the given sequence to UTM coordinates and formats them as strings in the output list.\nExample: Input: ['30.33, 54.11', '36.77, 3.44', '32.55, 110.22', '23.22, 43.33', '15.44, 75.11']; output: ['222134mE, 3358893mN', '539267mE, 4069448mN', '426767mE, 3601669mN', '329117mE, 2568856mN', '511801mE, 1706995mN']"}
{"id": "51-9", "oq_id": 51, "desc": "Input: a list of string values, where each element represents a pair of latitude and longitude coordinates.\nOutput: a list of string values, where each element represents the corresponding UTM coordinates.\nFunctionality: The transformation converts each pair of latitude and longitude coordinates in the given sequence to UTM coordinates and formats them as strings in the output list.\nExample: Input: ['25.88, -80.33', '32.22, -112.11', '38.99, -77.22', '43.33, 5.11', '55.11, -3.44']; output: ['567120mE, 2862566mN', '395402mE, 3565361mN', '307729mE, 4318011mN', '671061mE, 4799623mN', '471930mE, 6107120mN']"}
{"id": "52-0", "oq_id": 52, "desc": "Input: a list of string values, where each string represents an RGB color in the format 'r,g,b'.\nOutput: a list of string values, where each string represents a CMYK color in the format 'c,m,y,k'.\n\nFunctionality: The transformation converts each RGB color to CMYK color using the following formulas:\n- Calculate C (Cyan) = 1 - (R / 255)\n- Calculate M (Magenta) = 1 - (G / 255)\n- Calculate Y (Yellow) = 1 - (B / 255)\n- K (Black) = min(C, M, Y)\n\nExample: Input: ['255,255,255', '128,128,128', '100,200,50', '150,75,0', '200,100,150']\nOutput: ['0,0,0,0', '0,0,0,0.498', '0.5,0,0.75,0.216', '0,0.5,1,0.412', '0,0.5,0.25,0.216']"}
{"id": "52-1", "oq_id": 52, "desc": "Input: a list of strings representing RGB color values in the format 'R,G,B'.\nOutput: a list of strings representing CMYK color values in the format 'C,M,Y,K'.\nFunctionality: The transformation converts each RGB color value to CMYK color value.\nExample: Input: ['20,40,60', '80,160,240', '75,25,100', '140,70,210', '30,90,180']; Output: ['0.667,0.333,0,0.765', '0.667,0.333,0,0.059', '0.25,0.75,0,0.608', '0.333,0.667,0,0.176', '0.833,0.5,0,0.294']"}
{"id": "52-3", "oq_id": 52, "desc": "Input: a list of strings, where each string represents a RGB color value in the format 'R,G,B'.\nOutput: a list of strings, where each string represents a CMYK color value in the format 'C,M,Y,K'.\nFunctionality: The transformation converts each RGB color value to the corresponding CMYK color value using a specific formula, and output the result as a list.\nExample: Input: ['50,100,150', '75,150,225', '180,90,45', '135,270,67', '20,30,40']; output: ['0.667,0.333,0,0.412', '0.667,0.333,0,0.118', '0,0.5,0.75,0.294', '0.5,0,0.752,-0.059', '0.5,0.25,0,0.843']"}
{"id": "52-2", "oq_id": 52, "desc": "Input: a list of string values, each containing RGB values separated by commas.\nOutput: a list of string values, each containing CMYK values separated by commas.\nFunctionality: The transformation converts each RGB value from the given sequence to CMYK values, and outputs the result as a list of strings.\nExample: Input: ['10,20,30', '25,50,75', '120,60,30', '90,180,45', '15,225,135']; Output: ['0.667,0.333,0,0.882', '0.667,0.333,0,0.706', '0,0.5,0.75,0.529', '0.5,0,0.75,0.294', '0.933,0,0.4,0.118']"}
{"id": "52-6", "oq_id": 52, "desc": "Input: a list of strings, where each string represents a RGB color value in the format 'R,G,B'.\nOutput: a list of strings, where each string represents a CMYK color value in the format 'C,M,Y,K'.\nFunctionality: The transformation converts each RGB color value to the corresponding CMYK color value using a specific formula, and output the result as a list.\nExample: Input: ['15,30,45', '60,120,180', '95,47,142', '80,160,40', '190,95,240']; output: ['0.667,0.333,0,0.824', '0.667,0.333,0,0.294', '0.331,0.669,0,0.443', '0.5,0,0.75,0.373', '0.208,0.604,0,0.059']"}
{"id": "52-7", "oq_id": 52, "desc": "Input: a list of string values, each representing an RGB color value.\nOutput: a list of string values, each representing a CMYK color value.\nFunctionality: The transformation converts each RGB color value to CMYK color value using the appropriate conversion formula, and outputs the result as a list.\nExample: Input: ['85,170,255', '0,255,255', '176,88,44', '156,78,36', '48,96,144']; output: ['0.667,0.333,0,0', '1,0,0,0', '0,0.5,0.75,0.31', '0,0.5,0.769,0.388', '0.667,0.333,0,0.435']"}
{"id": "52-5", "oq_id": 52, "desc": "Input: a list of strings with RGB color values in the format 'R,G,B'.\nOutput: a list of strings with CMYK color values in the format 'C,M,Y,K'.\n\nFunctionality: The transformation converts RGB color values to CMYK color values for each element in the given sequence, and formats the result as a string.\n\nExample: Input: ['35,70,105', '220,110,55', '255,127,63', '90,180,90', '125,250,0']; Output: ['0.667,0.333,0,0.588', '0,0.5,0.75,0.137', '0,0.502,0.753,0', '0.5,0,0.5,0.294', '0.5,0,1,0.02']"}
{"id": "52-4", "oq_id": 52, "desc": "Input: a list of strings with RGB color values in the format 'R,G,B'.\nOutput: a list of strings with CMYK color values in the format 'C,M,Y,K'.\n\nFunctionality: The transformation converts RGB color values to CMYK color values for each element in the given sequence, and formats the result as a string.\n\nExample: Input: ['70,140,210', '150,75,125', '225,112,37', '200,0,100', '210,105,0']; Output: ['0.667,0.333,0,0.176', '0,0.5,0.167,0.412', '0,0.502,0.836,0.118', '0,1,0.5,0.216', '0,0.5,1,0.176']"}
{"id": "52-9", "oq_id": 52, "desc": "Input: a list of string values, where each element represents an RGB color value.\nOutput: a list of string values, where each element represents a CMYK color value.\n\nFunctionality: The transformation converts each RGB color value in the input list to the corresponding CMYK color value using a formula and outputs the result as a list.\n\nExample: Input: ['100,0,0', '150,0,150', '200,50,0', '100,50,50', '25,100,200']; output: ['0,1,1,0.608', '0,1,0,0.412', '0,0.75,1,0.216', '0,0.5,0.5,0.608', '0.875,0.5,0,0.216']"}
{"id": "52-8", "oq_id": 52, "desc": "Input: a list of string values, each representing an RGB color value.\nOutput: a list of string values, each representing a CMYK color value.\nFunctionality: The transformation converts each RGB color value to CMYK color value using the appropriate conversion formula, and outputs the result as a list.\nExample: Input: ['225,225,50', '45,225,180', '32,64,96', '12,24,36', '255,255,0']; output: ['0,0,0.778,0.118', '0.8,0,0.2,0.118', '0.667,0.333,0,0.624', '0.667,0.333,0,0.859', '0,0,1,0']"}
{"id": "53-3", "oq_id": 53, "desc": "Input: a list of string values representing military time.\nOutput: a list of string values representing standard time with AM/PM notation.\nFunctionality: The transformation converts each element in the given sequence from military time to standard time with AM/PM notation.\nExample: Input: ['1230', '1830', '1330', '1630', '2230', '0030']; output: ['12:30 PM', '6:30 PM', '1:30 PM', '4:30 PM', '10:30 PM', '12:30 AM']"}
{"id": "53-2", "oq_id": 53, "desc": "Input: a list of string values containing military time format.\nOutput: a list of string values containing standard time format.\n\nFunctionality: The transformation converts each military time in the given sequence to standard time format with AM or PM indication, and outputs the result as a list.\n\nExample: Input: ['0700', '2300', '1100', '0300', '1700', '2100']; output: ['7:00 AM', '11:00 PM', '11:00 AM', '3:00 AM', '5:00 PM', '9:00 PM']"}
{"id": "53-0", "oq_id": 53, "desc": "Input: a list of string values representing military time.\nOutput: a list of string values representing standard time.\nFunctionality: The transformation converts each military time in the given sequence to standard time format and outputs the result as a list.\nExample: Input: ['2359', '1200', '0800', '1730', '0600', '2000']; output: ['11:59 PM', '12:00 PM', '8:00 AM', '5:30 PM', '6:00 AM', '8:00 PM']"}
{"id": "53-1", "oq_id": 53, "desc": "Input: a list of string values representing military time.\nOutput: a list of string values representing standard time with AM/PM notation.\nFunctionality: The transformation converts each element in the given sequence from military time to standard time with AM/PM notation, and outputs the result as a list.\nExample: Input: ['0900', '2200', '1500', '0500', '1000', '1900']; output: ['9:00 AM', '10:00 PM', '3:00 PM', '5:00 AM', '10:00 AM', '7:00 PM']"}
{"id": "53-5", "oq_id": 53, "desc": "Input: a list of string values representing military time.\nOutput: a list of string values representing standard time with AM/PM notation.\nFunctionality: The transformation converts each element in the given sequence from military time to standard time with AM/PM notation.\nExample: Input: ['1130', '2030', '0930', '0430', '1830', '2330']; output: ['11:30 AM', '8:30 PM', '9:30 AM', '4:30 AM', '6:30 PM', '11:30 PM']"}
{"id": "53-4", "oq_id": 53, "desc": "Input: a list of string values representing military time.\nOutput: a list of string values representing standard time.\nFunctionality: The transformation converts each military time in the given sequence to standard time format (12-hour clock with AM/PM) and outputs the result as a list.\nExample: Input: ['1945', '0845', '1345', '2245', '1545', '0145']; output: ['7:45 PM', '8:45 AM', '1:45 PM', '10:45 PM', '3:45 PM', '1:45 AM']"}
{"id": "53-6", "oq_id": 53, "desc": "Input: a list of string values, representing military time.\nOutput: a list of string values, representing standard time.\n\nFunctionality: The transformation converts each element from military time format to standard time format, where the hours are converted to AM/PM format.\n\nExample: Input: ['0520', '0220', '1620', '2120', '0520', '0525']; Output: ['5:20 AM', '2:20 AM', '4:20 PM', '9:20 PM', '5:20 AM', '5:25 AM']"}
{"id": "53-7", "oq_id": 53, "desc": "Input: a list of string values representing military time.\nOutput: a list of string values representing standard time.\nFunctionality: The transformation converts each military time in the given sequence to standard time format (e.g., 1715 to 5:15 PM) and outputs the results as a list.\nExample: Input: ['1715', '0915', '2115', '1515', '0015', '1615']; output: ['5:15 PM', '9:15 AM', '9:15 PM', '3:15 PM', '12:15 AM', '4:15 PM']"}
{"id": "53-9", "oq_id": 53, "desc": "Input: a list of string values representing military time.\nOutput: a list of string values representing standard time.\nFunctionality: The transformation converts each element from military time to standard time by adding 'AM' or 'PM' and formatting the hours and minutes accordingly, then outputs the results as a list.\nExample: Input: ['0912', '1312', '1712', '2112', '0112', '0512']; output: ['9:12 AM', '1:12 PM', '5:12 PM', '9:12 PM', '1:12 AM', '5:12 AM']"}
{"id": "53-8", "oq_id": 53, "desc": "Input: a list of string values, representing a time in military format (HHMM).\nOutput: a list of string values, representing the time in standard format (H:MM AM/PM).\nFunctionality: The transformation converts each element in the given sequence from military time to standard time format, with added AM or PM suffix, and output the result as a list.\nExample: Input: ['0555', '2055', '0055', '0955', '1455', '1450']; output: ['5:55 AM', '8:55 PM', '12:55 AM', '9:55 AM', '2:55 PM', '2:50 PM']"}
{"id": "54-0", "oq_id": 54, "desc": "Input: a list of string values, each containing a comma-separated list of numerical values representing CMYK values.\nOutput: a list of string values, each containing a comma-separated list of numerical values representing RGB values.\nFunctionality: The transformation converts each element from CMYK to RGB color space by applying the necessary mathematical operations, and outputs the result as a list.\nExample: Input: ['0,0.5,0.8,0', '0.9,0,0,0.3', '0.33,0.66,0.99,0', ...]; Output: ['255,128,51', '18,178,178', '171,87,3', ...]"}
{"id": "55-5", "oq_id": 55, "desc": "Input: a list of binary strings. \nOutput: a list of decimal numbers presented as strings.\nFunctionality: The transformation converts each binary string to its decimal equivalent and outputs the result as a string in the resulting list.\nExample: Input: ['1111010101', '1001001001', '101010101', '110100101', '1110111000', '101011010', '110100011', '1110011011', '100110101', '1010101011']; output: ['981', '585', '341', '421', '952', '346', '419', '923', '309', '683']"}
{"id": "55-4", "oq_id": 55, "desc": "Input: a list of binary strings. \nOutput: a list of numerical values. \nFunctionality: The transformation converts each binary string to its decimal equivalent. \nExample: Input: ['1010100110', '1111111001', '100110110', '101010101', '1100101001', '1110011001', '100101010', '11011101', '101010101', '1001101101']; output: ['678', '1017', '310', '341', '809', '921', '298', '221', '341', '621']"}
{"id": "55-6", "oq_id": 55, "desc": "Input: a list of binary strings. \nOutput: a list of numerical values. \nFunctionality: The transformation converts each binary string to its decimal equivalent. \nExample: Input: ['1001010110', '101010101', '1100100101', '1110110101', '1111000101', '1001110011', '101110101', '101100110', '11011111', '1010110011']; output: ['598', '341', '805', '949', '965', '627', '373', '358', '223', '691']"}
{"id": "55-7", "oq_id": 55, "desc": "Input: a list of binary strings. \nOutput: a list of numerical values. \nFunctionality: The transformation converts each binary string to its decimal equivalent and output the result as a list of numerical values. \nExample: Input: ['110010101', '1110011000', '101010101', '1101100110', '111111101', '1001101011', '1011001001', '1100101110', '111010111', '1010101010']; output: ['405', '920', '341', '870', '509', '619', '713', '814', '471', '682']"}
{"id": "55-3", "oq_id": 55, "desc": "Input: a list of binary strings. \nOutput: a list of numerical values. \nFunctionality: The transformation converts each binary string element from the given sequence to decimal and output the result as a list. \nExample: Input: ['1111001001', '1000010101', '1010010111', '100110011', '1110110010', '110101010', '1010100101', '11011011', '111111011', '101011010']; output: ['969', '533', '663', '307', '946', '426', '677', '219', '507', '346']"}
{"id": "55-2", "oq_id": 55, "desc": "Input: a list of binary strings.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each binary string element from the given sequence to decimal and output the result as a list of numerical values.\nExample: Input: ['1011110011', '1110100011', '1001001001', '1101010101', '101010101', '111111000', '1001010101', '110111110', '10101010101', '110110010']; output: ['755', '931', '585', '853', '341', '504', '597', '446', '1365', '434']"}
{"id": "55-0", "oq_id": 55, "desc": "Input: a list of binary strings.\nOutput: a list of decimal numbers as strings.\nFunctionality: The transformation converts each binary string to its corresponding decimal number.\nExample: Input: ['1001010101', '1100110011', '111000111', '1010101010', '110110110', '1111001111', '1011010', '110101', '11110111', '101010101']; output: ['597', '819', '455', '682', '438', '975', '90', '53', '247', '341']"}
{"id": "55-1", "oq_id": 55, "desc": "Input: a list of strings representing binary numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each binary number in the given sequence to decimal format and outputs the result as a list of numerical values.\nExample: Input: ['1100101010', '1010111101', '1110000111', '100101010', '101010101', '11011011', '1110101110', '101010101011', '10011101010', '1100110011']; output: ['810', '701', '903', '298', '341', '219', '942', '2731', '1258', '819']"}
{"id": "55-9", "oq_id": 55, "desc": "Input: a list of strings where each string represents a binary number.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each binary number into decimal form and outputs the result as a list of numerical values.\nExample: Input: ['100010101', '1110100100', '1011110100', '1101001110', '1010110101', '1110010011', '1001111111', '1101011010', '101101010', '1001100101']; output: ['277', '932', '756', '846', '693', '915', '639', '858', '362', '613']"}
{"id": "55-8", "oq_id": 55, "desc": "Input: a list of binary strings.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each binary string element from the given sequence to decimal, and output the result as a list of numerical values.\nExample: Input: ['1110000101', '1000110011', '1011100101', '1100111101', '101101010', '1100101001', '111011011', '100010101', '1011111011', '1100011001']; output: ['901', '563', '741', '829', '362', '809', '475', '277', '763', '793']"}
{"id": "56-4", "oq_id": 56, "desc": "Input: a list of string values, representing timespans in HH:MM:SS format.\nOutput: a list of string values, representing timespans in hours, minutes, and seconds format.\nFunctionality: The transformation converts each timespan from the given sequence into hours, minutes, and seconds format, and output the result as a list of strings.\nExample: Input: ['03:41:06.6852974', '14:30:53.0475123', '19:08:29.9425167', '09:03:15.5794623', '20:17:37.4268320']; output: ['3 hrs, 41 mins, 7 secs', '14 hrs, 30 mins, 53 secs', '19 hrs, 8 mins, 30 secs', '9 hrs, 3 mins, 16 secs', '20 hrs, 17 mins, 37 secs']"}
{"id": "56-5", "oq_id": 56, "desc": "Input: a list of string values, representing timespans in HH:MM:SS format.\nOutput: a list of string values, representing timespans in hours, minutes, and seconds format.\nFunctionality: The transformation converts each timespan from the given sequence into hours, minutes, and seconds format, and output the result as a list of strings.\nExample: Input: ['09:19:57.3687456', '20:27:14.8754123', '03:48:19.6457839', '11:02:54.1479856', '23:59:59.9999999']; output: ['9 hrs, 19 mins, 57 secs', '20 hrs, 27 mins, 15 secs', '3 hrs, 48 mins, 20 secs', '11 hrs, 2 mins, 54 secs', '23 hrs, 59 mins, 60 secs']"}
{"id": "56-7", "oq_id": 56, "desc": "Input: a list of string values, representing timespans in HH:MM:SS.mmmmmm format.\nOutput: a list of string values, representing timespans in xx hrs, xx mins, xx secs format.\nFunctionality: The transformation converts each timespan string from the input sequence into a human-readable format with hours, minutes, and seconds, and outputs the result as a list.\nExample: Input: ['06:15:39.1594623', '17:49:29.2468529', '23:08:45.7854123', '12:05:53.1236542', '21:26:38.5984123']; Output: ['6 hrs, 15 mins, 39 secs', '17 hrs, 49 mins, 29 secs', '23 hrs, 8 mins, 46 secs', '12 hrs, 5 mins, 53 secs', '21 hrs, 26 mins, 39 secs']"}
{"id": "56-6", "oq_id": 56, "desc": "Input: a list of string values, representing timespans in HH:MM:SS.mmmmmm format.\nOutput: a list of string values, representing timespans in xx hrs, xx mins, xx secs format.\nFunctionality: The transformation converts each timespan string from the input sequence into a human-readable format with hours, minutes, and seconds, and outputs the result as a list.\nExample: Input: ['11:02:45.4789632', '23:30:37.6823198', '07:19:28.8654721', '14:57:53.5748251', '17:33:29.3518456']; Output: ['11 hrs, 2 mins, 45 secs', '23 hrs, 30 mins, 38 secs', '7 hrs, 19 mins, 29 secs', '14 hrs, 57 mins, 54 secs', '17 hrs, 33 mins, 29 secs']"}
{"id": "56-2", "oq_id": 56, "desc": "Input: a list of string values, representing timespans in the format 'hh:mm:ss.xxxxxxx'.\nOutput: a list of string values, representing timespans in the format 'x hrs, x mins, x secs'.\n\nFunctionality: The transformation converts each timespan from the given sequence into a formatted string with hours, minutes, and seconds, and outputs the result as a list.\n\nExample: Input: ['08:36:45.1245789', '19:12:33.5998743', '06:47:21.7845215', '13:33:39.1369584', '22:44:30.4832542']; Output: ['8 hrs, 36 mins, 45 secs', '19 hrs, 12 mins, 34 secs', '6 hrs, 47 mins, 22 secs', '13 hrs, 33 mins, 39 secs', '22 hrs, 44 mins, 30 secs']"}
{"id": "56-3", "oq_id": 56, "desc": "Input: a list of string values, representing timespans in the format of HH:MM:SS.mmmmmmm.\nOutput: a list of string values, representing the timespans in the format of H hrs, M mins, S secs.\nFunctionality: The transformation converts each timespan from the given sequence to a string representation of hours, minutes, and seconds, and output the result as a list.\nExample: Input: ['05:28:19.3475113', '12:54:10.7892456', '01:02:33.5789465', '16:15:27.4721032', '07:33:11.2587410']; output: ['5 hrs, 28 mins, 19 secs', '12 hrs, 54 mins, 11 secs', '1 hrs, 2 mins, 33 secs', '16 hrs, 15 mins, 27 secs', '7 hrs, 33 mins, 11 secs']"}
{"id": "56-1", "oq_id": 56, "desc": "Input: a list of string values, representing timespans in the format of HH:MM:SS.mmmmmmm.\nOutput: a list of string values, representing timespans in the format of X hrs, X mins, X secs.\nFunctionality: The transformation converts each timespan from the given sequence to a string format indicating hours, minutes, and seconds, and outputs the result as a list.\nExample: Input: ['04:22:15.9375846', '15:46:32.3687915', '20:59:48.1236542', '10:30:15.9878741', '21:57:33.4270111']; output: ['4 hrs, 22 mins, 16 secs', '15 hrs, 46 mins, 32 secs', '20 hrs, 59 mins, 48 secs', '10 hrs, 30 mins, 16 secs', '21 hrs, 57 mins, 33 secs']"}
{"id": "56-0", "oq_id": 56, "desc": "Input: a list of string values, representing timespans in HH:MM:SS.mmmmmm format.\nOutput: a list of string values, representing timespans in xx hrs, xx mins, xx secs format.\nFunctionality: The transformation converts each timespan string from the input sequence into a human-readable format with hours, minutes, and seconds, and outputs the result as a list.\nExample: Input: ['02:45:59.7851423', '09:14:27.6938574', '16:02:58.5469587', '08:11:36.3874983', '18:23:47.0027845']; Output: ['2 hrs, 45 mins, 60 secs', '9 hrs, 14 mins, 28 secs', '16 hrs, 2 mins, 59 secs', '8 hrs, 11 mins, 36 secs', '18 hrs, 23 mins, 47 secs']"}
{"id": "56-8", "oq_id": 56, "desc": "Input: a list of string values, representing timespans in the format of HH:MM:SS.mmmmmmm.\nOutput: a list of string values, representing the timespans in the format of X hrs, Y mins, Z secs.\nFunctionality: The transformation converts each timespan from the given sequence to a string representation of hours, minutes, and seconds with proper formatting.\nExample: Input: ['02:33:47.9871234', '10:54:28.3754129', '22:11:36.5487592', '05:47:23.7892143', '14:02:51.6987410']; output: ['2 hrs, 33 mins, 48 secs', '10 hrs, 54 mins, 28 secs', '22 hrs, 11 mins, 37 secs', '5 hrs, 47 mins, 24 secs', '14 hrs, 2 mins, 52 secs']"}
{"id": "56-9", "oq_id": 56, "desc": "Input: a list of string values, representing timespans in the format 'hh:mm:ss.xxxxxxx'.\nOutput: a list of string values, representing timespans in the format 'x hrs, x mins, x secs'.\n\nFunctionality: The transformation converts each timespan from the given sequence to a formatted string with hours, minutes, and seconds, and outputs the result as a list.\n\nExample: Input: ['07:12:53.1426871', '18:26:47.5789314', '08:49:31.6954217', '16:31:15.3874569', '19:58:27.4754123']; Output: ['7 hrs, 12 mins, 53 secs', '18 hrs, 26 mins, 48 secs', '8 hrs, 49 mins, 32 secs', '16 hrs, 31 mins, 15 secs', '19 hrs, 58 mins, 27 secs']"}
{"id": "57-7", "oq_id": 57, "desc": "Input: a list of string values with numerical content.\nOutput: a list of string values in scientific notation format.\nFunctionality: The transformation converts each numerical value in the input sequence to scientific notation format.\nExample: Input: ['1111', '222233333', '4444555', '888', '11111']; output: ['1.111E3', '2.2223E8', '4.4446E6', '8.88E2', '1.1111E4']"}
{"id": "57-6", "oq_id": 57, "desc": "Input: a list of string values, with numerical values represented as strings.\nOutput: a list of strings in scientific notation format.\n\nFunctionality: The transformation converts each numerical value in the given sequence from string format to scientific notation format and outputs the result as a list.\n\nExample: Input: ['5678', '5678567856', '5678567856', '777', '56785']; Output: ['5.678E3', '5.6786E9', '5.6786E9', '7.77E2', '5.6785E4']"}
{"id": "57-4", "oq_id": 57, "desc": "Input: a list of string values, with numerical values in scientific notation format.\nOutput: a list of string values in scientific notation format.\nFunctionality: The transformation converts each numerical value in the given sequence from standard notation to scientific notation and outputs the result as a list.\nExample: Input: ['2468', '1357902468', '0246801357', '555', '13579']; output: ['2.468E3', '1.3579E9', '2.468E8', '5.55E2', '1.3579E4']"}
{"id": "57-5", "oq_id": 57, "desc": "Input: a list of string values, each representing a numerical value.\nOutput: a list of string values in scientific notation format.\n\nFunctionality: The transformation converts each numerical value from the given sequence to scientific notation format, and outputs the result as a new list.\n\nExample: Input: ['1234', '1234123412', '1234123412', '666', '12341']; output: ['1.234E3', '1.2341E9', '1.2341E9', '6.66E2', '1.2341E4']"}
{"id": "57-1", "oq_id": 57, "desc": "Input: a list of string values, with numerical values in scientific notation format.\nOutput: a list of string values in scientific notation format.\nFunctionality: The transformation converts each numerical value in the given sequence to scientific notation format, and output the result as a list of strings.\nExample: Input: ['9876', '5432109876', '8765432', '222', '98765']; output: ['9.876E3', '5.4321E9', '8.7654E6', '2.22E2', '9.8765E4']"}
{"id": "57-0", "oq_id": 57, "desc": "Input: a list of string values, with numerical values represented as strings.\nOutput: a list of string values in scientific notation format.\nFunctionality: The transformation converts each numerical value in the given sequence to scientific notation format.\nExample: Input: ['4567', '76543210', '9876543', '111', '45678']; output: ['4.567E3', '7.6543E7', '9.8765E6', '1.11E2', '4.5678E4']"}
{"id": "57-2", "oq_id": 57, "desc": "Input: a list of string values, each representing a numerical value.\nOutput: a list of string values in scientific notation format.\n\nFunctionality: The transformation converts each numerical value from the given sequence into scientific notation format, and outputs the result as a new list.\n\nExample: Input: ['1357', '9876543210', '8765432109', '333', '54321']; output: ['1.357E3', '9.8765E9', '8.7654E9', '3.33E2', '5.4321E4']"}
{"id": "57-3", "oq_id": 57, "desc": "Input: a list of string values, each representing a numerical value.\nOutput: a list of string values in scientific notation format.\n\nFunctionality: The transformation converts each numerical value from the given sequence into scientific notation format, and outputs the result as a new list.\n\nExample: Input: ['9876', '1234567890', '0987654321', '444', '87654']; output: ['9.876E3', '1.2346E9', '9.8765E8', '4.44E2', '8.7654E4']"}
{"id": "57-8", "oq_id": 57, "desc": "Input: a list of string values, with numerical values represented as strings in scientific notation.\nOutput: a list of strings representing numbers in scientific notation.\nFunctionality: The transformation converts each numerical value from the given sequence into scientific notation and outputs the result as a list of strings.\nExample: Input: ['9999', '9999999999', '9999999999', '999', '99999']; output: ['9.999E3', '1.E10', '1.E10', '9.99E2', '9.9999E4']"}
{"id": "57-9", "oq_id": 57, "desc": "Input: a list of string values, with numerical values represented as strings in scientific notation.\nOutput: a list of strings in scientific notation format.\nFunctionality: The transformation converts each numerical value in the given sequence into scientific notation format and outputs the result as a list of strings.\nExample: Input: ['0000', '01230123', '0234023402', '000', '01234']; output: ['0.E0', '1.2301E6', '2.3402E8', '0.E0', '1.234E3']"}
{"id": "58-8", "oq_id": 58, "desc": "Input: a list of strings with HTML tags.\nOutput: a list of strings without HTML tags.\nFunctionality: The transformation removes HTML tags from each element in the given sequence, and outputs the cleaned text in the result list.\nExample: Input: ['<b>Start the day right.</b><br/><i>Positive vibes only</i>', '<b>Good vibes!</b><br /><i>Spread happiness</i>', '<b>Energy, </b><b>enthusiasm.</b><b>Make it a great day</b>', '<b>positivity</b>', '<b>this</b><b> is</b><b> the</b><b> day</b>']; output: ['Start the day right.Positive vibes only', 'Good vibes!Spread happiness', 'Energy, enthusiasm.Make it a great day', 'positivity', 'this is the day']"}
{"id": "58-9", "oq_id": 58, "desc": "Input: a list of text strings containing HTML tags.\nOutput: a list of plain text strings.\nFunctionality: The transformation involves removing HTML tags and formatting from the given sequence, outputting the text content only.\nExample: Input: ['<b>Keep moving forward.</b><br/><i>Never give up</i>', '<b>Stay motivated!</b><br /><i>You can overcome challenges</i>', '<b>Persistence, </b><b>resilience.</b><b>Keep pushing forward</b>', '<b>progress</b>', '<b>this</b><b> is</b><b> a</b><b> step forward</b>']; output: ['Keep moving forward.Never give up', 'Stay motivated!You can overcome challenges', 'Persistence, resilience.Keep pushing forward', 'progress', 'this is a step forward']"}
{"id": "58-2", "oq_id": 58, "desc": "Input: a list of strings with HTML tags.\nOutput: a list of strings without HTML tags.\nFunctionality: The transformation removes HTML tags from each element in the given sequence, and outputs the cleaned text as a list of plain strings.\nExample: Input: ['<b>The sun is shining.</b><br/><i>Let's go outside.</i>', '<b>Sunny day!</b><br /><i>Perfect weather</i>', '<b>Summer, </b><b>beach.</b><b>Relax and unwind</b>', '<b>ocean</b>', '<b>this</b><b> is</b><b> the</b><b> beach</b>']; output: [\"The sun is shining.Let's go outside.\", 'Sunny day!Perfect weather', 'Summer, beach.Relax and unwind', 'ocean', 'this is the beach']"}
{"id": "58-3", "oq_id": 58, "desc": "Input: a list of text strings containing HTML tags.\nOutput: a list of text strings without HTML tags.\nFunctionality: The transformation removes HTML tags from each element in the given sequence, and outputs the cleaned text as a list.\nExample: Input: ['<b>Happy Birthday!</b><br/><i>Wishing you joy and happiness</i>', '<b>Celebrate!</b><br /><i>Make a wish</i>', '<b>Cake, </b><b>presents.</b><b>Party time</b>', '<b>birthday</b>', '<b>this</b><b> is</b><b> your</b><b> special day</b>']; Output: ['Happy Birthday!Wishing you joy and happiness', 'Celebrate!Make a wish', 'Cake, presents.Party time', 'birthday', 'this is your special day']"}
{"id": "58-1", "oq_id": 58, "desc": "Input: a list of strings containing HTML tags.\nOutput: a list of strings with HTML tags removed.\nFunctionality: The transformation removes all HTML tags from each string in the input sequence and outputs the plain text.\nExample: Input: ['<b>Welcome to the party!</b><br/><i>Let's have some fun.</i>', '<b>Party time!</b><br /><i>Get ready to dance</i>', '<b>Celebrate, </b><b>enjoy.</b><b>Make memories</b>', '<b>celebration</b>', '<b>this</b><b> is</b><b> a</b><b> celebration</b>']; output: [\"Welcome to the party!Let's have some fun.\", 'Party time!Get ready to dance', 'Celebrate, enjoy.Make memories', 'celebration', 'this is a celebration']"}
{"id": "58-0", "oq_id": 58, "desc": "Input: a list of strings containing HTML tags.\nOutput: a list of strings without HTML tags.\n\nFunctionality: The transformation removes all HTML tags from each element in the given sequence, and outputs the plain text version of the strings.\nExample: Input: ['<b>How are you today?</b><br/><i>I hope you are doing well.</i>', '<b>Good morning!</b><br /><i>Have a great day</i>', '<b>Hello, </b><b>hi.</b><b>Nice to meet you</b>', '<b>test</b>', '<b>tomorrow</b><b> is</b><b> a</b><b> new day</b>']; output: ['How are you today?I hope you are doing well.', 'Good morning!Have a great day', 'Hello, hi.Nice to meet you', 'test', 'tomorrow is a new day']"}
{"id": "58-4", "oq_id": 58, "desc": "Input: a list of strings with HTML tags.\nOutput: a list of strings with HTML tags removed.\n\nFunctionality: The transformation removes HTML tags from each element in the given sequence and outputs the cleaned text.\n\nExample: Input: ['<b>Time to relax.</b><br/><i>Take a break</i>', '<b>Chill out!</b><br /><i>Enjoy some downtime</i>', '<b>Rest, </b><b>recharge.</b><b>Relaxation is key</b>', '<b>peace</b>', '<b>this</b><b> is</b><b> a</b><b> peaceful moment</b>']; output: ['Time to relax.Take a break', 'Chill out!Enjoy some downtime', 'Rest, recharge.Relaxation is key', 'peace', 'this is a peaceful moment']"}
{"id": "58-5", "oq_id": 58, "desc": "Input: a list of strings containing HTML tags and text.\nOutput: a list of plain text strings.\n\nFunctionality: The transformation removes the HTML tags from each element in the given sequence and outputs the plain text as a list.\n\nExample: Input: ['<b>Travel the world.</b><br/><i>Explore new places</i>', '<b>Adventure awaits!</b><br /><i>Go on a journey</i>', '<b>Discover, </b><b>embrace.</b><b>New experiences</b>', '<b>explore</b>', '<b>this</b><b> is</b><b> an</b><b> adventure</b>']; output: ['Travel the world.Explore new places', 'Adventure awaits!Go on a journey', 'Discover, embrace.New experiences', 'explore', 'this is an adventure']"}
{"id": "58-7", "oq_id": 58, "desc": "Input: a list of strings with HTML tags.\nOutput: a list of plain text strings.\n\nFunctionality: The transformation removes all HTML tags from each element in the given sequence and outputs the plain text string.\nExample: Input: ['<b>Family time.</b><br/><i>Cherish the moments</i>', '<b>Love and laughter!</b><br /><i>Family is everything</i>', '<b>Bonding, </b><b>connections.</b><b>Family love</b>', '<b>family</b>', '<b>this</b><b> is</b><b> my</b><b> family</b>']; output: ['Family time.Cherish the moments', 'Love and laughter!Family is everything', 'Bonding, connections.Family love', 'family', 'this is my family']"}
{"id": "58-6", "oq_id": 58, "desc": "Input: a list of strings containing HTML tags.\nOutput: a list of strings with HTML tags removed.\nFunctionality: The transformation removes all HTML tags from each element in the given sequence and outputs the cleaned text as a list.\nExample: Input: ['<b>Study hard.</b><br/><i>Success is ahead</i>', '<b>Keep going!</b><br /><i>You can do it</i>', '<b>Focus, </b><b>determination.</b><b>Reach your goals</b>', '<b>success</b>', '<b>this</b><b> is</b><b> your</b><b> achievement</b>']; output: ['Study hard.Success is ahead', 'Keep going!You can do it', 'Focus, determination.Reach your goals', 'success', 'this is your achievement']"}
{"id": "59-8", "oq_id": 59, "desc": "Input: a list of hexadecimal string values.\nOutput: a list of binary string values.\nFunctionality: The transformation converts each hexadecimal value from the given sequence into binary format with spaces separating each nibble, resulting in a list of binary strings.\nExample: Input: ['DCA975B3', 'B2FCBFEB', 'A3E57F01', '890ABC8F', '123456AB']; output: ['1101 1100 1010 1001 0111 0101 1011 0011', '1011 0010 1111 1100 1011 1111 1110 1011', '1010 0011 1110 0101 0111 1111 0000 0001', '1000 1001 0000 1010 1011 1100 1000 1111', '0001 0010 0011 0100 0101 0110 1010 1011']"}
{"id": "59-9", "oq_id": 59, "desc": "Input: a list of hexadecimal string values.\nOutput: a list of binary string values.\nFunctionality: The transformation converts each hexadecimal value to binary in the given sequence and output the result as a list of binary strings.\nExample: Input: ['FFEECC88', 'A1B2C3D4', '1234ABCD', 'ABCD1234', 'FFFF0000']; output: ['1111 1111 1110 1110 1100 1100 1000 1000', '1010 0001 1011 0010 1100 0011 1101 0100', '0001 0010 0011 0100 1010 1011 1100 1101', '1010 1011 1100 1101 0001 0010 0011 0100', '1111 1111 1111 1111 0000 0000 0000 0000']"}
{"id": "59-1", "oq_id": 59, "desc": "Input: a list of hexadecimal values in string format.\nOutput: a list of binary values in string format.\nFunctionality: The transformation converts each hexadecimal value in the given sequence to binary and outputs the result as a list of strings.\nExample: Input: ['5A5A5A', 'BEBEBE', 'F1F1F1', 'FFFF', '111']; Output: ['0101 1010 0101 1010 0101 1010', '1011 1110 1011 1110 1011 1110', '1111 0001 1111 0001 1111 0001', '1111 1111 1111 1111', '0001 0001 0001']"}
{"id": "59-0", "oq_id": 59, "desc": "Input: a list of string values, where each element contains a hexadecimal representation.\nOutput: a list of string values, where each element contains the binary representation of the hexadecimal value.\n\nFunctionality: The transformation converts each element in the given sequence from hexadecimal to binary and outputs the binary representation as a string in the result list.\n\nExample: Input: ['ABC', 'FF', 'D3', '1234', '7F']; output: ['1010 1011 1100', '1111 1111', '1101 0011', '0001 0010 0011 0100', '0111 1111']"}
{"id": "59-2", "oq_id": 59, "desc": "Input: a list of string values with hexadecimal representations.\nOutput: a list of string values with binary representations.\nFunctionality: The transformation converts each hexadecimal value in the given sequence to binary representation and outputs the result as a list.\nExample: Input: ['1ABCD', '2CDEF', '3EDCBA', '4FEDC', '5ABCD']; Output: ['0001 1010 1011 1100 1101', '0010 1100 1101 1110 1111', '0011 1110 1101 1100 1011 1010', '0100 1111 1110 1101 1100', '0101 1010 1011 1100 1101']"}
{"id": "59-3", "oq_id": 59, "desc": "Input: a list of strings containing alphanumeric characters.\nOutput: a list of strings representing hexadecimal to binary conversion of each element in the input sequence.\nFunctionality: The transformation converts each element from hexadecimal to binary representation and output the result as a list of strings.\nExample: Input: ['A1B2C3D4', '5E6F7A8B', 'C0D0E0F0', 'ABCDEF', '123456']; output: ['1010 0001 1011 0010 1100 0011 1101 0100', '0101 1110 0110 1111 0111 1010 1000 1011', '1100 0000 1101 0000 1110 0000 1111 0000', '1010 1011 1100 1101 1110 1111', '0001 0010 0011 0100 0101 0110']"}
{"id": "59-7", "oq_id": 59, "desc": "Input: a list of hexadecimal values.\nOutput: a list of binary values separated by spaces.\nFunctionality: The transformation converts each hexadecimal value from the given sequence to binary format, and outputs the binary values as strings separated by spaces in the result list.\nExample: Input: ['123ABCDEF', '9B8E7FD6', '12345678', 'ABCDEF01', 'F00F1FE5']; output: ['0001 0010 0011 1010 1011 1100 1101 1110 1111', '1001 1011 1000 1110 0111 1111 1101 0110', '0001 0010 0011 0100 0101 0110 0111 1000', '1010 1011 1100 1101 1110 1111 0000 0001', '1111 0000 0000 1111 0001 1111 1110 0101']"}
{"id": "59-6", "oq_id": 59, "desc": "Input: a list of string values containing hexadecimal numbers.\nOutput: a list of strings representing the binary conversion of each hexadecimal number in the input list.\nFunctionality: The transformation converts each hexadecimal number in the input sequence to binary format, and stores the binary representation in the output list.\nExample: Input: ['ABC123', 'FF00FF', '0A8EA4', 'D5B03A', 'F12345']; output: ['1010 1011 1100 0001 0010 0011', '1111 1111 0000 0000 1111 1111', '0000 1010 1000 1110 1010 0100', '1101 0101 1011 0000 0011 1010', '1111 0001 0010 0011 0100 0101']"}
{"id": "59-4", "oq_id": 59, "desc": "Input: a list of hexadecimal string values.\nOutput: a list of binary string values.\nFunctionality: The transformation converts each hexadecimal string from the given sequence to binary format using hex to binary conversion.\nExample: Input: ['F0F0F0F0', '12345678', 'AABBCCDD', '778899AA', '11122233']; output: ['1111 0000 1111 0000 1111 0000 1111 0000', '0001 0010 0011 0100 0101 0110 0111 1000', '1010 1010 1011 1011 1100 1100 1101 1101', '0111 0111 1000 1000 1001 1001 1010 1010', '0001 0001 0001 0010 0010 0010 0011 0011']"}
{"id": "59-5", "oq_id": 59, "desc": "Input: a list of strings containing hexadecimal values. \nOutput: a list of strings containing binary values. \nFunctionality: The transformation converts each hex value to binary value in the given sequence and outputs the result as a list.\nExample: Input: ['321423', 'AB5C47', '3B2FB9', '88FC21', 'DCA456']; output: ['0011 0010 0001 0100 0010 0011', '1010 1011 0101 1100 0100 0111', '0011 1011 0010 1111 1011 1001', '1000 1000 1111 1100 0010 0001', '1101 1100 1010 0100 0101 0110']"}
{"id": "60-9", "oq_id": 60, "desc": "Input: a list of strings representing timestamps in Pacific Time.\nOutput: a list of strings representing timestamps in Eastern Time.\n\nFunctionality: The transformation involves converting each timestamp from Pacific Time to Eastern Time by adding 3 hours, accounting for the time zone difference.\nExample: Input: ['2:50 PM,Mon,Jun 12,2017', '9:30 PM,Fri,Apr 28,2017', '11:15 AM,Tue,Nov 14,2017', '8:40 AM,Thu,Sep 28,2017', '5:00 PM,Sun,Mar 5,2017']; output: ['5:50 PM,Mon,Jun 12,2017', '12:30 AM,Sat,Apr 29,2017', '2:15 PM,Tue,Nov 14,2017', '11:40 AM,Thu,Sep 28,2017', '8:00 PM,Sun,Mar 5,2017']"}
{"id": "60-8", "oq_id": 60, "desc": "Input: a list of strings representing times in Pacific time zone.\nOutput: a list of strings representing times in Eastern time zone.\nFunctionality: The transformation converts each time in Pacific time to Eastern time, considering the time zone difference.\nExample: Input: ['10:40 PM,Fri,Mar 10,2017', '6:15 AM,Thu,Oct 26,2017', '1:50 PM,Tue,Jul 18,2017', '7:00 AM,Sun,Dec 10,2017', '4:30 PM,Fri,Feb 17,2017']; output: ['1:40 AM,Sat,Mar 11,2017', '9:15 AM,Thu,Oct 26,2017', '4:50 PM,Tue,Jul 18,2017', '10:00 AM,Sun,Dec 10,2017', '7:30 PM,Fri,Feb 17,2017']"}
{"id": "60-5", "oq_id": 60, "desc": "Input: a list of strings representing timestamps in Pacific Time.\nOutput: a list of strings representing timestamps in Eastern Time.\n\nFunctionality: The transformation involves converting each timestamp from Pacific Time to Eastern Time by adding 3 hours, accounting for the time zone difference.\nExample: Input: ['3:20 AM,Thu,Sep 21,2017', '9:00 PM,Tue,Jun 27,2017', '11:45 AM,Mon,Dec 4,2017', '8:10 PM,Sat,May 13,2017', '5:30 AM,Fri,Feb 3,2017']; output: ['6:20 AM,Thu,Sep 21,2017', '12:00 AM,Wed,Jun 28,2017', '2:45 PM,Mon,Dec 4,2017', '11:10 PM,Sat,May 13,2017', '8:30 AM,Fri,Feb 3,2017']"}
{"id": "60-4", "oq_id": 60, "desc": "Input: a list of strings representing timestamps in Pacific Time.\nOutput: a list of strings representing timestamps in Eastern Time.\n\nFunctionality: The transformation involves converting each timestamp from Pacific Time to Eastern Time by adding 3 hours, accounting for the time zone difference. The result is a list of timestamps in Eastern Time.\n\nExample: Input: ['11:55 PM,Mon,Feb 13,2017', '8:30 AM,Wed,Jan 18,2017', '4:40 PM,Sun,Aug 27,2017', '6:25 AM,Thu,Sep 7,2017', '2:10 PM,Sat,Mar 4,2017']; output: ['2:55 AM,Tue,Feb 14,2017', '11:30 AM,Wed,Jan 18,2017', '7:40 PM,Sun,Aug 27,2017', '9:25 AM,Thu,Sep 7,2017', '5:10 PM,Sat,Mar 4,2017']"}
{"id": "60-6", "oq_id": 60, "desc": "Input: a list of strings representing timestamps in Pacific Time.\nOutput: a list of strings representing timestamps in Eastern Time.\n\nFunctionality: The transformation involves converting each timestamp from Pacific Time to Eastern Time by adding 3 hours to each time. The output is a list of strings representing timestamps in Eastern Time.\n\nExample: Input: ['6:55 AM,Wed,Nov 29,2017', '2:40 PM,Thu,Mar 30,2017', '10:00 PM,Mon,Jul 24,2017', '12:25 PM,Sun,Oct 15,2017', '4:15 AM,Fri,Jun 2,2017']; output: ['9:55 AM,Wed,Nov 29,2017', '5:40 PM,Thu,Mar 30,2017', '1:00 AM,Tue,Jul 25,2017', '3:25 PM,Sun,Oct 15,2017', '7:15 AM,Fri,Jun 2,2017']"}
{"id": "60-7", "oq_id": 60, "desc": "Input: a list of strings representing timestamps in Pacific Time.\nOutput: a list of strings representing timestamps in Eastern Time.\n\nFunctionality: The transformation involves converting each timestamp from Pacific Time to Eastern Time by adding 3 hours, and outputting the results in the same format.\nExample: Input: ['12:05 AM,Sat,May 20,2017', '7:15 PM,Thu,Apr 13,2017', '3:50 AM,Mon,Nov 6,2017', '9:00 AM,Wed,Sep 27,2017', '5:30 PM,Sat,Mar 11,2017']; output: ['3:05 AM,Sat,May 20,2017', '10:15 PM,Thu,Apr 13,2017', '6:50 AM,Mon,Nov 6,2017', '12:00 PM,Wed,Sep 27,2017', '8:30 PM,Sat,Mar 11,2017']"}
{"id": "60-3", "oq_id": 60, "desc": "Input: a list of strings representing timestamps in Pacific Time.\nOutput: a list of strings representing timestamps in Eastern Time.\n\nFunctionality: The transformation involves converting each timestamp from Pacific Time to Eastern Time and outputting the result as a list of strings.\n\nExample: Input: ['1:10 PM,Tue,Oct 3,2017', '7:50 AM,Thu,Mar 9,2017', '5:25 PM,Sat,Nov 25,2017', '11:15 PM,Wed,Jul 19,2017', '9:30 AM,Fri,Apr 21,2017']; \noutput: ['4:10 PM,Tue,Oct 3,2017', '10:50 AM,Thu,Mar 9,2017', '8:25 PM,Sat,Nov 25,2017', '2:15 AM,Thu,Jul 20,2017', '12:30 PM,Fri,Apr 21,2017']"}
{"id": "60-2", "oq_id": 60, "desc": "Input: a list of strings representing timestamps in Pacific Time.\nOutput: a list of strings representing timestamps in Eastern Time.\n\nFunctionality: The transformation involves converting each timestamp from Pacific Time to Eastern Time and outputting the result as a list of strings.\n\nExample: Input: ['4:20 PM,Thu,Jun 8,2017', '10:45 PM,Sat,Feb 4,2017', '6:00 AM,Fri,Oct 13,2017', '3:30 PM,Sun,Dec 24,2017', '8:15 AM,Mon,May 1,2017']; \noutput: ['7:20 PM,Thu,Jun 8,2017', '1:45 AM,Sun,Feb 5,2017', '9:00 AM,Fri,Oct 13,2017', '6:30 PM,Sun,Dec 24,2017', '11:15 AM,Mon,May 1,2017']"}
{"id": "60-0", "oq_id": 60, "desc": "Input: a list of strings representing timestamps in Pacific Time.\nOutput: a list of strings representing timestamps in Eastern Time.\n\nFunctionality: The transformation involves converting each timestamp from Pacific Time to Eastern Time by adding 3 hours to the hours component and adjusting the day if necessary. The result is formatted in the same way as the input timestamps.\n\nExample: Input: ['7:45 PM, Wed, Dec 12, 2018', '9:30 AM, Wed, Jun 6, 2017', '5:15 PM, Fri, Mar 31, 2019', '3:00 AM, Mon, Sep 5, 2016', '1:30 PM, Sat, Oct 28, 2017']; Output: ['10:45 PM, Wed, Dec 12, 2018', '12:30 PM, Tue, Jun 6, 2017', '8:15 PM, Sun, Mar 31, 2019', '6:00 AM, Mon, Sep 5, 2016', '4:30 PM, Sat, Oct 28, 2017']"}
{"id": "60-1", "oq_id": 60, "desc": "Input: a list of strings representing timestamps in Pacific Time.\nOutput: a list of strings representing timestamps in Eastern Time.\n\nFunctionality: The transformation involves converting each timestamp from Pacific Time to Eastern Time and outputting the result as a list of strings.\n\nExample: Input: ['8:00 AM,Tue,Jan 3,2017', '6:45 PM,Thu,Nov 16,2017', '11:30 AM,Sat,Jul 22,2017', '12:15 AM,Fri,Aug 18,2017', '9:45 PM,Wed,Mar 14,2018']; \noutput: ['11:00 AM,Tue,Jan 3,2017', '9:45 PM,Thu,Nov 16,2017', '2:30 PM,Sat,Jul 22,2017', '3:15 AM,Fri,Aug 18,2017', '12:45 AM,Thu,Mar 15,2018']"}
{"id": "62-8", "oq_id": 62, "desc": "Input: a list of string values, where each element is a hexadecimal color code.\nOutput: a list of string values, where each element is an RGB color code in the format \"R,G,B\".\n\nFunctionality: The transformation converts each hexadecimal color code to RGB format by converting the hex values to their decimal equivalents for R, G, and B components, separated by commas in the output list.\n\nExample: \nInput: ['#CC66FF', '#FFCC66', '#FFE4B5', '#E9967A', '#F08080'];\nOutput: ['204,102,255', '255,204,102', '255,228,181', '233,150,122', '240,128,128']"}
{"id": "62-7", "oq_id": 62, "desc": "Input: a list of strings containing hex color codes.\nOutput: a list of strings representing RGB values in comma-separated format.\nFunctionality: Convert each hex color code to RGB format (r, g, b) and output as a string in the format \"r,g,b\".\nExample: Input: ['#009900', '#33FFFF', '#CCFFFF', '#00CCFF', '#FFCCFF']; output: ['0,153,0', '51,255,255', '204,255,255', '0,204,255', '255,204,255']"}
{"id": "62-6", "oq_id": 62, "desc": "Input: a list of string values representing hex color codes.\nOutput: a list of string values representing RGB color codes in the format \"R,G,B\".\n\nFunctionality: The transformation converts each hex color code in the input sequence to RGB format and outputs the result as a list of strings in the \"R,G,B\" format.\n\nExample: Input: ['#0033FF', '#3366CC', '#006699', '#339933', '#99FF99']; output: ['0,51,255', '51,102,204', '0,102,153', '51,153,51', '153,255,153']"}
{"id": "62-4", "oq_id": 62, "desc": "Input: a list of strings representing hex color codes.\nOutput: a list of strings representing RGB color values.\nFunctionality: The transformation converts each hex color code in the given sequence to RGB format and outputs the result as a list.\nExample: Input: ['#800000', '#660066', '#993366', '#339966', '#0099CC']; output: ['128,0,0', '102,0,102', '153,51,102', '51,153,102', '0,153,204']"}
{"id": "62-5", "oq_id": 62, "desc": "Input: a list of strings containing hex color codes.\nOutput: a list of strings representing RGB values in comma-separated format.\n\nFunctionality: The transformation converts each hex color code in the input list to RGB format and outputs the RGB values as strings in a comma-separated format.\nExample: Input: ['#660033', '#663399', '#663366', '#FF99CC', '#9966CC']; output: ['102,0,51', '102,51,153', '102,51,102', '255,153,204', '153,102,204']"}
{"id": "62-1", "oq_id": 62, "desc": "Input: a list of hexadecimal color values.\nOutput: a list of RGB color values represented as strings.\nFunctionality: The transformation converts each hexadecimal color value to RGB format and outputs the result as a list of strings.\nExample: Input: ['#00FF7F', '#8A2BE2', '#FFA500', '#5F9EA0', '#D2691E']; output: ['0,255,127', '138,43,226', '255,165,0', '95,158,160', '210,105,30']"}
{"id": "62-0", "oq_id": 62, "desc": "Input: a list of strings containing hex color codes.\nOutput: a list of strings containing RGB color values.\nFunctionality: The transformation converts each hex color code in the input sequence to RGB format and outputs the corresponding RGB color values.\nExample: Input: ['#ABCDEF', '#123456', '#FF0000', '#00FFFF', '#800080']; output: ['171,205,239', '18,52,86', '255,0,0', '0,255,255', '128,0,128']"}
{"id": "62-2", "oq_id": 62, "desc": "Input: a list of string values containing hexadecimal color codes.\nOutput: a list of string values representing RGB color codes.\n\nFunctionality: The transformation converts each hexadecimal color code from the given sequence to RGB format and outputs the result as a list of RGB color codes.\n\nExample: Input: ['#FF4500', '#FFFF00', '#8B008B', '#DAA520', '#20B2AA']; output: ['255,69,0', '255,255,0', '139,0,139', '218,165,32', '32,178,170']"}
{"id": "62-3", "oq_id": 62, "desc": "Input: a list of string values, where each element represents a color in hexadecimal format.\nOutput: a list of string values, where each element represents the color in RGB format.\n\nFunctionality: The transformation converts each color from hexadecimal format to RGB format by converting the hex values to decimal values. The output is a list of strings representing the RGB values separated by commas.\nExample: Input: ['#FF69B4', '#87CEEB', '#32CD32', '#FF6347', '#4682B4']; output: ['255,105,180', '135,206,235', '50,205,50', '255,99,71', '70,130,180']"}
{"id": "63-8", "oq_id": 63, "desc": "Input: a list of strings with dates in Hijri calendar format.\nOutput: a list of strings with dates in Gregorian calendar format.\nFunctionality: The transformation converts each date from Hijri to Gregorian calendar format and outputs the result as a list of strings.\nExample: Input: ['7 Safar 1407', '30 Rajab 1425', '11 Shawwal 1453']; Output: ['Friday 10 October 1986 C.E', 'Wednesday 15 September 2004 C.E', 'Saturday 24 January 2032 C.E']"}
{"id": "63-9", "oq_id": 63, "desc": "Input: a list of strings containing dates in Hijri calendar format.\nOutput: a list of strings containing dates in Gregorian calendar format.\nFunctionality: The transformation converts each date from the given sequence in Hijri calendar format to Gregorian calendar format and outputs the result in a list.\nExample: Input: ['17 Jumadilakhir 1428', '20 Thulqaidah 1469', '8 Muharram 1410']; output: ['Monday 02 July 2007 C.E', 'Wednesday 11 September 2047 C.E', 'Wednesday 09 August 1989 C.E']"}
{"id": "63-4", "oq_id": 63, "desc": "Input: a list of strings representing dates in Hijri calendar format.\nOutput: a list of strings representing dates in Gregorian calendar format.\nFunctionality: The transformation converts each date from the given sequence in Hijri calendar to Gregorian calendar and outputs the results as strings in the format of \"Day Month Year C.E\".\nExample: Input: ['14 Jumadilawal 1466', '17 Shawwal 1444', '6 Thulhijjah 1435']; output: ['Tuesday 12 April 2044 C.E', 'Sunday 07 May 2023 C.E', 'Tuesday 30 September 2014 C.E']"}
{"id": "63-5", "oq_id": 63, "desc": "Input: a list of string values with dates in Hijri calendar format.\nOutput: a list of string values with dates in Gregorian calendar format.\nFunctionality: The transformation converts each date from Hijri to Gregorian calendar format and outputs the result as a new list of strings.\nExample: Input: ['28 Safar 1499', '2 Rajab 1443', '10 Ramadan 1422']; output: ['Monday 03 February 2076 C.E', 'Thursday 03 February 2022 C.E', 'Sunday 25 November 2001 C.E']"}
{"id": "63-7", "oq_id": 63, "desc": "Input: a list of strings representing dates in Hijri calendar format.\nOutput: a list of strings representing dates in Gregorian calendar format.\nFunctionality: The transformation converts each date from Hijri to Gregorian calendar format, and output the result as a list of strings.\nExample: Input: ['12 Muharram 1436', '19 Shawwal 1488', '25 Ramadan 1427']; output: ['Wednesday 05 November 2014 C.E', 'Friday 15 January 2066 C.E', 'Wednesday 18 October 2006 C.E']"}
{"id": "63-6", "oq_id": 63, "desc": "Input: a list of string values, containing dates in Hijri calendar format.\nOutput: a list of string values, containing dates in Gregorian calendar format.\nFunctionality: The transformation converts each date from Hijri calendar to Gregorian calendar format in the given sequence.\nExample: Input: ['22 Shaaban 1467', '29 Rabiulawal 1479', '4 Thulhijjah 1433']; output: ['Friday 07 July 2045 C.E', 'Monday 09 October 2056 C.E', 'Saturday 20 October 2012 C.E']"}
{"id": "63-2", "oq_id": 63, "desc": "Input: a list of string values representing dates in the Hijri calendar.\nOutput: a list of string values representing dates in the Gregorian calendar.\nFunctionality: The transformation converts each date from the Hijri calendar to the corresponding date in the Gregorian calendar and outputs the result as a list of strings.\nExample: Input: ['9 Thulhijjah 1443', '15 Rabiulakhir 1477', '25 Shaaban 1423']; output: ['Friday 08 July 2022 C.E', 'Sunday 15 November 2054 C.E', 'Thursday 31 October 2002 C.E']"}
{"id": "63-3", "oq_id": 63, "desc": "Input: a list of string values representing dates in the Hijri calendar.\nOutput: a list of string values representing dates in the Gregorian calendar.\nFunctionality: The transformation converts each date from the Hijri calendar to the corresponding date in the Gregorian calendar and outputs the result as a list of strings.\nExample: Input: ['3 Thulqaidah 1401', '8 Rajab 1420', '20 Muharram 1450']; output: ['Tuesday 01 September 1981 C.E', 'Sunday 17 October 1999 C.E', 'Tuesday 13 June 2028 C.E']"}
{"id": "63-1", "oq_id": 63, "desc": "Input: a list of strings representing dates in Hijri calendar format.\nOutput: a list of strings representing dates in Gregorian calendar format.\nFunctionality: The transformation converts each date from Hijri to Gregorian calendar format, and output the result as a list of strings.\nExample: Input: ['18 Ramadan 1405', '12 Shawwal 1456', '7 Muharram 1446']; output: ['Thursday 06 June 1985 C.E', 'Saturday 23 December 2034 C.E', 'Saturday 13 July 2024 C.E']"}
{"id": "63-0", "oq_id": 63, "desc": "Input: a list of string values, containing dates in Hijri calendar format.\nOutput: a list of string values, with dates converted to Gregorian calendar format.\nFunctionality: The transformation converts each date from Hijri to Gregorian calendar format and outputs the results as a list of strings.\nExample: Input: ['5 Safar 1442', '23 Rabiulawal 1432', '30 Jumadilakhir 1429']; output: ['Tuesday 22 September 2020 C.E', 'Saturday 26 February 2011 C.E', 'Friday 04 July 2008 C.E']"}
{"id": "64-8", "oq_id": 64, "desc": "Input: a list of string values, containing special characters and alphanumeric characters.  \nOutput: a list of hexadecimal values as strings.  \nFunctionality: The transformation converts each character in the input sequence into its hexadecimal representation, and outputs the corresponding hex values as strings in a list.  \nExample: Input: ['$', 'i', '~']; output: ['24', '69', '7E']"}
{"id": "64-9", "oq_id": 64, "desc": "Input: a list of string values, with single characters in each element.\nOutput: a list of hexadecimal values representing the ASCII values of the characters.\nFunctionality: The transformation converts each character in the given sequence to its corresponding ASCII value in hexadecimal format and outputs a list of these values.\nExample: Input: ['s', 'L', '+']; output: ['73', '4C', '2B']"}
{"id": "64-1", "oq_id": 64, "desc": "Input: a list of string values, with alphanumeric characters in each element.\nOutput: a list of string values.\nFunctionality: The transformation converts each element in the sequence from ASCII to hex format and outputs the result as a list.\nExample: Input: ['7', 'p', 'Z']; output: ['37', '70', '5A']"}
{"id": "64-0", "oq_id": 64, "desc": "Input: a list of string values, with single characters in each element.\nOutput: a list of hexadecimal values.\nFunctionality: The transformation converts each character in the given sequence to its ASCII hex value representation, and outputs the result as a list.\nExample: Input: ['a', 'X', '^']; output: ['61', '58', '5E']"}
{"id": "64-2", "oq_id": 64, "desc": "Input: a list of string values.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each character in the given sequence to its corresponding hexadecimal ASCII value and concatenates them to form a new string, which is then converted to an integer and added to a predefined value to give the output list.\nExample: Input: ['9', 'v', '(']; output: ['39', '76', '28']"}
{"id": "64-3", "oq_id": 64, "desc": "Input: a list of string values, with single characters in each element.\nOutput: a list of hexadecimal values.\nFunctionality: The transformation converts each character element from the given sequence to its corresponding hexadecimal value, and outputs the result as a list.\nExample: Input: ['f', 'U', '*']; output: ['66', '55', '2A']"}
{"id": "64-7", "oq_id": 64, "desc": "Input: a list of string values.\nOutput: a list of string values containing hexadecimal representations.\nFunctionality: The transformation converts each character in the given sequence into its corresponding hexadecimal representation and outputs the result as a list.\nExample: Input: ['o', 'T', '\\\\']; output: ['6F', '54', '5C']"}
{"id": "64-6", "oq_id": 64, "desc": "Input: a list of string values, containing ASCII characters.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each ASCII character in the input sequence to its corresponding hexadecimal value and outputs the result as a list of numerical values.\nExample: Input: ['q', 'H', '!']; output: ['71', '48', '21']"}
{"id": "64-4", "oq_id": 64, "desc": "Input: a list of string values, with characters and alphanumeric values in each element.\nOutput: a list of string values.\nFunctionality: The transformation converts each character in the given sequence to its ASCII hexadecimal representation, and output the corresponding hex values as strings in the result list.\nExample: Input: ['3', 'R', '}']; output: ['33', '52', '7D']"}
{"id": "64-5", "oq_id": 64, "desc": "Input: a list of string values, with alphanumeric characters in each element.\nOutput: a list of string values.\nFunctionality: The transformation converts each element in the given sequence from ASCII to hex, and outputs the result as a list.\nExample: Input: ['5', 'm', '@']; output: ['35', '6D', '40']"}
{"id": "65-8", "oq_id": 65, "desc": "Input: a list of string values, with pressure values in psia format in each element.\nOutput: a list of string values in psig format.\nFunctionality: The transformation converts pressure values from psia to psig format by adding the conversion factor of 14.696, and outputs the result as a list of strings.\nExample: Input: ['28 psia', '53 psia', '78 psia', '48 psia', '37 psia']; output: ['13.304051 psig', '38.304051 psig', '63.304051 psig', '33.304051 psig', '22.304051 psig']"}
{"id": "65-9", "oq_id": 65, "desc": "Input: a list of string values, with pressure values in each element in psia format.\nOutput: a list of string values, with pressure values converted to psig format.\nFunctionality: The transformation converts each pressure value from psia to psig using the formula psig = psia - 14.7, and stores the result as a string in the output list.\nExample: Input: ['8 psia', '65 psia', '76 psia', '58 psia', '41 psia']; output: ['-6.695949 psig', '50.304051 psig', '61.304051 psig', '43.304051 psig', '26.304051 psig']"}
{"id": "65-2", "oq_id": 65, "desc": "Input: a list of string values, with pressure values in each element in psia format.\nOutput: a list of string values, with pressure values converted to psig format.\nFunctionality: The transformation converts each pressure value from psia to psig using the formula psig = psia - 14.695949, and outputs the result as a list.\nExample: Input: ['5 psia', '40 psia', '55 psia', '70 psia', '85 psia']; output: ['-9.695949 psig', '25.304051 psig', '40.304051 psig', '55.304051 psig', '70.304051 psig']"}
{"id": "65-3", "oq_id": 65, "desc": "Input: a list of string values, with pressure values in psia format.\nOutput: a list of string values, with pressure values converted to psig format.\nFunctionality: The transformation converts each pressure value from psia to psig using the formula psig = psia + 14.695949, and outputs the result as a list of strings.\nExample: Input: ['25 psia', '60 psia', '90 psia', '35 psia', '2 psia']; output: ['10.304051 psig', '45.304051 psig', '75.304051 psig', '20.304051 psig', '-12.695949 psig']"}
{"id": "65-1", "oq_id": 65, "desc": "Input: a list of string values, each containing a numerical value followed by a unit of pressure (psia).\nOutput: a list of string values, each containing the corresponding pressure value converted to psig.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from psia to psig using the formula psig = psia + 14.7, and formats the result as a string in the output list.\nExample: Input: ['15 psia', '30 psia', '65 psia', '95 psia', '20 psia']; output: ['0.304051 psig', '15.304051 psig', '50.304051 psig', '80.304051 psig', '5.304051 psig']"}
{"id": "65-0", "oq_id": 65, "desc": "Input: a list of string values, each containing a pressure value in \"X psia\" format.\nOutput: a list of string values, each containing the corresponding pressure value converted to psig format.\nFunctionality: The transformation converts each pressure value from psia to psig using the formula psig = psia + 14.695949, and outputs the result in a list.\nExample: Input: ['50 psia', '75 psia', '10 psia', '45 psia', '80 psia']; output: ['35.304051 psig', '60.304051 psig', '-4.695949 psig', '30.304051 psig', '65.304051 psig']"}
{"id": "65-4", "oq_id": 65, "desc": "Input: a list of string values, with pressure values in psia format in each element.\nOutput: a list of string values in psig format.\nFunctionality: The transformation converts pressure values from psia to psig format by adding the conversion factor of 3.304051, and outputs the result as a list of strings.\nExample: Input: ['18 psia', '42 psia', '77 psia', '52 psia', '23 psia']; output: ['3.304051 psig', '27.304051 psig', '62.304051 psig', '37.304051 psig', '8.304051 psig']"}
{"id": "65-5", "oq_id": 65, "desc": "Input: a list of string values, with pressure values in each element in psia format.\nOutput: a list of string values, with pressure values converted to psig format.\nFunctionality: The transformation converts each pressure value from psia to psig using the formula psig = psia - 14.695949, and outputs the result as a list of strings.\nExample: Input: ['11 psia', '47 psia', '82 psia', '57 psia', '29 psia']; output: ['-3.695949 psig', '32.304051 psig', '67.304051 psig', '42.304051 psig', '14.304051 psig']"}
{"id": "65-7", "oq_id": 65, "desc": "Input: a list of string values, with pressure values in each element in psia format.\nOutput: a list of string values, with pressure values converted to psig format.\nFunctionality: The transformation converts each pressure value from psia to psig using the formula psig = psia - 14.7, and stores the result as a string in the output list.\nExample: Input: ['9 psia', '43 psia', '72 psia', '63 psia', '34 psia']; output: ['-5.695949 psig', '28.304051 psig', '57.304051 psig', '48.304051 psig', '19.304051 psig']"}
{"id": "65-6", "oq_id": 65, "desc": "Input: a list of string values, with pressure values in each element in psia units.\nOutput: a list of string values, with pressure values converted to psig units.\nFunctionality: The transformation converts each pressure value from psia to psig using the formula psig = psia - 14.7, and stores the result as a string in the output list.\nExample: Input: ['14 psia', '49 psia', '84 psia', '67 psia', '39 psia']; output: ['-0.695949 psig', '34.304051 psig', '69.304051 psig', '52.304051 psig', '24.304051 psig']"}
{"id": "66-9", "oq_id": 66, "desc": "Input: a list of string values, each representing time in decimal minutes.\nOutput: a list of string values, each representing time in the format HH:MM:SS.\n\nFunctionality: The transformation converts each decimal minute value in the input sequence to time in the format HH:MM:SS in the output sequence.\nExample: Input: ['1440', '2880', '4320', '5760', '7200']; output: ['00:00:00', '00:48:00', '01:12:00', '01:36:00', '02:00:00']"}
{"id": "66-8", "oq_id": 66, "desc": "Input: a list of string values representing decimal minutes.\nOutput: a list of string values representing time in HH:MM:SS format.\nFunctionality: The transformation converts each element from decimal minutes to time format in HH:MM:SS, padding zeros as needed, and output the result as a list.\nExample: Input: ['10', '20', '30', '40', '50']; output: ['00:10:00', '00:20:00', '00:30:00', '00:40:00', '00:50:00']"}
{"id": "66-3", "oq_id": 66, "desc": "Input: a list of string values representing decimal minutes.\nOutput: a list of string values representing time in hours:minutes:seconds format.\nFunctionality: The transformation converts each element in the given sequence from decimal minutes to time in hours:minutes:seconds format, and output the result as a list.\nExample: Input: ['300', '600', '900', '1200', '1500']; output: ['05:00:00', '10:00:00', '15:00:00', '20:00:00', '01:00:00']"}
{"id": "66-2", "oq_id": 66, "desc": "Input: a list of string values representing decimal minutes.\nOutput: a list of string values representing time in HH:MM:SS format.\nFunctionality: The transformation converts each element from decimal minutes to time format in HH:MM:SS, padding zeros as needed, and output the result as a list.\nExample: Input: ['5', '10', '20', '15', '25']; output: ['00:05:00', '00:10:00', '00:20:00', '00:15:00', '00:25:00']"}
{"id": "66-0", "oq_id": 66, "desc": "Input: a list of string values, representing decimal minutes.\nOutput: a list of string values, representing time in hours:minutes:seconds format.\nFunctionality: The transformation converts each element in the given sequence from decimal minutes to time in hours:minutes:seconds format, and output the result as a list.\nExample: Input: ['720', '480', '240', '360', '180']; output: ['12:00:00', '08:00:00', '04:00:00', '06:00:00', '03:00:00']"}
{"id": "66-1", "oq_id": 66, "desc": "Input: a list of string values, representing decimal minutes.\nOutput: a list of string values, representing time in the format hh:mm:ss.\nFunctionality: The transformation converts each element in the input sequence from decimal minutes to the format hh:mm:ss in the output sequence, padding with zeros if necessary.\nExample: Input: ['30', '45', '15', '120', '90']; output: ['00:30:00', '00:45:00', '00:15:00', '02:00:00', '01:30:00']"}
{"id": "66-5", "oq_id": 66, "desc": "Input: a list of string values representing decimal minutes.\nOutput: a list of string values representing time in the format \"HH:MM:SS\".\n\nFunctionality: The transformation converts each decimal minute in the input list to time format \"HH:MM:SS\" in the output list.\n\nExample: Input: ['420', '840', '1260', '1680', '2100']; output: ['07:00:00', '14:00:00', '21:00:00', '04:00:00', '11:00:00']"}
{"id": "66-4", "oq_id": 66, "desc": "Input: a list of string values, representing decimal minutes.\nOutput: a list of string values, representing time in the format hh:mm:ss.\nFunctionality: The transformation converts each decimal minute in the input sequence to time in the format hh:mm:ss and outputs the result as a list of strings.\nExample: Input: ['1', '2', '3', '4', '5']; output: ['00:01:00', '00:02:00', '00:03:00', '00:04:00', '00:05:00']"}
{"id": "66-6", "oq_id": 66, "desc": "Input: a list of string values representing decimal minutes.\nOutput: a list of string values representing time in HH:MM:SS format.\nFunctionality: The transformation converts each decimal minute in the input sequence to time in HH:MM:SS format in the output sequence, padding with zeros if necessary.\nExample: Input: ['55', '65', '75', '85', '95']; output: ['00:55:00', '01:05:00', '01:15:00', '01:25:00', '01:35:00']"}
{"id": "66-7", "oq_id": 66, "desc": "Input: a list of string values, representing decimal minutes.\nOutput: a list of string values, representing time in hours:minutes:seconds format.\nFunctionality: The transformation converts each element in the given sequence from decimal minutes to time in hours:minutes:seconds format, and output the result as a list.\nExample: Input: ['100', '200', '300', '400', '500']; output: ['01:40:00', '03:20:00', '05:00:00', '06:40:00', '08:20:00']"}
{"id": "67-9", "oq_id": 67, "desc": "Input: a list of string values, with decimal degrees format.\nOutput: a list of string values, with degrees minutes seconds format.\nFunctionality: The transformation converts each decimal degree value in the given sequence into degrees minutes seconds format, and output the result as a list.\nExample: Input: ['55.5', '68.25', '96.75', '123.5']; output: ['55 30\\' 0\"', '68 15\\' 0\"', '96 45\\' 0\"', '123 30\\' 0\"']"}
{"id": "67-8", "oq_id": 67, "desc": "Input: a list of string values, with decimal degrees format.\nOutput: a list of string values, with degrees minutes seconds format.\nFunctionality: The transformation converts each decimal degree value in the given sequence into degrees minutes seconds format, and output the result as a list.\nExample: Input: ['38.75', '47.5', '67.75', '88.25']; output: ['38 45\\' 0\"', '47 30\\' 0\"', '67 45\\' 0\"', '88 15\\' 0\"']"}
{"id": "67-0", "oq_id": 67, "desc": "Input: a list of string values, representing decimal degrees.\nOutput: a list of string values, representing degrees minutes seconds.\nFunctionality: The transformation converts each decimal degree in the input sequence to degrees minutes seconds format, and output the result as a list of strings.\nExample: Input: ['0.5', '45.75', '90', '180.25']; output: ['0 30\\' 0\"', '45 45\\' 0\"', '90 0\\' 0\"', '180 15\\' 0\"']"}
{"id": "67-1", "oq_id": 67, "desc": "Input: a list of string values, representing decimal degrees.\nOutput: a list of string values, representing degrees minutes seconds.\nFunctionality: The transformation converts each element from decimal degrees to degrees minutes seconds format in the given sequence.\nExample: Input: ['30.5', '60.75', '120', '270.25']; output: ['30 30\\' 0\"', '60 45\\' 0\"', '120 0\\' 0\"', '270 15\\' 0\"']"}
{"id": "67-3", "oq_id": 67, "desc": "Input: a list of string values, with decimal degrees as numerical values in each element.\nOutput: a list of string values representing degrees minutes seconds format.\nFunctionality: The transformation converts each decimal degree value into degrees minutes seconds format, where the degrees are integers, minutes are integers, and seconds are floats with no decimal point.\nExample: Input: ['7.25', '45.75', '135.35', '210.5']; output: ['7 15\\' 0\"', '45 45\\' 0\"', '135 20\\' 60\"', '210 30\\' 0\"']"}
{"id": "67-2", "oq_id": 67, "desc": "Input: a list of string values, with decimal degrees format.\nOutput: a list of string values with degrees minutes seconds format.\nFunctionality: The transformation converts each decimal degree value in the input list to degrees minutes seconds format in the output list.\nExample: Input: ['15.25', '30.50', '75.75', '105.80']; output: ['15 15\\' 0\"', '30 30\\' 0\"', '75 45\\' 0\"', '105 47\\' 60\"']"}
{"id": "67-6", "oq_id": 67, "desc": "Input: a list of string values, with decimal degrees as elements.\nOutput: a list of string values in degrees minutes seconds format.\nFunctionality: The transformation converts each decimal degree value in the given sequence to degrees minutes seconds format, and outputs the result as a list.\nExample: Input: ['19.5', '22.5', '33.75', '45.67']; output: ['19 30\\' 0\"', '22 30\\' 0\"', '33 45\\' 0\"', '45 40\\' 12\"']"}
{"id": "67-7", "oq_id": 67, "desc": "Input: a list of string values, with decimal degrees format.\nOutput: a list of string values, with degrees minutes seconds format.\nFunctionality: The transformation converts each decimal degree value in the given sequence into degrees minutes seconds format, and output the result as a list.\nExample: Input: ['66.25', '83.5', '99.25', '111.7']; output: ['66 15\\' 0\"', '83 30\\' 0\"', '99 15\\' 0\"', '111 42\\' 0\"']"}
{"id": "67-5", "oq_id": 67, "desc": "Input: a list of string values, with decimal degrees format.\nOutput: a list of string values, with degrees minutes seconds format.\nFunctionality: The transformation converts each decimal degree value in the given sequence into degrees minutes seconds format, and output the result as a list.\nExample: Input: ['88.75', '99.99', '178.25', '234.5']; output: ['88 45\\' 0\"', '99 59\\' 24\"', '178 15\\' 0\"', '234 30\\' 0\"']"}
{"id": "67-4", "oq_id": 67, "desc": "Input: a list of string values, with decimal degrees format.\nOutput: a list of string values with degrees minutes seconds format.\nFunctionality: The transformation converts each element from decimal degrees to degrees minutes seconds, and output the result as a list of formatted strings.\nExample: Input: ['12.75', '55.5', '100.25', '320.9']; Output: ['12 45\\' 0\"', '55 30\\' 0\"', '100 15\\' 0\"', '320 53\\' 60\"']"}
{"id": "68-5", "oq_id": 68, "desc": "Input: a list of string values, representing decimal fractions.\nOutput: a list of string values, representing fractions in fractional notation.\nFunctionality: The transformation converts each decimal fraction in the given sequence to its equivalent fractional notation.\nExample: Input: ['0.125', '0.25', '0.375', '0.5', '0.625']; output: ['1/8', '1/4', '3/8', '1/2', '5/8']"}
{"id": "68-4", "oq_id": 68, "desc": "Input: a list of string values, with fractional numerical values in each element.\nOutput: a list of string values representing fractional notation of the numbers.\nFunctionality: The transformation converts each decimal number in the given sequence to fractional notation and outputs the result as a list.\nExample: Input: ['2.5', '3.75', '1.25', '4.75', '0.5']; output: ['5/2', '15/4', '5/4', '19/4', '1/2']"}
{"id": "68-6", "oq_id": 68, "desc": "Input: a list of string values, with fractional numerical values in each element.\nOutput: a list of string values in fractional notation.\nFunctionality: The transformation converts each decimal number in the given sequence to its equivalent in fractional notation, and output the result as a list.\nExample: Input: ['4.25', '3.5', '1.75', '5.25', '0.75']; output: ['17/4', '7/2', '7/4', '21/4', '3/4']"}
{"id": "68-7", "oq_id": 68, "desc": "Input: a list of string values, with fractional numerical values in each element.\nOutput: a list of string values in fractional notation.\nFunctionality: The transformation converts each decimal number in the given sequence to its equivalent in fractional notation, and output the result as a list.\nExample: Input: ['2.125', '4.25', '6.375', '5.5', '1.875']; output: ['17/8', '17/4', '51/8', '11/2', '15/8']"}
{"id": "68-3", "oq_id": 68, "desc": "Input: a list of string values, representing decimal numbers.\nOutput: a list of string values, representing fractional notation.\nFunctionality: The transformation converts decimal numbers to fractional notation in the given sequence.\nExample: Input: ['0.333333', '0.666666', '1.333333', '2.666666', '3.333333']; output: ['333333/1000000', '333333/500000', '1333333/1000000', '1333333/500000', '3333333/1000000']"}
{"id": "68-2", "oq_id": 68, "desc": "Input: a list of string values, with fractional numerical values in each element.\nOutput: a list of string values representing fractional notation.\nFunctionality: The transformation converts each decimal representation of a fraction in the given sequence to fractional notation and outputs the result as a list.\nExample: Input: ['0.75', '1.25', '1.75', '0.625', '0.875']; Output: ['3/4', '5/4', '7/4', '5/8', '7/8']"}
{"id": "68-0", "oq_id": 68, "desc": "Input: a list of string values, representing decimal numbers.\nOutput: a list of string values, representing fractions.\nFunctionality: The transformation converts each decimal number from the given sequence to its fractional equivalent and outputs the result as a list.\nExample: Input: ['1.5', '0.75', '0.333', '0.166', '2.25']; output: ['3/2', '3/4', '333/1000', '83/500', '9/4']"}
{"id": "68-1", "oq_id": 68, "desc": "Input: a list of string values, representing decimal numbers.\nOutput: a list of string values, representing fractional notation.\nFunctionality: The transformation converts each decimal number from the given sequence to its equivalent fractional notation and output the result as a list.\nExample: Input: ['0.1', '0.2', '0.3', '0.4', '0.5']; output: ['1/10', '1/5', '3/10', '2/5', '1/2']"}
{"id": "68-9", "oq_id": 68, "desc": "Input: a list of string values, with fractional numerical values in each element.\nOutput: a list of string values in fractional notation.\nFunctionality: The transformation converts each decimal number in the given sequence to its equivalent in fractional notation, and output the result as a list.\nExample: Input: ['5.5', '6.625', '3.875', '1.25', '0.75']; output: ['11/2', '53/8', '31/8', '5/4', '3/4']"}
{"id": "68-8", "oq_id": 68, "desc": "Input: a list of string values with decimal numbers represented as strings.\nOutput: a list of string values with fractional numbers in the format of numerator/denominator.\nFunctionality: The transformation converts each decimal number from the given sequence into a fractional representation.\nExample: Input: ['0.666666', '0.333333', '1.666666', '2.333333', '3.666666']; output: ['333333/500000', '333333/1000000', '833333/500000', '2333333/1000000', '1833333/500000']"}
{"id": "69-6", "oq_id": 69, "desc": "Input: a list of string values, representing latitude and longitude coordinates.\nOutput: a list of string values, converted from lat long to MGRS format.\nFunctionality: The transformation converts each latitude and longitude coordinate in the given sequence to MGRS format, and output the result as a list.\nExample: Input: ['17.88, -32.66', '53.44, -80.88', '71.99, -35.66', '27.88, -33.44', '50.44, -79.99']; output: ['25QEV3601776942', '17UNV0797121225', '25WDV0823289843', '25RDL5669083987', '17UNR7172088041']"}
{"id": "69-7", "oq_id": 69, "desc": "Input: a list of string values, each representing a pair of latitude and longitude coordinates.\nOutput: a list of MGRS (Military Grid Reference System) coordinates.\nFunctionality: The transformation converts each pair of latitude and longitude coordinates into MGRS format and outputs the result as a list.\nExample: Input: ['19.99, -30.77', '50.55, -79.11', '73.33, -33.44', '30.77, -29.77', '50.11, -79.22']; output: ['25QGC3332911927', '17UPS3389401490', '25XDB8591137344', '26RKV3487607392', '17UPR2727252378']"}
{"id": "69-5", "oq_id": 69, "desc": "Input: a list of string values, each representing a pair of latitude and longitude coordinates.\nOutput: a list of strings in MGRS format.\nFunctionality: The transformation converts each pair of latitude and longitude coordinates to MGRS notation and outputs the result as a list of strings.\nExample: Input: ['14.77, -34.55', '49.33, -78.33', '65.88, -31.99', '24.22, -35.66', '45.99, -77.44']; output: ['25PCS3316833462', '17UPQ9398667570', '25WEP4605406905', '25RBG2984581157', '18TUR1103395831']"}
{"id": "69-4", "oq_id": 69, "desc": "Input: a list of strings, representing latitude and longitude coordinates.\nOutput: a list of strings, representing MGRS coordinates.\nFunctionality: The transformation converts each pair of latitude and longitude coordinates into MGRS format, and output the result as a list of strings.\nExample: Input: ['16.66, -36.44', '45.22, -76.66', '68.77, -32.77', '26.77, -37.44', '47.33, -75.22']; output: ['24QYD7305743692', '18TUR6966808730', '25WES0929428733', '24RXQ5510061912', '18TVT8337741860']"}
{"id": "69-0", "oq_id": 69, "desc": "Input: a list of string values, representing latitude and longitude coordinates.\nOutput: a list of string values, converted from lat long to MGRS format.\nFunctionality: The transformation converts each latitude and longitude coordinate in the given sequence to MGRS format and output the result as a list of strings.\nExample: Input: ['11.22, -33.44', '55.66, -88.99', '77.11, -22.33', '33.44, -55.66', '22.88, -77.11']; output: ['25PDN5196840340', '16UCG7480970034', '27XVF6688259423', '21SXT2455600869', '18QTL8353831786']"}
{"id": "69-1", "oq_id": 69, "desc": "Input: a list of string values, each representing a pair of latitude and longitude coordinates.\nOutput: a list of strings in MGRS format.\nFunctionality: The transformation converts each pair of latitude and longitude coordinates to MGRS notation and outputs the result as a list of strings.\nExample: Input: ['15.33, -35.66', '42.88, -75.22', '62.11, -30.44', '25.66, -36.88', '46.22, -72.11']; output: ['25PBS1438496579', '18TVN8203347512', '25VFJ3357789072', '24RYP1280239737', '18TYS2288622551']"}
{"id": "69-3", "oq_id": 69, "desc": "Input: a list of string values, representing latitude and longitude coordinates.\nOutput: a list of string values, representing MGRS coordinates.\nFunctionality: The transformation converts each lat long coordinate to MGRS format in the given sequence and outputs the result as a list of strings.\nExample: Input: ['20.55, -29.33', '52.11, -81.11', '72.44, -34.55', '29.33, -31.22', '51.22, -82.33']; output: ['26QKH5707674080', '17UMT9246673278', '25XDA4780938685', '25RFN7283245863', '17UMS0711875130']"}
{"id": "69-2", "oq_id": 69, "desc": "Input: a list of string values, representing latitude and longitude coordinates.\nOutput: a list of string values, representing MGRS coordinates.\nFunctionality: The transformation converts each lat long coordinate to MGRS format in the given sequence and outputs the result as a list of strings.\nExample: Input: ['18.44, -31.55', '48.99, -79.77', '69.33, -37.22', '28.55, -38.99', '49.11, -78.33']; output: ['25QFA5312839479', '17UNQ8998227073', '24WWB7011292178', '24RWS0097858131', '17UPQ9485043117']"}
{"id": "69-9", "oq_id": 69, "desc": "Input: a list of strings containing latitude and longitude coordinates in decimal format.\nOutput: a list of strings with MGRS coordinates.\nFunctionality: The transformation converts the given latitude and longitude coordinates to MGRS format.\nExample: Input: ['22.44, -26.99', '58.66, -85.55', '78.66, -28.99', '33.99, -25.99', '54.33, -83.66']; output: ['26QNK0102881530', '16VEL8412103103', '26XMN5632532771', '26SNC9328461506', '17ULA2704023501']"}
{"id": "69-8", "oq_id": 69, "desc": "Input: a list of string values, representing latitude and longitude coordinates.\nOutput: a list of string values, representing MGRS coordinates.\nFunctionality: The transformation converts each lat long coordinate to MGRS format in the given sequence and outputs the result as a list of strings.\nExample: Input: ['21.22, -28.88', '55.11, -83.22', '75.44, -30.88', '31.88, -27.88', '52.22, -81.44']; output: ['26QLJ0487547654', '17ULB5839009282', '25XED5947973765', '26RMA1676927472', '17UMT6994285598']"}
{"id": "70-7", "oq_id": 70, "desc": "Input: a list of strings representing shoe sizes in women's sizes.\nOutput: a list of strings representing corresponding shoe sizes in men's sizes.\nFunctionality: The transformation converts each women's shoe size to men's shoe size using a specific conversion formula and outputs the result as strings in the list.\nExample: Input: ['12', '7.5', '10', '5.5', '8']; output: ['10.5', '6', '8.5', '4', '6.5']"}
{"id": "70-6", "oq_id": 70, "desc": "Input: a list of strings representing shoe sizes in women's sizes.\nOutput: a list of strings representing corresponding shoe sizes in men's sizes.\nFunctionality: The transformation converts each women's shoe size to men's shoe size using a general conversion formula.\nExample: Input: ['8.5', '6', '7', '11', '9.5']; output: ['7', '4.5', '5.5', '9.5', '8']"}
{"id": "70-4", "oq_id": 70, "desc": "Input: a list of strings representing shoe sizes in women's sizes.\nOutput: a list of strings representing corresponding shoe sizes in men's sizes.\nFunctionality: The transformation converts each women's shoe size to men's shoe size using a general conversion formula. \nExample: Input: ['8', '5.5', '9.5', '7', '10']; output: ['6.5', '4', '8', '5.5', '8.5']"}
{"id": "70-5", "oq_id": 70, "desc": "Input: a list of strings representing shoe sizes in women's sizes.\nOutput: a list of strings representing corresponding shoe sizes in men's sizes.\nFunctionality: The transformation converts each women's shoe size to men's shoe size using a general conversion formula.\nExample: Input: ['7', '11', '5.5', '6.5', '9']; output: ['5.5', '9.5', '4', '5', '7.5']"}
{"id": "70-1", "oq_id": 70, "desc": "Input: a list of strings representing shoe sizes in women's sizes.\nOutput: a list of strings representing corresponding shoe sizes in men's sizes.\nFunctionality: The transformation converts each women's shoe size to men's shoe size using a specific conversion formula and outputs the result as strings in a list.\nExample: Input: ['9.5', '6', '12', '7.5', '11']; output: ['8', '4.5', '10.5', '6', '9.5']"}
{"id": "70-0", "oq_id": 70, "desc": "Input: a list of strings representing shoe sizes in women's sizes.\nOutput: a list of strings representing corresponding shoe sizes in men's sizes.\nFunctionality: The transformation converts each women's shoe size to men's shoe size using a general conversion formula. \nExample: Input: ['6', '8.5', '10', '5.5', '9']; output: ['4.5', '7', '8.5', '4', '7.5']"}
{"id": "70-2", "oq_id": 70, "desc": "Input: a list of strings representing shoe sizes in women's sizes.\nOutput: a list of strings representing corresponding shoe sizes in men's sizes.\nFunctionality: The transformation converts each women's shoe size to men's shoe size using a specific conversion formula and outputs the result as strings in the list.\nExample: Input: ['5.5', '10', '8', '7.5', '6']; output: ['4', '8.5', '6.5', '6', '4.5']"}
{"id": "70-3", "oq_id": 70, "desc": "Input: a list of strings representing women's shoe sizes.\nOutput: a list of strings representing men's shoe sizes.\n\nFunctionality: The transformation converts each women's shoe size in the given sequence to the corresponding men's shoe size based on a common conversion scale, and outputs the result as a list.\nExample: Input: ['13', '8.5', '9', '6.5', '11']; Output: ['11.5', '7', '7.5', '5', '9.5']"}
{"id": "70-8", "oq_id": 70, "desc": "Input: a list of strings representing women's shoe sizes.\nOutput: a list of strings representing men's shoe sizes.\n\nFunctionality: The transformation converts women's shoe sizes to men's shoe sizes by subtracting 1.5 from each size in the given sequence and outputting the result as a list.\n\nExample: Input: ['6.5', '9', '11', '8', '10.5']; Output: ['5', '7.5', '9.5', '6.5', '9']"}
{"id": "70-9", "oq_id": 70, "desc": "Input: a list of strings representing shoe sizes in women's sizes.\nOutput: a list of strings representing corresponding shoe sizes in men's sizes.\nFunctionality: The transformation converts each women's shoe size to men's shoe size using a specific conversion formula and outputs the result as a list.\nExample: Input: ['9', '6', '8.5', '10', '7']; output: ['7.5', '4.5', '7', '8.5', '5.5']"}
{"id": "71-4", "oq_id": 71, "desc": "Input: a list of string values, representing dates in Excel format.\nOutput: a list of dates in datetime format.\nFunctionality: The transformation converts each date in the given sequence from Excel format to datetime format.\nExample: Input: ['39098', '39456', '39876', '37654', '38276']; output: ['2007-01-16', '2008-01-09', '2009-03-04', '2003-02-02', '2004-10-16']"}
{"id": "71-5", "oq_id": 71, "desc": "Input: a list of string values, where each string represents a date in Excel format.\nOutput: a list of datetime values.\n\nFunctionality: The transformation converts each date in Excel format from the given sequence to a datetime format and outputs the result as a list.\n\nExample: Input: ['39999', '39998', '39997', '39996', '39995']; output: ['2009-07-05', '2009-07-04', '2009-07-03', '2009-07-02', '2009-07-01']"}
{"id": "71-7", "oq_id": 71, "desc": "Input: a list of string values, where each string represents a date in Excel format.\nOutput: a list of datetime values.\n\nFunctionality: The transformation converts each date in Excel format from the given sequence to a datetime format and outputs the result as a list.\n\nExample: Input: ['37098', '37123', '37234', '37345', '37456']; output: ['2001-07-26', '2001-08-20', '2001-12-09', '2002-03-30', '2002-07-19']"}
{"id": "71-6", "oq_id": 71, "desc": "Input: a list of string values, where each string represents a date in Excel format.\nOutput: a list of datetime values.\n\nFunctionality: The transformation converts each date in Excel format from the given sequence to a datetime format and outputs the result as a list.\n\nExample: Input: ['38765', '37654', '39987', '39876', '39098']; output: ['2006-02-17', '2003-02-02', '2009-06-23', '2009-03-04', '2007-01-16']"}
{"id": "71-2", "oq_id": 71, "desc": "Input: a list of string values, where each string represents a date in Excel format.\nOutput: a list of datetime values.\n\nFunctionality: The transformation converts each date in Excel format from the given sequence to a datetime format and outputs the result as a list.\n\nExample: Input: ['40123', '39876', '39765', '39087', '39999']; output: ['2009-11-06', '2009-03-04', '2008-11-13', '2007-01-05', '2009-07-05']"}
{"id": "71-3", "oq_id": 71, "desc": "Input: a list of string values, where each string represents a date in Excel format.\nOutput: a list of datetime values.\n\nFunctionality: The transformation converts each date in Excel format from the given sequence to a datetime format and outputs the result as a list.\n\nExample: Input: ['39321', '39210', '38888', '37765', '35678']; output: ['2007-08-27', '2007-05-08', '2006-06-20', '2003-05-24', '1997-09-05']"}
{"id": "71-1", "oq_id": 71, "desc": "Input: a list of string values, where each string represents a date in Excel format.\nOutput: a list of datetime values.\n\nFunctionality: The transformation converts each date in Excel format from the given sequence to a datetime format and outputs the result as a list.\n\nExample: Input: ['40000', '40001', '40002', '40003', '40004']; output: ['2009-07-06', '2009-07-07', '2009-07-08', '2009-07-09', '2009-07-10']"}
{"id": "71-0", "oq_id": 71, "desc": "Input: a list of string values, where each string represents a date in Excel format.\nOutput: a list of datetime values.\n\nFunctionality: The transformation converts each date in Excel format from the given sequence to a datetime format and outputs the result as a list.\n\nExample: Input: ['36567', '36789', '39970', '38543', '39456']; output: ['2000-02-11', '2000-09-20', '2009-06-06', '2005-07-10', '2008-01-09']"}
{"id": "71-8", "oq_id": 71, "desc": "Input: a list of string values, representing dates in Excel format.\nOutput: a list of dates in datetime format.\nFunctionality: The transformation converts each date in the given sequence from Excel format to datetime format.\nExample: Input: ['38098', '38123', '38234', '38345', '38456']; output: ['2004-04-21', '2004-05-16', '2004-09-04', '2004-12-24', '2005-04-14']"}
{"id": "71-9", "oq_id": 71, "desc": "Input: a list of string values, where each string represents a date in Excel format.\nOutput: a list of datetime values.\n\nFunctionality: The transformation converts each date in Excel format from the given sequence to a datetime format and outputs the result as a list.\n\nExample: Input: ['39000', '38888', '37654', '39999', '39456']; output: ['2006-10-10', '2006-06-20', '2003-02-02', '2009-07-05', '2008-01-09']"}
{"id": "72-5", "oq_id": 72, "desc": "Input: a list of string values, representing decimal numbers.\nOutput: a list of string values, representing octal numbers.\nFunctionality: The transformation converts each decimal number from the given sequence to octal format, and outputs the result as a list of strings.\nExample: Input: ['999', '888', '777', '666', '555']; output: ['1747', '1570', '1411', '1232', '1053']"}
{"id": "72-4", "oq_id": 72, "desc": "Input: a list of string values, each containing a decimal number.\nOutput: a list of string values, each containing the octal representation of the corresponding decimal number.\nFunctionality: The transformation converts each decimal number in the given sequence to its octal equivalent and stores the result as a string value in the output list.\nExample: Input: ['111111', '222222', '333333', '444444', '555555']; Output: ['331007', '662016', '1213025', '1544034', '2075043']"}
{"id": "72-6", "oq_id": 72, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values.\nFunctionality: The transformation converts each decimal number in the given sequence to octal format and outputs the result as a new list.\nExample: Input: ['13579', '2468', '3579', '4680', '5791']; output: ['32413', '4644', '6773', '11110', '13237']"}
{"id": "72-7", "oq_id": 72, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values.\nFunctionality: The transformation converts each decimal number in the given sequence to octal format and outputs the result as a list of strings.\nExample: Input: ['2468', '1357', '8642', '5731', '1089']; output: ['4644', '2515', '20702', '13143', '2101']"}
{"id": "72-3", "oq_id": 72, "desc": "Input: a list of string values, where each string represents a decimal number.\nOutput: a list of string values, where each string represents an octal number.\nFunctionality: The transformation converts each decimal number in the given sequence to octal format and outputs the result as a list.\nExample: Input: ['987654', '123456', '345678', '567890', '789012']; Output: ['3611006', '361100', '1243116', '2125122', '3005024']"}
{"id": "72-2", "oq_id": 72, "desc": "Input: a list of string values, each element representing a numerical value.\nOutput: a list of string values, each element representing the octal equivalent of the numerical value in the input list.\nFunctionality: The transformation converts each numerical value in the input sequence from decimal to octal, providing the octal equivalent value as a string in the output list.\nExample: Input: ['876', '9876', '1234', '3456', '7890']; output: ['1554', '23224', '2322', '6600', '17322']"}
{"id": "72-0", "oq_id": 72, "desc": "Input: a list of string values, representing decimal numbers.\nOutput: a list of string values, representing octal numbers.\nFunctionality: The transformation converts each decimal number from the given sequence to octal format and outputs the result as a list.\nExample: Input: ['1111', '2222', '3333', '4444', '5555']; output: ['2127', '4256', '6405', '10534', '12663']"}
{"id": "72-1", "oq_id": 72, "desc": "Input: a list of string values, each representing a decimal number.\nOutput: a list of string values, each representing an octal number.\nFunctionality: The transformation converts each decimal number from the given sequence to octal format and outputs the result as a list of strings.\nExample: Input: ['9876', '54321', '111', '222', '333']; output: ['23224', '152061', '157', '336', '515']"}
{"id": "72-9", "oq_id": 72, "desc": "Input: a list of string values containing numerical values.\nOutput: a list of string values containing numerical values.\nFunctionality: The transformation adds 50 to the first and last digits of each number in the given sequence and outputs the modified numbers as strings in the result list.\nExample: Input: ['123', '234', '345', '456', '567']; output: ['173', '352', '531', '710', '1067']"}
{"id": "72-8", "oq_id": 72, "desc": "Input: a list of string values, each representing a decimal number.\nOutput: a list of string values, each representing an octal number.\nFunctionality: The transformation converts each decimal number from the given sequence to octal format and outputs the result as a list of strings.\nExample: Input: ['444', '555', '666', '777', '888']; output: ['674', '1053', '1232', '1411', '1570']"}
{"id": "74-3", "oq_id": 74, "desc": "Input: a list of strings in yyyyMMdd date format.\nOutput: a list of strings in Month dd, yyyy date format.\nFunctionality: The transformation converts the date format from yyyyMMdd to Month dd, yyyy format for each element in the given sequence, and outputs the result as a list.\nExample: Input: ['19930108', '20011102', '20190417', '19881222', '20221231']; output: ['Jan 08, 1993', 'Nov 02, 2001', 'Apr 17, 2019', 'Dec 22, 1988', 'Dec 31, 2022']"}
{"id": "74-2", "oq_id": 74, "desc": "Input: a list of strings in the format YYYYMMDD representing dates.\nOutput: a list of strings in the format Month day, year representing dates.\nFunctionality: The transformation converts each date from the given sequence into the format Month day, year, and output the result as a list.\nExample: Input: ['19821018', '20030814', '20140723', '19960129', '20201107']; output: ['Oct 18, 1982', 'Aug 14, 2003', 'Jul 23, 2014', 'Jan 29, 1996', 'Nov 07, 2020']"}
{"id": "74-0", "oq_id": 74, "desc": "Input: a list of strings in the format YYYYMMDD representing dates.\nOutput: a list of strings in the format MMM DD, YYYY representing dates.\nFunctionality: The transformation converts each date from the given sequence into the specified format and outputs the result as a list.\nExample: Input: ['19991215', '20040530', '20150827', '19961012', '20221202']; output: ['Dec 15, 1999', 'May 30, 2004', 'Aug 27, 2015', 'Oct 12, 1996', 'Dec 02, 2022']"}
{"id": "74-1", "oq_id": 74, "desc": "Input: a list of strings in yyyymmdd format representing dates.\nOutput: a list of strings in Month DD, YYYY format representing dates.\nFunctionality: The transformation converts the input date strings into datetime objects, then formats the datetime objects in the desired Month DD, YYYY format and outputs them as strings in a list.\nExample: Input: ['19780506', '19980425', '20090210', '19870115', '20101230']; output: ['May 06, 1978', 'Apr 25, 1998', 'Feb 10, 2009', 'Jan 15, 1987', 'Dec 30, 2010']"}
{"id": "74-5", "oq_id": 74, "desc": "Input: a list of strings in the format YYYYMMDD representing dates.\nOutput: a list of strings in the format Month DD, YYYY representing dates.\nFunctionality: The transformation converts each date from the given sequence into the format Month DD, YYYY, and output the result as a list of strings.\nExample: Input: ['19970228', '20071204', '20160315', '19940921', '20220330']; output: ['Feb 28, 1997', 'Dec 04, 2007', 'Mar 15, 2016', 'Sep 21, 1994', 'Mar 30, 2022']"}
{"id": "74-4", "oq_id": 74, "desc": "Input: a list of strings in yyyymmdd format representing dates.\nOutput: a list of strings in Month DD, YYYY format representing dates.\nFunctionality: The transformation converts the input date strings into datetime objects, then formats the datetime objects in Month DD, YYYY format and outputs the result as a list of strings.\nExample: Input: ['19870903', '19991111', '20131004', '19990802', '20221220']; output: ['Sep 03, 1987', 'Nov 11, 1999', 'Oct 04, 2013', 'Aug 02, 1999', 'Dec 20, 2022']"}
{"id": "74-6", "oq_id": 74, "desc": "Input: a list of strings in yyyymmdd format representing dates.\nOutput: a list of strings in Month DD, YYYY format representing dates.\nFunctionality: The transformation converts the input date strings into datetime objects, then formats them as Month DD, YYYY strings in the output list.\nExample: Input: ['19900217', '19940718', '20071209', '19901123', '20120529']; output: ['Feb 17, 1990', 'Jul 18, 1994', 'Dec 09, 2007', 'Nov 23, 1990', 'May 29, 2012']"}
{"id": "74-7", "oq_id": 74, "desc": "Input: a list of strings in the format YYYYMMDD representing dates.\nOutput: a list of strings in the format Month DD, YYYY representing dates.\nFunctionality: The transformation converts the date format from YYYYMMDD to Month DD, YYYY in each element of the given sequence.\nExample: Input: ['19811224', '19951207', '20120506', '19921203', '20211210']; output: ['Dec 24, 1981', 'Dec 07, 1995', 'May 06, 2012', 'Dec 03, 1992', 'Dec 10, 2021']"}
{"id": "74-9", "oq_id": 74, "desc": "Input: a list of strings in the format YYYYMMDD representing dates.\nOutput: a list of strings in the format Month DD, YYYY representing dates.\nFunctionality: The transformation converts the date format from YYYYMMDD to Month DD, YYYY in each element of the given sequence.\nExample: Input: ['19871113', '19931205', '20050622', '19931202', '20170215']; output: ['Nov 13, 1987', 'Dec 05, 1993', 'Jun 22, 2005', 'Dec 02, 1993', 'Feb 15, 2017']"}
{"id": "74-8", "oq_id": 74, "desc": "Input: a list of strings in the format YYYYMMDD representing dates.\nOutput: a list of strings in the format Month DD, YYYY representing dates.\nFunctionality: The transformation converts the date format from YYYYMMDD to Month DD, YYYY in each element of the given sequence.\nExample: Input: ['19941107', '19980628', '20170109', '19971030', '20200503']; output: ['Nov 07, 1994', 'Jun 28, 1998', 'Jan 09, 2017', 'Oct 30, 1997', 'May 03, 2020']"}
{"id": "75-0", "oq_id": 75, "desc": "Input: a list of string values containing month numbers.\nOutput: a list of strings representing month names.\nFunctionality: The transformation converts each month number in the given sequence to the corresponding month name and outputs the result as a list.\nExample: Input: ['1', '2', '3', '4', '5']; output: ['January', 'February', 'March', 'April', 'May']"}
{"id": "75-1", "oq_id": 75, "desc": "Input: a list of string values, with numerical values in each element representing month numbers.\nOutput: a list of string values, with month names corresponding to the month numbers in the input list.\nFunctionality: The transformation converts each month number in the given sequence to the corresponding month name, and outputs the result as a list of strings.\nExample: Input: ['6', '9', '11', '8', '2']; output: ['June', 'September', 'November', 'August', 'February']"}
{"id": "75-3", "oq_id": 75, "desc": "Input: a list of string values representing month numbers.\nOutput: a list of strings representing month names.\nFunctionality: The transformation converts each month number in the given sequence to the corresponding month name and outputs the result as a list.\nExample: Input: ['10', '4', '6', '1', '11']; output: ['October', 'April', 'June', 'January', 'November']"}
{"id": "75-2", "oq_id": 75, "desc": "Input: a list of string values containing month numbers.\nOutput: a list of strings representing month names.\nFunctionality: The transformation converts each month number in the given sequence to the corresponding month name and outputs the result as a list.\nExample: Input: ['12', '8', '7', '3', '5']; output: ['December', 'August', 'July', 'March', 'May']"}
{"id": "75-6", "oq_id": 75, "desc": "Input: a list of string values, representing numerical values.\nOutput: a list of string values, representing month names.\nFunctionality: The transformation converts each numerical value in the input sequence to the corresponding month name, and outputs the result as a list of strings.\nExample: Input: ['1', '5', '3', '7', '9']; output: ['January', 'May', 'March', 'July', 'September']"}
{"id": "75-7", "oq_id": 75, "desc": "Input: a list of string values, representing month numbers.\nOutput: a list of string values, representing month names.\nFunctionality: The transformation converts each month number in the input sequence to the corresponding month name and outputs the result as a list.\nExample: Input: ['4', '10', '8', '2', '11']; output: ['April', 'October', 'August', 'February', 'November']"}
{"id": "75-5", "oq_id": 75, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values representing month names.\nFunctionality: The transformation converts each numerical value in the input sequence to its corresponding month name and outputs the result as a list of strings.\nExample: Input: ['2', '5', '6', '11', '10']; output: ['February', 'May', 'June', 'November', 'October']"}
{"id": "75-4", "oq_id": 75, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values, representing month names.\nFunctionality: The transformation converts each numerical value in the input sequence to the corresponding month name and outputs the result as a list of strings.\nExample: Input: ['7', '4', '9', '3', '8']; output: ['July', 'April', 'September', 'March', 'August']"}
{"id": "75-9", "oq_id": 75, "desc": "Input: a list of string values, with numerical values representing month numbers.\nOutput: a list of string values, with month names.\n\nFunctionality: The transformation converts each month number in the input sequence to the corresponding month name and outputs the result as a list of strings.\n\nExample: Input: ['12', '8', '3', '5', '11']; output: ['December', 'August', 'March', 'May', 'November']"}
{"id": "75-8", "oq_id": 75, "desc": "Input: a list of string values containing month numbers.\nOutput: a list of strings representing month names.\nFunctionality: The transformation converts each month number in the given sequence to the corresponding month name and outputs the result as a list.\nExample: Input: ['9', '6', '1', '2', '7']; output: ['September', 'June', 'January', 'February', 'July']"}
{"id": "76-1", "oq_id": 76, "desc": "Input: a list of string values, each element containing a numerical value followed by a unit (m/s).\nOutput: a list of string values, each element containing the equivalent speed in mph.\nFunctionality: The transformation converts the speed from m/s to mph using the formula mph = m/s * 2.23694, and formats the result as a string in the output list.\nExample: Input: ['4 m/s', '60 m/s', '102 m/s', '15 m/s', '25 m/s']; output: ['8.9477 mph', '134.2162 mph', '228.1675 mph', '33.5540 mph', '55.9234 mph']"}
{"id": "76-0", "oq_id": 76, "desc": "Input: a list of string values, where each element represents a speed in m/s.\nOutput: a list of string values, where each element represents the corresponding speed in mph.\nFunctionality: The transformation converts each speed from meters per second (m/s) to miles per hour (mph) using the formula 2.23694 * m/s, rounding the result to four decimal places, and outputs the result as a list.\nExample: Input: ['5 m/s', '47 m/s', '85 m/s', '10 m/s', '20 m/s']; output: ['11.1847 mph', '105.1360 mph', '190.1396 mph', '22.3694 mph', '44.7387 mph']"}
{"id": "76-2", "oq_id": 76, "desc": "Input: a list of string values, where each element represents a speed in m/s.\nOutput: a list of string values, where each element represents the corresponding speed converted to mph.\nFunctionality: The transformation converts each speed from m/s to mph using the conversion factor 2.23694, and formats the result as a string in the output list.\nExample: Input: ['8 m/s', '70 m/s', '95 m/s', '18 m/s', '30 m/s']; output: ['17.8955 mph', '156.5855 mph', '212.5089 mph', '40.2648 mph', '67.1081 mph']"}
{"id": "76-3", "oq_id": 76, "desc": "Input: a list of string values, each element containing a numerical value followed by a space and \"m/s\".\nOutput: a list of string values, each element containing the speed in mph.\nFunctionality: The transformation converts the speed from m/s to mph using the formula mph = m/s * 2.23694, and formats the result as a string in the output list.\nExample: Input: ['3 m/s', '55 m/s', '115 m/s', '9 m/s', '40 m/s']; output: ['6.7108 mph', '123.0315 mph', '257.2476 mph', '20.1324 mph', '89.4774 mph']"}
{"id": "76-7", "oq_id": 76, "desc": "Input: a list of string values, where each element represents a speed in m/s.\nOutput: a list of string values, where each element represents the corresponding speed converted to mph.\nFunctionality: The transformation converts each speed from m/s to mph using the conversion factor 2.23694, and formats the result as a string in the output list.\nExample: Input: ['9 m/s', '65 m/s', '120 m/s', '16 m/s', '50 m/s']; output: ['20.1324 mph', '145.4008 mph', '268.4323 mph', '35.7910 mph', '111.8468 mph']"}
{"id": "76-6", "oq_id": 76, "desc": "Input: a list of string values, where each element represents a speed in m/s.\nOutput: a list of string values, where each element represents the equivalent speed in mph.\nFunctionality: The transformation calculates the equivalent speed in mph by converting m/s to mph using the formula mph = m/s * 2.23694, and outputs the result as a list of formatted strings.\nExample: Input: ['2.5 m/s', '45 m/s', '100 m/s', '13 m/s', '23 m/s']; output: ['5.5923 mph', '100.6621 mph', '223.6936 mph', '29.0802 mph', '51.4495 mph']"}
{"id": "76-4", "oq_id": 76, "desc": "Input: a list of string values, each element containing a numerical value followed by a space and \"m/s\".\nOutput: a list of string values, each element containing the speed in mph.\nFunctionality: The transformation converts the speed from m/s to mph using the formula mph = m/s * 2.23694, and formats the result as a string in the output list.\nExample: Input: ['6 m/s', '80 m/s', '130 m/s', '11 m/s', '35 m/s']; output: ['13.4216 mph', '178.9549 mph', '290.8017 mph', '24.6063 mph', '78.2928 mph']"}
{"id": "76-5", "oq_id": 76, "desc": "Input: a list of string values, each element containing a numerical value followed by a space and \"m/s\".\nOutput: a list of string values, each element containing the speed in mph.\nFunctionality: The transformation converts the speed from m/s to mph using the formula mph = m/s * 2.23694, and formats the result as a string in the output list.\nExample: Input: ['7 m/s', '75 m/s', '110 m/s', '14 m/s', '28 m/s']; output: ['15.6586 mph', '167.7702 mph', '246.0630 mph', '31.3171 mph', '62.6342 mph']"}
{"id": "76-8", "oq_id": 76, "desc": "Input: a list of string values, where each element represents a speed in m/s.\nOutput: a list of string values, where each element represents the same speed converted to mph.\nFunctionality: The transformation converts each speed value from m/s to mph using the conversion factor of 2.23694, and formats the result as a string with the converted value and unit \"mph\".\nExample: Input: ['1.5 m/s', '35 m/s', '80 m/s', '8 m/s', '27 m/s']; output: ['3.3554 mph', '78.2928 mph', '178.9549 mph', '17.8955 mph', '60.3973 mph']"}
{"id": "76-9", "oq_id": 76, "desc": "Input: a list of string values, where each element represents a speed in m/s.\nOutput: a list of string values, where each element represents the equivalent speed in mph.\nFunctionality: The transformation calculates the speed in mph by multiplying the speed in m/s by 2.23694, and formats the result with \"mph\" as the unit.\nExample: Input: ['5.5 m/s', '56 m/s', '97 m/s', '17 m/s', '38 m/s']; output: ['12.3031 mph', '125.2684 mph', '216.9828 mph', '38.0279 mph', '85.0036 mph']"}
{"id": "77-2", "oq_id": 77, "desc": "Input: a list of strings representing Military Grid Reference System (MGRS) coordinates.\nOutput: a list of strings representing latitude and longitude coordinates.\nFunctionality: The transformation converts each MGRS coordinate in the given sequence to latitude and longitude coordinates, and formats the result as a string in the output list.\nExample: Input: ['47E PK 29114 08746', '32C NV 33302 89528', '50R QM 28270 63098', 'AQR 98 09631 058', '04Q CE 49144 14157']; output: ['-63.92439  101.63317', '-76.67141  10.29416', '24.06365  119.24502', '-83.01827  -64.74876', '17.30776  -160.41946']"}
{"id": "77-3", "oq_id": 77, "desc": "Input: a list of strings containing MGRS coordinates.\nOutput: a list of strings containing latitude and longitude coordinates in the format \"latitude longitude\".\nFunctionality: The transformation converts each MGRS coordinate in the input sequence to latitude and longitude using a suitable conversion method and outputs them as strings in the format specified.\nExample: Input: ['42H WA 47371 75716', '25M FT 26997 04135', '53X MK 97118 41250']; output: ['-39.96738 69.55469', '-2.67623 -31.85755', '80.53451 134.84302']"}
{"id": "77-1", "oq_id": 77, "desc": "Input: a list of strings containing MGRS coordinates.\nOutput: a list of strings containing latitude and longitude coordinates in the format \"latitude longitude\".\nFunctionality: The transformation converts each MGRS coordinate in the input sequence to latitude and longitude using a suitable algorithm or library, and outputs the converted coordinates as a list of strings.\nExample: Input: ['33Q UA 73263 50325', '32D MK 73151 42827', '39W WP 51687 82044', '49J EG 55052 00606', '04D DK 62068 46041', '33X UH 86234 33819']; output: ['18.53975 13.79918', '-68.12708 8.35420', '66.55310 52.16414', '-30.72615 111.57502', '-68.09700 -159.91120', '78.63088 9.82384']"}
{"id": "77-0", "oq_id": 77, "desc": "Input: a list of strings containing MGRS coordinates.\nOutput: a list of strings representing latitude and longitude coordinates.\n\nFunctionality: The transformation converts each MGRS coordinate in the input sequence to latitude and longitude coordinates, and formats them as strings using decimal degrees.\nExample: Input: ['13U DP 49074 95207', '45J UE 13958 89616', '18P VC 62962 30577', '08L PJ 09168 10280', 'AZM 56 53708 808', '53X NJ 06401 05275']; output: ['48.70782  -105.69222', '-31.71375  85.03662', '15.65295  -75.34558', '-15.28153  -133.98326', '-89.09012  -154.51707', '79.31614  135.30928']"}
{"id": "77-4", "oq_id": 77, "desc": "Input: a list of strings, each containing MGRS coordinates. \nOutput: a list of strings, each containing Latitude and Longitude coordinates. \nFunctionality: The transformation converts each MGRS coordinate in the given sequence to Latitude and Longitude coordinates in decimal format. \nExample: Input: ['55W CN 87485 71150', '01R GK 22574 97704', '33P VQ 14847 43550', '26F PF 93375 92732', 'YYJ 29 57514 068']; output: ['65.54299  144.56399', '27.08381  -174.75533', '13.05681  14.21460', '-53.27932  -24.09945', '88.15302  -123.79499']"}
{"id": "77-5", "oq_id": 77, "desc": "Input: a list of strings in Military Grid Reference System (MGRS) format.\nOutput: a list of strings in latitude longitude format.\nFunctionality: The transformation converts each MGRS coordinate in the given sequence to latitude longitude format, and output the result as a list of strings.\nExample: Input: ['32U MG 33435 09942', '05X NB 82808 08604', '09X VL 89467 08822', '54D XN 23243 58116']; output: ['55.13168  7.95597', '73.05705  -150.45352', '81.13942  -129.61254', '-65.27679  143.64145']"}
{"id": "77-7", "oq_id": 77, "desc": "Input: a list of alphanumeric values (MGRS coordinates).\nOutput: a list of latitude and longitude coordinates in string format.\nFunctionality: The transformation converts each MGRS coordinate in the given sequence to latitude and longitude coordinates, and formats the result as a list of strings.\nExample: Input: ['47F NU 47653 05946', 'BGS 56 37122 221', '25H ER 82654 78992', '12X WR 40498 29038', '48Q XJ 01609 61851', 'YSJ 09 79920 643']; Output: ['-55.88959  99.76190', '-84.40433  47.22591', '-39.93515  -32.03262', '81.31350  -108.59743', '21.35588  105.97999', '84.57798  -101.55268']"}
{"id": "77-6", "oq_id": 77, "desc": "Input: a list of strings containing MGRS coordinates.\nOutput: a list of strings containing latitude and longitude coordinates separated by a space.\nFunctionality: The transformation converts each MGRS coordinate in the given sequence to latitude and longitude coordinates, using a specific conversion method, and outputs the resulting coordinates as strings in the format \"latitude longitude\".\nExample: Input: ['56U PF 87747 44100', '42L TQ 99183 81906']; output: ['54.50967 155.90014', '-9.20559 67.17221']"}
{"id": "77-8", "oq_id": 77, "desc": "Input: a list of strings containing Military Grid Reference System (MGRS) coordinates.\nOutput: a list of strings containing latitude and longitude coordinates.\nFunctionality: The transformation converts each MGRS coordinate in the given sequence to latitude and longitude coordinates, and formats the result as a string in the output list.\nExample: Input: ['32H NB 32598 78709', '35X MD 03344 38515', '19V EJ 13707 49858', '59H LB 22304 43221', '25X EF 18724 91904']; output: ['-39.04007  9.37667', '75.10898  23.62879', '61.78142  -68.74016', '-34.83781  169.05664', '77.40332  -32.23088']"}
{"id": "77-9", "oq_id": 77, "desc": "Input: a list of strings containing MGRS coordinates.\nOutput: a list of strings containing latitude and longitude coordinates in the format \"latitude longitude\".\nFunctionality: The transformation converts each MGRS coordinate in the input sequence to latitude and longitude using a suitable algorithm or library, and outputs the converted coordinates as a list of strings.\nExample: Input: ['ZJJ 09 95213 655', '14N QJ 75455 00934', '29X MK 87820 19845']; output: ['84.41580  100.55512', '2.72007  -96.52256', '80.34216  -9.65034']"}
{"id": "78-8", "oq_id": 78, "desc": "Input: a list of string values, with mixed numbers represented as fractions in each element.\nOutput: a list of numerical values in decimal format.\nFunctionality: The transformation converts each element from the given sequence representing mixed numbers into decimal format, and outputs the result as a list of numerical values.\nExample: Input: ['1 3/4', '6', '11 1/2', '9 1/3', '2/5', '4 1/4']; output: ['1.75', '6', '11.5', '9.333', '0.4', '4.25']"}
{"id": "78-9", "oq_id": 78, "desc": "Input: a list of string values, with mixed numbers represented as whole numbers with fractions.\nOutput: a list of numerical values in decimal format.\nFunctionality: The transformation converts each mixed number into decimal format in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['8 2/3', '10 1/4', '7', '3 2/3', '2 1/5', '9']; output: ['8.667', '10.25', '7', '3.667', '2.2', '9']"}
{"id": "78-7", "oq_id": 78, "desc": "Input: a list of string values, with mixed numbers represented as fractions in each element.\nOutput: a list of string values, with mixed numbers converted to decimal values.\nFunctionality: The transformation converts each mixed number in the input sequence to a decimal value and outputs the result as a list of strings.\nExample: Input: ['9/5', '7 3/4', '14 1/3', '3 1/2', '8', '5 2/3']; output: ['1.8', '7.75', '14.333', '3.5', '8', '5.667']"}
{"id": "78-6", "oq_id": 78, "desc": "Input: a list of string values, with mixed numbers represented as fractions in each element.\nOutput: a list of numerical values in decimal format.\nFunctionality: The transformation converts mixed numbers represented as fractions in each element of the input sequence into decimal values in the output sequence.\nExample: Input: ['3 1/3', '9 1/4', '12', '6 2/3', '2/7', '5 1/2']; output: ['3.333', '9.25', '12', '6.667', '0.286', '5.5']"}
{"id": "78-4", "oq_id": 78, "desc": "Input: a list of string values, with mixed numbers represented as fractions in each element.\nOutput: a list of numerical values in decimal format.\nFunctionality: The transformation converts each element from mixed number format to decimal format, and outputs the result as a list.\nExample: Input: ['13 1/2', '5 2/3', '9 1/4', '7', '2 3/5', '1/3']; output: ['13.5', '5.667', '9.25', '7', '2.6', '0.333']"}
{"id": "78-5", "oq_id": 78, "desc": "Input: a list of string values, with mixed numbers represented as fractions in each element.\nOutput: a list of numerical values in decimal format.\nFunctionality: The transformation converts each element from the given sequence representing mixed numbers into decimal format, and outputs the result as a list.\nExample: Input: ['6 1/4', '4 3/5', '10', '8 1/3', '1/4', '3 2/3']; output: ['6.25', '4.6', '1', '8.333', '0.25', '3.667']"}
{"id": "78-1", "oq_id": 78, "desc": "Input: a list of string values, with mixed fractions and whole numbers.\nOutput: a list of numerical values in decimal format.\nFunctionality: The transformation converts each element in the given sequence from mixed fractions to decimal format.\nExample: Input: ['4 1/3', '2 1/5', '15', '3/4', '6', '9 3/4']; output: ['4.333', '2.2', '15', '0.75', '6', '9.75']"}
{"id": "78-0", "oq_id": 78, "desc": "Input: a list of string values, with mixed numbers represented as strings.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each mixed number in the given sequence to decimal format if applicable, and outputs the result as a list of numerical values.\nExample: Input: ['5', '3 1/2', '10 1/3', '12 1/4', '2/3', '7']; output: ['5', '3.5', '10.333', '12.25', '0.667', '7']"}
{"id": "78-2", "oq_id": 78, "desc": "Input: a list of string values, with mixed numbers represented as fractions in each element.\nOutput: a list of numerical values in decimal format.\nFunctionality: The transformation converts each element from the given sequence representing mixed numbers into decimal format, and outputs the result as a list of numerical values.\nExample: Input: ['1 2/3', '11 1/4', '8', '5 1/2', '2/9', '6 2/3']; output: ['1.667', '11.25', '8', '5.5', '0.222', '6.667']"}
{"id": "78-3", "oq_id": 78, "desc": "Input: a list of string values, with mixed fractions and whole numbers.\nOutput: a list of numerical values in decimal format.\nFunctionality: The transformation converts each element in the given sequence from mixed fractions to decimal format.\nExample: Input: ['7/8', '3 1/3', '6 1/4', '4', '1 3/4', '9']; output: ['0.875', '3.333', '6.25', '4', '1.75', '9']"}
{"id": "79-8", "oq_id": 79, "desc": "Input: a list of string values, where each element consists of hexadecimal characters.\nOutput: a list of ASCII characters.\nFunctionality: The transformation converts each hexadecimal value in the input sequence to its corresponding ASCII character and outputs the result as a list.\nExample: Input: ['CA', '73', 'B2', '19', 'E5']; output: ['\u00ca', 's', '\u00b2', '\\x19', '\u00e5']"}
{"id": "79-9", "oq_id": 79, "desc": "Input: a list of hexadecimal strings.\nOutput: a list of ASCII characters.\nFunctionality: The transformation converts each hexadecimal string in the given sequence to its corresponding ASCII character and outputs the result as a list.\nExample: Input: ['84', 'AE', '8B', '3F', 'D6']; output: ['\\x84', '\u00ae', '\\x8b', '?', '\u00d6']"}
{"id": "79-4", "oq_id": 79, "desc": "Input: a list of hexadecimal strings.\nOutput: a list of ASCII characters.\nFunctionality: The transformation converts each hexadecimal string to its corresponding ASCII character in the result list.\nExample: Input: ['7E', '33', '92', '4D', 'B5']; output: ['~', '3', '\\x92', 'M', '\u00b5']"}
{"id": "79-5", "oq_id": 79, "desc": "Input: a list of string values, each containing a hexadecimal character.\nOutput: a list of ASCII characters.\nFunctionality: The transformation converts each hexadecimal character in the input sequence to its corresponding ASCII character, and outputs the ASCII characters as a list.\nExample: Input: ['C1', '8A', '7D', '51', '29']; output: ['\u00c1', '\\x8a', '}', 'Q', ')']"}
{"id": "79-7", "oq_id": 79, "desc": "Input: a list of hexadecimal values as strings.\nOutput: a list of ASCII characters as strings.\nFunctionality: The transformation converts each hexadecimal value to its corresponding ASCII character and outputs the result as a list of strings.\nExample: Input: ['3D', 'F7', 'A8', '5B', '60']; output: ['=', '\u00f7', '\u00a8', '[', '`']"}
{"id": "79-6", "oq_id": 79, "desc": "Input: a list of hexadecimal strings representing ASCII characters.\nOutput: a list of ASCII characters.\n\nFunctionality: The transformation converts each hexadecimal string in the given sequence to its corresponding ASCII character and outputs the result as a list of characters.\n\nExample: Input: ['97', '2B', '69', 'FE', '4C']; Output: ['\\x97', '+', 'i', '\u00fe', 'L']"}
{"id": "79-2", "oq_id": 79, "desc": "Input: a list of string values, where each element is a hexadecimal representation of a character.\nOutput: a list of characters represented by the hex values.\nFunctionality: The transformation converts each hexadecimal representation in the input sequence to the corresponding ASCII character and outputs it in a list format.\nExample: Input: ['B3', 'F5', '1A', '6D', '82']; output: ['\u00b3', '\u00f5', '\\x1a', 'm', '\\x82']"}
{"id": "79-3", "oq_id": 79, "desc": "Input: a list of hexadecimal strings.\nOutput: a list of ASCII characters.\nFunctionality: The transformation converts each hex value to its corresponding ASCII character and outputs as a list.\nExample: Input: ['69', 'D8', '5C', 'A3', 'FB']; output: ['i', '\u00d8', '\\\\', '\u00a3', '\u00fb']"}
{"id": "79-1", "oq_id": 79, "desc": "Input: a list of string values containing hexadecimal characters.\nOutput: a list of strings representing ASCII characters corresponding to the hexadecimal values.\nFunctionality: The transformation converts each hexadecimal value in the input sequence to its corresponding ASCII character and outputs the result as a list of strings.\nExample: Input: ['A2', '4E', '5F', '76', 'C9']; output: ['\u00a2', 'N', '_', 'v', '\u00c9']"}
{"id": "79-0", "oq_id": 79, "desc": "Input: a list of hexadecimal string values.\nOutput: a list of ASCII characters.\nFunctionality: The transformation converts each hexadecimal string in the given sequence to its corresponding ASCII character and outputs the result as a list.\nExample: Input: ['23', '6A', '8F', 'BC', 'E1']; output: ['#', 'j', '\\x8f', '\u00bc', '\u00e1']"}
{"id": "80-9", "oq_id": 80, "desc": "Input: a list of strings representing binary numbers.\nOutput: a list of strings representing decimal numbers.\nFunctionality: The transformation converts each binary number from the given sequence to decimal, and output the result as a list of strings representing decimal numbers.\nExample: Input: ['111011', '101010', '110011', '000111', '010101']; output: ['59', '42', '51', '7', '21']"}
{"id": "80-8", "oq_id": 80, "desc": "Input: a list of strings representing binary numbers.\nOutput: a list of strings representing decimal numbers.\n\nFunctionality: The transformation converts each binary number from the given sequence to its decimal equivalent and outputs the result as a list of strings representing decimal numbers.\nExample: Input: ['110011', '101010', '001111', '111000', '010101']; output: ['51', '42', '15', '56', '21']"}
{"id": "80-0", "oq_id": 80, "desc": "Input: a list of strings containing binary numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each binary number in the given sequence to a base ten number and outputs the result as a list of numerical values.\nExample: Input: ['000111', '101010', '110011', '111000', '010101']; output: ['7', '42', '51', '56', '21']"}
{"id": "80-1", "oq_id": 80, "desc": "Input: a list of strings representing binary numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each binary number from the given sequence to a base ten number and outputs the result as a list of numerical values.\nExample: Input: ['100100', '010010', '001001', '110110', '111000']; output: ['36', '18', '9', '54', '56']"}
{"id": "80-3", "oq_id": 80, "desc": "Input: a list of strings representing binary numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each binary number in the given sequence to a base ten number and outputs the result as a list of numerical values.\nExample: Input: ['110110', '100011', '001111', '010101', '111000']; output: ['54', '35', '15', '21', '56']"}
{"id": "80-2", "oq_id": 80, "desc": "Input: a list of strings representing binary numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each binary number in the given sequence to a base ten number and outputs the result as a list of numerical values.\nExample: Input: ['111100', '101010', '010101', '001110', '011001']; output: ['60', '42', '21', '14', '25']"}
{"id": "80-6", "oq_id": 80, "desc": "Input: a list of strings containing binary numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each binary number in the given sequence to a decimal number, and outputs the result as a list of numerical values.\nExample: Input: ['000111', '011001', '101010', '110110', '111000']; output: ['7', '25', '42', '54', '56']"}
{"id": "80-7", "oq_id": 80, "desc": "Input: a list of strings representing binary numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each binary number in the given sequence to a decimal number, and outputs the result as a list of numerical values.\nExample: Input: ['100001', '010010', '101101', '110110', '111000']; output: ['33', '18', '45', '54', '56']"}
{"id": "80-5", "oq_id": 80, "desc": "Input: a list of strings containing binary numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each binary number in the given sequence to a decimal number, and outputs the result as a list of numerical values.\nExample: Input: ['111000', '110011', '001100', '010101', '101010']; output: ['56', '51', '12', '21', '42']"}
{"id": "80-4", "oq_id": 80, "desc": "Input: a list of strings representing binary numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each binary number in the given sequence to a base ten number and outputs the result as a list of numerical values.\nExample: Input: ['001100', '101010', '001111', '100001', '010101']; output: ['12', '42', '15', '33', '21']"}
{"id": "82-8", "oq_id": 82, "desc": "Input: a list of string values, each containing a hexadecimal number.\nOutput: a list of string values, each containing a different hexadecimal number.\n\nFunctionality: The transformation converts each hexadecimal number in the given sequence to a new hexadecimal number and outputs the results in a new list.\nExample: Input: ['111111', '222222', '333333', '444444', '555555']; output: ['1B207', '3640E', '51615', '6C81C', '87A23']"}
{"id": "82-9", "oq_id": 82, "desc": "Input: a list of string values, each containing a numerical string.\nOutput: a list of hexadecimal values.\nFunctionality: The transformation converts each numerical string in the given sequence to hexadecimal format, and outputs the result as a list of hexadecimal values.\nExample: Input: ['444444', '555555', '666666', '777777', '888888']; output: ['6C81C', '87A23', 'A2C2A', 'BDE31', 'D9038']"}
{"id": "82-2", "oq_id": 82, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element from the given sequence to hexadecimal format.\nExample: Input: ['111111', '222222', '333333', '444444', '555555']; output: ['1B207', '3640E', '51615', '6C81C', '87A23']"}
{"id": "82-3", "oq_id": 82, "desc": "Input: a list of string values, where each string represents a hexadecimal number.\nOutput: a list of string values, where each string represents a hexadecimal number.\nFunctionality: The transformation converts each hexadecimal number from the given sequence to its decimal equivalent.\nExample: Input: ['777777', '888888', '999999', '123456', '654321']; output: ['BDE31', 'D9038', 'F423F', '1E240', '9FBF1']"}
{"id": "82-1", "oq_id": 82, "desc": "Input: a list of strings representing hexadecimal values.\nOutput: a list of strings representing hexadecimal values.\nFunctionality: The transformation converts each element in the given sequence from decimal to hexadecimal format.\nExample: Input: ['123456', '7890123', '4567890', '987654', '321']; output: ['1E240', '7864CB', '45B352', 'F1206', '141']"}
{"id": "82-0", "oq_id": 82, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of hexadecimal values.\nFunctionality: The transformation converts each numerical value in the given sequence to hexadecimal format, and outputs the result as a list of strings.\nExample: Input: ['987654', '3456789', '4567890', '987', '654321']; output: ['F1206', '34BF15', '45B352', '3DB', '9FBF1']"}
{"id": "82-4", "oq_id": 82, "desc": "Input: a list of string values, with alphanumeric characters in each element.\nOutput: a list of string values representing hexadecimal numbers.\nFunctionality: The transformation converts each element from the given sequence into hexadecimal format and outputs the result as a list.\nExample: Input: ['135724', '9876543', '1234567', '7654321', '874930']; output: ['20dc', '965b27', '12d687', '74cbb1', 'd59b2']"}
{"id": "82-5", "oq_id": 82, "desc": "Input: a list of string values, each containing a hexadecimal number.\nOutput: a list of string values, each containing a hexadecimal number.\n\nFunctionality: The transformation converts each element from the given sequence to its hexadecimal equivalent and outputs the result as a list of strings.\n\nExample: Input: ['111111', '222222', '333333', '444444', '555555']; output: ['1B207', '3640E', '51615', '6C81C', '87A23']"}
{"id": "82-7", "oq_id": 82, "desc": "Input: a list of string values, where each string represents a numerical value.\nOutput: a list of hexadecimal values.\n\nFunctionality: The transformation converts each numerical string in the given sequence to hexadecimal format and outputs the result as a list of strings.\n\nExample: Input: ['654321', '543216', '987654', '4321', '876543']; output: ['9FBF1', '849F0', 'F1206', '10E1', 'D5FFF']"}
{"id": "82-6", "oq_id": 82, "desc": "Input: a list of hexadecimal strings.\nOutput: a list of hexadecimal strings.\nFunctionality: The transformation converts each element from the given sequence from decimal to hexadecimal values, and outputs the result as a list of hexadecimal strings.\nExample: Input: ['777777', '888888', '999999', '123456', '654321']; output: ['BDE31', 'D9038', 'F423F', '1E240', '9FBF1']"}
{"id": "83-8", "oq_id": 83, "desc": "Input: a list of string values, representing weights in grams.\nOutput: a list of string values, representing weights in pounds and ounces.\nFunctionality: The transformation converts grams to pounds and ounces for each weight in the given sequence and formats the result in the output list.\nExample: Input: ['8000g', '5000g', '10000g', '20000g', '30000g']; output: ['17lb 10.192oz', '11lb 0.37oz', '22lb 0.74oz', '44lb 1.479oz', '66lb 2.219oz']"}
{"id": "83-9", "oq_id": 83, "desc": "Input: a list of string values, representing weights in grams.\nOutput: a list of string values, formatted as pounds and ounces.\nFunctionality: The transformation converts each weight from grams to pounds and ounces, and then formats the result as a string in the format \"lbs oz\".\nExample: Input: ['12345g', '54321g', '98765g', '67890g', '24680g']; output: ['27lb 3.457oz', '119lb 12.117oz', '217lb 11.833oz', '149lb 10.749oz', '54lb 6.561oz']"}
{"id": "83-1", "oq_id": 83, "desc": "Input: a list of string values, with weight measurements in grams in each element.\nOutput: a list of string values, with weight measurements converted to pounds and ounces in each element.\nFunctionality: The transformation converts each weight measurement from grams to pounds and ounces, and formats the result as a string in the output list.\nExample: Input: ['250g', '600g', '1800g', '700g', '50g']; output: ['0lb 8.818oz', '1lb 5.164oz', '3lb 15.493oz', '1lb 8.692oz', '0lb 1.764oz']"}
{"id": "83-0", "oq_id": 83, "desc": "Input: a list of string values, with weight measurements in grams in each element.\nOutput: a list of string values, with weight measurements converted to pounds and ounces in each element.\nFunctionality: The transformation converts each weight measurement from grams to pounds and ounces, and formats the result as a string in the output list.\nExample: Input: ['500g', '750g', '1500g', '200g', '800g']; output: ['1lb 1.637oz', '1lb 10.455oz', '3lb 4.911oz', '0lb 7.055oz', '1lb 12.219oz']"}
{"id": "83-2", "oq_id": 83, "desc": "Input: a list of string values, with weight measurements in grams in each element.\nOutput: a list of string values, with weight measurements converted to pounds and ounces in each element.\nFunctionality: The transformation converts each weight measurement from grams to pounds and ounces, and formats the result as a string in the output list.\nExample: Input: ['420g', '920g', '1300g', '360g', '780g']; output: ['0lb 14.815oz', '2lb 0.452oz', '2lb 13.856oz', '0lb 12.699oz', '1lb 11.514oz']"}
{"id": "83-3", "oq_id": 83, "desc": "Input: a list of string values, with weight measurements in grams in each element.\nOutput: a list of string values, with weight measurements converted to pounds and ounces in each element.\nFunctionality: The transformation converts each weight measurement from grams to pounds and ounces, and formats the result as a string in the output list.\nExample: Input: ['100g', '300g', '600g', '900g', '1200g']; output: ['0lb 3.527oz', '0lb 10.582oz', '1lb 5.164oz', '1lb 15.747oz', '2lb 10.329oz']"}
{"id": "83-7", "oq_id": 83, "desc": "Input: a list of string values, with weight measurements in grams in each element.\nOutput: a list of string values, with weight measurements in pounds and ounces in each element.\nFunctionality: The transformation converts grams to pounds and ounces for each element in the given sequence, and output the result as a list.\nExample: Input: ['275g', '625g', '1375g', '855g', '425g']; output: ['0lb 9.7oz', '1lb 6.046oz', '3lb 0.502oz', '1lb 14.159oz', '0lb 14.991oz']"}
{"id": "83-6", "oq_id": 83, "desc": "Input: a list of string values, with values in grams format.\nOutput: a list of string values, with values converted to pounds and ounces format.\nFunctionality: The transformation calculates the equivalent pounds and ounces for each value in grams in the given sequence, and formats the result as a string in the output list.\nExample: Input: ['333g', '666g', '999g', '1111g', '444g']; output: ['0lb 11.746oz', '1lb 7.492oz', '2lb 3.239oz', '2lb 7.189oz', '0lb 15.662oz']"}
{"id": "83-4", "oq_id": 83, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of strings representing weight measurements in pounds and ounces.\nFunctionality: The transformation converts grams to pounds and ounces for each element in the given sequence and formats the result as a string in the output list.\nExample: Input: ['50g', '75g', '125g', '175g', '225g']; output: ['0lb 1.764oz', '0lb 2.646oz', '0lb 4.409oz', '0lb 6.173oz', '0lb 7.937oz']"}
{"id": "83-5", "oq_id": 83, "desc": "Input: a list of string values, representing weights in grams.\nOutput: a list of string values, formatted as weights in pounds and ounces.\nFunctionality: The transformation converts each weight from grams to pounds and ounces, and formats the result as a string with pounds and ounces.\nExample: Input: ['1234g', '5678g', '9876g', '4321g', '8765g']; output: ['2lb 11.528oz', '12lb 8.286oz', '21lb 12.366oz', '9lb 8.419oz', '19lb 5.176oz']"}
{"id": "84-8", "oq_id": 84, "desc": "Input: a list of strings representing timestamps.\nOutput: a list of strings representing timestamps.\nFunctionality: The transformation converts the given timestamps from PST (Pacific Standard Time) to EST (Eastern Standard Time) without changing the date.\nExample: Input: ['5:10 AM, Sep 8, 2019', '2:35 PM, Apr 13, 2020', '10:00 PM, Mar 18, 2018', '9:25 AM, Nov 30, 2021', '6:50 PM, Jul 6, 2017']; Output: ['8:10 AM, Sep 8, 2019', '5:35 PM, Apr 13, 2020', '1:00 AM, Mar 19, 2018', '12:25 PM, Nov 30, 2021', '9:50 PM, Jul 6, 2017']"}
{"id": "84-9", "oq_id": 84, "desc": "Input: a list of strings representing timestamps in a specific format.\nOutput: a list of strings representing timestamps in the same format but converted from PST to EST.\nFunctionality: The transformation converts each timestamp from Pacific Standard Time (PST) to Eastern Standard Time (EST) in the given sequence and outputs the results in a list.\nExample: Input: ['3:15 PM, Aug 5, 2020', '12:40 AM, Feb 27, 2017', '10:05 AM, Dec 12, 2019', '6:30 PM, May 17, 2018', '8:55 AM, Sep 21, 2021']; output: ['6:15 PM, Aug 5, 2020', '3:40 AM, Feb 27, 2017', '1:05 PM, Dec 12, 2019', '9:30 PM, May 17, 2018', '11:55 AM, Sep 21, 2021']"}
{"id": "84-4", "oq_id": 84, "desc": "Input: a list of strings representing timestamps in a specific format.\nOutput: a list of strings representing timestamps in the same format but converted from PST to EST.\nFunctionality: The transformation involves extracting the date and time from each timestamp in the given sequence using datetime library, converting it from PST to EST timezone, formatting it back to the original string format, and outputting the result as a list.\nExample: Input: ['11:55 PM, Mar 29, 2017', '9:20 AM, Jan 23, 2021', '4:45 PM, Oct 17, 2016', '7:10 AM, Jun 8, 2019', '1:00 PM, Sep 12, 2020']; output: ['2:55 AM, Mar 30, 2017', '12:20 PM, Jan 23, 2021', '7:45 PM, Oct 17, 2016', '10:10 AM, Jun 8, 2019', '4:00 PM, Sep 12, 2020']"}
{"id": "84-5", "oq_id": 84, "desc": "Input: a list of strings representing timestamps in a specific format.\nOutput: a list of strings representing timestamps in the same format but converted from PST to EST.\nFunctionality: The transformation involves extracting the date and time from each timestamp in the given sequence using datetime library, converting it from PST to EST timezone, formatting it back to the original string format, and outputting the result as a list.\nExample: Input: ['9:00 AM, Nov 18, 2020', '12:25 PM, Mar 7, 2018', '3:50 PM, Dec 25, 2021', '7:15 AM, Feb 19, 2019', '11:40 PM, May 30, 2017']; output: ['12:00 PM, Nov 18, 2020', '3:25 PM, Mar 7, 2018', '6:50 PM, Dec 25, 2021', '10:15 AM, Feb 19, 2019', '2:40 AM, May 31, 2017']"}
{"id": "84-7", "oq_id": 84, "desc": "Input: a list of strings representing timestamps in a specific format.\nOutput: a list of strings representing timestamps in the same format but converted from PST to EST.\nFunctionality: The transformation converts each timestamp from Pacific Standard Time (PST) to Eastern Standard Time (EST) in the given sequence and outputs the results in a list.\nExample: Input: ['1:30 PM, Jan 31, 2020', '11:55 PM, Jun 14, 2018', '7:20 AM, Oct 9, 2017', '4:45 PM, Feb 3, 2019', '8:10 AM, Mar 23, 2021']; output: ['4:30 PM, Jan 31, 2020', '2:55 AM, Jun 15, 2018', '10:20 AM, Oct 9, 2017', '7:45 PM, Feb 3, 2019', '11:10 AM, Mar 23, 2021']"}
{"id": "84-6", "oq_id": 84, "desc": "Input: a list of strings representing timestamps in a specific format.\nOutput: a list of strings representing timestamps in the same format but converted from PST to EST.\nFunctionality: The transformation involves extracting the time portion of each timestamp, converting it from PST to EST, and outputting the new timestamp in the same format.\nExample: Input: ['10:20 PM, Jul 17, 2018', '8:45 AM, Sep 3, 2020', '12:10 PM, Nov 1, 2019', '4:35 AM, Aug 12, 2017', '2:00 PM, Apr 24, 2021']; output: ['1:20 AM, Jul 18, 2018', '11:45 AM, Sep 3, 2020', '3:10 PM, Nov 1, 2019', '7:35 AM, Aug 12, 2017', '5:00 PM, Apr 24, 2021']"}
{"id": "84-2", "oq_id": 84, "desc": "Input: a list of strings representing timestamps in a specific format.\nOutput: a list of strings representing timestamps in the same format but converted from PST to EST.\nFunctionality: The transformation involves extracting the time portion of each timestamp, converting it from PST to EST, and outputting the updated timestamp in the same format.\nExample: Input: ['5:55 AM, Sep 16, 2021', '2:30 PM, Jun 21, 2020', '8:45 PM, Dec 5, 2019', '1:35 AM, Nov 3, 2017', '11:20 AM, Feb 14, 2020']; output: ['8:55 AM, Sep 16, 2021', '5:30 PM, Jun 21, 2020', '11:45 PM, Dec 5, 2019', '4:35 AM, Nov 3, 2017', '2:20 PM, Feb 14, 2020']"}
{"id": "84-3", "oq_id": 84, "desc": "Input: a list of strings representing timestamps in a specific format.\nOutput: a list of strings representing timestamps in the same format but converted from PST to EST.\nFunctionality: The transformation involves extracting the timestamp information from each element in the given sequence, using it to convert the time from PST to EST, and formatting the result as a string in the same timestamp format.\nExample: Input: ['6:40 AM, Oct 30, 2018', '10:15 PM, Apr 10, 2017', '3:50 PM, Jul 2, 2019', '8:05 AM, Aug 21, 2018', '12:30 PM, Jan 7, 2020']; output: ['9:40 AM, Oct 30, 2018', '1:15 AM, Apr 11, 2017', '6:50 PM, Jul 2, 2019', '11:05 AM, Aug 21, 2018', '3:30 PM, Jan 7, 2020']"}
{"id": "84-1", "oq_id": 84, "desc": "Input: a list of strings representing timestamps in a specific format.\nOutput: a list of strings representing timestamps in the same format.\n\nFunctionality: The transformation involves converting the timestamps from PST to EST by adding 3 hours to each timestamp in the given sequence. The output will be a list of timestamps in EST.\n\nExample: Input: ['7:15 PM, Feb 28, 2019', '4:50 AM, Oct 3, 2020', '11:10 AM, May 12, 2019', '9:25 PM, Apr 30, 2020', '12:00 PM, Aug 9, 2018']; Output: ['10:15 PM, Feb 28, 2019', '7:50 AM, Oct 3, 2020', '2:10 PM, May 12, 2019', '12:25 AM, May 1, 2020', '3:00 PM, Aug 9, 2018']"}
{"id": "84-0", "oq_id": 84, "desc": "Input: a list of strings representing timestamps in a specific format.\nOutput: a list of strings representing timestamps in the same format but converted from PST to EST.\nFunctionality: The transformation involves extracting the date and time from each timestamp in the given sequence using datetime library, converting it from PST to EST timezone, formatting it back to the original string format, and outputting the updated timestamps as a list.\nExample: Input: ['8:30 AM, Jan 15, 2016', '3:45 PM, Sep 27, 2015', '6:20 AM, Nov 10, 2017', '10:30 PM, Jul 4, 2016', '2:00 PM, Mar 8, 2018']; output: ['11:30 AM, Jan 15, 2016', '6:45 PM, Sep 27, 2015', '9:20 AM, Nov 10, 2017', '1:30 AM, Jul 5, 2016', '5:00 PM, Mar 8, 2018']"}
{"id": "85-8", "oq_id": 85, "desc": "Input: a list of string values, with time duration in the format of X minutes.\nOutput: a list of numerical values with time converted to hundredths.\n\nFunctionality: The transformation converts each time duration in minutes to hundredths of an hour by dividing the minutes by 60, and output the result as a list formatted as strings.\nExample: Input: ['37 minutes', '48 minutes', '56 minutes', '65 minutes', '72 minutes']; Output: ['.62', '.80', '.93', '1.08', '1.20']"}
{"id": "85-9", "oq_id": 85, "desc": "Input: a list of string values, each containing a numerical value followed by a text unit.\nOutput: a list of numerical values formatted as strings with hundredths.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts minutes to hundredths (so 1 minute would be represented as .01), and outputs the result as a list of strings.\n\nExample: Input: ['29 minutes', '33 minutes', '37 minutes', '41 minutes', '45 minutes']; output: ['.48', '.55', '.62', '.68', '.75']"}
{"id": "85-7", "oq_id": 85, "desc": "Input: a list of string values, each containing a numerical value followed by a unit of time.\nOutput: a list of numerical values in hundredths format.\nFunctionality: The transformation converts the numerical values in minutes to hundredths format by dividing each value by 60 and outputting the result as a string.\nExample: Input: ['8 minutes', '16 minutes', '24 minutes', '32 minutes', '40 minutes']; output: ['.13', '.27', '.40', '.53', '.67']"}
{"id": "85-6", "oq_id": 85, "desc": "Input: a list of string values, with time durations in each element.\nOutput: a list of string values representing time durations in hundredths of an hour.\nFunctionality: The transformation converts each time duration from minutes to hundredths of an hour in the given sequence, and outputs the result as a list.\nExample: Input: ['12 minutes', '24 minutes', '36 minutes', '48 minutes', '60 minutes']; output: ['.20', '.40', '.60', '.80', '1.00']"}
{"id": "85-4", "oq_id": 85, "desc": "Input: a list of string values, with time values in the format of 'minutes'.\nOutput: a list of string values representing time values in hundredths format.\nFunctionality: The transformation converts each time value in minutes to hundredths format by dividing the minutes by 60 and outputting the result as a string in the new list.\nExample: Input: ['60 minutes', '120 minutes', '90 minutes', '150 minutes', '180 minutes']; output: ['1.00', '2.00', '1.50', '2.50', '3.00']"}
{"id": "85-5", "oq_id": 85, "desc": "Input: a list of string values, where each element includes a numerical value followed by a unit of time.\nOutput: a list of numerical values represented as hundredths.\nFunctionality: The transformation converts the time in minutes to hundredths by dividing each numerical value by 60, and formatting the result as a string in the output list.\nExample: Input: ['23 minutes', '55 minutes', '18 minutes', '42 minutes', '33 minutes']; output: ['.38', '.92', '.30', '.70', '.55']"}
{"id": "85-1", "oq_id": 85, "desc": "Input: a list of string values, each containing a numerical value followed by a unit of time.\nOutput: a list of numerical values in hundredths format.\nFunctionality: The transformation converts the numerical values in minutes to hundredths format by dividing each value by 60 and output the result as a list.\nExample: Input: ['25 minutes', '40 minutes', '20 minutes', '10 minutes', '30 minutes']; output: ['.42', '.67', '.33', '.17', '.50']"}
{"id": "85-0", "oq_id": 85, "desc": "Input: a list of string values, each containing a numerical value followed by a text unit.\nOutput: a list of numerical values formatted as hundredths.\nFunctionality: The transformation converts the numerical value in each element from minutes to hundredths, extracting only the decimal part and outputting it in the result list.\nExample: Input: ['30 minutes', '50 minutes', '35 minutes', '45 minutes', '55 minutes']; output: ['.50', '.83', '.58', '.75', '.92']"}
{"id": "85-2", "oq_id": 85, "desc": "Input: a list of string values, where each element includes a numerical value followed by a unit of time.\nOutput: a list of numerical values represented as hundredths.\nFunctionality: The transformation converts the time in minutes to hundredths of an hour by dividing each numerical value by 60 and formatting it as a string in the result list.\nExample: Input: ['17 minutes', '28 minutes', '39 minutes', '45 minutes', '56 minutes']; output: ['.28', '.47', '.65', '.75', '.93']"}
{"id": "85-3", "oq_id": 85, "desc": "Input: a list of string values, with time durations specified in minutes.\nOutput: a list of numerical values representing the time in hundredths of an hour.\nFunctionality: The transformation converts the time values in minutes to hundredths of an hour by dividing each value by 60 and formatting it as a string.\nExample: Input: ['5 minutes', '15 minutes', '25 minutes', '35 minutes', '45 minutes']; output: ['.08', '.25', '.42', '.58', '.75']"}
{"id": "86-9", "oq_id": 86, "desc": "Input: a list of string values with mixed fractions.\nOutput: a list of numerical values in decimal format.\nFunctionality: The transformation converts each mixed fraction in the input sequence to a decimal number in the output sequence.\nExample: Input: ['7 2/3', '19 5/8', '64 1/4', '89 6/7', '73', '19']; output: ['7.666666666666667', '19.625', '64.25', '89.85714285714286', '73', '19']"}
{"id": "86-8", "oq_id": 86, "desc": "Input: a list of string values with mixed fractions.\nOutput: a list of string values with decimals.\nFunctionality: The transformation converts each mixed fraction to a decimal number.\nExample: Input: ['11 4/5', '28 3/7', '53 6/9', '77 2/5', '92', '13']; Output: ['11.8', '28.428571428571427', '53.666666666666664', '77.4', '92', '13']"}
{"id": "86-6", "oq_id": 86, "desc": "Input: a list of string values with mixed fractions.\nOutput: a list of string values representing decimal numbers.\nFunctionality: The transformation converts each mixed fraction in the input sequence to a decimal number and outputs the result as a list.\nExample: Input: ['2 3/4', '11 2/5', '36 1/3', '69 4/9', '23', '7']; output: ['2.75', '11.4', '36.333333333333336', '69.44444444444444', '23', '7']"}
{"id": "86-7", "oq_id": 86, "desc": "Input: a list of string values, with mixed fractions in each element.\nOutput: a list of string values representing decimal numbers.\n\nFunctionality: The transformation converts each mixed fraction in the input sequence to a decimal number and formats it as a string in the result list.\n\nExample: Input: ['3 1/2', '9 2/3', '44 5/8', '57 3/4', '81', '53']; output: ['3.5', '9.666666666666666', '44.625', '57.75', '81', '53']"}
{"id": "86-5", "oq_id": 86, "desc": "Input: a list of string values representing either whole numbers or mixed fractions.\nOutput: a list of string values representing whole numbers.\nFunctionality: The transformation converts any mixed fraction in each element to a whole number by extracting only the whole number part and outputting it as a string in the result list.\nExample: Input: ['8', '24', '71', '46', '52', '35']; output: ['8', '24', '71', '46', '52', '35']"}
{"id": "86-4", "oq_id": 86, "desc": "Input: a list of string values with mixed fractions.\nOutput: a list of numerical values (decimals).\nFunctionality: The transformation converts each mixed fraction in the input sequence to a decimal number in the output sequence.\nExample: Input: ['6 2/5', '15 6/7', '63 5/8', '99 1/3', '85', '29']; output: ['6.4', '15.857142857142858', '63.625', '99.33333333333333', '85', '29']"}
{"id": "86-0", "oq_id": 86, "desc": "Input: a list of string values with mixed fractions and whole numbers.\nOutput: a list of numerical values in decimal format.\nFunctionality: The transformation converts each element from mixed fraction format to decimal format in the given sequence and outputs the result as a list.\nExample: Input: ['5 3/8', '14 3/7', '27 4/9', '75', '9', '2 1/2']; output: ['5.375', '14.428571428571429', '27.444444444444443', '75', '9', '2.5']"}
{"id": "86-1", "oq_id": 86, "desc": "Input: a list of string values representing numbers.\nOutput: a list of string values representing numbers.\nFunctionality: The transformation does not alter the input sequence, but outputs a new sequence that is identical to the input sequence.\nExample: Input: ['10', '33', '49', '88', '42', '17']; output: ['10', '33', '49', '88', '42', '17']"}
{"id": "86-3", "oq_id": 86, "desc": "Input: a list of string values, with mixed fractions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation converts mixed fractions to decimal for each element in the given sequence, and output the result as a list of numerical values.\nExample: Input: ['9 5/6', '22 3/4', '98 1/2', '44 4/5', '61', '73']; output: ['9.833333333333334', '22.75', '98.5', '44.8', '61', '73']"}
{"id": "86-2", "oq_id": 86, "desc": "Input: a list of string values representing mixed fractions.\nOutput: a list of string values representing decimal numbers.\nFunctionality: The transformation converts each mixed fraction in the given sequence to a decimal number, and outputs the result as a list of strings.\nExample: Input: ['4 2/3', '12 1/4', '56 7/9', '33 1/3', '8', '15']; output: ['4.666666666666667', '12.25', '56.77777777777778', '33.333333333333336', '8', '15']"}
{"id": "87-9", "oq_id": 87, "desc": "Input: a list of strings representing timestamps in Central Time.\nOutput: a list of strings representing timestamps in Eastern Time.\nFunctionality: The transformation converts each timestamp from Central Time to Eastern Time using the UTC offset difference.\nExample: Input: ['6:10 PM,Sun,May 31,2015', '11:47 PM,Fri,Mar 6,2015', '2:25 AM,Wed,Nov 18,2015', '9:30 AM,Tue,Oct 13,2015', '4:45 PM,Mon,Jul 6,2015']; output: ['7:10 PM,Sun,May 31,2015', '12:47 AM,Sat,Mar 7,2015', '3:25 AM,Wed,Nov 18,2015', '10:30 AM,Tue,Oct 13,2015', '5:45 PM,Mon,Jul 6,2015']"}
{"id": "87-8", "oq_id": 87, "desc": "Input: a list of strings representing timestamps.\nOutput: a list of strings representing timestamps.\nFunctionality: The transformation converts each timestamp from Central Time to Eastern Time by adding 1 hour for Daylight Saving Time correction, and outputs the result as a list of strings.\nExample: Input: ['9:15 AM,Tue,Mar 3,2015', '7:30 PM,Sat,Feb 14,2015', '10:00 PM,Fri,Oct 2,2015', '12:45 PM,Wed,Apr 15,2015', '5:00 AM,Thu,Jul 30,2015']; output: ['10:15 AM,Tue,Mar 3,2015', '8:30 PM,Sat,Feb 14,2015', '11:00 PM,Fri,Oct 2,2015', '1:45 PM,Wed,Apr 15,2015', '6:00 AM,Thu,Jul 30,2015']"}
{"id": "87-5", "oq_id": 87, "desc": "Input: a list of strings representing timestamps in Central Time.\nOutput: a list of strings representing timestamps in Eastern Time.\nFunctionality: The transformation converts each timestamp from Central Time to Eastern Time using the UTC offset of -5 hours, and outputs the results in a list.\nExample: Input: ['2:00 AM,Mon,Aug 10,2015', '7:45 PM,Thu,Sep 10,2015', '11:11 AM,Fri,Jul 3,2015', '9:25 PM,Sat,Oct 3,2015', '4:30 AM,Sun,Jan 18,2015']; output: ['3:00 AM,Mon,Aug 10,2015', '8:45 PM,Thu,Sep 10,2015', '12:11 PM,Fri,Jul 3,2015', '10:25 PM,Sat,Oct 3,2015', '5:30 AM,Sun,Jan 18,2015']"}
{"id": "87-4", "oq_id": 87, "desc": "Input: a list of strings representing timestamps.\nOutput: a list of strings representing timestamps.\nFunctionality: The transformation converts each timestamp from Central Time to Eastern Time by adding 1 hour for Daylight Saving Time adjustment.\nExample: Input: ['9:45 AM,Thu,Dec 31,2015', '3:30 PM,Fri,Nov 13,2015', '8:20 PM,Mon,Sep 28,2015', '10:12 PM,Fri,May 8,2015', '6:00 AM,Wed,Mar 25,2015']; output: ['10:45 AM,Thu,Dec 31,2015', '4:30 PM,Fri,Nov 13,2015', '9:20 PM,Mon,Sep 28,2015', '11:12 PM,Fri,May 8,2015', '7:00 AM,Wed,Mar 25,2015']"}
{"id": "87-6", "oq_id": 87, "desc": "Input: a list of strings representing times in Central Time.\nOutput: a list of strings representing times in Eastern Time.\nFunctionality: The transformation converts each time from Central Time to Eastern Time using the UTC offset of -5 hours, and outputs the results in a list.\nExample: Input: ['11:30 PM,Fri,Mar 27,2015', '6:15 AM,Thu,Apr 23,2015', '12:47 PM,Tue,Dec 1,2015', '8:00 PM,Wed,Oct 7,2015', '3:00 AM,Sat,Aug 15,2015']; output: ['12:30 AM,Sat,Mar 28,2015', '7:15 AM,Thu,Apr 23,2015', '1:47 PM,Tue,Dec 1,2015', '9:00 PM,Wed,Oct 7,2015', '4:00 AM,Sat,Aug 15,2015']"}
{"id": "87-7", "oq_id": 87, "desc": "Input: a list of strings representing timestamps in Central Time.\nOutput: a list of strings representing timestamps in Eastern Time.\nFunctionality: The transformation converts each timestamp from Central Time to Eastern Time using the UTC offset difference.\nExample: Input: ['5:45 PM,Fri,Nov 20,2015', '3:20 AM,Wed,Jan 7,2015', '10:30 AM,Sun,Feb 22,2015', '1:55 PM,Mon,Jun 29,2015', '8:00 PM,Tue,Jul 21,2015']; output: ['6:45 PM,Fri,Nov 20,2015', '4:20 AM,Wed,Jan 7,2015', '11:30 AM,Sun,Feb 22,2015', '2:55 PM,Mon,Jun 29,2015', '9:00 PM,Tue,Jul 21,2015']"}
{"id": "87-3", "oq_id": 87, "desc": "Input: a list of strings representing timestamps in Central Time.\nOutput: a list of strings representing timestamps in Eastern Time.\nFunctionality: The transformation converts each timestamp from Central Time to Eastern Time using the UTC offset difference.\nExample: Input: ['9:00 PM,Tue,Oct 27,2015', '11:55 AM,Tue,Feb 10,2015', '6:10 AM,Wed,May 13,2015', '2:25 PM,Sat,Jul 11,2015', '5:30 AM,Sun,Mar 1,2015']; output: ['10:00 PM,Tue,Oct 27,2015', '12:55 PM,Tue,Feb 10,2015', '7:10 AM,Wed,May 13,2015', '3:25 PM,Sat,Jul 11,2015', '6:30 AM,Sun,Mar 1,2015']"}
{"id": "87-2", "oq_id": 87, "desc": "Input: a list of strings representing timestamps in Central Time.\nOutput: a list of strings representing timestamps in Eastern Time.\nFunctionality: The transformation converts each timestamp from Central Time to Eastern Time using the UTC offset of -5 hours, and outputs the results in a list.\nExample: Input: ['6:30 AM,Wed,Mar 11,2015', '1:15 PM,Fri,Jul 17,2015', '4:57 PM,Sun,Aug 30,2015', '10:00 PM,Mon,Jun 1,2015', '8:12 AM,Thu,Sep 17,2015']; output: ['7:30 AM,Wed,Mar 11,2015', '2:15 PM,Fri,Jul 17,2015', '5:57 PM,Sun,Aug 30,2015', '11:00 PM,Mon,Jun 1,2015', '9:12 AM,Thu,Sep 17,2015']"}
{"id": "87-0", "oq_id": 87, "desc": "Input: a list of strings representing date and time in the format 'h:m AM/PM,Day,Month Day,Year'.\nOutput: a list of strings representing date and time in the same format but converted from Central Time to Eastern Time.\n\nFunctionality: The transformation involves converting the given time from Central Time to Eastern Time for each element in the input sequence and outputting the result as a list of strings.\n\nExample: Input: ['8:15 PM,Wed,Sep 2,2015', '10:30 AM,Thu,Oct 15,2015', '5:45 AM,Sun,Dec 6,2015', '4:00 PM,Mon,Nov 23,2015', '9:30 PM,Thu,Sep 3,2015']; Output: ['9:15 PM,Wed,Sep 2,2015', '11:30 AM,Thu,Oct 15,2015', '6:45 AM,Sun,Dec 6,2015', '5:00 PM,Mon,Nov 23,2015', '10:30 PM,Thu,Sep 3,2015']"}
{"id": "87-1", "oq_id": 87, "desc": "Input: a list of strings representing timestamps.\nOutput: a list of strings representing timestamps.\nFunctionality: The transformation converts each timestamp from Central Time to Eastern Time by adding one hour for Daylight Saving Time (DST) adjustment. Each timestamp's time zone is specified in the input string.\nExample: Input: ['12:00 PM,Fri,Jun 5,2015', '2:45 AM,Tue,Aug 4,2015', '7:20 PM,Sat,Jan 24,2015', '11:11 PM,Thu,Apr 30,2015', '3:40 AM,Sun,Oct 18,2015']; output: ['1:00 PM,Fri,Jun 5,2015', '3:45 AM,Tue,Aug 4,2015', '8:20 PM,Sat,Jan 24,2015', '12:11 AM,Fri,May 1,2015', '4:40 AM,Sun,Oct 18,2015']"}
{"id": "88-0", "oq_id": 88, "desc": "Input: a list of string values, where each element represents an hourly wage in the format '$X/hour'.\nOutput: a list of string values, where each element represents the corresponding annual salary in the format '$XX,XXX.XX'.\n\nFunctionality: The transformation converts each hourly wage to an annual salary by multiplying the hourly wage by 40 (hours per week) and then by 52 (weeks per year), formatting the result as a string in the desired format.\n\nExample: Input: ['$18/hour', '$25/hour', '$30/hour', '$35/hour', '$20/hour']; Output: ['$37,440.00', '$52,000.00', '$62,400.00', '$72,800.00', '$41,600.00']"}
{"id": "88-1", "oq_id": 88, "desc": "Input: a list of string values, where each element represents an hourly wage in the format '$X/hour'.\nOutput: a list of string values, where each element represents the corresponding annual salary in the format '$XXX,XXX.XX'.\n\nFunctionality: The transformation converts each hourly wage to an annual salary by multiplying the hourly wage by 2080 (assuming 40 hours per week and 52 weeks per year) and formatting the result as a string representing the annual salary.\nExample: Input: ['$16/hour', '$28/hour', '$45/hour', '$50/hour', '$19/hour']; output: ['$33,280.00', '$58,240.00', '$93,600.00', '$104,000.00', '$39,520.00']"}
{"id": "88-3", "oq_id": 88, "desc": "Input: a list of string values, where each element represents an hourly wage in the format '$X/hour'.\nOutput: a list of string values, where each element represents the corresponding annual salary in the format '$XX,XXX.XX'.\n\nFunctionality: The transformation converts each hourly wage to an annual salary by multiplying the hourly wage by 2080 (number of working hours in a year) and formatting the result as a string representing the annual salary.\nExample: Input: ['$10/hour', '$27/hour', '$36/hour', '$48/hour', '$24/hour']; output: ['$20,800.00', '$56,160.00', '$74,880.00', '$99,840.00', '$49,920.00']"}
{"id": "88-2", "oq_id": 88, "desc": "Input: a list of string values, where each element represents an hourly wage in the format '$X/hour'.\nOutput: a list of string values, where each element represents the corresponding annual salary in the format '$XX,XXX.XX'.\n\nFunctionality: The transformation converts each hourly wage to an annual salary by multiplying the hourly wage by 40 (hours per week) and then by 52 (weeks per year), formatting the result as a string in the desired format.\n\nExample: Input: ['$14/hour', '$32/hour', '$38/hour', '$42/hour', '$17/hour']; Output: ['$29,120.00', '$66,560.00', '$79,040.00', '$87,360.00', '$35,360.00']"}
{"id": "88-6", "oq_id": 88, "desc": "Input: a list of string values, where each element represents an hourly wage in the format '$X/hour'.\nOutput: a list of string values, where each element represents the corresponding annual salary in the format '$XX,XXX.XX'.\n\nFunctionality: The transformation converts each hourly wage to an annual salary by multiplying the hourly wage by 2080 (52 weeks * 40 hours per week) and formatting the result as a currency string.\nExample: Input: ['$19/hour', '$33/hour', '$39/hour', '$46/hour', '$28/hour']; output: ['$39,520.00', '$68,640.00', '$81,120.00', '$95,680.00', '$58,240.00']"}
{"id": "88-7", "oq_id": 88, "desc": "Input: a list of string values, where each element represents an hourly wage in the format '$X/hour'.\nOutput: a list of string values, where each element represents the corresponding annual salary in the format '$Y.YY'.\nFunctionality: The transformation converts the hourly wage to an annual salary by multiplying the hourly wage by 40 hours per week, 52 weeks per year, and then formatting the result as a currency string.\nExample: Input: ['$17/hour', '$26/hour', '$41/hour', '$49/hour', '$30/hour']; output: ['$35,360.00', '$54,080.00', '$85,280.00', '$101,920.00', '$62,400.00']"}
{"id": "88-5", "oq_id": 88, "desc": "Input: a list of string values, where each element represents an hourly wage in the format '$X/hour'.\nOutput: a list of string values, where each element represents the corresponding annual salary in the format '$XX,XXX.XX'.\n\nFunctionality: The transformation converts each hourly wage to an annual salary by multiplying the hourly wage by 40 (hours per week) and then by 52 (weeks per year), and formats the result as a string representing the annual salary.\nExample: Input: ['$23/hour', '$31/hour', '$37/hour', '$47/hour', '$26/hour']; output: ['$47,840.00', '$64,480.00', '$76,960.00', '$97,760.00', '$54,080.00']"}
{"id": "88-4", "oq_id": 88, "desc": "Input: a list of string values, where each element represents an hourly wage in the format '$X/hour'.\nOutput: a list of string values, where each element represents the corresponding annual salary in the format '$XXX,XXX.XX'.\n\nFunctionality: The transformation converts each hourly wage to an annual salary by multiplying the hourly wage by 2080 (52 weeks * 40 hours per week) and formatting the result as a currency string.\nExample: Input: ['$13/hour', '$29/hour', '$44/hour', '$52/hour', '$21/hour']; output: ['$27,040.00', '$60,320.00', '$91,520.00', '$108,160.00', '$43,680.00']"}
{"id": "88-9", "oq_id": 88, "desc": "Input: a list of string values, where each element represents an hourly wage in the format '$X/hour'.\nOutput: a list of string values, where each element represents the corresponding annual salary in the format '$XX,XXX.XX'.\n\nFunctionality: The transformation converts each hourly wage to an annual salary by multiplying the hourly wage by 2080 (assuming 40 hours per week and 52 weeks per year) and formatting the result as a string representing the annual salary.\nExample: Input: ['$20/hour', '$35/hour', '$42/hour', '$48/hour', '$33/hour']; output: ['$41,600.00', '$72,800.00', '$87,360.00', '$99,840.00', '$68,640.00']"}
{"id": "88-8", "oq_id": 88, "desc": "Input: a list of string values, where each element represents an hourly wage in the format '$X/hour'.\nOutput: a list of string values, where each element represents the corresponding annual salary in the format '$XXX,XXX.XX'.\n\nFunctionality: The transformation converts each hourly wage to an annual salary by multiplying the hourly wage by 40 (hours per week) and then by 52 (weeks per year), formatting the result as a string in the desired format.\n\nExample: Input: ['$15/hour', '$34/hour', '$43/hour', '$51/hour', '$32/hour']; Output: ['$31,200.00', '$70,720.00', '$89,440.00', '$106,080.00', '$66,560.00']"}
{"id": "89-3", "oq_id": 89, "desc": "Input: a list of string values, with polar coordinate values in each element.\nOutput: a list of string values with rectangular coordinate values.\nFunctionality: The transformation converts each polar coordinate in the given sequence to rectangular coordinate and output the result as a list.\nExample: Input: ['(4, 8)', '(7, 45)', '(13, 15)', '(28, 55)', '(10, 20)']; output: ['(3.96107, 0.55669)', '(4.94975, 4.94975)', '(12.55704, 3.36465)', '(16.06014, 22.93626)', '(9.39693, 3.42020)']"}
{"id": "89-2", "oq_id": 89, "desc": "Input: a list of string values, with polar coordinate values in each element.\nOutput: a list of string values with rectangular coordinate values.\nFunctionality: The transformation converts each polar coordinate in the given sequence to rectangular coordinate and output the result as a list.\nExample: Input: ['(7, 14)', '(10, 30)', '(18, 60)', '(33, 75)', '(15, 30)']; output: ['(6.79207, 1.69345)', '(8.66025, 5.00000)', '(9.00000, 15.58846)', '(8.54103, 31.87555)', '(12.99038, 7.50000)']"}
{"id": "89-0", "oq_id": 89, "desc": "Input: a list of strings representing polar coordinates.\nOutput: a list of strings representing rectangular coordinates.\n\nFunctionality: The transformation converts each polar coordinate to rectangular coordinates using the formula x = r * cos(theta) and y = r * sin(theta), and outputs the result as a list of strings in the format \"(x, y)\".\nExample: Input: ['(5, 10)', '(8, 120)', '(15, 45)', '(30, 60)', '(12, 24)']; output: ['(4.92404, 0.86824)', '(-4.00000, 6.92820)', '(10.60660, 10.60660)', '(15.00000, 25.98076)', '(10.96255, 4.88084)']"}
{"id": "89-1", "oq_id": 89, "desc": "Input: a list of string values, with polar coordinate values in each element.\nOutput: a list of string values with rectangular coordinate values.\nFunctionality: The transformation converts each polar coordinate in the given sequence to rectangular coordinate and output the result as a list.\nExample: Input: ['(3, 6)', '(6, 90)', '(12, 20)', '(25, 45)', '(9, 18)']; output: ['(2.98357, 0.31359)', '(0.00000, 6.00000)', '(11.27631, 4.10424)', '(17.67767, 17.67767)', '(8.55951, 2.78115)']"}
{"id": "89-5", "oq_id": 89, "desc": "Input: a list of strings representing polar coordinates.\nOutput: a list of strings representing rectangular coordinates.\n\nFunctionality: The transformation converts each polar coordinate to rectangular coordinates using the formula x = r * cos(theta) and y = r * sin(theta), and outputs the result as a list of strings in the format \"(x, y)\".\nExample: Input: ['(8, 16)', '(12, 105)', '(20, 40)', '(35, 50)', '(17, 34)']; output: ['(7.69009, 2.20510)', '(-3.10583, 11.59111)', '(15.32089, 12.85575)', '(22.49757, 26.81156)', '(14.09364, 9.50628)']"}
{"id": "89-4", "oq_id": 89, "desc": "Input: a list of string values, with polar coordinate values in each element.\nOutput: a list of string values with rectangular coordinate values.\nFunctionality: The transformation converts each polar coordinate in the given sequence to rectangular coordinate and output the result as a list.\nExample: Input: ['(6, 12)', '(9, 75)', '(16, 25)', '(31, 70)', '(14, 28)']; output: ['(5.86889, 1.24747)', '(2.32937, 8.69333)', '(14.50092, 6.76189)', '(10.60262, 29.13047)', '(12.36127, 6.57260)']"}
{"id": "89-6", "oq_id": 89, "desc": "Input: a list of string values, representing polar coordinates in the format (r, \u03b8).\nOutput: a list of string values, representing rectangular coordinates in the format (x, y).\n\nFunctionality: The transformation converts each polar coordinate to rectangular coordinate using the formula x = r * cos(\u03b8) and y = r * sin(\u03b8), and outputs the result as a list of strings in the format \"(x, y)\".\n\nExample: Input: ['(9, 18)', '(14, 135)', '(22, 35)', '(37, 80)', '(18, 36)']; output: ['(8.55951, 2.78115)', '(-9.89949, 9.89949)', '(18.02134, 12.61868)', '(6.42498, 36.43789)', '(14.56231, 10.58013)']"}
{"id": "89-7", "oq_id": 89, "desc": "Input: a list of strings representing polar coordinates.\nOutput: a list of strings representing rectangular coordinates.\n\nFunctionality: The transformation converts each element from polar coordinates to rectangular coordinates in the given sequence and outputs the result as a list.\nExample: Input: ['(11, 22)', '(16, 150)', '(25, 50)', '(40, 90)', '(20, 40)']; output: ['(10.19902, 4.12067)', '(-13.85641, 8.00000)', '(16.06969, 19.15111)', '(0.00000, 40.00000)', '(15.32089, 12.85575)']"}
{"id": "89-9", "oq_id": 89, "desc": "Input: a list of strings with polar coordinate values in the format (r, theta).\nOutput: a list of strings with rectangular coordinate values in the format (x, y).\n\nFunctionality: The transformation converts each pair of polar coordinates to rectangular coordinates using the formula x = r * cos(theta) and y = r * sin(theta), and output the result as a list.\n\nExample: Input: ['(15, 30)', '(20, 180)', '(30, 70)', '(46, 110)', '(25, 50)']; Output: ['(12.99038, 7.50000)', '(-20.00000, 0.00000)', '(10.26060, 28.19078)', '(-15.73293, 43.22586)', '(16.06969, 19.15111)']"}
{"id": "89-8", "oq_id": 89, "desc": "Input: a list of strings with polar coordinate values in the format (r, theta).\nOutput: a list of strings with rectangular coordinate values in the format (x, y).\n\nFunctionality: The transformation converts each pair of polar coordinates to rectangular coordinates using the formula x = r * cos(theta) and y = r * sin(theta), and output the result as a list of strings in the format (x, y).\n\nExample: Input: ['(13, 26)', '(18, 165)', '(28, 55)', '(43, 100)', '(22, 44)']; Output: ['(11.68432, 5.69882)', '(-17.38666, 4.65874)', '(16.06014, 22.93626)', '(-7.46687, 42.34673)', '(15.82548, 15.28248)']"}
{"id": "90-2", "oq_id": 90, "desc": "Input: a list of string values, with fractions represented in the format \"numerator/denominator\".\nOutput: a list of numerical values in decimal notation.\n\nFunctionality: The transformation converts each fraction in the input sequence to decimal notation, dividing the numerator by the denominator, and outputs the result as a list of strings.\n\nExample: Input: ['2/3', '5/9', '11/2', '7/9', '13/4']; output: ['0.67', '0.56', '5.5', '0.78', '3.25']"}
{"id": "90-3", "oq_id": 90, "desc": "Input: a list of string values, with fractions represented as strings.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each fraction in the given sequence to decimal notation and outputs the result as a list of strings.\nExample: Input: ['3/5', '5/7', '8/9', '4/11', '12/3']; output: ['0.6', '0.71', '0.89', '0.36', '4']"}
{"id": "90-1", "oq_id": 90, "desc": "Input: a list of string values, with fractions represented in the format 'numerator/denominator'.\nOutput: a list of numerical values in decimal notation.\n\nFunctionality: The transformation converts each fraction in the input sequence to decimal notation, dividing the numerator by the denominator, and outputs the result as a list of strings formatted as decimals.\n\nExample: Input: ['7/3', '2/5', '6/8', '5/6', '11/8']; output: ['2.33', '0.4', '0.75', '0.83', '1.38']"}
{"id": "90-0", "oq_id": 90, "desc": "Input: a list of string values, with fractions in the form of 'numerator/denominator'.\nOutput: a list of numerical values in decimal notation.\nFunctionality: The transformation converts each fraction from the input sequence to decimal notation and outputs the result as a list.\nExample: Input: ['3/5', '5/7', '9/8', '11/12', '4/9']; output: ['0.6', '0.71', '1.12', '0.92', '0.44']"}
{"id": "90-4", "oq_id": 90, "desc": "Input: a list of string values, with fractions represented in the format \"numerator/denominator\".\nOutput: a list of numerical values in decimal notation.\n\nFunctionality: The transformation converts each fraction in the input sequence to decimal notation by dividing the numerator by the denominator, and outputs the result as a list of strings formatted as decimals.\n\nExample: Input: ['1/5', '3/7', '4/9', '5/10', '6/11']; output: ['0.2', '0.43', '0.44', '0.5', '0.55']"}
{"id": "90-5", "oq_id": 90, "desc": "Input: a list of string values, with fractions represented in the format \"numerator/denominator\".\nOutput: a list of numerical values in decimal notation.\n\nFunctionality: The transformation converts each fraction in the input sequence to decimal notation by dividing the numerator by the denominator, and outputs the result as a list of strings formatted as decimals.\n\nExample: Input: ['2/5', '7/9', '13/8', '11/12', '8/10']; output: ['0.4', '0.78', '1.62', '0.92', '0.8']"}
{"id": "90-7", "oq_id": 90, "desc": "Input: a list of string values, with fractions represented in the format \"numerator/denominator\".\nOutput: a list of numerical values in decimal notation.\n\nFunctionality: The transformation converts each fraction in the input sequence to decimal notation by dividing the numerator by the denominator, and outputs the result as a list of strings formatted as decimals.\n\nExample: Input: ['11/3', '8/7', '6/5', '13/7', '10/9']; output: ['3.67', '1.14', '1.2', '1.86', '1.11']"}
{"id": "90-6", "oq_id": 90, "desc": "Input: a list of string values, with fractions represented in the format \"numerator/denominator\".\nOutput: a list of numerical values in decimal notation.\n\nFunctionality: The transformation converts each fraction in the input sequence to decimal notation by dividing the numerator by the denominator, and outputs the result as a list of strings formatted as decimals.\n\nExample: Input: ['3/2', '5/4', '7/6', '9/8', '11/10']; output: ['1.5', '1.25', '1.17', '1.12', '1.1']"}
{"id": "90-8", "oq_id": 90, "desc": "Input: a list of string values, with fractions in the format of 'numerator/denominator'.\nOutput: a list of numerical values in decimal notation.\n\nFunctionality: The transformation converts each fraction in the input sequence to decimal notation, dividing the numerator by the denominator, and outputs the result as a list of strings.\n\nExample: Input: ['4/5', '7/9', '12/8', '15/11', '19/3']; output: ['0.8', '0.78', '1.5', '1.36', '6.33']"}
{"id": "90-9", "oq_id": 90, "desc": "Input: a list of string values, with fractions in the format of 'numerator/denominator'.\nOutput: a list of numerical values in decimal notation.\n\nFunctionality: The transformation converts each fraction in the input sequence to decimal notation by dividing the numerator by the denominator, and outputs the result as a list of strings formatted as decimals.\n\nExample: Input: ['9/5', '6/4', '11/7', '2/9', '10/11']; output: ['1.8', '1.5', '1.57', '0.22', '0.91']"}
{"id": "91-1", "oq_id": 91, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values.\nFunctionality: The transformation converts each numerical value in Roman numerals while keeping other characters in the string unchanged, providing the output as a list.\nExample: Input: ['1999', '456', '888', '7777', '1234']; Output: ['MCMXCIX', 'CDLVI', 'DCCCLXXXVIII', 'MMMMMMMDCCLXXVII', 'MCCXXXIV']"}
{"id": "91-0", "oq_id": 91, "desc": "Input: a list of string values, with numerical values in Roman numerals in each element.\nOutput: a list of Roman numeral values.\nFunctionality: The transformation converts each element from Roman numerals to their corresponding numerical values, and outputs the result as a list.\nExample: Input: ['9', '777', '222', '55', '33']; output: ['IX', 'DCCLXXVII', 'CCXXII', 'LV', 'XXXIII']"}
{"id": "91-2", "oq_id": 91, "desc": "Input: a list of strings representing numerical values.\nOutput: a list of strings representing Roman numerals.\nFunctionality: The transformation converts each numerical value from the given sequence to its corresponding Roman numeral representation.\nExample: Input: ['39', '674', '891', '345', '789']; output: ['XXXIX', 'DCLXXIV', 'DCCCXCI', 'CCCXLV', 'DCCLXXXIX']"}
{"id": "91-3", "oq_id": 91, "desc": "Input: a list of string values, each representing a number.\nOutput: a list of string values.\nFunctionality: The transformation converts each numerical value from the input sequence to Roman numerals, and outputs the result as a list of strings.\nExample: Input: ['500', '1000', '250', '750', '350']; output: ['D', 'M', 'CCL', 'DCCL', 'CCCL']"}
{"id": "91-7", "oq_id": 91, "desc": "Input: a list of string values, with numerical values in Roman numerals.\nOutput: a list of Roman numeral values.\nFunctionality: The transformation converts each numerical value from Roman numerals to regular numbers in the given sequence, and formats each number as a Roman numeral in the result list.\nExample: Input: ['70', '330', '560', '891', '954']; output: ['LXX', 'CCCXXX', 'DLX', 'DCCCXCI', 'CMLIV']"}
{"id": "91-6", "oq_id": 91, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts the numerical string values to Roman numerals.\nExample: Input: ['10', '20', '30', '40', '50']; output: ['X', 'XX', 'XXX', 'XL', 'L']"}
{"id": "91-4", "oq_id": 91, "desc": "Input: a list of string values, representing Roman numerals in sequence_a.\nOutput: a list of string values, representing Roman numerals in sequence_b.\nFunctionality: The transformation converts each Roman numeral in the given sequence into its corresponding numeric value, then converts the numeric value into Roman numerals, storing the result as a list.\nExample: Input: ['2222', '3333', '4444', '5555', '6666']; output: ['MMCCXXII', 'MMMCCCXXXIII', 'MMMMCDXLIV', 'MMMMMDLV', 'MMMMMMDCLXVI']"}
{"id": "91-5", "oq_id": 91, "desc": "Input: a list of string values.\nOutput: a list of Roman numeral values.\nFunctionality: The transformation converts each number string from the given sequence into Roman numerals and outputs the result as a list.\nExample: Input: ['1', '2', '3', '4', '5']; output: ['I', 'II', 'III', 'IV', 'V']"}
{"id": "91-8", "oq_id": 91, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each numerical string into Roman numerals in the output list corresponding to the value.\nExample: Input: ['100', '200', '300', '400', '500']; output: ['C', 'CC', 'CCC', 'CD', 'D']"}
{"id": "91-9", "oq_id": 91, "desc": "Input: a list of string values representing numerical values.\nOutput: a list of string values representing Roman numerals.\nFunctionality: The transformation converts each numerical value from the given sequence to a Roman numeral and outputs the result as a list.\nExample: Input: ['600', '700', '800', '900', '1000']; Output: ['DC', 'DCC', 'DCCC', 'CM', 'M']"}
{"id": "92-0", "oq_id": 92, "desc": "Input: a list of string values, where each string represents a RGB color code.\nOutput: a list of string values, where each string represents a hex color code.\n\nFunctionality: The transformation converts each RGB color code to a hex color code in the given sequence, and outputs the result as a list.\n\nExample: Input: ['0,0,0', '255,0,0', '0,255,0', '0,0,255', '255,255,0']; output: ['#000000', '#FF0000', '#00FF00', '#0000FF', '#FFFF00']"}
{"id": "92-1", "oq_id": 92, "desc": "Input: a list of strings containing RGB values in the format 'R,G,B'.\nOutput: a list of strings representing the hex color codes.\n\nFunctionality: The transformation converts each RGB value from the given sequence to its corresponding hex color code and outputs the result as a list.\n\nExample: Input: ['128,128,128', '255,0,0', '0,255,0', '0,0,255', '255,255,255']; output: ['#808080', '#FF0000', '#00FF00', '#0000FF', '#FFFFFF']"}
{"id": "92-3", "oq_id": 92, "desc": "Input: a list of string values, each containing RGB values separated by commas.\nOutput: a list of string values representing hexadecimal color codes.\nFunctionality: The transformation converts RGB values to hexadecimal color codes for each element in the given sequence.\nExample: Input: ['0,255,255', '255,0,255', '255,255,0', '255,255,255', '128,128,128']; output: ['#00FFFF', '#FF00FF', '#FFFF00', '#FFFFFF', '#808080']"}
{"id": "92-2", "oq_id": 92, "desc": "Input: a list of string values, where each string represents a RGB color code.\nOutput: a list of string values, where each string represents a hex color code.\n\nFunctionality: The transformation converts each RGB color code to a hex color code in the given sequence, and outputs the result as a list.\n\nExample: Input: ['255,0,0', '0,255,0', '0,0,255', '255,255,0', '128,128,128']; output: ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#808080']"}
{"id": "92-6", "oq_id": 92, "desc": "Input: a list of strings representing RGB color values.\nOutput: a list of strings representing hex color values.\nFunctionality: The transformation converts each RGB color value in the input list to its corresponding hex color value.\nExample: Input: ['255,0,127', '127,0,255', '255,255,0', '0,255,127', '0,127,255']; output: ['#FF007F', '#7F00FF', '#FFFF00', '#00FF7F', '#007FFF']"}
{"id": "92-7", "oq_id": 92, "desc": "Input: a list of strings with RGB color values.\nOutput: a list of strings with hexadecimal color values.\nFunctionality: The transformation converts each RGB color value in the given sequence to its equivalent hexadecimal color value.\nExample: Input: ['0,255,0', '128,128,128', '255,255,255', '0,128,0', '0,255,128']; output: ['#00FF00', '#808080', '#FFFFFF', '#008000', '#00FF80']"}
{"id": "92-5", "oq_id": 92, "desc": "Input: a list of string values, where each element represents an RGB color in the format \"R,G,B\".\nOutput: a list of string values, where each element represents the corresponding color in hexadecimal format.\nFunctionality: The transformation converts each RGB color value to its corresponding hexadecimal color code.\nExample: Input: ['255,127,0', '0,255,127', '127,0,255', '255,255,0', '0,255,255']; output: ['#FF7F00', '#00FF7F', '#7F00FF', '#FFFF00', '#00FFFF']"}
{"id": "92-4", "oq_id": 92, "desc": "Input: a list of string values, where each string represents a RGB color code.\nOutput: a list of string values, where each string represents a hex color code.\n\nFunctionality: The transformation converts each RGB color code to a hex color code in the given sequence, and outputs the result as a list.\n\nExample: Input: ['192,192,192', '0,128,128', '128,0,128', '128,128,0', '255,255,255']; output: ['#C0C0C0', '#008080', '#800080', '#808000', '#FFFFFF']"}
{"id": "92-9", "oq_id": 92, "desc": "Input: a list of string values, with RGB color codes in each element.\nOutput: a list of string values representing hexadecimal color codes.\nFunctionality: The transformation converts each RGB color code from the given sequence to its equivalent hexadecimal color code and outputs the result as a list.\nExample: Input: ['0,0,0', '0,0,255', '0,255,0', '255,0,0', '255,255,255']; output: ['#000000', '#0000FF', '#00FF00', '#FF0000', '#FFFFFF']"}
{"id": "92-8", "oq_id": 92, "desc": "Input: a list of strings containing RGB values.\nOutput: a list of strings containing hexadecimal color values.\nFunctionality: The transformation converts each RGB value in the input sequence to its equivalent hexadecimal color value and outputs the result as a list of strings.\nExample: Input: ['255,0,0', '0,255,0', '0,0,255', '128,128,128', '255,255,255']; output: ['#FF0000', '#00FF00', '#0000FF', '#808080', '#FFFFFF']"}
{"id": "93-3", "oq_id": 93, "desc": "Input: a list of string values representing decimal numbers.\nOutput: a list of string values representing hexadecimal numbers.\nFunctionality: The transformation converts each decimal number from the input sequence to its hexadecimal equivalent, and outputs the results in a new list.\nExample: Input: ['111', '222', '333', '444', '555']; Output: ['6F', 'DE', '14D', '1BC', '22B']"}
{"id": "93-2", "oq_id": 93, "desc": "Input: a list of string values, each representing a decimal number.\nOutput: a list of string values, each representing the corresponding decimal number converted to hexadecimal.\nFunctionality: The transformation converts each decimal number in the given sequence to hexadecimal format and outputs the result as a list.\nExample: Input: ['987', '654', '321', '123', '456']; output: ['3DB', '28E', '141', '7B', '1C8']"}
{"id": "93-0", "oq_id": 93, "desc": "Input: a list of string values, with decimal numbers in each element.\nOutput: a list of hexadecimal numbers as strings.\nFunctionality: The transformation converts each decimal number in the given sequence to hexadecimal format and outputs the result as a list of strings.\nExample: Input: ['45', '7890', '2345', '876', '5432']; output: ['2D', '1ED2', '929', '36C', '1538']"}
{"id": "93-1", "oq_id": 93, "desc": "Input: a list of string values representing decimal numbers.\nOutput: a list of string values representing hexadecimal numbers.\nFunctionality: The transformation converts each decimal number from the input sequence to its hexadecimal equivalent, and outputs the results in a new list.\nExample: Input: ['100', '200', '300', '400', '500']; Output: ['64', 'C8', '12C', '190', '1F4']"}
{"id": "93-5", "oq_id": 93, "desc": "Input: a list of string values, each containing a numerical value.\nOutput: a list of hexadecimal values as strings.\nFunctionality: The transformation converts each numerical value in the input sequence from decimal to hexadecimal format, and outputs the result as a list of strings.\nExample: Input: ['8907', '76543', '6543', '2345', '987']; output: ['22CB', '12AFF', '198F', '929', '3DB']"}
{"id": "93-4", "oq_id": 93, "desc": "Input: a list of string values, each element containing a sequence of numerical characters.\nOutput: a list of string values, each element containing the hexadecimal representation of the corresponding number in the input list.\nFunctionality: The transformation converts each numerical string in the given sequence to its hexadecimal representation and outputs the result as a list.\nExample: Input: ['87654', '98765', '76543', '54321', '12345']; output: ['15666', '181CD', '12AFF', 'D431', '3039']"}
{"id": "93-6", "oq_id": 93, "desc": "Input: a list of string values, representing hexadecimal numbers.\nOutput: a list of string values, representing decimal numbers.\nFunctionality: The transformation converts each hexadecimal number from the input sequence to decimal format and outputs the result as a new list.\nExample: Input: ['9876', '8765', '7654', '6543', '5432']; output: ['2694', '223D', '1DE6', '198F', '1538']"}
{"id": "93-7", "oq_id": 93, "desc": "Input: a list of strings representing decimal numbers.\nOutput: a list of strings representing hexadecimal numbers.\nFunctionality: The transformation converts each decimal number from the input sequence to its hexadecimal equivalent and outputs the result as a list of strings.\nExample: Input: ['33333', '44444', '55555', '66666', '77777']; output: ['8235', 'AD9C', 'D903', '1046A', '12FD1']"}
{"id": "93-9", "oq_id": 93, "desc": "Input: a list of string values, each element containing a numerical value.\nOutput: a list of string values, each element containing the corresponding numerical value in hexadecimal format.\nFunctionality: The transformation converts each numerical value in the given sequence from decimal to hexadecimal format and outputs the result as a list.\nExample: Input: ['98765', '87654', '76543', '65432', '54321']; output: ['181CD', '15666', '12AFF', 'FF98', 'D431']"}
{"id": "93-8", "oq_id": 93, "desc": "Input: a list of string values, each representing a decimal number.\nOutput: a list of string values, each representing the corresponding decimal number converted to hexadecimal.\nFunctionality: The transformation converts each decimal number in the given sequence to hexadecimal format and outputs the result as a list.\nExample: Input: ['111', '555', '999', '333', '777']; output: ['6F', '22B', '3E7', '14D', '309']"}
{"id": "95-5", "oq_id": 95, "desc": "Input: a list of string values, each containing a numerical value followed by a unit of measurement (cm).\nOutput: a list of strings formatted as feet and inches.\nFunctionality: The transformation converts each centimeter value to feet and inches, rounding the inches to four decimal places, and outputs the result in a formatted string in feet and inches format.\nExample: Input: ['30 cm', '800 cm', '210 cm', '125 cm', '520 cm']; output: ['0 feet and 11.8110 inches', '26 feet and 2.9606 inches', '6 feet and 10.6772 inches', '4 feet and 1.2126 inches', '17 feet and 0.7244 inches']"}
{"id": "95-4", "oq_id": 95, "desc": "Input: a list of string values, each containing a measurement in centimeters.\nOutput: a list of strings representing the measurement in feet and inches.\nFunctionality: The transformation converts each measurement from centimeters to feet and inches in the given sequence, and formats the result as a string in feet and inches format.\nExample: Input: ['25 cm', '450 cm', '180 cm', '110 cm', '600 cm']; output: ['0 feet and 9.8425 inches', '14 feet and 9.1654 inches', '5 feet and 10.8661 inches', '3 feet and 7.3071 inches', '19 feet and 8.2205 inches']"}
{"id": "95-6", "oq_id": 95, "desc": "Input: a list of string values, each containing a measurement in centimeters.\nOutput: a list of strings representing the measurement in feet and inches.\nFunctionality: The transformation converts each measurement from centimeters to feet and inches, and formats the result as a string in the format \"feet and inches\".\nExample: Input: ['35 cm', '350 cm', '240 cm', '135 cm', '450 cm']; output: ['1 feet and 1.7795 inches', '11 feet and 5.7953 inches', '7 feet and 10.4882 inches', '4 feet and 5.1496 inches', '14 feet and 9.1654 inches']"}
{"id": "95-7", "oq_id": 95, "desc": "Input: a list of string values, each containing a numerical value followed by a unit of measurement (cm).\nOutput: a list of string values representing the converted values in feet and inches.\n\nFunctionality: The transformation converts each numerical value from centimeters to feet and inches, rounding the inches to four decimal places, and outputs the result as a formatted string in feet and inches.\n\nExample: Input: ['40 cm', '550 cm', '270 cm', '145 cm', '490 cm']; Output: ['1 feet and 3.7480 inches', '18 feet and 0.5354 inches', '8 feet and 10.2992 inches', '4 feet and 9.0866 inches', '16 feet and 0.9134 inches']"}
{"id": "95-3", "oq_id": 95, "desc": "Input: a list of string values, each containing a numerical value followed by a unit of measurement (cm).\nOutput: a list of string values representing the converted values in feet and inches.\n\nFunctionality: The transformation converts each numerical value from centimeters to feet and inches, rounding the inches to four decimal places, and outputs the result as a formatted string representing feet and inches.\n\nExample: Input: ['20 cm', '600 cm', '150 cm', '99 cm', '430 cm']; output: ['0 feet and 7.8740 inches', '19 feet and 8.2205 inches', '4 feet and 11.0551 inches', '3 feet and 2.9764 inches', '14 feet and 1.2913 inches']"}
{"id": "95-2", "oq_id": 95, "desc": "Input: a list of string values, each containing a measurement in centimeters.\nOutput: a list of strings representing the measurement in feet and inches.\nFunctionality: The transformation converts each measurement from centimeters to feet and inches in the given sequence, and formats the result as a string in the output list.\nExample: Input: ['15 cm', '700 cm', '120 cm', '88 cm', '700 cm']; output: ['0 feet and 5.9055 inches', '22 feet and 11.5906 inches', '3 feet and 11.2441 inches', '2 feet and 10.6457 inches', '22 feet and 11.5906 inches']"}
{"id": "95-0", "oq_id": 95, "desc": "Input: a list of string values, each containing a numerical value followed by a unit of measurement (cm).\nOutput: a list of string values representing the converted values in feet and inches.\n\nFunctionality: The transformation converts each numerical value from centimeters to feet and inches, rounding the inches to four decimal places, and outputs the result as a formatted string in feet and inches.\n\nExample: Input: ['10 cm', '250 cm', '100 cm', '75 cm', '500 cm']; Output: ['0 feet and 3.9370 inches', '8 feet and 2.4252 inches', '3 feet and 3.3701 inches', '2 feet and 5.5276 inches', '16 feet and 4.8504 inches']"}
{"id": "95-1", "oq_id": 95, "desc": "Input: a list of string values, with numerical values and 'cm' unit in each element.  \nOutput: a list of string values, representing lengths in feet and inches format.  \nFunctionality: The transformation converts each length from centimeters to feet and inches format, rounding the inches to four decimal places, and output the result as a list.  \nExample: Input: ['5 cm', '320 cm', '80 cm', '55 cm', '480 cm']; output: ['0 feet and 1.9685 inches', '10 feet and 5.9843 inches', '2 feet and 7.4961 inches', '1 feet and 9.6535 inches', '15 feet and 8.9764 inches']"}
{"id": "95-9", "oq_id": 95, "desc": "Input: a list of string values, each containing a measurement in centimeters.\nOutput: a list of strings representing the measurement in feet and inches.\nFunctionality: The transformation converts each measurement from centimeters to feet and inches, and formats the result as a string in the format \"feet and inches\".\nExample: Input: ['50 cm', '400 cm', '330 cm', '165 cm', '680 cm']; output: ['1 feet and 7.6850 inches', '13 feet and 1.4803 inches', '10 feet and 9.9213 inches', '5 feet and 4.9606 inches', '22 feet and 3.7165 inches']"}
{"id": "95-8", "oq_id": 95, "desc": "Input: a list of string values, each containing a measurement in cm.\nOutput: a list of strings representing the measurements in feet and inches.\nFunctionality: The transformation converts each measurement from centimeters to feet and inches, rounding the inches to four decimal places, and outputs the result as a formatted string in feet and inches.\nExample: Input: ['45 cm', '950 cm', '300 cm', '155 cm', '570 cm']; output: ['1 feet and 5.7165 inches', '31 feet and 2.0157 inches', '9 feet and 10.1102 inches', '5 feet and 1.0236 inches', '18 feet and 8.4094 inches']"}
{"id": "96-4", "oq_id": 96, "desc": "Input: a list of string values, with numerical values followed by \"mm\" in each element.\nOutput: a list of string values, with numerical values converted to inches.\nFunctionality: The transformation converts mm values to inches by multiplying each value by 0.0393701 and formats the result as a string in the output list.\nExample: Input: ['4 mm', '16 mm', '25 mm', '47 mm', '33 mm']; output: ['0.157480 inch', '0.629921 inch', '0.984252 inch', '1.850394 inch', '1.299213 inch']"}
{"id": "96-5", "oq_id": 96, "desc": "Input: a list of string values, with numerical values followed by \"mm\" in each element.\nOutput: a list of string values, with numerical values converted to inches and formatted with \"inch\" in the result list.\nFunctionality: The transformation converts each numerical value from millimeters to inches by multiplying it with a conversion factor of 0.0393701, then formats the result with \"inch\" and outputs as a list of strings.\nExample: Input: ['6 mm', '13 mm', '23 mm', '37 mm', '44 mm']; output: ['0.236220 inch', '0.511811 inch', '0.905512 inch', '1.456693 inch', '1.732283 inch']"}
{"id": "96-7", "oq_id": 96, "desc": "Input: a list of string values, with numerical values followed by \"mm\" in each element.\nOutput: a list of string values, with numerical values converted to inches and formatted with \"inch\" in the result list.\nFunctionality: The transformation converts each numerical value from millimeters to inches by multiplying it with a conversion factor of 0.0393701 and appends \"inch\" to the result.\nExample: Input: ['15 mm', '20 mm', '41 mm', '53 mm', '60 mm']; output: ['0.590551 inch', '0.787402 inch', '1.614173 inch', '2.086614 inch', '2.362205 inch']"}
{"id": "96-6", "oq_id": 96, "desc": "Input: a list of string values, with numerical values followed by \"mm\" in each element.\nOutput: a list of string values, with numerical values converted to inches and formatted with \"inch\" in the result list.\nFunctionality: The transformation converts each numerical value from millimeters to inches by multiplying it with a conversion factor of 0.0393701, then formats the result with \"inch\" and outputs as a list of strings.\nExample: Input: ['10 mm', '18 mm', '31 mm', '49 mm', '59 mm']; output: ['0.393701 inch', '0.708661 inch', '1.220472 inch', '1.929134 inch', '2.322835 inch']"}
{"id": "96-2", "oq_id": 96, "desc": "Input: a list of string values, with numerical values followed by \"mm\" in each element.\nOutput: a list of string values, with numerical values converted to inches and formatted with \"inch\" in the result list.\nFunctionality: The transformation converts each numerical value from millimeters to inches by dividing by 25.4, formats the result as a string with \"inch\" appended, and outputs the transformed list.\nExample: Input: ['2 mm', '11 mm', '21 mm', '35 mm', '42 mm']; output: ['0.078740 inch', '0.433071 inch', '0.826772 inch', '1.377953 inch', '1.653543 inch']"}
{"id": "96-3", "oq_id": 96, "desc": "Input: a list of string values, with numerical values followed by \"mm\" in each element.\nOutput: a list of string values, with numerical values converted to inches and formatted with \"inch\" in the result list.\nFunctionality: The transformation converts each numerical value from millimeters to inches by dividing by 25.4, and appends \"inch\" to the result as a string.\nExample: Input: ['7 mm', '14 mm', '29 mm', '50 mm', '55 mm']; output: ['0.275591 inch', '0.551181 inch', '1.141732 inch', '1.968504 inch', '2.165354 inch']"}
{"id": "96-1", "oq_id": 96, "desc": "Input: a list of string values, with numerical values followed by \"mm\" in each element.\nOutput: a list of string values, with numerical values converted to inches and formatted with \"inch\" in the result list.\nFunctionality: The transformation converts each numerical value from millimeters to inches by dividing it by 25.4, and appends \"inch\" to the result.\nExample: Input: ['3 mm', '9 mm', '19 mm', '39 mm', '51 mm']; output: ['0.118110 inch', '0.354331 inch', '0.748031 inch', '1.535433 inch', '2.007874 inch']"}
{"id": "96-0", "oq_id": 96, "desc": "Input: a list of string values, with numerical values followed by \"mm\" in each element.\nOutput: a list of string values, with numerical values converted to inches and formatted with \"inch\" in the result list.\nFunctionality: The transformation converts each numerical value from millimeters to inches by multiplying it with a conversion factor of 0.0393701, then formats the result with \"inch\" and outputs as a list of strings.\nExample: Input: ['5 mm', '12 mm', '27 mm', '45 mm', '38 mm']; output: ['0.196850 inch', '0.472441 inch', '1.062992 inch', '1.771654 inch', '1.496063 inch']"}
{"id": "96-8", "oq_id": 96, "desc": "Input: a list of string values, with numerical values followed by \"mm\" in each element.\nOutput: a list of string values, with numerical values converted to inches and formatted with \"inch\" in the result list.\nFunctionality: The transformation converts each numerical value from millimeters to inches by dividing by 25.4, formats the result as a string with \"inch\" appended, and outputs the transformed list.\nExample: Input: ['24 mm', '30 mm', '43 mm', '48 mm', '57 mm']; output: ['0.944882 inch', '1.181102 inch', '1.692913 inch', '1.889764 inch', '2.244094 inch']"}
{"id": "96-9", "oq_id": 96, "desc": "Input: a list of string values, with numerical values followed by \"mm\" in each element.\nOutput: a list of string values, with numerical values converted to inches and formatted with \"inch\" in the result list.\nFunctionality: The transformation converts each numerical value from millimeters to inches by dividing by 25.4, formats the result as a string with \"inch\" appended, and outputs the transformed list.\nExample: Input: ['26 mm', '32 mm', '46 mm', '52 mm', '56 mm']; output: ['1.023622 inch', '1.259843 inch', '1.811024 inch', '2.047244 inch', '2.204724 inch']"}
{"id": "97-7", "oq_id": 97, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing distances in miles.\nFunctionality: The transformation converts each distance from kilometers to miles using the conversion factor 1 kilometer = 0.621371 miles and formats the result as a string in the output list.\nExample: Input: ['3 km', '12 km', '40 km', '75 km', '160 km']; output: ['1.86411 mile', '7.45645 mile', '24.8548 mile', '46.6028 mile', '99.4194 mile']"}
{"id": "97-6", "oq_id": 97, "desc": "Input: a list of string values, with numerical values followed by \"km\" in each element.\nOutput: a list of string values representing the corresponding distance in miles.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence representing distances in kilometers, converts it to miles, and formats the result with \"mile\" as a string in the output list.\n\nExample: Input: ['22 km', '55 km', '115 km', '210 km', '420 km']; output: ['13.6702 mile', '34.1754 mile', '71.4577 mile', '130.488 mile', '260.976 mile']"}
{"id": "97-4", "oq_id": 97, "desc": "Input: a list of string values, with numerical values followed by \"km\" in each element.\nOutput: a list of string values representing the corresponding distance in miles.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence representing distances in kilometers, converts it to miles, and formats the result with \"mile\" as a string in the output list.\n\nExample: Input: ['18 km', '42 km', '95 km', '170 km', '280 km']; output: ['11.1847 mile', '26.0976 mile', '59.0302 mile', '105.633 mile', '173.984 mile']"}
{"id": "97-5", "oq_id": 97, "desc": "Input: a list of string values, each containing a numerical value and a unit (km).\nOutput: a list of string values, each representing the numerical value converted from km to miles.\n\nFunctionality: The transformation converts each numerical value from kilometers to miles by multiplying it by 0.621371, and appends the result to the output list in the format of 'X mile'.\n\nExample: Input: ['35 km', '90 km', '135 km', '190 km', '350 km']; output: ['21.748 mile', '55.9234 mile', '83.8851 mile', '118.06 mile', '217.48 mile']"}
{"id": "97-1", "oq_id": 97, "desc": "Input: a list of string values, with numerical values and \"km\" unit in each element.\nOutput: a list of string values representing the numerical values converted from kilometers to miles.\nFunctionality: The transformation converts each numerical value from kilometers to miles, and appends \"mile\" unit to the result list.\nExample: Input: ['7 km', '30 km', '85 km', '150 km', '300 km']; output: ['4.3496 mile', '18.6411 mile', '52.8165 mile', '93.2057 mile', '186.411 mile']"}
{"id": "97-0", "oq_id": 97, "desc": "Input: a list of string values, with numerical values followed by \"km\" in each element.\nOutput: a list of string values representing the corresponding distance in miles.\n\nFunctionality: The transformation converts each distance in kilometers to miles by multiplying the value by 0.621371, and appends \"mile\" to the result.\nExample: Input: ['10 km', '50 km', '100 km', '200 km', '500 km']; output: ['6.21371 mile', '31.0686 mile', '62.1371 mile', '124.274 mile', '310.685 mile']"}
{"id": "97-2", "oq_id": 97, "desc": "Input: a list of string values, with numerical values followed by \"km\" in each element.\nOutput: a list of string values representing the corresponding distance in miles.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence representing distances in kilometers, converts it to miles, and formats the result with \"mile\" as a string in the output list.\n\nExample: Input: ['20 km', '75 km', '125 km', '180 km', '250 km']; output: ['12.4274 mile', '46.6028 mile', '77.6714 mile', '111.847 mile', '155.343 mile']"}
{"id": "97-3", "oq_id": 97, "desc": "Input: a list of string values, with numerical values followed by \"km\" in each element.\nOutput: a list of string values representing the corresponding distance in miles.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from kilometers to miles using the conversion rate (1 km = 0.621371 miles), and formats the result as a string with the converted distance in miles.\n\nExample: Input: ['25 km', '60 km', '130 km', '220 km', '400 km']; output: ['15.5343 mile', '37.2823 mile', '80.7782 mile', '136.702 mile', '248.548 mile']"}
{"id": "97-8", "oq_id": 97, "desc": "Input: a list of string values, with numerical values followed by \"km\" in each element.\nOutput: a list of string values representing the corresponding distance in miles.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence representing distances in kilometers, converts it to miles, and formats the result with \"mile\" as a unit in the output list.\n\nExample: Input: ['5 km', '25 km', '70 km', '110 km', '300 km']; output: ['3.10685 mile', '15.5343 mile', '43.496 mile', '68.3508 mile', '186.411 mile']"}
{"id": "97-9", "oq_id": 97, "desc": "Input: a list of string values, with numerical values and \"km\" unit in each element.\nOutput: a list of string values representing the distance in miles.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from kilometers to miles using the conversion rate of 1 km = 0.621371 miles, and formats the result as a string with \"mile\" unit.\n\nExample: Input: ['8 km', '38 km', '88 km', '140 km', '260 km']; output: ['4.97097 mile', '23.6121 mile', '54.6806 mile', '86.9919 mile', '161.556 mile']"}
{"id": "98-8", "oq_id": 98, "desc": "Input: a list of string values, where each element represents a distance in kilometers.\nOutput: a list of string values, where each element represents the same distance converted to miles.\nFunctionality: The transformation converts each kilometer value to miles using the conversion factor of 0.621371, and formats the result in the output list.\nExample: Input: ['7 km', '28 km', '450 km', '85 km', '39 km']; output: ['4.34959835 mile', '17.3983934 mile', '279.617036 mile', '52.8165513 mile', '24.2334765 mile']"}
{"id": "98-9", "oq_id": 98, "desc": "Input: a list of string values, with numerical values followed by a space and \"km\" in each element.\nOutput: a list of string values representing the equivalent distance in miles.\nFunctionality: The transformation converts kilometers to miles for each element in the given sequence and formats the result as a string in the output list.\nExample: Input: ['20 km', '50 km', '700 km', '200 km', '48 km']; output: ['12.4274238 mile', '31.0685596 mile', '434.959835 mile', '124.274238 mile', '29.8258172 mile']"}
{"id": "98-2", "oq_id": 98, "desc": "Input: a list of string values, where each element represents a distance in kilometers.\nOutput: a list of string values, where each element represents the same distance converted to miles.\nFunctionality: The transformation converts each distance value from kilometers to miles using the conversion factor of 1 kilometer equal to approximately 0.621371 miles, and formats the result as a string in the output list.\nExample: Input: ['30 km', '20 km', '300 km', '1000 km', '1 km']; output: ['18.6411358 mile', '12.4274238 mile', '186.411358 mile', '621.371192 mile', '0.621371192 mile']"}
{"id": "98-3", "oq_id": 98, "desc": "Input: a list of string values, with numerical values followed by a space and \"km\" in each element.\nOutput: a list of string values, with numerical values converted to miles and formatted as strings in the result list.\nFunctionality: The transformation converts each numerical value from kilometers to miles by multiplying by 0.621371, formats the result as a string with precision to 9 decimal places, and outputs the result as a list.\nExample: Input: ['8 km', '12 km', '150 km', '80 km', '60 km']; output: ['4.97096954 mile', '7.45645431 mile', '93.2056788 mile', '49.7096954 mile', '37.2822715 mile']"}
{"id": "98-1", "oq_id": 98, "desc": "Input: a list of string values, where each element represents a distance in kilometers.\nOutput: a list of string values, where each element represents the same distance converted to miles.\nFunctionality: The transformation converts each distance value from kilometers to miles using the conversion factor of 1 kilometer equal to approximately 0.621371 miles.\nExample: Input: ['2 km', '15 km', '500 km', '7 km', '45 km']; output: ['1.24274238 mile', '9.32056788 mile', '310.685596 mile', '4.34959835 mile', '27.9617036 mile']"}
{"id": "98-0", "oq_id": 98, "desc": "Input: a list of string values, with numerical values followed by a space and 'km' in each element.\nOutput: a list of string values, with numerical values converted to miles and formatted as strings.\nFunctionality: The transformation converts kilometers to miles for each numerical value in the given sequence, and formats each result as a string in the output list.\nExample: Input: ['10 km', '25 km', '100 km', '50 km', '75 km']; output: ['6.21371192 mile', '15.5342798 mile', '62.1371192 mile', '31.0685596 mile', '46.6028394 mile']"}
{"id": "98-4", "oq_id": 98, "desc": "Input: a list of string values, where each element represents a distance in kilometers.\nOutput: a list of string values, where each element represents the same distance converted to miles.\nFunctionality: The transformation converts each kilometer value to miles using the conversion factor of 1 kilometer = 0.621371 miles, and formats the result as a string in the output list.\nExample: Input: ['4 km', '22 km', '200 km', '55 km', '90 km']; output: ['2.48548477 mile', '13.6701662 mile', '124.274238 mile', '34.1754156 mile', '55.9234073 mile']"}
{"id": "98-5", "oq_id": 98, "desc": "Input: a list of string values, where each element represents a distance in kilometers.\nOutput: a list of string values, where each element represents the same distance converted to miles.\nFunctionality: The transformation converts each distance value from kilometers to miles by multiplying it by 0.621371, and formats the result in the output list.\nExample: Input: ['6 km', '35 km', '250 km', '120 km', '18 km']; output: ['3.72822715 mile', '21.7479917 mile', '155.342798 mile', '74.5645431 mile', '11.1846815 mile']"}
{"id": "98-7", "oq_id": 98, "desc": "Input: a list of string values, where each element represents a distance in kilometers.\nOutput: a list of string values, where each element represents the equivalent distance in miles.\n\nFunctionality: The transformation converts each element from kilometers to miles using the conversion factor of 0.621371192 and formats the result as a string in the output list.\n\nExample: Input: ['1 km', '13 km', '350 km', '70 km', '25 km']; output: ['0.621371192 mile', '8.0778255 mile', '217.479917 mile', '43.4959835 mile', '15.5342798 mile']"}
{"id": "98-6", "oq_id": 98, "desc": "Input: a list of string values, with numerical values followed by a space and \"km\" in each element.\nOutput: a list of string values representing the equivalent distance in miles.\nFunctionality: The transformation converts kilometers to miles for each element in the given sequence and formats the result as a string in the output list.\nExample: Input: ['15 km', '40 km', '600 km', '300 km', '42 km']; output: ['9.32056788 mile', '24.8548477 mile', '372.822715 mile', '186.411358 mile', '26.0975901 mile']"}
{"id": "99-8", "oq_id": 99, "desc": "Input: a list of string values, with numerical values and \"inch\" unit in each element.\nOutput: a list of string values representing the same numerical values converted to \"feet\" unit.\nFunctionality: The transformation converts each numerical value from inches to feet by dividing by 12, and formats the result with a precision of eight decimal places.\nExample: Input: ['9 inch', '47 inch', '93 inch', '27 inch', '61 inch']; output: ['0.75 feet', '3.91666667 feet', '7.75 feet', '2.25 feet', '5.08333333 feet']"}
{"id": "99-9", "oq_id": 99, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to feet in each element.\nFunctionality: The transformation converts inches to feet for each element in the given sequence, and output the result as a list of formatted strings.\nExample: Input: ['5 inch', '58 inch', '81 inch', '35 inch', '87 inch']; output: ['0.416666667 feet', '4.83333333 feet', '6.75 feet', '2.91666667 feet', '7.25 feet']"}
{"id": "99-1", "oq_id": 99, "desc": "Input: a list of string values, with numerical values and \"inch\" unit in each element.\nOutput: a list of string values representing the numerical values converted from inches to feet.\nFunctionality: The transformation converts each numerical value from inches to feet by dividing it by 12, and formats the result as a string in the output list with \"feet\" unit.\nExample: Input: ['6 inch', '50 inch', '99 inch', '31 inch', '54 inch']; output: ['0.5 feet', '4.16666667 feet', '8.25 feet', '2.58333333 feet', '4.5 feet']"}
{"id": "99-0", "oq_id": 99, "desc": "Input: a list of string values, each containing a numerical value and \"inch\".\nOutput: a list of string values with the numerical value converted from inches to feet, with a precision of 9 decimal places.\nFunctionality: The transformation converts each numerical value from inches to feet by dividing by 12, and then formats the result as a string in the output list.\nExample: Input: ['15 inch', '63 inch', '98 inch', '24 inch', '77 inch']; output: ['1.25 feet', '5.25 feet', '8.16666667 feet', '2 feet', '6.41666667 feet']"}
{"id": "99-2", "oq_id": 99, "desc": "Input: a list of string values, with numerical values and \"inch\" unit in each element.\nOutput: a list of string values representing the values converted from inches to feet.\nFunctionality: The transformation converts each numerical value from inches to feet by dividing it by 12, and appends the result with the \"feet\" unit in the output list.\nExample: Input: ['8 inch', '72 inch', '105 inch', '19 inch', '83 inch']; output: ['0.666666667 feet', '6 feet', '8.75 feet', '1.58333333 feet', '6.91666667 feet']"}
{"id": "99-3", "oq_id": 99, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to feet in each element.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts inches to feet by dividing by 12, and formats the result as a string with 'feet' unit.\nExample: Input: ['2 inch', '42 inch', '88 inch', '10 inch', '63 inch']; output: ['0.166666667 feet', '3.5 feet', '7.33333333 feet', '0.833333333 feet', '5.25 feet']"}
{"id": "99-7", "oq_id": 99, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements in feet in each element.\nFunctionality: The transformation converts inches to feet by dividing each numerical value in the given sequence by 12, and output the result as a list with the measurements in feet.\nExample: Input: ['11 inch', '33 inch', '111 inch', '71 inch', '47 inch']; output: ['0.916666667 feet', '2.75 feet', '9.25 feet', '5.91666667 feet', '3.91666667 feet']"}
{"id": "99-6", "oq_id": 99, "desc": "Input: a list of string values, each containing a numerical value and \"inch\".\nOutput: a list of string values with the numerical value converted from inches to feet.\nFunctionality: The transformation converts each numerical value in inches to feet by dividing by 12, and outputs the result as a new list of strings.\nExample: Input: ['7 inch', '69 inch', '84 inch', '15 inch', '58 inch']; output: ['0.583333333 feet', '5.75 feet', '7 feet', '1.25 feet', '4.83333333 feet']"}
{"id": "99-4", "oq_id": 99, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to feet in each element.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts inches to feet by dividing by 12, and formats the result as a string with 'feet' appended.\nExample: Input: ['4 inch', '55 inch', '75 inch', '39 inch', '92 inch']; output: ['0.333333333 feet', '4.58333333 feet', '6.25 feet', '3.25 feet', '7.66666667 feet']"}
{"id": "99-5", "oq_id": 99, "desc": "Input: a list of string values, with measurements in inches.\nOutput: a list of string values, with measurements converted to feet.\nFunctionality: The transformation converts each measurement in inches to feet by dividing by 12, and outputs the result as a list.\nExample: Input: ['20 inch', '80 inch', '118 inch', '50 inch', '105 inch']; output: ['1.66666667 feet', '6.66666667 feet', '9.83333333 feet', '4.16666667 feet', '8.75 feet']"}
{"id": "100-0", "oq_id": 100, "desc": "Input: a list of string values, with numerical values followed by a space and a unit of measure in each element.\nOutput: a list of string values in the format of numerical value followed by \"kg\".\n\nFunctionality: The transformation converts the numerical values in pounds to kilograms by multiplying them by 0.453592, then formats each result as a string followed by \"kg\" in the output list.\n\nExample: Input: ['5 b', '25 b', '75 b', '61 b']; output: ['2.26796 kg', '11.3398 kg', '34.0194 kg', '27.6691 kg']"}
{"id": "100-1", "oq_id": 100, "desc": "Input: a list of string values, with numerical values followed by a space and a unit (e.g., \"50 b\").\nOutput: a list of string values in the format \"XX kg\", where XX is the converted value from pounds to kilograms.\nFunctionality: The transformation converts each numerical value from pounds to kilograms by multiplying it by 0.45359237 and formats the result in the output list.\nExample: Input: ['50 b', '20 b', '33 b', '42 b']; output: ['22.6796 kg', '9.07185 kg', '14.9685 kg', '19.0509 kg']"}
{"id": "100-3", "oq_id": 100, "desc": "Input: a list of string values, with numerical values followed by a space and a unit of measure in each element.\nOutput: a list of string values in the format of numerical value followed by \"kg\".\nFunctionality: The transformation converts the numerical value in each element from pounds to kilograms, and formats the result as a string followed by \"kg\" in the output list.\nExample: Input: ['15 b', '45 b', '85 b', '95 b']; output: ['6.80389 kg', '20.4117 kg', '38.5554 kg', '43.0913 kg']"}
{"id": "100-2", "oq_id": 100, "desc": "Input: a list of string values, with numerical values followed by a space and a unit (e.g., \"10 b\").\nOutput: a list of string values in the format of \"X kg\" where X is the numerical value converted from pounds to kilograms. \n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts the value from pounds to kilograms, and formats the result with \"X kg\" in the output list.\n\nExample: Input: ['10 b', '30 b', '70 b', '55 b']; output: ['4.53592 kg', '13.6078 kg', '31.7515 kg', '24.9476 kg']"}
{"id": "100-6", "oq_id": 100, "desc": "Input: a list of strings with a number followed by a unit of measurement.\nOutput: a list of strings with numbers converted from pounds to kilograms.\n\nFunctionality: The transformation converts each number in pounds to kilograms by multiplying it by 0.45359237, and then appends the result with \"kg\" in the output list.\nExample: Input: ['27 b', '63 b', '80 b', '44 b']; output: ['12.247 kg', '28.5763 kg', '36.2874 kg', '19.9581 kg']"}
{"id": "100-7", "oq_id": 100, "desc": "Input: a list of string values, with numerical values followed by a space and a unit of measure in each element.\nOutput: a list of string values formatted with the numerical value representing pounds converted to kilograms, followed by \"kg\" unit of measure.\nFunctionality: The transformation converts the pounds value to kilograms by multiplying it by 0.45359237, rounds to four decimal places, and appends \"kg\" to the result.\nExample: Input: ['34 b', '48 b', '96 b', '60 b']; output: ['15.4221 kg', '21.7724 kg', '43.5449 kg', '27.2155 kg']"}
{"id": "100-5", "oq_id": 100, "desc": "Input: a list of string values, with numerical values followed by a space and a letter in each element.\nOutput: a list of string values, with the numerical values converted from pounds to kilograms.\nFunctionality: The transformation extracts the numerical value from each element, converts it from pounds to kilograms using the conversion factor of 0.45359237, then formats the result as a string in the output list.\nExample: Input: ['18 b', '57 b', '72 b', '99 b']; output: ['8.16466 kg', '25.8548 kg', '32.6587 kg', '44.9056 kg']"}
{"id": "100-4", "oq_id": 100, "desc": "Input: a list of string values, with numerical values followed by a space and a unit (e.g., \"22 b\").\nOutput: a list of string values in the format of \"X kg\" where X is the numerical value converted from pounds to kilograms.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts the pounds to kilograms using the formula 1 pound = 0.453592 kilograms, and formats the result as a string with the value and unit \"kg\".\n\nExample: Input: ['22 b', '38 b', '69 b', '88 b']; output: ['9.97903 kg', '17.2365 kg', '31.2979 kg', '39.9161 kg']"}
{"id": "100-9", "oq_id": 100, "desc": "Input: a list of string values, with numerical values followed by a space and a unit (e.g., \"kg\").\nOutput: a list of string values with numerical values converted from pounds to kilograms.\nFunctionality: The transformation extracts the numerical value from each element, converts it from pounds to kilograms, and appends \" kg\" to the result as a string.\nExample: Input: ['29 b', '66 b', '77 b', '35 b']; output: ['13.1542 kg', '29.9371 kg', '34.9266 kg', '15.8757 kg']"}
{"id": "100-8", "oq_id": 100, "desc": "Input: a list of string values, with numerical values followed by a space and a unit in each element.\nOutput: a list of string values, with numerical values converted from pounds to kilograms.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from pounds to kilograms using the conversion factor 0.453592, and appends the result with \" kg\" in the output list.\nExample: Input: ['13 b', '24 b', '88 b', '51 b']; output: ['5.8967 kg', '10.8862 kg', '39.9161 kg', '23.1332 kg']"}
{"id": "101-3", "oq_id": 101, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of numerical values with unit of measurement as 'kg'.\nFunctionality: The transformation converts the numerical value from pounds(lbs) to kilograms(kg) in each element of the given sequence, and formats the result as a string with the value in kg.\nExample: Input: ['4.5 b', '19 b', '112.5 b', '41 b', '15.5 b']; output: ['2.04116567 kg', '8.61825504 kg', '51.0291417 kg', '18.5972872 kg', '7.03068174 kg']"}
{"id": "101-2", "oq_id": 101, "desc": "Input: a list of string values, with numerical values suffixed by 'b' in each element.\nOutput: a list of string values in kg format.\nFunctionality: The transformation extracts the numerical values from each element, converts them from lbs to kg, and appends 'kg' to the result list.\nExample: Input: ['7 b', '30.5 b', '89 b', '56.4 b', '23.9 b']; output: ['3.17514659 kg', '13.8345673 kg', '40.369721 kg', '25.5826097 kg', '10.8408577 kg']"}
{"id": "101-0", "oq_id": 101, "desc": "Input: a list of string values, with numerical values suffixed with 'b' (representing pounds).\nOutput: a list of string values, with numerical values converted to kilograms and formatted as strings with 'kg' suffix.\nFunctionality: The transformation converts pounds to kilograms for each element in the given sequence, and formats the result as strings with 'kg' suffix.\nExample: Input: ['5 b', '22.5 b', '75.5 b', '44 b', '16.5 b']; output: ['2.26796185 kg', '10.2058283 kg', '34.246224 kg', '19.9580643 kg', '7.48427411 kg']"}
{"id": "101-1", "oq_id": 101, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of numerical values formatted as strings, converted from pounds to kilograms.\nFunctionality: The transformation extracts the numeric value from each element in the given sequence, converts it from pounds to kilograms, and formats the result as a string in the output list.\nExample: Input: ['2.5 b', '11 b', '67 b', '28.5 b', '8.8 b']; output: ['1.13398093 kg', '4.98951607 kg', '30.3906888 kg', '12.9273826 kg', '3.99161286 kg']"}
{"id": "101-5", "oq_id": 101, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of numerical values formatted as strings, converted from pounds to kilograms.\nFunctionality: The transformation extracts the numeric value from each element in the given sequence, converts it from pounds to kilograms, and formats the result as a string in the output list.\nExample: Input: ['6 b', '26.5 b', '94 b', '47.2 b', '16.3 b']; output: ['2.72155422 kg', '12.0201978 kg', '42.6376828 kg', '21.4095599 kg', '7.39355564 kg']"}
{"id": "101-4", "oq_id": 101, "desc": "Input: a list of string values, with numerical values followed by a space and a letter indicating the unit of measurement.\nOutput: a list of strings representing numerical values followed by \"kg\".\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts the value from lbs to kg, and formats the result as a string in the output list.\n\nExample: Input: ['9 b', '36.5 b', '103.5 b', '52 b', '18 b']; output: ['4.08233133 kg', '16.5561215 kg', '46.9468103 kg', '23.5868033 kg', '8.16466267 kg']"}
{"id": "101-6", "oq_id": 101, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values with numerical values converted from lbs to kg.\nFunctionality: The transformation extracts and converts the numerical value from lbs to kg in each element of the given sequence, and formats the result as a string in the output list.\nExample: Input: ['3.5 b', '15 b', '81.5 b', '33.8 b', '12.7 b']; output: ['1.5875733 kg', '6.80388556 kg', '36.9677782 kg', '15.3314221 kg', '5.7606231 kg']"}
{"id": "101-7", "oq_id": 101, "desc": "Input: a list of string values, with weight values in lbs format in each element.\nOutput: a list of weight values in kg format.\nFunctionality: The transformation converts each weight value from lbs to kg by multiplying it by 0.45359237, and formats the result with 'kg'.\nExample: Input: ['10 b', '45 b', '134 b', '60 b', '20 b']; output: ['4.5359237 kg', '20.4116567 kg', '60.7813776 kg', '27.2155422 kg', '9.07184741 kg']"}
{"id": "101-9", "oq_id": 101, "desc": "Input: a list of string values, with numerical values in each element representing weights in pounds.\nOutput: a list of string values in kilograms.\nFunctionality: The transformation converts each weight from pounds to kilograms by multiplying by a conversion factor, then formats the result as a string in the output list.\nExample: Input: ['12.5 b', '51 b', '146.5 b', '67.5 b', '22.7 b']; output: ['5.66990463 kg', '23.1332109 kg', '66.4512823 kg', '30.617485 kg', '10.2965468 kg']"}
{"id": "101-8", "oq_id": 101, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of numerical values formatted as strings, converted from pounds to kilograms.\nFunctionality: The transformation extracts the numeric value from each element in the given sequence, converts it from pounds to kilograms, and formats the result as a string in the output list.\nExample: Input: ['8 b', '37.5 b', '118 b', '55.5 b', '19.9 b']; output: ['3.62873896 kg', '17.0097139 kg', '53.5238997 kg', '25.1743766 kg', '9.02648817 kg']"}
{"id": "102-2", "oq_id": 102, "desc": "Input: a list of string values, with numerical values followed by \"m\" indicating meters.\nOutput: a list of string values representing the equivalent distance in feet.\nFunctionality: The transformation converts the meters to feet for each element in the given sequence, and output the result as a list of formatted strings.\nExample: Input: ['15.7 m', '300 m', '700 m', '900 m', '220 m']; output: ['49.2126 feet', '984.252 feet', '2296.59 feet', '2952.76 feet', '721.785 feet']"}
{"id": "102-3", "oq_id": 102, "desc": "Input: a list of string values, with numerical values followed by \"m\" indicating meters.\nOutput: a list of string values representing the equivalent distance in feet.\nFunctionality: The transformation converts the meters to feet for each element in the given sequence, and formats the result as a string in the output list.\nExample: Input: ['9.8 m', '150 m', '250 m', '450 m', '850 m']; output: ['29.5276 feet', '492.126 feet', '820.21 feet', '1476.38 feet', '2788.71 feet']"}
{"id": "102-1", "oq_id": 102, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing numerical values converted from meters to feet.\nFunctionality: The transformation converts each numerical value from meters to feet by multiplying it by approximately 3.28084, and appends 'feet' to the result before adding it to the output list.\nExample: Input: ['20.3 m', '400 m', '600 m', '1000 m', '250 m']; output: ['65.6168 feet', '1312.34 feet', '1968.5 feet', '3280.84 feet', '820.21 feet']"}
{"id": "102-0", "oq_id": 102, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing numerical values converted from meters to feet.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from meters to feet using a conversion factor of 3.28084, and formats the result with the unit \"feet\".\nExample: Input: ['5.5 m', '100 m', '425 m', '789 m', '1234 m']; output: ['16.4042 feet', '328.084 feet', '1394.36 feet', '2588.58 feet', '4048.56 feet']"}
{"id": "102-4", "oq_id": 102, "desc": "Input: a list of string values, with numerical values followed by \"m\" indicating meters.\nOutput: a list of string values representing the equivalent distance in feet.\nFunctionality: The transformation converts the meters to feet for each element in the given sequence, and output the result as a list of formatted strings.\nExample: Input: ['7.2 m', '175 m', '275 m', '375 m', '675 m']; output: ['22.9659 feet', '574.147 feet', '902.231 feet', '1230.32 feet', '2214.57 feet']"}
{"id": "102-5", "oq_id": 102, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values, with numerical values converted from meters to feet.\nFunctionality: The transformation converts each numerical value from meters to feet by multiplying it by 3.28084, and formats the result with the unit of measurement as \"feet\".\nExample: Input: ['12.6 m', '325 m', '525 m', '725 m', '925 m']; output: ['39.3701 feet', '1066.27 feet', '1722.44 feet', '2378.61 feet', '3034.78 feet']"}
{"id": "102-7", "oq_id": 102, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing numerical values converted from meters to feet.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from meters to feet using a conversion factor of 3.2808, and formats the result as a string with 'feet' as the unit of measurement.\nExample: Input: ['18.9 m', '450 m', '650 m', '750 m', '950 m']; output: ['59.0551 feet', '1476.38 feet', '2132.55 feet', '2460.63 feet', '3116.8 feet']"}
{"id": "102-6", "oq_id": 102, "desc": "Input: a list of string values, with numerical values and units (meters) in each element.\nOutput: a list of string values, with numerical values converted to feet and units (feet) in each element.\nFunctionality: The transformation converts each numerical value from meters to feet, and maintains the unit as 'feet' in the output list.\nExample: Input: ['4.3 m', '80 m', '150 m', '230 m', '350 m']; output: ['13.1234 feet', '262.467 feet', '492.126 feet', '754.593 feet', '1148.29 feet']"}
{"id": "102-8", "oq_id": 102, "desc": "Input: a list of string values, with numerical values followed by \"m\" indicating meters.\nOutput: a list of string values representing the equivalent distance in feet.\n\nFunctionality: The transformation converts the meters to feet for each element in the given sequence, and formats the result as a string in the output list with three decimal places.\n\nExample: Input: ['6.4 m', '125 m', '400 m', '600 m', '800 m']; output: ['19.685 feet', '410.105 feet', '1312.34 feet', '1968.5 feet', '2624.67 feet']"}
{"id": "102-9", "oq_id": 102, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (meter).\nOutput: a list of string values with numerical values converted to feet.\nFunctionality: The transformation converts each numerical value from meters to feet by multiplying it by 3.28084, and appends the result to the output list with the unit of measurement as \"feet\".\nExample: Input: ['14.2 m', '275 m', '375 m', '675 m', '875 m']; output: ['45.9318 feet', '902.231 feet', '1230.32 feet', '2214.57 feet', '2870.74 feet']"}
{"id": "103-1", "oq_id": 103, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to pounds.\nFunctionality: The transformation converts each weight measurement from grams to pounds by dividing the value by 453.592 and formats the result as a string in the output list.\nExample: Input: ['12 g', '45 g', '200 g', '75 g', '300 g']; output: ['0.02645547 b', '0.09920802 b', '0.44092452 b', '0.16534670 b', '0.66138679 b']"}
{"id": "103-0", "oq_id": 103, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to pounds.\nFunctionality: The transformation converts each element in the given sequence from grams to pounds, and output the result as a list of formatted strings.\nExample: Input: ['150 g', '275 g', '50 g', '30 g', '90 g']; output: ['0.33069339 b', '0.60627122 b', '0.11023113 b', '0.06613868 b', '0.19841604 b']"}
{"id": "103-2", "oq_id": 103, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to pounds.\nFunctionality: The transformation converts each weight measurement from grams to pounds by dividing the value by 453.592 and formats the result as a string in the output list.\nExample: Input: ['500 g', '350 g', '100 g', '50 g', '25 g']; output: ['1.10231131 b', '0.77161792 b', '0.22046226 b', '0.11023113 b', '0.05511557 b']"}
{"id": "103-3", "oq_id": 103, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to pounds.\nFunctionality: The transformation converts each element in the given sequence from grams to pounds, and formats the result as a string in the output list.\nExample: Input: ['85 g', '40 g', '75 g', '120 g', '65 g']; output: ['0.18739292 b', '0.08818490 b', '0.16534670 b', '0.26455471 b', '0.14330047 b']"}
{"id": "103-7", "oq_id": 103, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted from grams to pounds.\nFunctionality: The transformation converts each numeric value in grams to pounds by dividing it by 453.592, and formats the result with 'b' as the unit of measure.\nExample: Input: ['210 g', '140 g', '160 g', '225 g', '115 g']; output: ['0.46297075 b', '0.30864717 b', '0.35273962 b', '0.49604009 b', '0.25353160 b']"}
{"id": "103-6", "oq_id": 103, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to pounds.\nFunctionality: The transformation converts each weight measurement from grams to pounds by dividing the value by 453.592 and formats the result as a string in the output list.\nExample: Input: ['60 g', '110 g', '190 g', '260 g', '130 g']; output: ['0.13227736 b', '0.24250849 b', '0.41887830 b', '0.57320188 b', '0.28660094 b']"}
{"id": "103-4", "oq_id": 103, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to pounds.\nFunctionality: The transformation converts each weight measurement from grams to pounds by dividing the value by 453.592 and formats the result as a string in the output list.\nExample: Input: ['180 g', '270 g', '95 g', '55 g', '15 g']; output: ['0.39683207 b', '0.59524811 b', '0.20943915 b', '0.12125424 b', '0.03306934 b']"}
{"id": "103-5", "oq_id": 103, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to pounds.\nFunctionality: The transformation converts each weight measurement from grams to pounds by dividing the value by 453.592 and formats the result as a string in the output list.\nExample: Input: ['250 g', '320 g', '80 g', '35 g', '70 g']; output: ['0.55115566 b', '0.70547924 b', '0.17636981 b', '0.07716179 b', '0.15432358 b']"}
{"id": "103-8", "oq_id": 103, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to pounds.\nFunctionality: The transformation extracts the numerical values from each element in the given sequence, converts grams to pounds using the conversion factor 0.00220462, and formats the results as strings in the output list.\nExample: Input: ['125 g', '55 g', '300 g', '205 g', '90 g']; output: ['0.27557783 b', '0.12125424 b', '0.66138679 b', '0.45194764 b', '0.19841604 b']"}
{"id": "103-9", "oq_id": 103, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to pounds.\nFunctionality: The transformation converts each weight measurement from grams to pounds using the conversion factor 0.00220462, and formats the result as a string in the output list.\nExample: Input: ['95 g', '50 g', '225 g', '40 g', '270 g']; output: ['0.20943915 lb', '0.11023113 lb', '0.49604009 lb', '0.08818490 lb', '0.59524811 lb']"}
{"id": "104-4", "oq_id": 104, "desc": "Input: a list of string values, with numerical values followed by \"L\" representing liters.\nOutput: a list of string values representing the conversion of liters to gallons.\nFunctionality: The transformation converts each element from liters to gallons using the conversion factor 1 liter = 0.264172 gallons.\nExample: Input: ['14 L', '35 L', '60 L', '23 L', '48 L']; output: ['3.69841 gal', '9.24602 gal', '15.8503 gal', '6.07596 gal', '12.6803 gal']"}
{"id": "104-5", "oq_id": 104, "desc": "Input: a list of string values, with numerical values followed by \"L\" representing liters.\nOutput: a list of string values representing the equivalent volume in gallons.\nFunctionality: The transformation converts the volume from liters to gallons for each element in the given sequence and formats the result as a string in the output list.\nExample: Input: ['11 L', '28 L', '65 L', '29 L', '52 L']; output: ['2.90589 gal', '7.39682 gal', '17.1712 gal', '7.66099 gal', '13.7369 gal']"}
{"id": "104-7", "oq_id": 104, "desc": "Input: a list of string values, with numerical values followed by \"L\" representing liters.\nOutput: a list of string values representing the equivalent volume in gallons.\nFunctionality: The transformation converts the volume from liters to gallons for each element in the given sequence and formats the result as a string in the result list.\nExample: Input: ['13 L', '38 L', '55 L', '31 L', '49 L']; output: ['3.43424 gal', '10.0385 gal', '14.5295 gal', '8.18933 gal', '12.9444 gal']"}
{"id": "104-6", "oq_id": 104, "desc": "Input: a list of string values, with numerical values followed by \"L\" representing liters.\nOutput: a list of string values representing the equivalent volume in gallons.\n\nFunctionality: The transformation converts the volume from liters to gallons for each element in the given sequence and formats the result as a string in the output list.\n\nExample: Input: ['16 L', '42 L', '80 L', '35 L', '57 L']; output: ['4.22675 gal', '11.0952 gal', '21.1338 gal', '9.24602 gal', '15.0578 gal']"}
{"id": "104-2", "oq_id": 104, "desc": "Input: a list of string values, with numerical values followed by \"L\" representing liters.\nOutput: a list of string values, with each numerical value converted to gallons and formatted with \"gal\".\nFunctionality: The transformation converts each liter value to gallons by multiplying it by 0.264172 and formats the result as a string in the output list.\nExample: Input: ['9 L', '25 L', '50 L', '27 L', '40 L']; output: ['2.37755 gal', '6.6043 gal', '13.2086 gal', '7.13264 gal', '10.5669 gal']"}
{"id": "104-3", "oq_id": 104, "desc": "Input: a list of string values, with numerical values followed by \"L\" representing liters.\nOutput: a list of string values representing the equivalent volume in gallons.\nFunctionality: The transformation converts the volume from liters to gallons for each element in the given sequence and formats the result as a string in the result list.\nExample: Input: ['8 L', '22 L', '37 L', '19 L', '44 L']; output: ['2.11338 gal', '5.81178 gal', '9.77436 gal', '5.01927 gal', '11.6236 gal']"}
{"id": "104-1", "oq_id": 104, "desc": "Input: a list of string values, with numerical values followed by \"L\" representing liters.\nOutput: a list of string values representing the equivalent volume in gallons.\n\nFunctionality: The transformation converts the volume from liters to gallons for each element in the given sequence and formats the result as a string in the output list.\n\nExample: Input: ['12 L', '30 L', '75 L', '18 L', '63 L']; output: ['3.17006 gal', '7.92516 gal', '19.8129 gal', '4.7551 gal', '16.6428 gal']"}
{"id": "104-0", "oq_id": 104, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values with the numerical values converted from liters to gallons.\nFunctionality: The transformation converts each numerical value from liters to gallons using the conversion factor of 1 liter = 0.264172 gallons, and formats the result as a string in the output list.\nExample: Input: ['5 L', '20 L', '42 L', '10 L', '55 L']; output: ['1.32086 gal', '5.28344 gal', '11.0952 gal', '2.64172 gal', '14.5295 gal']"}
{"id": "104-8", "oq_id": 104, "desc": "Input: a list of string values, with numerical values and units (liters) in each element.\nOutput: a list of string values, with numerical values converted to gallons.\nFunctionality: The transformation converts each liter value to gallons using the conversion factor of 1 liter = 0.264172 gallons.\nExample: Input: ['18 L', '45 L', '70 L', '39 L', '61 L']; output: ['4.7551 gal', '11.8877 gal', '18.492 gal', '10.3027 gal', '16.1145 gal']"}
{"id": "104-9", "oq_id": 104, "desc": "Input: a list of string values, with numerical values followed by \"L\" representing liters.\nOutput: a list of string values, with each numerical value converted to gallons and formatted with \"gal\".\n\nFunctionality: The transformation converts each numerical value from liters to gallons by multiplying by 0.26417 (conversion rate) and formats the result as a string with \"gal\" as the unit.\n\nExample: Input: ['20 L', '50 L', '90 L', '45 L', '66 L']; output: ['5.28344 gal', '13.2086 gal', '23.7755 gal', '11.8877 gal', '17.4354 gal']"}
{"id": "106-6", "oq_id": 106, "desc": "Input: a list of string values, with numerical values followed by 'mm' in each element.\nOutput: a list of string values, representing the numerical values converted from millimeters to inches.\nFunctionality: The transformation converts each numerical value from millimeters to inches by multiplying by 0.0393701 and formats the result in the output list.\nExample: Input: ['45 mm', '60 mm', '75 mm', '90 mm', '105 mm']; output: ['1.77165 inch', '2.36221 inch', '2.95276 inch', '3.54331 inch', '4.13386 inch']"}
{"id": "106-7", "oq_id": 106, "desc": "Input: a list of string values, with numerical values followed by 'mm' in each element.\nOutput: a list of string values with the numerical values converted to inches with 'inch' appended.\nFunctionality: The transformation converts each numerical value from millimeters to inches by multiplying by 0.039370 and appends 'inch' to the result in the output list.\nExample: Input: ['5 mm', '10 mm', '20 mm', '35 mm', '50 mm']; output: ['0.19685 inch', '0.39370 inch', '0.78740 inch', '1.37795 inch', '1.96850 inch']"}
{"id": "106-5", "oq_id": 106, "desc": "Input: a list of string values, with numerical values followed by 'mm' in each element.\nOutput: a list of string values, representing the numerical values converted from millimeters to inches.\nFunctionality: The transformation converts each numerical value from millimeters to inches by multiplying by 0.03937 and formats the result as a string with 'inch' appended.\nExample: Input: ['2 mm', '8 mm', '16 mm', '32 mm', '64 mm']; output: ['0.07874 inch', '0.31496 inch', '0.62992 inch', '1.25984 inch', '2.51969 inch']"}
{"id": "106-4", "oq_id": 106, "desc": "Input: a list of string values, with numerical values followed by 'mm' in each element.\nOutput: a list of string values with the numerical values converted to inches and formatted with 5 decimal places.\nFunctionality: The transformation converts each numerical value from millimeters to inches, using the conversion factor 0.0393701, and formats the result with 5 decimal places.\nExample: Input: ['120 mm', '150 mm', '180 mm', '210 mm', '240 mm']; output: ['4.72441 inch', '5.90551 inch', '7.08662 inch', '8.26772 inch', '9.44882 inch']"}
{"id": "106-0", "oq_id": 106, "desc": "Input: a list of string values, with numerical values followed by 'mm' in each element.\nOutput: a list of string values, representing the numerical values converted from millimeters to inches.\nFunctionality: The transformation converts each numerical value from millimeters to inches by multiplying it by 0.039370 and formats the result with 'inch' unit in the output list.\nExample: Input: ['10 mm', '20 mm', '30 mm', '40 mm', '50 mm']; output: ['0.39370 inch', '0.78740 inch', '1.18110 inch', '1.57480 inch', '1.96850 inch']"}
{"id": "106-1", "oq_id": 106, "desc": "Input: a list of string values, with measurements in millimeters in each element.\nOutput: a list of string values representing the measurements converted to inches.\n\nFunctionality: The transformation extracts the numerical value representing millimeters from each element in the given sequence, converts it to inches using the conversion factor of 25.4, and formats the result as a string in the output list.\n\nExample: Input: ['25 mm', '75 mm', '100 mm', '200 mm', '300 mm']; output: ['0.98425 inch', '2.95276 inch', '3.93701 inch', '7.87402 inch', '11.81103 inch']"}
{"id": "106-3", "oq_id": 106, "desc": "Input: a list of string values, with measurements in millimeters in each element.\nOutput: a list of string values representing measurements in inches.\nFunctionality: The transformation converts each millimeter measurement to inches, rounding to 5 decimal places, and outputs the result as a new list of formatted strings.\nExample: Input: ['55 mm', '65 mm', '75 mm', '85 mm', '95 mm']; output: ['2.16536 inch', '2.55906 inch', '2.95276 inch', '3.34646 inch', '3.74016 inch']"}
{"id": "106-2", "oq_id": 106, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (mm).\nOutput: a list of string values with numerical values converted to inches.\nFunctionality: The transformation converts mm values to inches by multiplying each value by 0.0393701 and formatting the result as a string in the output list.\nExample: Input: ['7 mm', '14 mm', '21 mm', '28 mm', '35 mm']; output: ['0.27559 inch', '0.55118 inch', '0.82677 inch', '1.10236 inch', '1.37795 inch']"}
{"id": "106-9", "oq_id": 106, "desc": "Input: a list of string values, with numerical values followed by 'mm' in each element.\nOutput: a list of string values with the numerical values converted to inches and formatted with 5 decimal places.\nFunctionality: The transformation converts the numerical value in millimeters to inches by dividing by 25.4, rounded to 5 decimal places, and formats the result as a string in the output list.\nExample: Input: ['12 mm', '24 mm', '36 mm', '48 mm', '60 mm']; output: ['0.47244 inch', '0.94488 inch', '1.41732 inch', '1.88976 inch', '2.36221 inch']"}
{"id": "106-8", "oq_id": 106, "desc": "Input: a list of string values, with measurements in millimeters in each element.\nOutput: a list of string values representing the measurements in inches.\nFunctionality: The transformation converts each millimeter measurement to inches by multiplying the value by 0.03937 and formats the result as a string in the output list.\nExample: Input: ['33 mm', '66 mm', '99 mm', '132 mm', '165 mm']; output: ['1.29921 inch', '2.59843 inch', '3.89764 inch', '5.19685 inch', '6.49607 inch']"}
{"id": "107-5", "oq_id": 107, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values, with each numerical value converted from meters to feet and formatted as a string in the result list.\nFunctionality: The transformation converts each numerical value from meters to feet by multiplying it by 3.28084, formats it as a string, and outputs the result as a list.\nExample: Input: ['45 meter', '36 meter', '48 meter', '42 meter', '38 meter']; output: ['147.638 feet', '118.11 feet', '157.48 feet', '137.795 feet', '124.672 feet']"}
{"id": "107-4", "oq_id": 107, "desc": "Input: a list of string values, each containing a numerical value and a unit of measurement.\nOutput: a list of string values, each representing the numerical value converted from meters to feet.\nFunctionality: The transformation converts each numerical value from meters to feet by multiplying it by 3.28084, and appends the result to the output list in the format of 'X feet'.\nExample: Input: ['35 meter', '40 meter', '26 meter', '28 meter', '32 meter']; output: ['114.829 feet', '131.234 feet', '85.3018 feet', '91.8635 feet', '104.987 feet']"}
{"id": "107-6", "oq_id": 107, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values, with each numerical value converted from meters to feet and formatted as a string in the result list.\nFunctionality: The transformation converts each numerical value from meters to feet by multiplying it by 3.281, and formats each result as a string with \"feet\" as the unit.\nExample: Input: ['50 meter', '55 meter', '53 meter', '49 meter', '52 meter']; output: ['164.042 feet', '180.446 feet', '173.885 feet', '160.761 feet', '170.604 feet']"}
{"id": "107-7", "oq_id": 107, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values, with each numerical value converted from meters to feet and formatted as a string in the result list.\nFunctionality: The transformation converts each numerical value from meters to feet by multiplying it by 3.28084, formats it as a string, and outputs the result as a list.\nExample: Input: ['57 meter', '60 meter', '58 meter', '63 meter', '70 meter']; output: ['187.008 feet', '196.85 feet', '190.289 feet', '206.693 feet', '229.659 feet']"}
{"id": "107-3", "oq_id": 107, "desc": "Input: a list of string values, with numerical values followed by \"meter\" in each element.\nOutput: a list of string values, with the numerical values converted to feet and appended with \"feet\".\n\nFunctionality: The transformation converts meters to feet for each element in the given sequence by multiplying the numerical value by 3.28084, and formats the result as a string with \"feet\" at the end.\n\nExample: Input: ['30 meter', '14 meter', '24 meter', '17 meter', '21 meter']; output: ['98.4252 feet', '45.9318 feet', '78.7402 feet', '55.7743 feet', '68.8976 feet']"}
{"id": "107-2", "oq_id": 107, "desc": "Input: a list of string values, with numerical values followed by \"meter\" in each element.\nOutput: a list of string values, with the numerical values converted to feet and formatted with 4 decimal places followed by \"feet\".\n\nFunctionality: The transformation converts the numerical value from meters to feet for each element in the given sequence, using the conversion factor of 3.28084. The result is formatted as a string with 4 decimal places and \"feet\" appended.\nExample: Input: ['18 meter', '11 meter', '13 meter', '9 meter', '16 meter']; output: ['59.0551 feet', '36.0892 feet', '42.6509 feet', '29.5276 feet', '52.4934 feet']"}
{"id": "107-0", "oq_id": 107, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing the conversion of meters to feet.\nFunctionality: The transformation extracts the numerical values from each element in the given sequence, converts the values from meters to feet using the conversion factor 3.28084, and formats the results with the unit of measurement \"feet\" in the output list.\nExample: Input: ['5 meter', '15 meter', '25 meter', '6 meter', '12 meter']; output: ['16.4042 feet', '49.2126 feet', '82.021 feet', '19.685 feet', '39.3701 feet']"}
{"id": "107-1", "oq_id": 107, "desc": "Input: a list of string values, with numerical values followed by \"meter\" in each element.\nOutput: a list of string values, with the numerical values converted to feet and appended with \"feet\".\n\nFunctionality: The transformation converts each numerical value from meters to feet by multiplying it by 3.28084, and formats each result as a string with \"feet\" appended.\n\nExample: Input: ['1 meter', '7 meter', '22 meter', '8 meter', '10 meter']; output: ['3.28084 feet', '22.9659 feet', '72.1785 feet', '26.2467 feet', '32.8084 feet']"}
{"id": "107-9", "oq_id": 107, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values, with each numerical value converted from meters to feet and formatted as a string in the result list.\nFunctionality: The transformation converts each numerical value from meters to feet by multiplying it by 3.281, and formats each result as a string with \"feet\" as the unit.\nExample: Input: ['80 meter', '85 meter', '82 meter', '88 meter', '90 meter']; output: ['262.467 feet', '278.871 feet', '269.029 feet', '288.714 feet', '295.276 feet']"}
{"id": "107-8", "oq_id": 107, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values, with each numerical value converted to feet with a unit of \"feet\" appended.\nFunctionality: The transformation converts each numerical value from meters to feet, and appends the unit \"feet\" to the result in a list.\nExample: Input: ['65 meter', '72 meter', '68 meter', '73 meter', '75 meter']; output: ['213.255 feet', '236.22 feet', '223.097 feet', '239.501 feet', '246.063 feet']"}
{"id": "108-9", "oq_id": 108, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to ounces.\nFunctionality: The transformation converts each element in the given sequence from grams to ounces, and output the result as a list of formatted strings.\nExample: Input: ['8 g', '90 g', '700 g', '10 g', '60 g']; output: ['0.28219170 oz', '3.17465658 oz', '24.69177339 oz', '0.35273962 oz', '2.11643772 oz']"}
{"id": "108-8", "oq_id": 108, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to ounces.\nFunctionality: The transformation converts each element in the given sequence from grams to ounces, and output the result as a list of formatted strings.\nExample: Input: ['12 g', '65 g', '950 g', '2 g', '30 g']; output: ['0.42328754 oz', '2.29280753 oz', '33.51026388 oz', '0.07054792 oz', '1.05821886 oz']"}
{"id": "108-0", "oq_id": 108, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to ounces.\nFunctionality: The transformation converts each element in the given sequence from grams to ounces, and output the result as a list of formatted strings.\nExample: Input: ['5 g', '100 g', '750 g', '2 g', '15 g']; output: ['0.17636981 oz', '3.52739620 oz', '26.45547149 oz', '0.07054792 oz', '0.52910943 oz']"}
{"id": "108-1", "oq_id": 108, "desc": "Input: a list of string values, with grams values in each element.\nOutput: a list of string values with ounces values in each element.\nFunctionality: The transformation converts each element from grams to ounces using the conversion factor 0.03527396, and formats the result as a string in the output list.\nExample: Input: ['10 g', '45 g', '2000 g', '7 g', '50 g']; output: ['0.35273962 oz', '1.58732829 oz', '70.54792396 oz', '0.24691773 oz', '1.76369810 oz']"}
{"id": "108-3", "oq_id": 108, "desc": "Input: a list of string values, with grams values in each element.\nOutput: a list of string values with ounces values converted from grams.\nFunctionality: The transformation converts each element from grams to ounces using the conversion factor 0.03527396, and formats the result as a string in the output list.\nExample: Input: ['3 g', '40 g', '1200 g', '6 g', '25 g']; output: ['0.10582189 oz', '1.41095848 oz', '42.32875438 oz', '0.21164377 oz', '0.88184905 oz']"}
{"id": "108-2", "oq_id": 108, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to ounces.\nFunctionality: The transformation converts each element in the given sequence from grams to ounces, and output the result as a list of formatted strings.\nExample: Input: ['20 g', '60 g', '900 g', '4 g', '35 g']; output: ['0.70547924 oz', '2.11643772 oz', '31.74656578 oz', '0.14109585 oz', '1.23458867 oz']"}
{"id": "108-6", "oq_id": 108, "desc": "Input: a list of string values, with grams values in each element.\nOutput: a list of string values with ounces values in each element.\nFunctionality: The transformation converts each element from grams to ounces using the conversion factor 0.035274 and formats the result as a string in the output list.\nExample: Input: ['15 g', '70 g', '1400 g', '5 g', '40 g']; output: ['0.52910943 oz', '2.46917734 oz', '49.38354677 oz', '0.17636981 oz', '1.41095848 oz']"}
{"id": "108-7", "oq_id": 108, "desc": "Input: a list of string values, with grams values in each element.\nOutput: a list of string values with ounces values in each element.\nFunctionality: The transformation converts each element from grams to ounces using the conversion factor 1 g = 0.03527396 oz.\nExample: Input: ['25 g', '55 g', '1100 g', '1 g', '20 g']; output: ['0.88184905 oz', '1.94006791 oz', '38.80135818 oz', '0.03527396 oz', '0.70547924 oz']"}
{"id": "108-5", "oq_id": 108, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to ounces.\nFunctionality: The transformation converts each element in the given sequence from grams to ounces, and output the result as a list of formatted strings.\nExample: Input: ['4 g', '50 g', '800 g', '9 g', '75 g']; output: ['0.14109585 oz', '1.76369810 oz', '28.21916958 oz', '0.31746566 oz', '2.64554715 oz']"}
{"id": "108-4", "oq_id": 108, "desc": "Input: a list of string values, with weight measurements in grams.\nOutput: a list of string values, with weight measurements converted to ounces.\nFunctionality: The transformation converts each element in the given sequence from grams to ounces, and output the result as a list of formatted strings.\nExample: Input: ['2 g', '80 g', '600 g', '8 g', '100 g']; output: ['0.07054792 oz', '2.82191696 oz', '21.16437719 oz', '0.28219170 oz', '3.52739620 oz']"}
{"id": "109-9", "oq_id": 109, "desc": "Input: a list of string values, with numerical values followed by the word \"inch\" in each element.\nOutput: a list of string values representing the corresponding measurement in centimeters.\nFunctionality: The transformation converts the inch measurements to centimeters by multiplying each value by 2.54, and appends the result with \" cm\" to the output list.\nExample: Input: ['26 inch', '63 inch', '290 inch', '49 inch', '11 inch']; output: ['66.04 cm', '160.02 cm', '736.6 cm', '124.46 cm', '27.94 cm']"}
{"id": "109-8", "oq_id": 109, "desc": "Input: a list of strings with values in the format of a number followed by \"inch\".\nOutput: a list of strings with values converted from inches to centimeters.\nFunctionality: The transformation converts each value from inches to centimeters using the conversion factor 2.54, and formats the result as a string with \"cm\" as the unit.\nExample: Input: ['28 inch', '72 inch', '350 inch', '33 inch', '12 inch']; output: ['71.12 cm', '182.88 cm', '889 cm', '83.82 cm', '30.48 cm']"}
{"id": "109-3", "oq_id": 109, "desc": "Input: a list of string values, with numerical values followed by 'inch' in each element.\nOutput: a list of string values with numerical values followed by 'cm'.\nFunctionality: The transformation converts inches to centimeters by multiplying each inch value by 2.54, and outputs the result as a new list of values in centimeters.\nExample: Input: ['20 inch', '60 inch', '250 inch', '40 inch', '6 inch']; output: ['50.8 cm', '152.4 cm', '635 cm', '101.6 cm', '15.24 cm']"}
{"id": "109-2", "oq_id": 109, "desc": "Input: a list of strings with values in the format of a number followed by \"inch\".\nOutput: a list of strings with values in the format of a number followed by \"cm\".\nFunctionality: The transformation converts each inch value to centimeters by multiplying the inch value by 2.54, and outputs the result as a list with values expressed in centimeters.\nExample: Input: ['10 inch', '36 inch', '150 inch', '45 inch', '4 inch']; output: ['25.4 cm', '91.44 cm', '381 cm', '114.3 cm', '10.16 cm']"}
{"id": "109-0", "oq_id": 109, "desc": "Input: a list of string values, each containing a numerical value followed by the unit \"inch\".\nOutput: a list of string values, each containing the equivalent numerical value in centimeters followed by the unit \"cm\".\nFunctionality: The transformation converts each numerical value from inches to centimeters, using the conversion factor 2.54, and formats the result as a string in the output list.\nExample: Input: ['15 inch', '25 inch', '100 inch', '50 inch', '5 inch']; output: ['38.1 cm', '63.5 cm', '254 cm', '127 cm', '12.7 cm']"}
{"id": "109-1", "oq_id": 109, "desc": "Input: a list of strings with values in the format of a number followed by \"inch\".\nOutput: a list of strings with values converted from inches to centimeters.\nFunctionality: The transformation converts each value from inches to centimeters by multiplying by 2.54 and then formats the result as a string with \"cm\" as the unit.\nExample: Input: ['12 inch', '48 inch', '200 inch', '24 inch', '3 inch']; output: ['30.48 cm', '121.92 cm', '508 cm', '60.96 cm', '7.62 cm']"}
{"id": "109-5", "oq_id": 109, "desc": "Input: a list of string values, with measurements in inches.\nOutput: a list of string values, with measurements converted to centimeters.\nFunctionality: The transformation converts each measurement from inches to centimeters by multiplying it by 2.54, and formats the result as a string in the output list.\nExample: Input: ['22 inch', '54 inch', '320 inch', '48 inch', '7 inch']; output: ['55.88 cm', '137.16 cm', '812.8 cm', '121.92 cm', '17.78 cm']"}
{"id": "109-4", "oq_id": 109, "desc": "Input: a list of string values, with measurements in inches.\nOutput: a list of string values, with measurements converted to centimeters.\nFunctionality: The transformation converts each measurement from inches to centimeters by multiplying it by 2.54, and formats the result as a string in the output list.\nExample: Input: ['18 inch', '42 inch', '280 inch', '36 inch', '8 inch']; output: ['45.72 cm', '106.68 cm', '711.2 cm', '91.44 cm', '20.32 cm']"}
{"id": "109-6", "oq_id": 109, "desc": "Input: a list of string values, with measurements in the format \"X inch\".\nOutput: a list of string values, with measurements in centimeters in the format \"X cm\".\nFunctionality: The transformation converts each inch measurement to centimeters by multiplying the value by 2.54, and outputs the result as a list with centimeter measurements.\nExample: Input: ['16 inch', '45 inch', '270 inch', '35 inch', '9 inch']; output: ['40.64 cm', '114.3 cm', '685.8 cm', '88.9 cm', '22.86 cm']"}
{"id": "109-7", "oq_id": 109, "desc": "Input: a list of string values, with measurements in inches.\nOutput: a list of string values, with measurements converted to centimeters.\nFunctionality: The transformation converts each measurement from inches to centimeters by multiplying it by 2.54, and formats the result as a string in the output list.\nExample: Input: ['14 inch', '30 inch', '180 inch', '55 inch', '1 inch']; output: ['35.56 cm', '76.2 cm', '457.2 cm', '139.7 cm', '2.54 cm']"}
{"id": "110-8", "oq_id": 110, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts the milliliter values in each element from the given sequence to fluid ounces, and output the result as a list of formatted strings.\nExample: Input: ['55 ml', '85 ml', '320 ml', '10 ml', '2 ml']; output: ['1.859770 oz', '2.874190 oz', '10.820480 oz', '0.338140 oz', '0.067628 oz']"}
{"id": "110-9", "oq_id": 110, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts milliliters to ounces by multiplying each numeric value in the input list by 0.033814 and outputs the result as a list with the values rounded to six decimal places.\nExample: Input: ['60 ml', '90 ml', '340 ml', '13 ml', '3 ml']; output: ['2.028840 oz', '3.043260 oz', '11.496760 oz', '0.439582 oz', '0.101442 oz']"}
{"id": "110-2", "oq_id": 110, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts milliliters to ounces by using a conversion factor of 0.033814 fluid ounces per milliliter, and outputs the result as a list of strings in the format of 'X oz'.\nExample: Input: ['25 ml', '55 ml', '160 ml', '7 ml', '25 ml']; output: ['0.845350 oz', '1.859770 oz', '5.410240 oz', '0.236698 oz', '0.845350 oz']"}
{"id": "110-3", "oq_id": 110, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts the milliliter values in each element from the given sequence to fluid ounces, and output the result as a list of formatted strings.\nExample: Input: ['30 ml', '60 ml', '240 ml', '9 ml', '20 ml']; output: ['1.014420 oz', '2.028840 oz', '8.115360 oz', '0.304326 oz', '0.676280 oz']"}
{"id": "110-1", "oq_id": 110, "desc": "Input: a list of string values, with numerical values followed by \"ml\" in each element.\nOutput: a list of string values, with numerical values converted to \"oz\" and formatted in the result list.\nFunctionality: The transformation converts the numerical value from milliliters to ounces in each element of the given sequence and formats it as a string in the result list.\nExample: Input: ['20 ml', '45 ml', '220 ml', '8 ml', '35 ml']; output: ['0.676280 oz', '1.521630 oz', '7.439080 oz', '0.270512 oz', '1.183490 oz']"}
{"id": "110-0", "oq_id": 110, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts the milliliter values in each element from the given sequence to fluid ounces, and output the result as a list of formatted strings.\nExample: Input: ['15 ml', '50 ml', '180 ml', '5 ml', '40 ml']; output: ['0.507210 oz', '1.690700 oz', '6.086520 oz', '0.169070 oz', '1.352560 oz']"}
{"id": "110-4", "oq_id": 110, "desc": "Input: a list of string values, with numerical values followed by \"ml\" in each element.\nOutput: a list of string values, with numerical values followed by \"oz\" in each element.\nFunctionality: The transformation converts the milliliter values to fluid ounces by multiplying each value by the conversion factor 0.033814.\nExample: Input: ['35 ml', '65 ml', '140 ml', '4 ml', '15 ml']; output: ['1.183490 oz', '2.197910 oz', '4.733960 oz', '0.135256 oz', '0.507210 oz']"}
{"id": "110-5", "oq_id": 110, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts milliliters to ounces by multiplying each numeric value by the conversion factor, and outputs the result as a new list of formatted strings.\nExample: Input: ['40 ml', '70 ml', '260 ml', '12 ml', '10 ml']; output: ['1.352560 oz', '2.366980 oz', '8.791640 oz', '0.405768 oz', '0.338140 oz']"}
{"id": "110-7", "oq_id": 110, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts milliliters to ounces by using the conversion factor 1 ml = 0.033814 oz.\nExample: Input: ['50 ml', '80 ml', '300 ml', '11 ml', '1 ml']; output: ['1.690700 oz', '2.705120 oz', '10.144200 oz', '0.371954 oz', '0.033814 oz']"}
{"id": "110-6", "oq_id": 110, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts the milliliter values in each element from the given sequence to fluid ounces, and output the result as a list of formatted strings.\nExample: Input: ['45 ml', '75 ml', '280 ml', '6 ml', '5 ml']; output: ['1.521630 oz', '2.536050 oz', '9.467920 oz', '0.202884 oz', '0.169070 oz']"}
{"id": "111-8", "oq_id": 111, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (cm).\nOutput: a list of string values, with numerical values converted to inches with 5 decimal places.\nFunctionality: The transformation converts each numerical value from centimeters to inches by multiplying by 0.393701 and formats the result with 5 decimal places in the output list.\nExample: Input: ['13 cm', '26 cm', '52 cm', '104 cm', '208 cm']; output: ['5.11811 inch', '10.2362 inch', '20.4725 inch', '40.9449 inch', '81.8898 inch']"}
{"id": "111-9", "oq_id": 111, "desc": "Input: a list of string values, with numerical values followed by \"cm\" in each element.\nOutput: a list of string values, with numerical values converted to inches and formatted with \"inch\" in the result list.\nFunctionality: The transformation converts each numerical value from centimeters to inches by dividing it by 2.54, and formats the result with \"inch\" as the unit.\nExample: Input: ['17 cm', '34 cm', '68 cm', '136 cm', '272 cm']; output: ['6.69292 inch', '13.3858 inch', '26.7717 inch', '53.5433 inch', '107.087 inch']"}
{"id": "111-1", "oq_id": 111, "desc": "Input: a list of string values, with numerical values followed by \"cm\" in each element.\nOutput: a list of string values, with numerical values converted to inches and formatted with \"inch\".\nFunctionality: The transformation converts each numerical value from centimeters to inches by multiplying by 0.393701, and formats the result with \"inch\". \nExample: Input: ['2 cm', '15 cm', '30 cm', '45 cm', '60 cm']; output: ['0.787402 inch', '5.90552 inch', '11.811 inch', '17.7165 inch', '23.6221 inch']"}
{"id": "111-0", "oq_id": 111, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (cm).\nOutput: a list of string values, with numerical values converted to inches with the unit of measurement (inch).\n\nFunctionality: The transformation converts the numerical value in each element from centimeters to inches by multiplying it by 0.393701, and formats the result as a string with the converted value and the unit of measurement in inches.\n\nExample: Input: ['5 cm', '10 cm', '25 cm', '50 cm', '75 cm']; output: ['1.96851 inch', '3.93701 inch', '9.84253 inch', '19.6851 inch', '29.5276 inch']"}
{"id": "111-2", "oq_id": 111, "desc": "Input: a list of string values, with numerical values followed by \"cm\" in each element.\nOutput: a list of string values, with numerical values converted to inches and formatted with \"inch\".\nFunctionality: The transformation converts each numerical value from centimeters to inches by multiplying by 0.393701, and formats the result with \"inch\".\nExample: Input: ['8 cm', '20 cm', '40 cm', '80 cm', '100 cm']; output: ['3.14961 inch', '7.87402 inch', '15.748 inch', '31.4961 inch', '39.3701 inch']"}
{"id": "111-3", "oq_id": 111, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (cm).\nOutput: a list of string values with numerical values converted to inches.\nFunctionality: The transformation converts each numerical value from centimeters to inches, rounding to four decimal places, and formats the result as a string in the output list.\nExample: Input: ['3 cm', '6 cm', '12 cm', '24 cm', '48 cm']; output: ['1.1811 inch', '2.3622 inch', '4.7244 inch', '9.4488 inch', '18.8976 inch']"}
{"id": "111-7", "oq_id": 111, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (cm).\nOutput: a list of string values, representing the numerical values converted from centimeters to inches.\nFunctionality: The transformation converts each numerical value from centimeters to inches by multiplying it by 0.393701 and formats the result with the \"inch\" unit.\nExample: Input: ['9 cm', '18 cm', '36 cm', '72 cm', '144 cm']; output: ['3.54331 inch', '7.08662 inch', '14.1732 inch', '28.3465 inch', '56.6929 inch']"}
{"id": "111-6", "oq_id": 111, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (cm).\nOutput: a list of string values, with numerical values converted to inches with the unit of measurement (inch).\nFunctionality: The transformation converts the numerical value from centimeters to inches for each element in the given sequence.\nExample: Input: ['11 cm', '22 cm', '44 cm', '88 cm', '176 cm']; output: ['4.33071 inch', '8.66142 inch', '17.3228 inch', '34.6457 inch', '69.2914 inch']"}
{"id": "111-4", "oq_id": 111, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (cm).\nOutput: a list of string values, with numerical values converted to inches with the unit of measurement (inch).\nFunctionality: The transformation converts the numerical value from centimeters to inches for each element in the given sequence.\nExample: Input: ['7 cm', '14 cm', '28 cm', '56 cm', '112 cm']; output: ['2.75591 inch', '5.51181 inch', '11.0236 inch', '22.0473 inch', '44.0945 inch']"}
{"id": "111-5", "oq_id": 111, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (cm).\nOutput: a list of string values, with numerical values converted to inches with the unit of measurement (inch).\nFunctionality: The transformation converts the numerical value from centimeters to inches for each element in the given sequence.\nExample: Input: ['4 cm', '16 cm', '32 cm', '64 cm', '128 cm']; output: ['1.5748 inch', '6.29922 inch', '12.5984 inch', '25.1969 inch', '50.3937 inch']"}
{"id": "112-9", "oq_id": 112, "desc": "Input: a list of string values, with numerical values followed by \"cm\" in each element.\nOutput: a list of string values, with numerical values converted to \"feet\" format in each element.\nFunctionality: The transformation converts each numerical value from centimeters to feet and formats the result as a string in the output list.\nExample: Input: ['15 cm', '55 cm', '125 cm', '8 cm', '35 cm']; output: ['0.492126 feet', '1.80446 feet', '4.10105 feet', '0.262467 feet', '1.14829 feet']"}
{"id": "112-8", "oq_id": 112, "desc": "Input: a list of string values, with numerical values followed by \"cm\" in each element.\nOutput: a list of string values, with numerical values converted to \"feet\" format in each element.\nFunctionality: The transformation converts each numerical value from centimeters to feet by dividing it by 30.48, and formats the result as a string with \"feet\" unit.\nExample: Input: ['20 cm', '70 cm', '140 cm', '14 cm', '43 cm']; output: ['0.656168 feet', '2.29659 feet', '4.59318 feet', '0.459318 feet', '1.41076 feet']"}
{"id": "112-0", "oq_id": 112, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the numerical values converted from centimeters to feet.\nFunctionality: The transformation converts each numerical value from centimeters to feet, and formats the result as a string with the corresponding unit.\nExample: Input: ['10 cm', '45 cm', '150 cm', '7 cm', '23 cm']; output: ['0.328084 feet', '1.47638 feet', '4.92126 feet', '0.229659 feet', '0.754593 feet']"}
{"id": "112-1", "oq_id": 112, "desc": "Input: a list of string values, with numerical values followed by \"cm\" in each element.\nOutput: a list of string values, with numerical values converted to \"feet\" format in each element.\nFunctionality: The transformation converts each numerical value from centimeters to feet by dividing it by 30.48, and formats the result as a string with \"feet\" unit.\nExample: Input: ['30 cm', '75 cm', '120 cm', '9 cm', '50 cm']; output: ['0.984252 feet', '2.46063 feet', '3.93701 feet', '0.295276 feet', '1.64042 feet']"}
{"id": "112-3", "oq_id": 112, "desc": "Input: a list of string values, with numerical values followed by \"cm\" in each element.\nOutput: a list of string values, with numerical values converted to \"feet\" format in each element.\nFunctionality: The transformation converts each numerical value from centimeters to feet by dividing it by 30.48, and formats the result as a string with \"feet\" unit.\nExample: Input: ['5 cm', '19 cm', '210 cm', '12 cm', '8 cm']; output: ['0.164042 feet', '0.62336 feet', '6.88976 feet', '0.393701 feet', '0.262467 feet']"}
{"id": "112-2", "oq_id": 112, "desc": "Input: a list of string values, with numerical values followed by \"cm\" in each element.\nOutput: a list of string values, with numerical values converted to \"feet\" format in each element.\nFunctionality: The transformation converts each numerical value from centimeters to feet by dividing it by 30.48.\nExample: Input: ['22 cm', '88 cm', '180 cm', '15 cm', '33 cm']; output: ['0.721785 feet', '2.88714 feet', '5.90551 feet', '0.492126 feet', '1.08268 feet']"}
{"id": "112-6", "oq_id": 112, "desc": "Input: a list of string values, with numerical values followed by \"cm\" in each element.\nOutput: a list of string values, with numerical values converted to \"feet\" format in each element.\nFunctionality: The transformation converts each numerical value from centimeters to feet by dividing it by 30.48, and formats the result as a string with \"feet\" unit.\nExample: Input: ['33 cm', '66 cm', '135 cm', '18 cm', '16 cm']; output: ['1.08268 feet', '2.16535 feet', '4.42913 feet', '0.590551 feet', '0.524934 feet']"}
{"id": "112-7", "oq_id": 112, "desc": "Input: a list of string values, with numerical values followed by \"cm\" in each element.\nOutput: a list of string values, with numerical values converted to feet.\nFunctionality: The transformation converts each numerical value from centimeters to feet, and formats the result as a string with the value in feet.\nExample: Input: ['25 cm', '85 cm', '160 cm', '11 cm', '38 cm']; output: ['0.82021 feet', '2.78871 feet', '5.24934 feet', '0.360892 feet', '1.24672 feet']"}
{"id": "112-5", "oq_id": 112, "desc": "Input: a list of string values, with numerical values followed by \"cm\" in each element.\nOutput: a list of string values, with numerical values converted to \"feet\" format in each element.\nFunctionality: The transformation converts each numerical value from centimeters to feet and formats the result as a string in the output list.\nExample: Input: ['40 cm', '99 cm', '170 cm', '6 cm', '27 cm']; output: ['1.31234 feet', '3.24803 feet', '5.57743 feet', '0.19685 feet', '0.885827 feet']"}
{"id": "112-4", "oq_id": 112, "desc": "Input: a list of string values, with numerical values followed by \"cm\" in each element.\nOutput: a list of string values, with numerical values converted to feet.\nFunctionality: The transformation converts each numerical value from centimeters to feet, and formats the result as a string with the value in feet.\nExample: Input: ['11 cm', '60 cm', '195 cm', '4 cm', '25 cm']; output: ['0.360892 feet', '1.9685 feet', '6.39764 feet', '0.131234 feet', '0.82021 feet']"}
{"id": "113-9", "oq_id": 113, "desc": "Input: a list of string values, each containing a temperature in Fahrenheit.\nOutput: a list of string values, each containing the corresponding temperature in Celsius.\nFunctionality: The transformation converts each Fahrenheit temperature to Celsius using the formula C = (F - 32) * 5/9, rounding the result to four decimal places.\nExample: Input: ['180 fahrenheit', '130 fahrenheit', '115 fahrenheit', '90 fahrenheit', '60 fahrenheit']; output: ['82.2222 celsius', '54.4444 celsius', '46.1111 celsius', '32.2222 celsius', '15.5556 celsius']"}
{"id": "113-8", "oq_id": 113, "desc": "Input: a list of string values, with temperature values in fahrenheit format in each element.\nOutput: a list of string values, with temperature values in celsius format in each element.\nFunctionality: The transformation converts each fahrenheit temperature to celsius using the formula (Fahrenheit - 32) * 5/9, and formats the result as a string in the output list.\nExample: Input: ['145 fahrenheit', '85 fahrenheit', '75 fahrenheit', '35 fahrenheit', '220 fahrenheit']; output: ['62.7778 celsius', '29.4444 celsius', '23.8889 celsius', '1.66667 celsius', '104.444 celsius']"}
{"id": "113-3", "oq_id": 113, "desc": "Input: a list of strings with temperature values in Fahrenheit.\nOutput: a list of strings with temperature values in Celsius.\nFunctionality: The transformation converts each Fahrenheit temperature to Celsius using the formula (F - 32) * 5/9 and outputs the result as a list with temperatures expressed in Celsius.\nExample: Input: ['65 fahrenheit', '95 fahrenheit', '120 fahrenheit', '320 fahrenheit', '5 fahrenheit']; output: ['18.3333 celsius', '35. celsius', '48.8889 celsius', '160. celsius', '-15. celsius']"}
{"id": "113-2", "oq_id": 113, "desc": "Input: a list of string values, with numerical values followed by a temperature unit in each element.\nOutput: a list of string values representing temperature conversion values.\nFunctionality: The transformation calculates the Celsius equivalent of each Fahrenheit temperature given in the sequence using the formula (Fahrenheit - 32) * 5/9, and formats the converted temperature as a string in the result list.\nExample: Input: ['10 fahrenheit', '40 fahrenheit', '200 fahrenheit', '270 fahrenheit', '80 fahrenheit']; output: ['-12.2222 celsius', '4.44444 celsius', '93.3333 celsius', '132.222 celsius', '26.6667 celsius']"}
{"id": "113-0", "oq_id": 113, "desc": "Input: a list of string values, with values in the format \"X fahrenheit\" where X is a numerical value.\nOutput: a list of strings representing the corresponding temperatures in Celsius, formatted as \"-X.XXXXX celsius\".\n\nFunctionality: The transformation converts each Fahrenheit temperature to Celsius using the formula (Fahrenheit - 32) * 5/9, rounds the result to five decimal places, and outputs the result as a string in the format \"-X.XXXXX celsius\".\n\nExample: Input: ['25 fahrenheit', '75 fahrenheit', '180 fahrenheit', '210 fahrenheit', '30 fahrenheit']; output: ['-3.88889 celsius', '23.8889 celsius', '82.2222 celsius', '98.8889 celsius', '-1.11111 celsius']"}
{"id": "113-1", "oq_id": 113, "desc": "Input: a list of string values, where each element contains a numerical value followed by a temperature unit (fahrenheit).\nOutput: a list of strings with the numerical value converted to celsius and rounded to 5 decimal places.\n\nFunctionality: The transformation converts the fahrenheit temperature to celsius for each element in the given sequence using the formula (\u00b0F - 32) * 5/9, and rounds the result to 5 decimal places, then formats it as a string with the temperature unit celsius.\nExample: Input: ['50 fahrenheit', '90 fahrenheit', '280 fahrenheit', '15 fahrenheit', '300 fahrenheit']; output: ['10. celsius', '32.2222 celsius', '137.778 celsius', '-9.44444 celsius', '148.889 celsius']"}
{"id": "113-5", "oq_id": 113, "desc": "Input: a list of string values, with temperature values in fahrenheit format in each element.\nOutput: a list of string values, with temperature values converted to celsius format.\nFunctionality: The transformation converts each temperature value from fahrenheit to celsius using the formula (Fahrenheit - 32) * 5/9, and formats the result as a string in the output list.\nExample: Input: ['70 fahrenheit', '55 fahrenheit', '240 fahrenheit', '135 fahrenheit', '175 fahrenheit']; output: ['21.1111 celsius', '12.7778 celsius', '115.556 celsius', '57.2222 celsius', '79.4444 celsius']"}
{"id": "113-4", "oq_id": 113, "desc": "Input: a list of string values, with temperature values in fahrenheit format in each element.\nOutput: a list of string values, with temperature values converted to celsius format.\nFunctionality: The transformation converts each temperature value from fahrenheit to celsius using the formula (Fahrenheit - 32) * 5/9, and formats the result with 4 decimal points, then output the result as a list of strings.\nExample: Input: ['85 fahrenheit', '110 fahrenheit', '260 fahrenheit', '150 fahrenheit', '45 fahrenheit']; output: ['29.4444 celsius', '43.3333 celsius', '126.667 celsius', '65.5556 celsius', '7.22222 celsius']"}
{"id": "113-6", "oq_id": 113, "desc": "Input: a list of string values, each containing a numerical value followed by \"fahrenheit\".\nOutput: a list of string values, each formatted as a numerical value followed by \"celsius\".\nFunctionality: The transformation converts each fahrenheit temperature to celsius using the formula (Fahrenheit - 32) * 5/9, and formats the result with \"celsius\" appended.\nExample: Input: ['115 fahrenheit', '210 fahrenheit', '165 fahrenheit', '310 fahrenheit', '250 fahrenheit']; output: ['46.1111 celsius', '98.8889 celsius', '73.8889 celsius', '154.444 celsius', '121.111 celsius']"}
{"id": "113-7", "oq_id": 113, "desc": "Input: a list of string values, each containing a numerical value followed by \"fahrenheit\".\nOutput: a list of string values, each formatted as a numerical value followed by \"celsius\".\nFunctionality: The transformation converts each fahrenheit temperature to celsius using the formula (Fahrenheit - 32) * 5/9, and formats the result with one decimal point.\nExample: Input: ['155 fahrenheit', '20 fahrenheit', '95 fahrenheit', '45 fahrenheit', '200 fahrenheit']; output: ['68.3 celsius', '-6.7 celsius', '35. celsius', '7.2 celsius', '93.3 celsius']"}
{"id": "114-9", "oq_id": 114, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts grams to cups for each element in the given sequence using a conversion factor, and outputs the result as a new list of strings.\nExample: Input: ['10 grams', '40 grams', '80 grams', '88 grams', '99 grams']; output: ['0.04227 cups', '0.16907 cups', '0.33814 cups', '0.37195 cups', '0.41845 cups']"}
{"id": "114-8", "oq_id": 114, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts grams to cups for each element in the given sequence using a conversion factor, and outputs the result as a new list of formatted strings.\nExample: Input: ['12 grams', '35 grams', '75 grams', '85 grams', '98 grams']; output: ['0.05072 cups', '0.14794 cups', '0.31701 cups', '0.35927 cups', '0.41422 cups']"}
{"id": "114-6", "oq_id": 114, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing the converted measurement in cups.\nFunctionality: The transformation converts the numerical values from grams to cups for each element in the given sequence, and outputs the result as a list of strings with the converted values.\nExample: Input: ['6 grams', '25 grams', '70 grams', '95 grams']; output: ['0.02536 cups', '0.10567 cups', '0.29587 cups', '0.40154 cups']"}
{"id": "114-7", "oq_id": 114, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts grams to cups for each numerical value in the given sequence and outputs the result as a list of strings.\nExample: Input: ['9 grams', '30 grams', '65 grams', '80 grams', '90 grams']; output: ['0.03804 cups', '0.12680 cups', '0.27474 cups', '0.33814 cups', '0.38041 cups']"}
{"id": "114-5", "oq_id": 114, "desc": "Input: a list of string values, with numerical values followed by \"grams\" in each element.\nOutput: a list of string values, with the numerical values converted to cups.\nFunctionality: The transformation converts the numeric value from grams to cups for each element in the given sequence and formats the result as a string in the output list.\nExample: Input: ['7 grams', '22 grams', '55 grams', '85 grams', '100 grams']; output: ['0.02959 cups', '0.09299 cups', '0.23247 cups', '0.35927 cups', '0.42268 cups']"}
{"id": "114-4", "oq_id": 114, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts grams to cups for each numerical value in the given sequence and outputs the result as a list of strings.\nExample: Input: ['4 grams', '18 grams', '45 grams', '75 grams', '95 grams']; output: ['0.01691 cups', '0.07608 cups', '0.19020 cups', '0.31701 cups', '0.40154 cups']"}
{"id": "114-0", "oq_id": 114, "desc": "Input: a list of string values, each containing a quantity with a unit of measurement.\nOutput: a list of string values, each containing a quantity converted to cups.\n\nFunctionality: The transformation converts the quantity from grams to cups for each element in the given sequence, providing the result in the same format as the input.\nExample: Input: ['100 grams', '75 grams', '30 grams', '50 grams']; output: ['0.42268 cups', '0.31701 cups', '0.12680 cups', '0.21134 cups']"}
{"id": "114-1", "oq_id": 114, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts grams to cups for each element in the given sequence using a conversion factor, and outputs the converted values as strings.\nExample: Input: ['5 grams', '20 grams', '60 grams', '45 grams', '80 grams']; output: ['0.02113 cups', '0.08454 cups', '0.25361 cups', '0.19020 cups', '0.33814 cups']"}
{"id": "114-3", "oq_id": 114, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts grams to cups for each numerical value in the given sequence and outputs the result as a list of strings.\nExample: Input: ['1 gram', '8 grams', '35 grams', '65 grams', '90 grams']; output: ['0.00423 cups', '0.03381 cups', '0.14794 cups', '0.27474 cups', '0.38041 cups']"}
{"id": "114-2", "oq_id": 114, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values representing the converted units.\nFunctionality: The transformation converts grams to cups for each element in the given sequence using a conversion factor, and outputs the result as a new list of formatted strings.\nExample: Input: ['3 grams', '12 grams', '40 grams', '55 grams', '70 grams']; output: ['0.01268 cups', '0.05072 cups', '0.16907 cups', '0.23247 cups', '0.29587 cups']"}
{"id": "115-9", "oq_id": 115, "desc": "Input: a list of string values, each element containing a numerical value followed by the word \"feet\".\nOutput: a list of string values, each element containing the corresponding value in inches followed by the word \"inches\".\nFunctionality: The transformation converts each numerical value in feet to inches by multiplying it by 12, and formats the result as a string in the output list with \" inches\" appended.\nExample: Input: ['13 feet', '26 feet', '39 feet', '52 feet', '65 feet']; output: ['156 inches', '312 inches', '468 inches', '624 inches', '780 inches']"}
{"id": "115-8", "oq_id": 115, "desc": "Input: a list of string values, with numerical values followed by a space and the word \"feet\" in each element.\nOutput: a list of string values, where each element represents the same distance in inches instead of feet.\n\nFunctionality: The transformation converts each numeric value from feet to inches by multiplying it by 12, and formats the result as a string in the output list with the word \"inches\" appended.\n\nExample: Input: ['50 feet', '100 feet', '150 feet', '200 feet', '250 feet']; output: ['600 inches', '1200 inches', '1800 inches', '2400 inches', '3000 inches']"}
{"id": "115-5", "oq_id": 115, "desc": "Input: a list of string values, each element containing a numerical value followed by the word \"feet\".\nOutput: a list of string values, each element containing the numerical value converted from feet to inches followed by the word \"inches\".\nFunctionality: The transformation converts each numerical value from feet to inches by multiplying it by 12, then formats the result as a string in the output list.\nExample: Input: ['18 feet', '27 feet', '36 feet', '45 feet', '54 feet']; output: ['216 inches', '324 inches', '432 inches', '540 inches', '648 inches']"}
{"id": "115-4", "oq_id": 115, "desc": "Input: a list of string values, with numerical values followed by the unit \"feet\" in each element.\nOutput: a list of string values, with numerical values followed by the unit \"inches\" in each element.\nFunctionality: The transformation converts the numerical value in each element from feet to inches by multiplying it by 12, then formats the result as a string followed by the unit \"inches\" in the output list.\nExample: Input: ['3 feet', '6 feet', '9 feet', '12 feet', '15 feet']; output: ['36 inches', '72 inches', '108 inches', '144 inches', '180 inches']"}
{"id": "115-6", "oq_id": 115, "desc": "Input: a list of string values, with numerical values followed by 'feet'.\nOutput: a list of string values, with numerical values followed by 'inches'.\nFunctionality: The transformation converts each numerical value from feet to inches by multiplying it by 12, and outputs the result as a list.\nExample: Input: ['7 feet', '14 feet', '21 feet', '28 feet', '35 feet']; output: ['84 inches', '168 inches', '252 inches', '336 inches', '420 inches']"}
{"id": "115-7", "oq_id": 115, "desc": "Input: a list of string values, each element containing a numerical value followed by the word \"feet\".\nOutput: a list of string values, each element containing the numerical value converted from feet to inches followed by the word \"inches\".\nFunctionality: The transformation converts each numerical value from feet to inches by multiplying it by 12, then formats the result as a string in the output list.\nExample: Input: ['4 feet', '8 feet', '12 feet', '16 feet', '20 feet']; output: ['48 inches', '96 inches', '144 inches', '192 inches', '240 inches']"}
{"id": "115-3", "oq_id": 115, "desc": "Input: a list of string values, each element containing a numerical value followed by the word \"feet\".\nOutput: a list of string values, each element containing the numerical value converted from feet to inches followed by the word \"inches\".\nFunctionality: The transformation converts each numerical value from feet to inches by multiplying it by 12, then formats the result as a string in the output list.\nExample: Input: ['12 feet', '24 feet', '36 feet', '48 feet', '60 feet']; output: ['144 inches', '288 inches', '432 inches', '576 inches', '720 inches']"}
{"id": "115-2", "oq_id": 115, "desc": "Input: a list of string values, each element containing a numerical value followed by the word \"feet\".\nOutput: a list of string values, each element representing the numerical value converted from feet to inches.\n\nFunctionality: The transformation converts each numerical value from feet to inches by multiplying it by 12, and formats the result as a string with \"inches\" appended.\nExample: Input: ['8 feet', '16 feet', '24 feet', '32 feet', '40 feet']; output: ['96 inches', '192 inches', '288 inches', '384 inches', '480 inches']"}
{"id": "115-0", "oq_id": 115, "desc": "Input: a list of string values, with numerical values followed by 'feet' in each element.\nOutput: a list of string values, with numerical values converted to inches.\nFunctionality: The transformation converts the numerical value from feet to inches by multiplying it by 12, and appends 'inches' to the result list.\nExample: Input: ['10 feet', '15 feet', '20 feet', '25 feet', '30 feet']; output: ['120 inches', '180 inches', '240 inches', '300 inches', '360 inches']"}
{"id": "115-1", "oq_id": 115, "desc": "Input: a list of string values, with numerical values followed by 'feet' in each element.\nOutput: a list of string values, with numerical values converted from feet to inches.\nFunctionality: The transformation converts the numerical value from feet to inches by multiplying it by 12, appending 'inches' to the result, and outputting the new list.\nExample: Input: ['5 feet', '10 feet', '15 feet', '20 feet', '25 feet']; output: ['60 inches', '120 inches', '180 inches', '240 inches', '300 inches']"}
{"id": "116-8", "oq_id": 116, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (mm).\nOutput: a list of string values, with numerical values converted from millimeters to centimeters and formatted as 'X.X cm'.\nFunctionality: The transformation converts each numerical value from millimeters to centimeters by dividing it by 10, and formats the result with a precision of one decimal place followed by 'cm'.\nExample: Input: ['27 mm', '83 mm', '39 mm', '123 mm', '53 mm']; output: ['2.7 cm', '8.3 cm', '3.9 cm', '12.3 cm', '5.3 cm']"}
{"id": "116-9", "oq_id": 116, "desc": "Input: a list of string values, with numerical values followed by a unit (mm).\nOutput: a list of string values, with numerical values converted from mm to cm.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from mm to cm by dividing by 10, and then formats the result as a string in the output list with the \"cm\" unit.\nExample: Input: ['6 mm', '100 mm', '76 mm', '11 mm', '84 mm']; output: ['0.6 cm', '10.0 cm', '7.6 cm', '1.1 cm', '8.4 cm']"}
{"id": "116-4", "oq_id": 116, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (mm).\nOutput: a list of string values, with numerical values converted from mm to cm.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from mm to cm by dividing by 10, and appends the converted value with \"cm\" unit in the result list.\n\nExample: Input: ['45 mm', '81 mm', '29 mm', '4 mm', '67 mm']; output: ['4.5 cm', '8.1 cm', '2.9 cm', '0.4 cm', '6.7 cm']"}
{"id": "116-5", "oq_id": 116, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (mm).\nOutput: a list of string values with numerical values converted from mm to cm.\nFunctionality: The transformation involves extracting the numerical value from each element in the given sequence, converting mm to cm by dividing by 10, and then formatting the result as a string in the output list.\nExample: Input: ['99 mm', '25 mm', '73 mm', '14 mm', '47 mm']; output: ['9.9 cm', '2.5 cm', '7.3 cm', '1.4 cm', '4.7 cm']"}
{"id": "116-7", "oq_id": 116, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (mm).\nOutput: a list of string values with numerical values converted from mm to cm, while keeping the same format.\nFunctionality: The transformation converts each numerical value from millimeters (mm) to centimeters (cm) by dividing the value by 10, and keeps the same unit format in the result list.\nExample: Input: ['19 mm', '42 mm', '70 mm', '56 mm', '108 mm']; output: ['1.9 cm', '4.2 cm', '7.0 cm', '5.6 cm', '10.8 cm']"}
{"id": "116-6", "oq_id": 116, "desc": "Input: a list of string values, with measurements in mm.\nOutput: a list of string values, with measurements converted to cm.\nFunctionality: The transformation converts each measurement from millimeters to centimeters by dividing by 10, and appends the result as a string formatted in cm to the output list.\nExample: Input: ['8 mm', '37 mm', '58 mm', '91 mm', '64 mm']; output: ['0.8 cm', '3.7 cm', '5.8 cm', '9.1 cm', '6.4 cm']"}
{"id": "116-2", "oq_id": 116, "desc": "Input: a list of string values, with numerical values followed by \"mm\" in each element.\nOutput: a list of string values with numerical values converted from mm to cm format.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts mm to cm by dividing by 10, and then formats the result as a string in the output list.\nExample: Input: ['61 mm', '89 mm', '7 mm', '33 mm', '122 mm']; output: ['6.1 cm', '8.9 cm', '0.7 cm', '3.3 cm', '12.2 cm']"}
{"id": "116-3", "oq_id": 116, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (mm).\nOutput: a list of string values with numerical values converted from mm to cm.\n\nFunctionality: The transformation involves extracting the numerical value from each element in the given sequence, converting mm to cm by dividing by 10, and then formatting the result as a string in the output list.\n\nExample: Input: ['17 mm', '30 mm', '111 mm', '55 mm', '10 mm']; output: ['1.7 cm', '3.0 cm', '11.1 cm', '5.5 cm', '1.0 cm']"}
{"id": "116-1", "oq_id": 116, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (mm).\nOutput: a list of string values, with numerical values converted from mm to cm.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from mm to cm by dividing by 10, and appends the converted value with \"cm\" unit in the result list.\n\nExample: Input: ['2 mm', '75 mm', '48 mm', '96 mm', '12 mm']; output: ['0.2 cm', '7.5 cm', '4.8 cm', '9.6 cm', '1.2 cm']"}
{"id": "116-0", "oq_id": 116, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (mm).\nOutput: a list of string values, where each numerical value is converted from millimeters to centimeters and formatted with the unit of measurement (cm).\nFunctionality: The transformation converts each numerical value from millimeters to centimeters by dividing it by 10, and then formats the result with the unit of measurement (cm).\nExample: Input: ['15 mm', '87 mm', '36 mm', '50 mm', '104 mm']; output: ['1.5 cm', '8.7 cm', '3.6 cm', '5.0 cm', '10.4 cm']"}
{"id": "117-8", "oq_id": 117, "desc": "Input: a list of string values, each containing a number followed by \"square feet\".\nOutput: a list of string values, each containing the number converted from square feet to acres.\nFunctionality: The transformation converts each number from square feet to acres using the conversion factor of 1 square foot = 0.00002296 acres.\nExample: Input: ['540 square feet', '680 square feet', '300 square feet', '920 square feet', '1100 square feet']; output: ['0.01239669 acres', '0.01561065 acres', '0.00688705 acres', '0.02112029 acres', '0.02525253 acres']"}
{"id": "117-9", "oq_id": 117, "desc": "Input: a list of string values, each containing a numerical value followed by the text 'square feet'.\nOutput: a list of string values, each representing the numerical value converted to acres.\nFunctionality: The transformation converts each numerical value from square feet to acres using the conversion factor 0.0000229568411, and formats the result as a string in the output list.\nExample: Input: ['660 square feet', '630 square feet', '430 square feet', '840 square feet', '1120 square feet']; output: ['0.01515152 acres', '0.01446281 acres', '0.00987144 acres', '0.01928375 acres', '0.02571166 acres']"}
{"id": "117-7", "oq_id": 117, "desc": "Input: a list of string values, with values in square feet format.\nOutput: a list of string values, with values in acres format.\nFunctionality: The transformation converts square feet values to acres by dividing each value by 43560 (since 1 acre is equivalent to 43560 square feet).\nExample: Input: ['400 square feet', '730 square feet', '870 square feet', '1400 square feet', '1600 square feet']; output: ['0.00918274 acres', '0.01675849 acres', '0.01997245 acres', '0.03213958 acres', '0.03673095 acres']"}
{"id": "117-6", "oq_id": 117, "desc": "Input: a list of string values, with values in square feet format.\nOutput: a list of string values, with values in acres format.\nFunctionality: The transformation converts square feet values to acres by dividing each value by 43560 (since 1 acre is equivalent to 43560 square feet).\nExample: Input: ['890 square feet', '100 square feet', '560 square feet', '1250 square feet', '2000 square feet']; output: ['0.02043159 acres', '0.00229568 acres', '0.01285583 acres', '0.02869605 acres', '0.04591368 acres']"}
{"id": "117-4", "oq_id": 117, "desc": "Input: a list of string values, each element containing a numerical value followed by \"square feet\".\nOutput: a list of string values, each element containing the corresponding value in acres.\nFunctionality: The transformation converts the square footage to acres by dividing each numerical value by 43560, and formats the result as a string with the converted value and \"acres\".\nExample: Input: ['300 square feet', '640 square feet', '850 square feet', '1700 square feet', '980 square feet']; output: ['0.00688705 acres', '0.01469238 acres', '0.01951331 acres', '0.03902663 acres', '0.02249770 acres']"}
{"id": "117-5", "oq_id": 117, "desc": "Input: a list of string values, with values in square feet format.\nOutput: a list of string values, with values in acres format.\nFunctionality: The transformation converts square feet values to acres by multiplying each value by 0.000022956.\nExample: Input: ['920 square feet', '780 square feet', '430 square feet', '2700 square feet', '1500 square feet']; output: ['0.02112029 acres', '0.01790634 acres', '0.00987144 acres', '0.06198347 acres', '0.03443526 acres']"}
{"id": "117-1", "oq_id": 117, "desc": "Input: a list of string values, each containing a number followed by \"square feet\".\nOutput: a list of string values, each containing the corresponding area in acres.\nFunctionality: The transformation converts the area in square feet to acres by dividing the number by 43560 (the number of square feet in an acre), rounding to 8 decimal places, and appending \"acres\" to the result.\nExample: Input: ['800 square feet', '150 square feet', '750 square feet', '320 square feet', '1000 square feet']; output: ['0.01836547 acres', '0.00344353 acres', '0.01721763 acres', '0.00734619 acres', '0.02295684 acres']"}
{"id": "117-0", "oq_id": 117, "desc": "Input: a list of string values, each element containing a numerical value followed by \"square feet\".\nOutput: a list of string values, each element containing the corresponding value in acres.\nFunctionality: The transformation converts the square footage to acres by dividing each numerical value by 43560, and formats the result as a string with the converted value and \"acres\".\nExample: Input: ['600 square feet', '350 square feet', '980 square feet', '2010 square feet', '500 square feet']; output: ['0.01377410 acres', '0.00803489 acres', '0.02249770 acres', '0.04614325 acres', '0.01147842 acres']"}
{"id": "117-2", "oq_id": 117, "desc": "Input: a list of string values, with values in square feet format.\nOutput: a list of string values, with values in acres format.\nFunctionality: The transformation converts square feet values to acres by dividing each value by 43560 (since 1 acre is equivalent to 43560 square feet).\nExample: Input: ['670 square feet', '420 square feet', '900 square feet', '1800 square feet', '1230 square feet']; output: ['0.01538108 acres', '0.00964187 acres', '0.02066116 acres', '0.04132231 acres', '0.02823691 acres']"}
{"id": "117-3", "oq_id": 117, "desc": "Input: a list of string values, with values in square feet format.\nOutput: a list of string values, with values in acres format.\nFunctionality: The transformation converts square feet values to acres by dividing each value by 43560 (since 1 acre is equivalent to 43560 square feet).\nExample: Input: ['560 square feet', '760 square feet', '950 square feet', '1100 square feet', '2400 square feet']; output: ['0.01285583 acres', '0.01744720 acres', '0.02180900 acres', '0.02525253 acres', '0.05509642 acres']"}
{"id": "118-2", "oq_id": 118, "desc": "Input: a list of string values, each containing a temperature in Celsius.\nOutput: a list of string values, each containing the corresponding temperature in Fahrenheit.\nFunctionality: The transformation converts each Celsius temperature to Fahrenheit using the formula (C * 9/5) + 32 and formats the result as a string in the new list.\nExample: Input: ['-15 Celsius', '-8 Celsius', '3.5 Celsius', '40 Celsius', '47.2 Celsius']; output: ['5 Fahrenheit', '17.6 Fahrenheit', '38.3 Fahrenheit', '104 Fahrenheit', '117 Fahrenheit']"}
{"id": "118-3", "oq_id": 118, "desc": "Input: a list of strings containing temperature values in Celsius.\nOutput: a list of strings with temperature values converted to Fahrenheit.\nFunctionality: The transformation converts each Celsius temperature to Fahrenheit using the formula (Celsius * 9/5) + 32, and outputs the result as a list with temperatures expressed in Fahrenheit.\nExample: Input: ['5 Celsius', '12.3 Celsius', '22.7 Celsius', '-3.8 Celsius', '36.6 Celsius']; output: ['41 Fahrenheit', '54.1 Fahrenheit', '72.9 Fahrenheit', '25.2 Fahrenheit', '97.9 Fahrenheit']"}
{"id": "118-1", "oq_id": 118, "desc": "Input: a list of strings containing temperature values in Celsius.\nOutput: a list of strings with temperature values converted to Fahrenheit.\nFunctionality: The transformation converts each Celsius temperature to Fahrenheit using the formula (Celsius * 9/5) + 32, and outputs the result as a list with the temperature values in Fahrenheit.\nExample: Input: ['-20 Celsius', '-10.5 Celsius', '0.3 Celsius', '25.6 Celsius', '38.9 Celsius']; output: ['-4 Fahrenheit', '13.1 Fahrenheit', '32.5 Fahrenheit', '78.1 Fahrenheit', '102 Fahrenheit']"}
{"id": "118-0", "oq_id": 118, "desc": "Input: a list of string values, with temperature values in the format 'number Celsius'.\nOutput: a list of string values, with temperature values converted to Fahrenheit format.\n\nFunctionality: The transformation converts each Celsius temperature to Fahrenheit by using the formula (Celsius * 9/5) + 32, and outputs the result as a list with temperature values in Fahrenheit format.\n\nExample: Input: ['10 Celsius', '15 Celsius', '20 Celsius', '-5.5 Celsius', '32.8 Celsius']; output: ['50 Fahrenheit', '59 Fahrenheit', '68 Fahrenheit', '22.1 Fahrenheit', '91 Fahrenheit']"}
{"id": "118-4", "oq_id": 118, "desc": "Input: a list of string values, each containing a numerical value followed by a temperature unit.\nOutput: a list of strings with the numerical values converted to Fahrenheit.\n\nFunctionality: The transformation converts each Celsius temperature to Fahrenheit using the formula (\u00b0C \u00d7 9/5) + 32, and formats the result as a string with the new temperature in Fahrenheit.\n\nExample: Input: ['-3.33 Celsius', '8.88 Celsius', '16.11 Celsius', '30.44 Celsius', '43.77 Celsius']; output: ['26 Fahrenheit', '48 Fahrenheit', '61 Fahrenheit', '86.8 Fahrenheit', '110.8 Fahrenheit']"}
{"id": "118-5", "oq_id": 118, "desc": "Input: a list of string values, with temperature values in Celsius format in each element.\nOutput: a list of string values, with temperature values in Fahrenheit format in each element.\nFunctionality: The transformation converts each temperature value from Celsius to Fahrenheit using the formula `(C * 9/5) + 32`, and then formats the result as a string in the output list.\nExample: Input: ['0 Celsius', '30 Celsius', '55.5 Celsius', '-4.44 Celsius', '23.33 Celsius']; output: ['32 Fahrenheit', '86 Fahrenheit', '131.9 Fahrenheit', '24 Fahrenheit', '74 Fahrenheit']"}
{"id": "118-7", "oq_id": 118, "desc": "Input: a list of string values, with a numerical value followed by a unit of temperature in each element.\nOutput: a list of string values with the temperature converted to Fahrenheit.\nFunctionality: The transformation converts Celsius temperatures to Fahrenheit by using the formula (Celsius * 9/5) + 32, and formats the result in the output list.\nExample: Input: ['2.5 Celsius', '3.8 Celsius', '14.2 Celsius', '-8.6 Celsius', '27.1 Celsius']; output: ['36.5 Fahrenheit', '38.8 Fahrenheit', '57.6 Fahrenheit', '16.5 Fahrenheit', '80.8 Fahrenheit']"}
{"id": "118-6", "oq_id": 118, "desc": "Input: a list of string values, each containing a number followed by a unit (Celsius).\nOutput: a list of string values, each containing the equivalent temperature in Fahrenheit.\nFunctionality: The transformation converts each Celsius value to Fahrenheit using the formula (Celsius * 9/5) + 32, and outputs the result as a formatted string in the result list.\nExample: Input: ['-1 Celsius', '9.7 Celsius', '19.6 Celsius', '-6.2 Celsius', '33.9 Celsius']; output: ['30.2 Fahrenheit', '49.5 Fahrenheit', '67.3 Fahrenheit', '20.8 Fahrenheit', '93 Fahrenheit']"}
{"id": "118-8", "oq_id": 118, "desc": "Input: a list of strings with numerical values followed by a temperature unit (Celsius).\nOutput: a list of strings with numerical values converted to Fahrenheit and appended with the temperature unit (Fahrenheit).\n\nFunctionality: The transformation converts each Celsius temperature to Fahrenheit using the formula (C \u00d7 9/5) + 32, and formats the result as a string in the output list.\n\nExample: Input: ['-7.8 Celsius', '6.6 Celsius', '11.9 Celsius', '29.3 Celsius', '42.7 Celsius']; output: ['18 Fahrenheit', '43.9 Fahrenheit', '53.4 Fahrenheit', '84.7 Fahrenheit', '108.9 Fahrenheit']"}
{"id": "118-9", "oq_id": 118, "desc": "Input: a list of strings with numerical values followed by a temperature unit (Celsius).\nOutput: a list of strings with numerical values followed by the temperature unit in Fahrenheit.\nFunctionality: The transformation converts each Celsius temperature to Fahrenheit using the formula (Celsius * 9/5) + 32, and output the result in the same format as the input.\nExample: Input: ['-4.1 Celsius', '7.4 Celsius', '13.9 Celsius', '24.4 Celsius', '41.6 Celsius']; output: ['24.6 Fahrenheit', '45.3 Fahrenheit', '57 Fahrenheit', '75.9 Fahrenheit', '106.9 Fahrenheit']"}
{"id": "119-1", "oq_id": 119, "desc": "Input: a list of string values, each containing a numerical value and \"inch\".\nOutput: a list of string values with the numerical value converted from inches to centimeters.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from inches to centimeters using the conversion factor 2.54, and formats each result as a string with \"cm\" as the unit.\n\nExample: Input: ['12 inch', '56 inch', '765 inch', '34 inch', '91 inch']; output: ['30.48 cm', '142.24 cm', '1943.10 cm', '86.36 cm', '231.14 cm']"}
{"id": "119-0", "oq_id": 119, "desc": "Input: a list of string values, with measurements in inches.\nOutput: a list of string values, with measurements converted to centimeters.\nFunctionality: The transformation extracts the numerical value representing inches from each element in the given sequence, converts it to centimeters by multiplying by 2.54, and formats the result as a string in the output list with \"cm\" appended.\nExample: Input: ['5 inch', '17 inch', '302 inch', '8 inch', '50 inch']; output: ['12.70 cm', '43.18 cm', '767.08 cm', '20.32 cm', '127.00 cm']"}
{"id": "119-2", "oq_id": 119, "desc": "Input: a list of string values, each containing a numerical value and the unit \"inch\".\nOutput: a list of string values, each representing the corresponding value converted to centimeters.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from inches to centimeters using the conversion factor 2.54, and formats each result as a string in the output list with the unit \"cm\".\nExample: Input: ['3 inch', '45 inch', '654 inch', '28 inch', '19 inch']; output: ['7.62 cm', '114.30 cm', '1661.16 cm', '71.12 cm', '48.26 cm']"}
{"id": "119-3", "oq_id": 119, "desc": "Input: a list of string values, each containing a numerical value and \"inch\" unit.\nOutput: a list of string values, each representing the corresponding value converted to centimeters with \"cm\" unit.\n\nFunctionality: The transformation converts each numerical value from inches to centimeters by multiplying it by 2.54, then formats the result as a string with \"cm\" unit.\n\nExample: Input: ['10 inch', '78 inch', '543 inch', '42 inch', '73 inch']; output: ['25.40 cm', '198.12 cm', '1379.22 cm', '106.68 cm', '185.42 cm']"}
{"id": "119-7", "oq_id": 119, "desc": "Input: a list of string values, each containing a numerical value and \"inch\".\nOutput: a list of string values with the numerical value converted from inches to centimeters.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from inches to centimeters by multiplying by 2.54, and formats each converted value as a string with \"cm\" as the unit in the result list.\n\nExample: Input: ['6 inch', '39 inch', '543 inch', '23 inch', '60 inch']; output: ['15.24 cm', '99.06 cm', '1379.22 cm', '58.42 cm', '152.40 cm']"}
{"id": "119-6", "oq_id": 119, "desc": "Input: a list of string values, each containing a numerical value and \"inch\".\nOutput: a list of string values with the numerical value converted from inches to centimeters.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from inches to centimeters using the conversion factor 2.54, and formats each result as a string with \"cm\" as the unit.\n\nExample: Input: ['15 inch', '67 inch', '987 inch', '53 inch', '81 inch']; output: ['38.10 cm', '170.18 cm', '2506.98 cm', '134.62 cm', '205.74 cm']"}
{"id": "119-4", "oq_id": 119, "desc": "Input: a list of string values, each containing a numerical value and \"inch\".\nOutput: a list of string values with the numerical value converted from inches to centimeters.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from inches to centimeters using the conversion factor 2.54, and formats each result as a string with \"cm\" as the unit.\n\nExample: Input: ['7 inch', '34 inch', '432 inch', '15 inch', '29 inch']; output: ['17.78 cm', '86.36 cm', '1097.28 cm', '38.10 cm', '73.66 cm']"}
{"id": "119-5", "oq_id": 119, "desc": "Input: a list of string values, each containing a numerical value and \"inch\".\nOutput: a list of string values with the numerical value converted from inches to centimeters.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from inches to centimeters by multiplying by 2.54, and formats each converted value as a string with \"cm\" as the unit in the result list.\n\nExample: Input: ['20 inch', '92 inch', '876 inch', '62 inch', '88 inch']; output: ['50.80 cm', '233.68 cm', '2225.04 cm', '157.48 cm', '223.52 cm']"}
{"id": "119-8", "oq_id": 119, "desc": "Input: a list of string values, each containing a numerical value and \"inch\" unit.\nOutput: a list of string values, each representing the corresponding value converted to centimeters with \"cm\" unit.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from inches to centimeters by multiplying by 2.54, and formats the result with \"cm\" unit.\n\nExample: Input: ['18 inch', '80 inch', '754 inch', '48 inch', '100 inch']; output: ['45.72 cm', '203.20 cm', '1915.16 cm', '121.92 cm', '254.00 cm']"}
{"id": "119-9", "oq_id": 119, "desc": "Input: a list of string values, with measurements in inches.\nOutput: a list of string values, with measurements converted to centimeters.\nFunctionality: The transformation extracts the numerical value representing inches from each element in the given sequence, converts it to centimeters by multiplying by 2.54, and formats the result as a string in the output list with \"cm\" appended.\nExample: Input: ['2 inch', '51 inch', '345 inch', '20 inch', '42 inch']; output: ['5.08 cm', '129.54 cm', '876.30 cm', '50.80 cm', '106.68 cm']"}
{"id": "120-5", "oq_id": 120, "desc": "Input: a list of string values, with numerical values followed by \"kb\" in each element.\nOutput: a list of string values, where each element represents the numerical value converted from kilobytes to megabytes in the format \"0.## mb\".\nFunctionality: The transformation converts each numerical value from kilobytes to megabytes by dividing it by 1024, then formats the result as a string with \"mb\" appended and rounded to two decimal places.\nExample: Input: ['80 kb', '160 kb', '240 kb', '320 kb', '400 kb']; output: ['0.08 mb', '0.16 mb', '0.24 mb', '0.32 mb', '0.4 mb']"}
{"id": "120-4", "oq_id": 120, "desc": "Input: a list of string values, each containing a numerical value and \"kb\".\nOutput: a list of string values with the numerical value converted from kb to mb.\nFunctionality: The transformation involves converting kilobytes (kb) to megabytes (mb) by dividing each numerical value by 1000 and adding \"mb\" to the end of the result.\nExample: Input: ['800 kb', '900 kb', '950 kb', '1000 kb', '1100 kb']; output: ['0.8 mb', '0.9 mb', '0.95 mb', '1.0 mb', '1.1 mb']"}
{"id": "120-6", "oq_id": 120, "desc": "Input: a list of string values, with numerical values followed by \"kb\" in each element.\nOutput: a list of string values, where each numerical value is converted from kilobytes to megabytes and formatted as \"0.0 mb\".\nFunctionality: The transformation converts each numerical value from kilobytes to megabytes by dividing by 1024, and formats the result with \"0.0 mb\" notation.\nExample: Input: ['45 kb', '50 kb', '55 kb', '60 kb', '65 kb']; output: ['0.045 mb', '0.05 mb', '0.055 mb', '0.06 mb', '0.065 mb']"}
{"id": "120-7", "oq_id": 120, "desc": "Input: a list of string values, with numerical values followed by \"kb\" in each element.\nOutput: a list of string values, where each numerical value is converted from kilobytes to megabytes and formatted as a string with \"mb\" at the end.\nFunctionality: The transformation converts each numerical value from kilobytes to megabytes (divide by 1000), formats it as a string with \"mb\" at the end, and outputs the result as a list.\nExample: Input: ['25 kb', '30 kb', '35 kb', '40 kb', '45 kb']; output: ['0.025 mb', '0.03 mb', '0.035 mb', '0.04 mb', '0.045 mb']"}
{"id": "120-3", "oq_id": 120, "desc": "Input: a list of string values, with numerical values followed by \"kb\" in each element.\nOutput: a list of string values, where each numerical value is converted from kilobytes to megabytes and formatted as a string with \"mb\" at the end.\nFunctionality: The transformation converts each numerical value from kilobytes to megabytes (divide by 1000), formats it as a string with \"mb\" at the end, and outputs the result as a list.\nExample: Input: ['75 kb', '125 kb', '175 kb', '225 kb', '275 kb']; output: ['0.075 mb', '0.125 mb', '0.175 mb', '0.225 mb', '0.275 mb']"}
{"id": "120-2", "oq_id": 120, "desc": "Input: a list of string values, with numerical values followed by 'kb' in each element.\nOutput: a list of string values, where each element represents the equivalent value in 'mb'.\nFunctionality: The transformation converts kilobytes (kb) to megabytes (mb) by dividing each numerical value by 1000 and appending 'mb' to the result, outputting the converted values in a list.\nExample: Input: ['1 kb', '5 kb', '10 kb', '15 kb', '20 kb']; output: ['0.001 mb', '0.005 mb', '0.01 mb', '0.015 mb', '0.02 mb']"}
{"id": "120-0", "oq_id": 120, "desc": "Input: a list of string values, with numerical values followed by \"kb\" in each element.\nOutput: a list of string values, where numerical values are converted from kilobytes to megabytes and formatted with \"mb\" at the end.\nFunctionality: The transformation converts each numerical value from kilobytes to megabytes by dividing by 1000, and appends \"mb\" to the result.\nExample: Input: ['100 kb', '500 kb', '750 kb', '250 kb', '600 kb']; output: ['0.1 mb', '0.5 mb', '0.75 mb', '0.25 mb', '0.6 mb']"}
{"id": "120-1", "oq_id": 120, "desc": "Input: a list of string values, with numerical values followed by \"kb\" in each element.\nOutput: a list of string values, where each element represents the value converted from kilobytes (kb) to megabytes (mb) with two decimal places.\nFunctionality: The transformation converts each numerical value from kilobytes to megabytes by dividing by 1000, formats the result as a string with two decimal places and appends \"mb\" to it.\nExample: Input: ['10 kb', '20 kb', '30 kb', '40 kb', '50 kb']; output: ['0.01 mb', '0.02 mb', '0.03 mb', '0.04 mb', '0.05 mb']"}
{"id": "120-9", "oq_id": 120, "desc": "Input: a list of string values, with numerical values followed by \"kb\" in each element.\nOutput: a list of string values, where numerical values are converted from kilobytes to megabytes and formatted with \"mb\" at the end.\nFunctionality: The transformation converts each numerical value from kilobytes to megabytes by dividing by 1000, and appends \"mb\" to the result.\nExample: Input: ['300 kb', '450 kb', '600 kb', '750 kb', '900 kb']; output: ['0.3 mb', '0.45 mb', '0.6 mb', '0.75 mb', '0.9 mb']"}
{"id": "120-8", "oq_id": 120, "desc": "Input: a list of string values, with numerical values followed by \"kb\" in each element.\nOutput: a list of string values, where each element represents the value converted from kilobytes (kb) to megabytes (mb) with three decimal places.\nFunctionality: The transformation converts each numerical value from kilobytes to megabytes by dividing by 1000, formats the result as a string with three decimal places and appends \"mb\" to it.\nExample: Input: ['4 kb', '8 kb', '12 kb', '16 kb', '20 kb']; output: ['0.004 mb', '0.008 mb', '0.012 mb', '0.016 mb', '0.02 mb']"}
{"id": "121-6", "oq_id": 121, "desc": "Input: a list of string values, each containing a numerical value and a unit of measurement (ounces).\nOutput: a list of string values representing the corresponding weight in grams.\n\nFunctionality: The transformation converts each weight in ounces to grams by multiplying the weight value by 28.35 (since 1 ounce is approximately equal to 28.35 grams) and formats the result as a string in grams.\n\nExample: Input: ['6 oz', '39 oz', '250 oz', '14 oz', '19 oz']; output: ['170.097 g', '1105.63 g', '7087.38 g', '396.893 g', '538.641 g']"}
{"id": "121-7", "oq_id": 121, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values representing the corresponding weight in grams.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence representing ounces, converts it to grams by multiplying by 28.3495 (1 ounce is approximately 28.3495 grams), and formats each result as a string with \"g\" at the end.\n\nExample: Input: ['8 oz', '48 oz', '280 oz', '20 oz', '38 oz']; output: ['226.796 g', '1360.78 g', '7937.87 g', '566.99 g', '1077.28 g']"}
{"id": "121-5", "oq_id": 121, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values, with numerical values followed by \"g\".\nFunctionality: The transformation converts each numerical value from ounces to grams by multiplying it by 28.35, then appends \"g\" to the result and output as a list.\nExample: Input: ['4 oz', '26 oz', '90 oz', '9 oz', '24 oz']; output: ['113.398 g', '737.088 g', '2551.46 g', '255.146 g', '680.388 g']"}
{"id": "121-4", "oq_id": 121, "desc": "Input: a list of string values, each containing a numerical value and \"oz\" unit.\nOutput: a list of string values, each representing the corresponding weight in grams.\n\nFunctionality: The transformation converts each weight in ounces to grams by multiplying the weight value by 28.3495 (1 ounce is approximately equal to 28.3495 grams) and formats the result as a string in the output list.\n\nExample: Input: ['2 oz', '12 oz', '180 oz', '18 oz', '36 oz']; output: ['56.699 g', '340.194 g', '5102.91 g', '510.291 g', '1020.58 g']"}
{"id": "121-0", "oq_id": 121, "desc": "Input: a list of string values, each containing a numerical value and \"oz\".\nOutput: a list of string values with the numerical value converted from ounces to grams and appended with \"g\".\nFunctionality: The transformation converts each numeric value from ounces to grams using the conversion factor 28.3495, and then formats the result as a string in the output list.\nExample: Input: ['7 oz', '45 oz', '100 oz', '16 oz', '29 oz']; output: ['198.447 g', '1275.73 g', '2834.95 g', '453.592 g', '822.136 g']"}
{"id": "121-1", "oq_id": 121, "desc": "Input: a list of string values, with numerical values and \"oz\" unit in each element.\nOutput: a list of string values representing the weight in grams.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence representing ounces, converts it to grams using the conversion rate of 28.3495 grams per ounce, and formats the result as a string in the output list.\n\nExample: Input: ['1 oz', '55 oz', '270 oz', '8 oz', '42 oz']; output: ['28.3495 g', '1559.22 g', '7654.37 g', '226.796 g', '1190.68 g']"}
{"id": "121-3", "oq_id": 121, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values, with numerical values followed by \"g\" in each element.\nFunctionality: The transformation converts ounces to grams by multiplying each numerical value in the given sequence by 28.3495 and appends \"g\" to the result.\nExample: Input: ['10 oz', '22 oz', '200 oz', '13 oz', '30 oz']; output: ['283.495 g', '623.689 g', '5669.9 g', '368.544 g', '850.486 g']"}
{"id": "121-2", "oq_id": 121, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values, representing the equivalent weight in grams.\nFunctionality: The transformation converts the weight from ounces to grams for each element in the given sequence, and output the result as a list of formatted strings.\nExample: Input: ['5 oz', '33 oz', '150 oz', '25 oz', '17 oz']; output: ['141.748 g', '935.534 g', '4252.43 g', '708.738 g', '481.942 g']"}
{"id": "121-9", "oq_id": 121, "desc": "Input: a list of string values, each containing a numerical value and \"oz\".\nOutput: a list of string values with the numerical value converted from ounces to grams.\n\nFunctionality: The transformation involves converting each numerical value from ounces to grams by multiplying it by 28.35, then adding \"g\" at the end to indicate grams. The output is a list of strings with the converted values in grams.\n\nExample: Input: ['12 oz', '36 oz', '220 oz', '26 oz', '31 oz']; output: ['340.194 g', '1020.58 g', '6236.89 g', '737.088 g', '878.835 g']"}
{"id": "121-8", "oq_id": 121, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values representing the corresponding weight in grams.\n\nFunctionality: The transformation converts each weight in ounces to grams by multiplying the ounce value by 28.35 (since 1 ounce is approximately equal to 28.35 grams) and formats the result as a string in the output list.\n\nExample: Input: ['15 oz', '60 oz', '300 oz', '28 oz', '47 oz']; output: ['425.243 g', '1700.97 g', '8504.86 g', '793.787 g', '1332.45 g']"}
{"id": "122-7", "oq_id": 122, "desc": "Input: a list of string values, each containing a numerical value and \"inch\".\nOutput: a list of string values with the numerical value converted from inches to millimeters.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from inches to millimeters using the conversion factor 25.4, and formats each result as a string with \"mm\" as the unit.\nExample: Input: ['13 inch', '37 inch', '64 inch', '6 inch', '29 inch']; output: ['330.2 mm', '939.8 mm', '1625.6 mm', '152.4 mm', '736.6 mm']"}
{"id": "122-6", "oq_id": 122, "desc": "Input: a list of string values, each containing a numerical value followed by a unit of measurement ('inch').\nOutput: a list of string values, each containing the numerical value converted to millimeters with the unit of measurement ('mm').\nFunctionality: The transformation converts each numerical value from inches to millimeters by multiplying by 25.4 and appends 'mm' to the result.\nExample: Input: ['20 inch', '48 inch', '96 inch', '8 inch', '44 inch']; output: ['508 mm', '1219.2 mm', '2438.4 mm', '203.2 mm', '1117.6 mm']"}
{"id": "122-4", "oq_id": 122, "desc": "Input: a list of strings with measurements in inches.\nOutput: a list of strings with measurements in millimeters.\nFunctionality: The transformation converts each measurement from inches to millimeters by multiplying by 25.4 and formats the result as a string in the output list.\nExample: Input: ['30 inch', '60 inch', '150 inch', '10 inch', '25 inch']; output: ['762 mm', '1524 mm', '3810 mm', '254 mm', '635 mm']"}
{"id": "122-5", "oq_id": 122, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to millimeters.\nFunctionality: The transformation converts each measurement in inches to millimeters by multiplying the inch value by 25.4, and outputs the converted measurements as strings in the result list.\nExample: Input: ['1 inch', '28 inch', '55 inch', '4 inch', '36 inch']; output: ['25.4 mm', '711.2 mm', '1397 mm', '101.6 mm', '914.4 mm']"}
{"id": "122-1", "oq_id": 122, "desc": "Input: a list of string values, with measurements in inches.\nOutput: a list of string values, with measurements converted to millimeters.\nFunctionality: The transformation converts each measurement from inches to millimeters by multiplying it by 25.4, and formats the result as a string in the output list.\nExample: Input: ['7 inch', '55 inch', '123 inch', '6 inch', '17 inch']; output: ['177.8 mm', '1397 mm', '3124.2 mm', '152.4 mm', '431.8 mm']"}
{"id": "122-0", "oq_id": 122, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to millimeters.\nFunctionality: The transformation extracts the numerical value representing inches from each element in the given sequence, converts it to millimeters by multiplying by 25.4, and formats the result as a string in the output list with \"mm\" appended.\nExample: Input: ['2 inch', '20 inch', '100 inch', '8 inch', '33 inch']; output: ['50.8 mm', '508 mm', '2540 mm', '203.2 mm', '838.2 mm']"}
{"id": "122-2", "oq_id": 122, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to millimeters.\nFunctionality: The transformation converts each measurement from inches to millimeters in the given sequence, and output the result as a list.\nExample: Input: ['15 inch', '32 inch', '75 inch', '3 inch', '22 inch']; output: ['381 mm', '812.8 mm', '1905 mm', '76.2 mm', '558.8 mm']"}
{"id": "122-3", "oq_id": 122, "desc": "Input: a list of string values, with measurements in inches.\nOutput: a list of string values, with measurements converted to millimeters.\nFunctionality: The transformation converts each measurement from inches to millimeters by multiplying it by 25.4, and formats the result as a string in the output list.\nExample: Input: ['12 inch', '45 inch', '88 inch', '9 inch', '18 inch']; output: ['304.8 mm', '1143 mm', '2235.2 mm', '228.6 mm', '457.2 mm']"}
{"id": "122-8", "oq_id": 122, "desc": "Input: a list of string values, each containing a number followed by the unit \"inch\".\nOutput: a list of string values, each containing the corresponding number converted to millimeters with the unit \"mm\".\nFunctionality: The transformation involves extracting the numerical value from each element in the given sequence, converting it from inches to millimeters, and storing the result as a string in the output list with the unit \"mm\".\nExample: Input: ['35 inch', '70 inch', '120 inch', '15 inch', '50 inch']; output: ['889 mm', '1778 mm', '3048 mm', '381 mm', '1270 mm']"}
{"id": "122-9", "oq_id": 122, "desc": "Input: a list of string values, with measurements in inches.\nOutput: a list of string values, with measurements converted to millimeters.\nFunctionality: The transformation converts each measurement from inches to millimeters by multiplying by 25.4, and outputs the result as a list of strings.\nExample: Input: ['18 inch', '42 inch', '85 inch', '7 inch', '31 inch']; output: ['457.2 mm', '1066.8 mm', '2159 mm', '177.8 mm', '787.4 mm']"}
{"id": "123-4", "oq_id": 123, "desc": "Input: a list of string values, each containing a number followed by the word \"gallons\".\nOutput: a list of string values, each containing the equivalent amount in \"cups\".\nFunctionality: The transformation converts the gallons to cups by multiplying each gallon value by 16, and outputs the result in the same format.\nExample: Input: ['16 gallons', '21 gallons', '24 gallons', '27 gallons']; output: ['256 cups', '336 cups', '384 cups', '432 cups']"}
{"id": "123-5", "oq_id": 123, "desc": "Input: a list of string values, each containing a number followed by the word \"gallons\".\nOutput: a list of string values, each containing the equivalent amount in \"cups\".\nFunctionality: The transformation converts the gallons to cups by multiplying each gallon value by 16 (1 gallon = 16 cups) and formats the result as a string in the output list.\nExample: Input: ['23 gallons', '26 gallons', '29 gallons', '31 gallons']; output: ['368 cups', '416 cups', '464 cups', '496 cups']"}
{"id": "123-7", "oq_id": 123, "desc": "Input: a list of string values, each containing a number followed by the word \"gallons\".\nOutput: a list of string values, each containing the equivalent amount in \"cups\".\nFunctionality: The transformation converts the gallons to cups by multiplying each gallon value by 16 (1 gallon = 16 cups) and formats the result as a string in the output list.\nExample: Input: ['30 gallons', '32 gallons', '35 gallons', '38 gallons']; output: ['480 cups', '512 cups', '560 cups', '608 cups']"}
{"id": "123-6", "oq_id": 123, "desc": "Input: a list of string values, each containing a number followed by the word \"gallons\".\nOutput: a list of string values, each containing the equivalent amount in \"cups\".\nFunctionality: The transformation converts the gallons to cups by multiplying each gallon value by 16 (1 gallon = 16 cups) and formats the result as a string in the output list.\nExample: Input: ['25 gallons', '28 gallons', '33 gallons', '36 gallons']; output: ['400 cups', '448 cups', '528 cups', '576 cups']"}
{"id": "123-2", "oq_id": 123, "desc": "Input: a list of string values, each containing a number followed by the word \"gallons\".\nOutput: a list of string values, each containing the equivalent amount in \"cups\".\nFunctionality: The transformation converts the gallons to cups by multiplying each gallon value by 16 (1 gallon = 16 cups) and formats the result as a string in the output list.\nExample: Input: ['6 gallons', '13 gallons', '18 gallons', '20 gallons']; output: ['96 cups', '208 cups', '288 cups', '320 cups']"}
{"id": "123-3", "oq_id": 123, "desc": "Input: a list of string values, each containing a number followed by the word \"gallons\".\nOutput: a list of string values, each containing the equivalent amount in \"cups\".\nFunctionality: The transformation converts the gallons to cups by multiplying each gallon value by 16 (1 gallon = 16 cups) and formats the result as a string in the output list.\nExample: Input: ['14 gallons', '17 gallons', '19 gallons', '22 gallons']; output: ['224 cups', '272 cups', '304 cups', '352 cups']"}
{"id": "123-1", "oq_id": 123, "desc": "Input: a list of string values, each containing a number followed by the word \"gallons\".\nOutput: a list of string values, each containing the converted number followed by the word \"cups\".\n\nFunctionality: The transformation converts each number from gallons to cups by multiplying it by 16 (1 gallon = 16 cups) and formats the result as a string in the output list.\n\nExample: Input: ['4 gallons', '7 gallons', '9 gallons', '12 gallons']; Output: ['64 cups', '112 cups', '144 cups', '192 cups']"}
{"id": "123-0", "oq_id": 123, "desc": "Input: a list of string values, each containing a number followed by the word \"gallons\".\nOutput: a list of string values, each containing the equivalent amount in cups.\n\nFunctionality: The transformation converts each number in gallons to its equivalent amount in cups by multiplying it by 16 (since 1 gallon is equal to 16 cups), then formats the result as a string with the number followed by the word \"cups\".\n\nExample: Input: ['2 gallons', '5 gallons', '8 gallons', '10 gallons']; Output: ['32 cups', '80 cups', '128 cups', '160 cups']"}
{"id": "123-8", "oq_id": 123, "desc": "Input: a list of string values, each containing a number followed by the word \"gallons\".\nOutput: a list of string values, each containing the equivalent amount in \"cups\".\nFunctionality: The transformation converts the gallons to cups by multiplying each gallon value by 16 (1 gallon = 16 cups) and formats the result as a string in the output list.\nExample: Input: ['34 gallons', '37 gallons', '40 gallons', '42 gallons']; output: ['544 cups', '592 cups', '640 cups', '672 cups']"}
{"id": "123-9", "oq_id": 123, "desc": "Input: a list of string values, each containing a number followed by the word \"gallons\".\nOutput: a list of string values, each containing the equivalent amount in \"cups\".\nFunctionality: The transformation converts the gallons to cups by multiplying each gallon value by 16 (1 gallon = 16 cups) and formats the result as a string in the output list.\nExample: Input: ['39 gallons', '41 gallons', '44 gallons', '47 gallons']; output: ['624 cups', '656 cups', '704 cups', '752 cups']"}
{"id": "125-2", "oq_id": 125, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to centimeters.\nFunctionality: The transformation converts each measurement in inches to centimeters by multiplying the inch value by 2.54, and outputs the result as a new list of strings.\nExample: Input: ['10 inch', '20 inch', '25 inch', '40 inch', '50 inch']; output: ['25.40 cm', '50.80 cm', '63.50 cm', '101.60 cm', '127.00 cm']"}
{"id": "125-3", "oq_id": 125, "desc": "Input: a list of string values, with numerical values followed by the word \"inch\" in each element.\nOutput: a list of string values, representing the corresponding values in centimeters.\nFunctionality: The transformation converts the numerical value followed by \"inch\" in each element from inches to centimeters using the conversion factor 2.54, and formats the result as a string in the output list.\nExample: Input: ['18 inch', '36 inch', '42 inch', '54 inch', '63 inch']; output: ['45.72 cm', '91.44 cm', '106.68 cm', '137.16 cm', '160.02 cm']"}
{"id": "125-1", "oq_id": 125, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (inches).\nOutput: a list of string values, with numerical values converted to centimeters with a unit of measurement (cm).\nFunctionality: The transformation converts each numerical value from inches to centimeters by multiplying by 2.54 and updates the unit of measurement to cm, outputting the result as a list.\nExample: Input: ['1 inch', '2 inch', '4 inch', '6 inch', '8 inch']; output: ['2.54 cm', '5.08 cm', '10.16 cm', '15.24 cm', '20.32 cm']"}
{"id": "125-0", "oq_id": 125, "desc": "Input: a list of string values, with numerical values followed by the unit \"inch\" in each element.\nOutput: a list of string values, representing the corresponding values converted to centimeters with the unit \"cm\".\n\nFunctionality: The transformation involves extracting the numerical value from each element in the given sequence, converting it from inches to centimeters by multiplying by 2.54, and appending the unit \"cm\" to the result list.\n\nExample: Input: ['3 inch', '7 inch', '12 inch', '24 inch', '30 inch']; output: ['7.62 cm', '17.78 cm', '30.48 cm', '60.96 cm', '76.20 cm']"}
{"id": "125-4", "oq_id": 125, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (inches).\nOutput: a list of string values, with numerical values converted to centimeters with a unit of measurement (cm).\nFunctionality: The transformation converts the numerical value from inches to centimeters for each element in the given sequence.\nExample: Input: ['5 inch', '14 inch', '28 inch', '35 inch', '45 inch']; output: ['12.70 cm', '35.56 cm', '71.12 cm', '88.90 cm', '114.30 cm']"}
{"id": "125-5", "oq_id": 125, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to centimeters.\nFunctionality: The transformation converts each measurement in inches to centimeters by multiplying by 2.54 and formats the result as a string in the output list.\nExample: Input: ['22 inch', '44 inch', '55 inch', '66 inch', '88 inch']; output: ['55.88 cm', '111.76 cm', '139.70 cm', '167.64 cm', '223.52 cm']"}
{"id": "125-7", "oq_id": 125, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to centimeters.\nFunctionality: The transformation converts each measurement in inches to centimeters by multiplying the value by 2.54, then formats the result as a string and outputs it as a list.\nExample: Input: ['11 inch', '31 inch', '38 inch', '49 inch', '57 inch']; output: ['27.94 cm', '78.74 cm', '96.52 cm', '124.46 cm', '144.78 cm']"}
{"id": "125-6", "oq_id": 125, "desc": "Input: a list of string values, with numerical values followed by the word \"inch\" in each element.\nOutput: a list of string values representing the numerical value converted to centimeters with \"cm\" appended.\nFunctionality: The transformation converts each numerical value from inches to centimeters by multiplying by 2.54, then formats the result as a string in the output list with \"cm\" added.\nExample: Input: ['17 inch', '29 inch', '37 inch', '47 inch', '71 inch']; output: ['43.18 cm', '73.66 cm', '93.98 cm', '119.38 cm', '180.34 cm']"}
{"id": "125-8", "oq_id": 125, "desc": "Input: a list of string values, with numerical values followed by the word \"inch\" in each element.\nOutput: a list of string values representing the length in centimeters.\nFunctionality: The transformation converts the length from inches to centimeters for each element in the given sequence and outputs the result as a list of formatted strings.\nExample: Input: ['13 inch', '19 inch', '39 inch', '48 inch', '58 inch']; output: ['33.02 cm', '48.26 cm', '99.06 cm', '121.92 cm', '147.32 cm']"}
{"id": "125-9", "oq_id": 125, "desc": "Input: a list of string values, with numerical values followed by the word \"inch\" in each element.\nOutput: a list of string values representing the numerical value converted to centimeters with \"cm\" appended.\nFunctionality: The transformation converts each numerical value from inches to centimeters by multiplying by 2.54, then formats the result as a string in the output list with \"cm\" added.\nExample: Input: ['21 inch', '27 inch', '46 inch', '52 inch', '69 inch']; output: ['53.34 cm', '68.58 cm', '116.84 cm', '132.08 cm', '175.26 cm']"}
{"id": "126-3", "oq_id": 126, "desc": "Input: a list of string values, with numerical values followed by \"mb\" in each element.\nOutput: a list of string values, where numerical values are converted from megabytes (mb) to gigabytes (gb).\nFunctionality: The transformation converts each numerical value from megabytes to gigabytes by dividing by 1000, and appends \" gb\" to each result in the output list.\nExample: Input: ['200 mb', '600 mb', '785 mb', '400 mb', '120 mb']; output: ['0.200 gb', '0.600 gb', '0.785 gb', '0.400 gb', '0.120 gb']"}
{"id": "126-2", "oq_id": 126, "desc": "Input: a list of string values, with numerical values and 'mb' suffix in each element.\nOutput: a list of string values with numerical values converted to gigabytes (gb) and 'gb' suffix added in the result list.\nFunctionality: The transformation converts each numerical value from megabytes (mb) to gigabytes (gb) by dividing by 1000, and formats the result with 'gb' suffix.\nExample: Input: ['50 mb', '980 mb', '123 mb', '890 mb', '333 mb']; output: ['0.050 gb', '0.980 gb', '0.123 gb', '0.890 gb', '0.333 gb']"}
{"id": "126-0", "oq_id": 126, "desc": "Input: a list of string values, with numerical values followed by \"mb\" in each element.\nOutput: a list of string values, where numerical values are converted from megabytes to gigabytes.\nFunctionality: The transformation converts each numerical value from megabytes to gigabytes, and appends \"gb\" to the result as a string in the output list.\nExample: Input: ['500 mb', '250 mb', '175 mb', '300 mb', '800 mb']; output: ['0.500 gb', '0.250 gb', '0.175 gb', '0.300 gb', '0.800 gb']"}
{"id": "126-1", "oq_id": 126, "desc": "Input: a list of string values, with numerical values followed by \"mb\" in each element.\nOutput: a list of string values, where each numerical value is converted from megabytes to gigabytes and formatted as \"0.XXX gb\".\nFunctionality: The transformation calculates the gigabyte equivalent of each megabyte value by dividing it by 1024, formats the result as a string with three decimal places, and outputs the result as a list.\nExample: Input: ['100 mb', '450 mb', '670 mb', '350 mb', '225 mb']; output: ['0.100 gb', '0.450 gb', '0.670 gb', '0.350 gb', '0.225 gb']"}
{"id": "126-5", "oq_id": 126, "desc": "Input: a list of string values, with numerical values followed by \"mb\" in each element.\nOutput: a list of string values, where each numerical value is converted from megabytes to gigabytes and formatted as strings.\nFunctionality: The transformation converts each numerical value from megabytes to gigabytes by dividing by 1024, and formats the result as a string with \"gb\" suffix.\nExample: Input: ['75 mb', '550 mb', '456 mb', '920 mb', '105 mb']; output: ['0.075 gb', '0.550 gb', '0.456 gb', '0.920 gb', '0.105 gb']"}
{"id": "126-4", "oq_id": 126, "desc": "Input: a list of string values, with numerical values followed by \"mb\" in each element.\nOutput: a list of string values, where each numerical value is converted from megabytes to gigabytes and formatted as strings.\nFunctionality: The transformation converts each numerical value from megabytes to gigabytes by dividing by 1000, and appends \" gb\" to each result.\nExample: Input: ['30 mb', '870 mb', '95 mb', '660 mb', '510 mb']; output: ['0.030 gb', '0.870 gb', '0.095 gb', '0.660 gb', '0.510 gb']"}
{"id": "126-6", "oq_id": 126, "desc": "Input: a list of string values, with numerical values followed by \"mb\" in each element.\nOutput: a list of string values, where each numerical value is converted from megabytes to gigabytes and formatted as strings.\nFunctionality: The transformation converts each numerical value from megabytes to gigabytes by dividing by 1000, and appends \" gb\" to each result in the output list.\nExample: Input: ['10 mb', '300 mb', '570 mb', '800 mb', '290 mb']; output: ['0.010 gb', '0.300 gb', '0.570 gb', '0.800 gb', '0.290 gb']"}
{"id": "126-7", "oq_id": 126, "desc": "Input: a list of string values, with numerical values followed by \"mb\" in each element.\nOutput: a list of string values, where numerical values are converted from megabytes (mb) to gigabytes (gb).\nFunctionality: The transformation converts each numerical value from megabytes to gigabytes by dividing it by 1000, and appends \"gb\" to the result in the given sequence. \nExample: Input: ['250 mb', '700 mb', '123 mb', '930 mb', '390 mb']; output: ['0.250 gb', '0.700 gb', '0.123 gb', '0.930 gb', '0.390 gb']"}
{"id": "126-9", "oq_id": 126, "desc": "Input: a list of string values, with numerical values followed by \"mb\" in each element.\nOutput: a list of string values, where each numerical value is converted from megabytes to gigabytes and formatted as strings.\nFunctionality: The transformation converts each numerical value from megabytes to gigabytes by dividing by 1024, rounds to three decimal places, and appends 'gb' to the result.\nExample: Input: ['90 mb', '480 mb', '325 mb', '840 mb', '100 mb']; output: ['0.090 gb', '0.480 gb', '0.325 gb', '0.840 gb', '0.100 gb']"}
{"id": "126-8", "oq_id": 126, "desc": "Input: a list of string values, with numerical values followed by \"mb\" in each element.\nOutput: a list of string values, where numerical values are converted from megabytes (mb) to gigabytes (gb).\nFunctionality: The transformation converts each numerical value from megabytes to gigabytes by dividing it by 1024, and appends \"gb\" to the result as a string in the output list.\nExample: Input: ['150 mb', '920 mb', '789 mb', '200 mb', '145 mb']; output: ['0.150 gb', '0.920 gb', '0.789 gb', '0.200 gb', '0.145 gb']"}
{"id": "127-0", "oq_id": 127, "desc": "Input: a list of string values, with temperature values in Celcius format.\nOutput: a list of string values, with temperature values in Kelvin format.\nFunctionality: The transformation converts each temperature value from Celcius to Kelvin using the formula K = C + 273.15, and output the result in the same format as the input.\nExample: Input: ['40 Celsius', '50 Celsius', '60 Celsius', '70 Celsius', '80 Celsius']; output: ['313.15 Kelvin', '323.15 Kelvin', '333.15 Kelvin', '343.15 Kelvin', '353.15 Kelvin']"}
{"id": "127-1", "oq_id": 127, "desc": "Input: a list of string values, with temperature values in Celcius format in each element.\nOutput: a list of string values, with temperature values in Kelvin format in each element.\nFunctionality: The transformation converts Celcius temperature values to Kelvin by adding 273.15 to each value, and formats the result as a string in the output list.\nExample: Input: ['0 Celsuis', '15 Celsuis', '30 Celsuis', '45 Celsuis', '60 Celsuis']; output: ['273.15 Kelvin', '288.15 Kelvin', '303.15 Kelvin', '318.15 Kelvin', '333.15 Kelvin']"}
{"id": "127-3", "oq_id": 127, "desc": "Input: a list of string values, with temperature values in Celcius format in each element.\nOutput: a list of string values, with temperature values in Kelvin format in each element.\nFunctionality: The transformation converts Celcius temperature values to Kelvin by adding 273.15 to each value, and formats the result as a string in the output list.\nExample: Input: ['100 Celsuis', '110 Celsuis', '120 Celsuis', '130 Celsuis', '140 Celsuis']; output: ['373.15 Kelvin', '383.15 Kelvin', '393.15 Kelvin', '403.15 Kelvin', '413.15 Kelvin']"}
{"id": "127-2", "oq_id": 127, "desc": "Input: a list of string values, with temperature values in Celcius in each element.\nOutput: a list of strings representing the corresponding temperatures in Kelvin.\nFunctionality: The transformation converts each temperature value from Celcius to Kelvin using the formula K = C + 273.15, and formats the result as a string in the output list.\nExample: Input: ['5.5 Celsuis', '16.5 Celsuis', '27.5 Celsuis', '38.5 Celsuis', '49.5 Celsuis']; output: ['278.65 Kelvin', '289.65 Kelvin', '300.65 Kelvin', '311.65 Kelvin', '322.65 Kelvin']"}
{"id": "127-6", "oq_id": 127, "desc": "Input: a list of string values, with temperature values in Celcius format in each element.\nOutput: a list of string values, with temperature values in Kelvin format in each element.\nFunctionality: The transformation converts Celcius temperature values to Kelvin by adding 273.15 to each value, and formats the result as a string in the output list.\nExample: Input: ['23 Celsuis', '27 Celsuis', '31 Celsuis', '35 Celsuis', '39 Celsuis']; output: ['296.15 Kelvin', '300.15 Kelvin', '304.15 Kelvin', '308.15 Kelvin', '312.15 Kelvin']"}
{"id": "127-7", "oq_id": 127, "desc": "Input: a list of string values, with temperature values in each element in Celcius format.\nOutput: a list of string values, with temperature values in each element in Kelvin format.\nFunctionality: The transformation converts Celcius temperature values to Kelvin by adding 273.15 to each value, and formats the result as a string in the output list.\nExample: Input: ['2 Celsuis', '4 Celsuis', '6 Celsuis', '8 Celsuis', '10 Celsuis']; output: ['275.15 Kelvin', '277.15 Kelvin', '279.15 Kelvin', '281.15 Kelvin', '283.15 Kelvin']"}
{"id": "127-5", "oq_id": 127, "desc": "Input: a list of string values, where each element includes a temperature in Celsius.\nOutput: a list of string values, where each element represents the corresponding temperature in Kelvin.\nFunctionality: The transformation converts each Celsius temperature to Kelvin using the formula K = C + 273.15, and formats the result as a string in the output list.\nExample: Input: ['33 Celsuis', '37.8 Celsuis', '41.2 Celsuis', '44.6 Celsuis', '48 Celsuis']; output: ['306.15 Kelvin', '310.95 Kelvin', '314.35 Kelvin', '317.75 Kelvin', '321.15 Kelvin']"}
{"id": "127-4", "oq_id": 127, "desc": "Input: a list of string values, with temperature values in Celcius format in each element.\nOutput: a list of string values, with temperature values in Kelvin format in each element.\nFunctionality: The transformation converts Celcius temperature to Kelvin using the formula K = C + 273.15 for each element in the given sequence, and output the result as a list of strings formatted as Kelvin values.\nExample: Input: ['10.9 Celcius', '23.7 Celcius', '37.5 Celcius', '46.2 Celcius', '54.8 Celcius']; output: ['284.05 Kelvin', '296.85 Kelvin', '310.65 Kelvin', '319.35 Kelvin', '327.95 Kelvin']"}
{"id": "127-9", "oq_id": 127, "desc": "Input: a list of string values, with temperature values in Celcius format in each element.\nOutput: a list of string values, with temperature values in Kelvin format in each element.\nFunctionality: The transformation converts Celcius temperature values to Kelvin by adding 273.15 to each value, and formats the result as a string in the output list.\nExample: Input: ['88 Celsuis', '92 Celsuis', '96 Celsuis', '100 Celsuis', '104 Celsuis']; output: ['361.15 Kelvin', '365.15 Kelvin', '369.15 Kelvin', '373.15 Kelvin', '377.15 Kelvin']"}
{"id": "127-8", "oq_id": 127, "desc": "Input: a list of string values, with temperature values in Celcius in each element.\nOutput: a list of strings representing the corresponding temperatures in Kelvin.\nFunctionality: The transformation converts each temperature value from Celcius to Kelvin using the formula K = C + 273.15, and formats the result as a string in the output list.\nExample: Input: ['15.3 Celsuis', '21.7 Celsuis', '28.1 Celsuis', '34.5 Celsuis', '40.9 Celsuis']; output: ['288.45 Kelvin', '294.85 Kelvin', '301.25 Kelvin', '307.65 Kelvin', '314.05 Kelvin']"}
{"id": "128-9", "oq_id": 128, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values representing the corresponding weight in pounds with \"lb\" as the unit.\nFunctionality: The transformation converts the weight from ounces to pounds by dividing each numerical value by 16 (since 1 lb = 16 oz) and adds \"lb\" as the unit, outputting the result as a list.\nExample: Input: ['9 oz', '450 oz', '73 oz', '4 oz', '13 oz']; output: ['0.5625 lb', '28.125 lb', '4.5625 lb', '0.25 lb', '0.8125 lb']"}
{"id": "128-8", "oq_id": 128, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values, with numerical values converted from ounces to pounds.\nFunctionality: The transformation converts the numerical value from ounces to pounds by dividing by 16, and formats the result as a string with \"lb\" appended.\nExample: Input: ['4 oz', '350 oz', '68 oz', '5 oz', '10 oz']; output: ['0.25 lb', '21.875 lb', '4.25 lb', '0.3125 lb', '0.625 lb']"}
{"id": "128-5", "oq_id": 128, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values representing the corresponding weight in pounds with \"lb\" at the end.\nFunctionality: The transformation converts the weight from ounces to pounds by dividing each numerical value by 16 (since 1 lb = 16 oz) and adds \"lb\" at the end, outputting the result as a list.\nExample: Input: ['15 oz', '400 oz', '49 oz', '7 oz', '11 oz']; output: ['0.9375 lb', '25. lb', '3.0625 lb', '0.4375 lb', '0.6875 lb']"}
{"id": "128-4", "oq_id": 128, "desc": "Input: a list of string values, with weight measurements in ounces.\nOutput: a list of string values, with weight measurements in pounds.\nFunctionality: The transformation converts each weight measurement from ounces to pounds by dividing by 16, and formats the result as a string with \"lb\" appended.\nExample: Input: ['8 oz', '700 oz', '54 oz', '6 oz', '12 oz']; output: ['0.5 lb', '43.75 lb', '3.375 lb', '0.375 lb', '0.75 lb']"}
{"id": "128-6", "oq_id": 128, "desc": "Input: a list of string values, each containing a numerical value and \"oz\" unit.\nOutput: a list of string values, each representing the corresponding weight in pounds with \"lb\" unit.\nFunctionality: The transformation converts each weight from ounces to pounds by dividing the value by 16 and formatting the result as a string with \"lb\" unit.\nExample: Input: ['6 oz', '600 oz', '82 oz', '3 oz', '25 oz']; output: ['0.375 lb', '37.5 lb', '5.125 lb', '0.1875 lb', '1.5625 lb']"}
{"id": "128-7", "oq_id": 128, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values, representing the weight in pounds.\nFunctionality: The transformation converts ounces to pounds by dividing each numerical value by 16, and then formatting the result as a string with \"lb\" as the unit.\nExample: Input: ['12 oz', '800 oz', '93 oz', '8 oz', '17 oz']; output: ['0.75 lb', '50. lb', '5.8125 lb', '0.5 lb', '1.0625 lb']"}
{"id": "128-3", "oq_id": 128, "desc": "Input: a list of string values, each containing a numerical value and \"oz\".\nOutput: a list of string values with the numerical value converted from ounces to pounds, with \"lb\" as the unit.\nFunctionality: The transformation converts each element from ounces to pounds by dividing the numerical value by 16, then formats the result as a string in the output list.\nExample: Input: ['5 oz', '300 oz', '62 oz', '2 oz', '9 oz']; output: ['0.3125 lb', '18.75 lb', '3.875 lb', '0.125 lb', '0.5625 lb']"}
{"id": "128-2", "oq_id": 128, "desc": "Input: a list of string values, with numerical values in each element followed by 'oz'.\nOutput: a list of string values representing the weight in pounds.\nFunctionality: The transformation converts ounces to pounds by dividing each numerical value by 16, then converting it to a string with 'lb' appended.\nExample: Input: ['1 oz', '1000 oz', '75 oz', '4 oz', '20 oz']; output: ['0.0625 lb', '62.5 lb', '4.6875 lb', '0.25 lb', '1.25 lb']"}
{"id": "128-0", "oq_id": 128, "desc": "Input: a list of string values, each containing a numerical value and \"oz\" unit.\nOutput: a list of string values, each representing the corresponding weight in pounds with \"lb\" unit.\nFunctionality: The transformation converts each weight from ounces to pounds by dividing the value by 16 and formatting the result as a string with \"lb\" unit.\nExample: Input: ['7 oz', '200 oz', '35 oz', '2 oz', '8 oz']; output: ['0.4375 lb', '12.5 lb', '2.1875 lb', '0.125 lb', '0.5 lb']"}
{"id": "128-1", "oq_id": 128, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values representing the corresponding weight in pounds with \"lb\" as the unit.\nFunctionality: The transformation converts the weight from ounces to pounds by dividing each numerical value by 16 (since 1 lb = 16 oz) and formats the result with \"lb\" as the unit.\nExample: Input: ['10 oz', '500 oz', '47 oz', '3 oz', '15 oz']; output: ['0.625 lb', '31.25 lb', '2.9375 lb', '0.1875 lb', '0.9375 lb']"}
{"id": "129-9", "oq_id": 129, "desc": "Input: a list of string values, where each element contains a numerical value followed by a unit of measurement (kg).\nOutput: a list of string values, where each element contains the weight converted from kg to lbs.\nFunctionality: The transformation converts the numerical value from kg to lbs for each element in the given sequence and formats the result as a string in the output list.\nExample: Input: ['0.8 kg', '1.6 kg', '2.4 kg', '3.2 kg', '4 kg']; output: ['1.7637 b', '3.5274 b', '5.2911 b', '7.0548 b', '8.8185 b']"}
{"id": "129-8", "oq_id": 129, "desc": "Input: a list of string values, with weight values in kg format.\nOutput: a list of string values, with weight values converted to lbs format.\n\nFunctionality: The transformation converts each weight value from kg to lbs by multiplying it by 2.20462, and then formats the result as a string in lbs format.\nExample: Input: ['7.5 kg', '15 kg', '22.5 kg', '30 kg', '37.5 kg']; output: ['16.5347 b', '33.0693 b', '49.604 b', '66.1387 b', '82.6733 b']"}
{"id": "129-6", "oq_id": 129, "desc": "Input: a list of string values, where each element contains a numerical value followed by a unit of measurement (e.g. \"kg\").  \nOutput: a list of string values with the numerical values converted from kilograms to pounds.  \nFunctionality: The transformation converts the numerical value from kilograms to pounds for each element in the given sequence and outputs the result as a list. To convert kg to lbs, the numerical value is multiplied by 2.20462.  \nExample: Input: ['1.2 kg', '2.4 kg', '3.6 kg', '4.8 kg', '6 kg']; output: ['2.64555 b', '5.29109 b', '7.93664 b', '10.5822 b', '13.2277 b']"}
{"id": "129-7", "oq_id": 129, "desc": "Input: a list of string values, with numerical values followed by \"kg\" in each element.\nOutput: a list of string values representing weight in pounds.\nFunctionality: The transformation extracts the numerical value from each element, converts it from kilograms to pounds, and appends \" b\" to signify pounds in the result list.\nExample: Input: ['13 kg', '26 kg', '39 kg', '52 kg', '65 kg']; output: ['28.6601 b', '57.3202 b', '85.9803 b', '114.64 b', '143.3 b']"}
{"id": "129-5", "oq_id": 129, "desc": "Input: a list of string values, with numerical values and \"kg\" unit in each element.\nOutput: a list of string values representing the weight in pounds with \"lb\" unit.\nFunctionality: The transformation converts each weight from kilograms to pounds, and formats the result as a string with the weight in pounds with \"lb\" unit in the output list.\nExample: Input: ['9 kg', '18 kg', '27 kg', '36 kg', '45 kg']; output: ['19.8416 lb', '39.6832 lb', '59.5248 lb', '79.3664 lb', '99.208 lb']"}
{"id": "129-4", "oq_id": 129, "desc": "Input: a list of string values, each containing a numerical value and a unit of weight (kg).\nOutput: a list of string values representing the numerical values converted from kilograms to pounds.\nFunctionality: The transformation converts each numerical value from kilograms to pounds by multiplying it by 2.20462, and formats the result with a unit of weight in pounds.\nExample: Input: ['17 kg', '34 kg', '51 kg', '68 kg', '85 kg']; output: ['37.4786 b', '74.9572 b', '112.436 b', '149.914 b', '187.393 b']"}
{"id": "129-0", "oq_id": 129, "desc": "Input: a list of string values, with numerical and unit values in each element.\nOutput: a list of string values with transformed numerical values.\nFunctionality: The transformation converts the numerical values in kilograms to pounds, providing the result in a list with the converted values in pounds.\nExample: Input: ['5 kg', '10 kg', '15 kg', '20 kg', '25 kg']; output: ['11.0231 b', '22.0462 b', '33.0693 b', '44.0925 b', '55.1156 b']"}
{"id": "129-1", "oq_id": 129, "desc": "Input: a list of string values, with numerical values and \"kg\" unit in each element.\nOutput: a list of string values representing the weight in pounds with \"lb\" unit.\nFunctionality: The transformation converts each weight from kilograms to pounds by multiplying the value by 2.20462, then formats the result as a string in the output list.\nExample: Input: ['2 kg', '4 kg', '6 kg', '8 kg', '10 kg']; output: ['4.40925 b', '8.81849 b', '13.2277 b', '17.637 b', '22.0462 b']"}
{"id": "129-3", "oq_id": 129, "desc": "Input: a list of string values, each containing a numerical value followed by a unit of measurement (kg).\nOutput: a list of string values, each containing the corresponding numerical value converted from kg to lbs.\nFunctionality: The transformation converts each numerical value from kg to lbs by multiplying it with 2.20462, and outputs the result as a list with the numerical value in lbs appended with the unit 'b'.\nExample: Input: ['0.5 kg', '1.5 kg', '2.5 kg', '3.5 kg', '4.5 kg']; output: ['1.10231 b', '3.30693 b', '5.51156 b', '7.71618 b', '9.9208 b']"}
{"id": "129-2", "oq_id": 129, "desc": "Input: a list of string values, with numerical values followed by \"kg\" in each element.\nOutput: a list of string values representing weight in pounds (lbs) instead of kilograms (kg).\nFunctionality: The transformation converts each weight value from kilograms to pounds by multiplying it by 2.20462 and updates the unit to lbs in the result list.\nExample: Input: ['12 kg', '24 kg', '36 kg', '48 kg', '60 kg']; output: ['26.4555 lbs', '52.9109 lbs', '79.3664 lbs', '105.822 lbs', '132.277 lbs']"}
{"id": "130-8", "oq_id": 130, "desc": "Input: a list of string values, each containing a numerical value followed by a unit of measurement (\"meter\").\nOutput: a list of string values, each containing the equivalent value in miles.\n\nFunctionality: The transformation converts each numerical value from meters to miles by multiplying it by 0.000621371 and formats the result in the output list with the \"mile\" unit.\n\nExample: Input: ['125 meter', '170 meter', '235 meter', '205 meter', '55 meter']; output: ['0.0776714 mile', '0.105633 mile', '0.146022 mile', '0.127381 mile', '0.0341754 mile']"}
{"id": "130-9", "oq_id": 130, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement.\nOutput: a list of string values with numerical values converted to miles.\nFunctionality: The transformation converts the numerical value in each element from meters to miles and formats it as a string in the result list.\nExample: Input: ['220 meter', '130 meter', '190 meter', '80 meter', '150 meter']; output: ['0.136702 mile', '0.0807783 mile', '0.118061 mile', '0.0497097 mile', '0.0932057 mile']"}
{"id": "130-7", "oq_id": 130, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values with numerical values converted from meters to miles.\nFunctionality: The transformation converts each numerical value from meters to miles in the given sequence, and maintains the format with a unit of measurement in the output list.\nExample: Input: ['95 meter', '210 meter', '145 meter', '115 meter', '175 meter']; output: ['0.0590303 mile', '0.130488 mile', '0.0900988 mile', '0.0714577 mile', '0.10874 mile']"}
{"id": "130-6", "oq_id": 130, "desc": "Input: a list of string values, each containing a numerical value followed by a unit of measurement (\"meter\").\nOutput: a list of string values, each containing the numerical value converted to miles.\n\nFunctionality: The transformation converts each numerical value from meters to miles by multiplying it by 0.000621371, and formats the result as a string with \"mile\" as the unit of measurement.\nExample: Input: ['65 meter', '140 meter', '100 meter', '35 meter', '260 meter']; output: ['0.0403891 mile', '0.086992 mile', '0.0621371 mile', '0.021748 mile', '0.161557 mile']"}
{"id": "130-4", "oq_id": 130, "desc": "Input: a list of string values, each containing a number followed by a unit (e.g., 'meter').\nOutput: a list of string values, each containing a number followed by the unit 'mile'.\nFunctionality: The transformation converts the length values from meters to miles by dividing each number by 1609.34, and formats the result as a string with the unit 'mile'.\nExample: Input: ['220 meter', '45 meter', '85 meter', '110 meter', '30 meter']; output: ['0.136702 mile', '0.0279617 mile', '0.0528166 mile', '0.0683508 mile', '0.0186411 mile']"}
{"id": "130-5", "oq_id": 130, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement.\nOutput: a list of string values with numerical values converted to miles.\nFunctionality: The transformation converts the numerical value from meters to miles for each element in the given sequence.\nExample: Input: ['55 meter', '240 meter', '20 meter', '160 meter', '190 meter']; output: ['0.0341754 mile', '0.149129 mile', '0.0124274 mile', '0.0994194 mile', '0.118061 mile']"}
{"id": "130-1", "oq_id": 130, "desc": "Input: a list of string values, each containing a number followed by a unit (e.g., meter).\nOutput: a list of string values, each containing the number converted to miles with the unit (e.g., mile).\nFunctionality: The transformation converts each number from meters to miles using a conversion factor of 0.000621371, and formats the result with the unit 'mile' in the output list.\nExample: Input: ['10 meter', '150 meter', '200 meter', '80 meter', '120 meter']; output: ['0.00621371 mile', '0.0932057 mile', '0.124274 mile', '0.0497097 mile', '0.0745645 mile']"}
{"id": "130-0", "oq_id": 130, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values with numerical values converted from meters to miles.\nFunctionality: The transformation converts each numerical value from meters to miles in the given sequence, and formats the result with 'mile' as the unit of measurement.\nExample: Input: ['100 meter', '300 meter', '50 meter', '75 meter', '250 meter']; output: ['0.0621371 mile', '0.186411 mile', '0.0310686 mile', '0.0466028 mile', '0.155343 mile']"}
{"id": "130-2", "oq_id": 130, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement.\nOutput: a list of string values with numerical values converted to miles.\nFunctionality: The transformation converts the numerical value from meters to miles for each element in the given sequence.\nExample: Input: ['15 meter', '175 meter', '40 meter', '60 meter', '300 meter']; output: ['0.00932057 mile', '0.10874 mile', '0.0248548 mile', '0.0372823 mile', '0.186411 mile']"}
{"id": "130-3", "oq_id": 130, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values with numerical values converted from meters to miles.\nFunctionality: The transformation converts each numerical value from meters to miles by multiplying by 0.000621371, and formats the result with the unit of measurement as \"mile\".\nExample: Input: ['70 meter', '90 meter', '130 meter', '25 meter', '175 meter']; output: ['0.043496 mile', '0.0559234 mile', '0.0807783 mile', '0.0155343 mile', '0.10874 mile']"}
{"id": "131-8", "oq_id": 131, "desc": "Input: a list of string values, with pounds weight values in each element.\nOutput: a list of string values representing weight in grams.\nFunctionality: The transformation converts pounds to grams for each element in the given sequence using the conversion rate of 1 lb = 453.59237 g.\nExample: Input: ['111 lb', '222 lb', '333 lb', '444 lb', '555 lb']; output: ['50348.7531 g', '100697.506 g', '151046.259 g', '201395.012 g', '251743.765 g']"}
{"id": "131-9", "oq_id": 131, "desc": "Input: a list of string values, with numerical values followed by \"lb\" in each element.\nOutput: a list of string values, with numerical values converted to grams and formatted with \"g\" in the result list.\nFunctionality: The transformation converts pounds to grams by multiplying each numerical value by 453.592, and formats the result as a string with \"g\" as the unit.\nExample: Input: ['321 lb', '654 lb', '987 lb', '246 lb', '789 lb']; output: ['145603.151 g', '296649.41 g', '447695.669 g', '111583.723 g', '357884.38 g']"}
{"id": "131-4", "oq_id": 131, "desc": "Input: a list of string values, each containing a numerical value followed by \"lb\" (pounds).\nOutput: a list of string values, each representing the equivalent weight in grams.\nFunctionality: The transformation converts pounds to grams by multiplying the numerical value by 453.59237 (conversion factor) and appends \"g\" to the result.\nExample: Input: ['888 lb', '99 lb', '111 lb', '222 lb', '333 lb']; output: ['402790.025 g', '44905.6446 g', '50348.7531 g', '100697.506 g', '151046.259 g']"}
{"id": "131-5", "oq_id": 131, "desc": "Input: a list of strings with weight measurements in pounds.\nOutput: a list of strings with weight measurements in grams.\nFunctionality: The transformation converts each weight from pounds to grams using the conversion factor 453.592, and outputs the result as a new list of strings.\nExample: Input: ['12 lb', '34 lb', '56 lb', '78 lb', '90 lb']; output: ['5443.10844 g', '15422.1406 g', '25401.1727 g', '35380.2049 g', '40823.3133 g']"}
{"id": "131-7", "oq_id": 131, "desc": "Input: a list of string values, with numerical values followed by \"lb\" in each element.\nOutput: a list of string values, with numerical values converted from pounds to grams and formatted in the result list.\nFunctionality: The transformation converts pounds to grams for each numerical value in the given sequence and formats the results as strings in the output list.\nExample: Input: ['777 lb', '666 lb', '555 lb', '444 lb', '333 lb']; output: ['352441.271 g', '302092.518 g', '251743.765 g', '201395.012 g', '151046.259 g']"}
{"id": "131-6", "oq_id": 131, "desc": "Input: a list of string values, with pounds weight values in each element.\nOutput: a list of string values, representing weight in grams.\nFunctionality: The transformation converts pounds weight in each element to grams by multiplying the pound value by 453.592, then formats and appends 'g' to the result as a string in the output list.\nExample: Input: ['375 lb', '625 lb', '875 lb', '125 lb', '437 lb']; output: ['170097.139 g', '283495.231 g', '396893.324 g', '56699.0462 g', '198219.866 g']"}
{"id": "131-2", "oq_id": 131, "desc": "Input: a list of string values, with pounds weight values in each element.\nOutput: a list of string values representing weight in grams.\nFunctionality: The transformation converts pounds to grams for each weight value in the given sequence and formats the result as a string in the output list.\nExample: Input: ['123 lb', '456 lb', '789 lb', '321 lb', '555 lb']; output: ['55791.8615 g', '206838.121 g', '357884.38 g', '145603.151 g', '251743.765 g']"}
{"id": "131-3", "oq_id": 131, "desc": "Input: a list of string values, each representing a weight in pounds.\nOutput: a list of string values, each representing the weight converted to grams.\nFunctionality: The transformation converts pounds to grams by multiplying each weight in pounds by 453.592, then formats and outputs the result as a string in the format \"{converted weight} g\".\nExample: Input: ['200 lb', '100 lb', '400 lb', '50 lb', '75 lb']; output: ['90718.474 g', '45359.237 g', '181436.948 g', '22679.6185 g', '34019.4278 g']"}
{"id": "131-1", "oq_id": 131, "desc": "Input: a list of string values, with pounds weight values in each element.\nOutput: a list of string values representing weight in grams.\nFunctionality: The transformation converts pounds to grams for each element in the given sequence using the conversion rate of 1 lb = 453.59237 g.\nExample: Input: ['50 lb', '300 lb', '27 lb', '81 lb', '605 lb']; output: ['22679.6185 g', '136077.711 g', '12246.994 g', '36740.982 g', '274423.384 g']"}
{"id": "131-0", "oq_id": 131, "desc": "Input: a list of string values, with weight measurements in pounds in each element.\nOutput: a list of string values, with weight measurements converted to grams in each element.\nFunctionality: The transformation converts each weight measurement from pounds to grams by multiplying by 453.59237, then formats the result as a string in the output list.\nExample: Input: ['3 lb', '75 lb', '432 lb', '10 lb', '999 lb']; output: ['1360.77711 g', '34019.4278 g', '195951.904 g', '4535.9237 g', '453138.778 g']"}
{"id": "132-9", "oq_id": 132, "desc": "Input: a list of string values, each containing a numerical value and \"oz\".\nOutput: a list of string values with the numerical value converted from ounces to cups, with a format of \"x.x cup\".\nFunctionality: The transformation converts each numerical value from ounces to cups by dividing by 8, and then formats the result as a string in the output list.\nExample: Input: ['15 oz', '1500 oz', '200 oz', '100 oz', '1500 oz']; output: ['1.875 cup', '187.5 cup', '25.0 cup', '12.5 cup', '187.5 cup']"}
{"id": "132-8", "oq_id": 132, "desc": "Input: a list of string values, each containing a numerical value and \"oz\".\nOutput: a list of string values with the numerical value converted from ounces to cups.\nFunctionality: The transformation converts each numerical value in the given sequence from ounces to cups using the conversion rate of 1 ounce = 0.125 cups, and formats the result in a string.\nExample: Input: ['11 oz', '1100 oz', '120 oz', '70 oz', '1100 oz']; output: ['1.375 cup', '137.5 cup', '15.0 cup', '8.75 cup', '137.5 cup']"}
{"id": "132-5", "oq_id": 132, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values, where numerical values are converted from ounces to cups.\nFunctionality: The transformation converts the numerical value from ounces to cups in each element of the given sequence, and formats the result as a string in the output list.\nExample: Input: ['4 oz', '600 oz', '45 oz', '35 oz', '400 oz']; output: ['0.5 cup', '75.0 cup', '5.625 cup', '4.375 cup', '50.0 cup']"}
{"id": "132-4", "oq_id": 132, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values, where each numerical value is converted from ounces to cups and formatted as a string in the result list.\nFunctionality: The transformation converts each numerical value from ounces to cups by dividing by 8, and formats the result as a string with \"cup\" appended.\nExample: Input: ['6 oz', '400 oz', '60 oz', '30 oz', '600 oz']; output: ['0.75 cup', '50.0 cup', '7.5 cup', '3.75 cup', '75.0 cup']"}
{"id": "132-6", "oq_id": 132, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values, where ounces are converted to cups.\nFunctionality: The transformation converts ounces to cups for each element in the given sequence and formats the result as a string in the output list.\nExample: Input: ['7 oz', '700 oz', '80 oz', '50 oz', '700 oz']; output: ['0.875 cup', '87.5 cup', '10.0 cup', '6.25 cup', '87.5 cup']"}
{"id": "132-7", "oq_id": 132, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values, where ounces are converted to cups.\nFunctionality: The transformation converts ounces to cups for each numerical value in the given sequence, and outputs the result as a list.\nExample: Input: ['9 oz', '900 oz', '95 oz', '55 oz', '900 oz']; output: ['1.125 cup', '112.5 cup', '11.875 cup', '6.875 cup', '112.5 cup']"}
{"id": "132-3", "oq_id": 132, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values, where numerical values are converted from ounces to cups.\nFunctionality: The transformation converts the numerical value from ounces to cups in each element of the given sequence, and formats the result as a string in the output list.\nExample: Input: ['8 oz', '300 oz', '90 oz', '15 oz', '800 oz']; output: ['1.0 cup', '37.5 cup', '11.25 cup', '1.875 cup', '100.0 cup']"}
{"id": "132-2", "oq_id": 132, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values, where numerical values are converted from ounces to cups.\nFunctionality: The transformation converts the numerical value from ounces to cups in each element of the given sequence, and formats the result as a string in the output list.\nExample: Input: ['3 oz', '100 oz', '25 oz', '40 oz', '200 oz']; output: ['0.375 cup', '12.5 cup', '3.125 cup', '5.0 cup', '25.0 cup']"}
{"id": "132-0", "oq_id": 132, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values, where each numerical value is converted from ounces to cups and formatted as a string in the result list.\nFunctionality: The transformation converts each numerical value from ounces to cups by dividing it by 8, and formats the result as a string with \" cup\" appended.\nExample: Input: ['5 oz', '789 oz', '50 oz', '22 oz', '150 oz']; output: ['0.625 cup', '98.625 cup', '6.25 cup', '2.75 cup', '18.75 cup']"}
{"id": "132-1", "oq_id": 132, "desc": "Input: a list of string values, with numerical values followed by \"oz\" in each element.\nOutput: a list of string values, with numerical values converted from ounces to cups.\nFunctionality: The transformation converts the numerical value followed by \"oz\" in each element from ounces to cups, and outputs the result as a list with the numerical value followed by \"cup\".\nExample: Input: ['1 oz', '500 oz', '75 oz', '10 oz', '1000 oz']; output: ['0.125 cup', '62.5 cup', '9.375 cup', '1.25 cup', '125.0 cup']"}
{"id": "133-9", "oq_id": 133, "desc": "Input: a list of string values, where each element represents a length in meters.\nOutput: a list of string values, where each element represents the length converted to inches with decimal precision.\nFunctionality: The transformation converts each element from meters to inches by multiplying by 39.3701 and formats the result with decimal precision, outputting the converted lengths in a list.\nExample: Input: ['18 m', '456 m', '890 m', '234 m', '567 m']; output: ['708.661417 inch', '17952.7559 inch', '35039.3701 inch', '9212.59843 inch', '22322.8346 inch']"}
{"id": "133-8", "oq_id": 133, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing the numerical value converted from meters to inches, followed by the unit \"inch\".\nFunctionality: The transformation converts each numerical value from meters to inches by multiplying by 39.3701, and formats the result as a string with the converted value followed by the unit \"inch\".\nExample: Input: ['7 m', '200 m', '370 m', '480 m', '590 m']; output: ['275.590551 inch', '7874.01575 inch', '14566.9291 inch', '18897.6378 inch', '23228.3465 inch']"}
{"id": "133-6", "oq_id": 133, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing the numerical value converted from meters to inches, followed by the unit of measurement.\nFunctionality: The transformation converts each numerical value from meters to inches by multiplying by 39.3701, and formats the result as a string with the converted value followed by the unit of measurement.\nExample: Input: ['8 m', '250 m', '450 m', '750 m', '950 m']; output: ['314.96063 inch', '9842.51969 inch', '17716.5354 inch', '29527.5591 inch', '37401.5748 inch']"}
{"id": "133-7", "oq_id": 133, "desc": "Input: a list of string values, with numerical values followed by a unit (meters) in each element.\nOutput: a list of string values, with numerical values converted to inches and formatted as strings.\nFunctionality: The transformation converts each numerical value from meters to inches by multiplying it by 39.3701, and formats the result as a string with the unit \"inch\".\nExample: Input: ['2 m', '560 m', '890 m', '123 m', '456 m']; output: ['78.7401575 inch', '22047.2441 inch', '35039.3701 inch', '4842.51969 inch', '17952.7559 inch']"}
{"id": "133-5", "oq_id": 133, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing the numerical value converted from meters to inches, followed by the unit \"inch\".\nFunctionality: The transformation converts each numerical value from meters to inches by multiplying by 39.3701, and formats the result as a string with the converted value followed by \"inch\".\nExample: Input: ['15 m', '100 m', '200 m', '300 m', '400 m']; output: ['590.551181 inch', '3937.00787 inch', '7874.01575 inch', '11811.0236 inch', '15748.0315 inch']"}
{"id": "133-4", "oq_id": 133, "desc": "Input: a list of string values, with numerical values followed by a space and a unit (e.g. '30 m').\nOutput: a list of string values in inches.\nFunctionality: The transformation converts each value from meters to inches by multiplying by 39.3701, rounds to 5 decimal places, and adds 'inch' as the unit in the result list.\nExample: Input: ['30 m', '105 m', '456 m', '789 m', '321 m']; output: ['1181.10236 inch', '4133.85827 inch', '17952.7559 inch', '31062.9921 inch', '12637.7953 inch']"}
{"id": "133-0", "oq_id": 133, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing the numerical value converted from meters to inches.\nFunctionality: The transformation converts each numerical value from meters to inches by multiplying it by 39.3701, and formats the result as a string with the unit of measurement \"inch\".\nExample: Input: ['5 m', '123 m', '76 m', '550 m', '874 m']; output: ['196.850394 inch', '4842.51969 inch', '2992.12598 inch', '21653.5433 inch', '34409.4488 inch']"}
{"id": "133-1", "oq_id": 133, "desc": "Input: a list of string values, where each element represents a length in meters.\nOutput: a list of string values, where each element represents the corresponding length in inches.\nFunctionality: The transformation converts each element from meters to inches by multiplying it by 39.37, then formats the result as a string in the output list.\nExample: Input: ['3 m', '1000 m', '660 m', '450 m', '987 m']; output: ['118.110236 inch', '39370.0787 inch', '25984.252 inch', '17716.5354 inch', '38858.2677 inch']"}
{"id": "133-3", "oq_id": 133, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing the numerical value converted from meters to inches, followed by the unit \"inch\".\nFunctionality: The transformation converts each numerical value from meters to inches by multiplying by 39.3701, formats the result as a string with the converted value and unit \"inch\", and outputs the transformed values as a list.\nExample: Input: ['25 m', '456 m', '789 m', '345 m', '678 m']; output: ['984.251969 inch', '17952.7559 inch', '31062.9921 inch', '13582.6772 inch', '26692.9134 inch']"}
{"id": "133-2", "oq_id": 133, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing the numerical value converted from meters to inches, followed by the unit \"inch\".\nFunctionality: The transformation converts each numerical value from meters to inches by multiplying by 39.3701, and formats the result as a string with the converted value followed by \"inch\".\nExample: Input: ['12 m', '789 m', '234 m', '567 m', '890 m']; output: ['472.440945 inch', '31062.9921 inch', '9212.59843 inch', '22322.8346 inch', '35039.3701 inch']"}
{"id": "135-9", "oq_id": 135, "desc": "Input: a list of string values, representing areas in square meters.\nOutput: a list of string values, representing areas in square feet.\nFunctionality: The transformation converts each area value from square meters to square feet using the conversion factor of 10.7639, and formats the result as a string with the converted value and \"square feet\" unit appended.\nExample: Input: ['400 square meters', '600 square meters', '800 square meters', '950 square meters', '500 square meters']; output: ['4305.56417 square feet', '6458.34625 square feet', '8611.12833 square feet', '10225.7149 square feet', '5381.95521 square feet']"}
{"id": "135-8", "oq_id": 135, "desc": "Input: a list of strings containing measurements in square meters.\nOutput: a list of strings containing measurements in square feet.\nFunctionality: The transformation converts each square meter measurement to square feet using the conversion factor of 10.7639 and formats the result in the output list.\nExample: Input: ['25 square meters', '333 square meters', '700 square meters', '800 square meters', '123 square meters']; output: ['269.09776 square feet', '3584.38217 square feet', '7534.73729 square feet', '8611.12833 square feet', '1323.96098 square feet']"}
{"id": "135-0", "oq_id": 135, "desc": "Input: a list of string values, where each element includes a numerical value followed by a unit of measurement.\nOutput: a list of strings where each element represents the value converted from square meters to square feet.\n\nFunctionality: The transformation converts each numerical value from square meters to square feet in the given sequence and outputs the converted values as strings in a list.\n\nExample: Input: ['10 square meters', '75 square meters', '145 square meters', '890 square meters', '500 square meters']; Output: ['107.639104 square feet', '807.293281 square feet', '1560.76701 square feet', '9579.88027 square feet', '5381.95521 square feet']"}
{"id": "135-1", "oq_id": 135, "desc": "Input: a list of strings containing numerical values followed by units of measurement (square meters).\nOutput: a list of strings containing the values converted to square feet with units changed accordingly.\n\nFunctionality: The transformation converts each numerical value from square meters to square feet in the given sequence, and formats the result as a string with the corresponding unit (square feet).\nExample: Input: ['30 square meters', '100 square meters', '625 square meters', '800 square meters', '275 square meters']; output: ['322.917313 square feet', '1076.39104 square feet', '6727.44401 square feet', '8611.12833 square feet', '2960.07536 square feet']"}
{"id": "135-3", "oq_id": 135, "desc": "Input: a list of strings containing numerical values followed by units of measurement (square meters).\nOutput: a list of strings containing the values converted to square feet with the appropriate unit.\n\nFunctionality: The transformation converts each numerical value from square meters to square feet in the given sequence, and formats the result as a string with the corresponding unit.\n\nExample: Input: ['88 square meters', '123 square meters', '333 square meters', '555 square meters', '999 square meters']; output: ['947.224117 square feet', '1323.96098 square feet', '3584.38217 square feet', '5973.97028 square feet', '10753.1465 square feet']"}
{"id": "135-2", "oq_id": 135, "desc": "Input: a list of string values, representing areas in square meters.\nOutput: a list of string values, representing areas in square feet.\nFunctionality: The transformation converts each area value from square meters to square feet using the conversion factor of 10.7639, and formats the result as a string with \"square feet\" appended.\nExample: Input: ['15 square meters', '300 square meters', '1000 square meters', '420 square meters', '750 square meters']; output: ['161.458656 square feet', '3229.17313 square feet', '10763.9104 square feet', '4520.84238 square feet', '8072.93281 square feet']"}
{"id": "135-6", "oq_id": 135, "desc": "Input: a list of strings containing numerical values followed by units of measurement (square meters).\nOutput: a list of strings containing the values converted to square feet with units changed accordingly.\n\nFunctionality: The transformation converts each numerical value from square meters to square feet in the given sequence, and formats the result as a string with the corresponding unit (square feet).\nExample: Input: ['75 square meters', '600 square meters', '888 square meters', '111 square meters', '999 square meters']; output: ['807.293281 square feet', '6458.34625 square feet', '9558.35245 square feet', '1194.79406 square feet', '10753.1465 square feet']"}
{"id": "135-7", "oq_id": 135, "desc": "Input: a list of string values, representing areas in square meters.\nOutput: a list of string values, representing areas in square feet.\nFunctionality: The transformation converts each area from square meters to square feet using the conversion factor of 10.7639, and formats the result as a string in the output list.\nExample: Input: ['111 square meters', '345 square meters', '678 square meters', '901 square meters', '123 square meters']; output: ['1194.79406 square feet', '3713.54909 square feet', '7297.93126 square feet', '9698.28329 square feet', '1323.96098 square feet']"}
{"id": "135-5", "oq_id": 135, "desc": "Input: a list of strings containing measurements in square meters.\nOutput: a list of strings containing measurements in square feet.\nFunctionality: The transformation converts each square meter measurement to square feet using the conversion factor of 10.7639 and formats the result in the output list.\nExample: Input: ['50 square meters', '800 square meters', '999 square meters', '333 square meters', '222 square meters']; output: ['538.195521 square feet', '8611.12833 square feet', '10753.1465 square feet', '3584.38217 square feet', '2389.58811 square feet']"}
{"id": "135-4", "oq_id": 135, "desc": "Input: a list of strings with numerical values representing square meters.\nOutput: a list of strings with numerical values in square feet.\nFunctionality: The transformation converts square meters to square feet by multiplying each numerical value by 10.7639.\nExample: Input: ['22 square meters', '444 square meters', '777 square meters', '200 square meters', '333 square meters']; output: ['236.806029 square feet', '4779.17623 square feet', '8363.55839 square feet', '2152.78208 square feet', '3584.38217 square feet']"}
{"id": "136-8", "oq_id": 136, "desc": "Input: a list of string values, representing areas in square feet.\nOutput: a list of string values, representing areas in square yards.\nFunctionality: The transformation converts each area in square feet to square yards by dividing the value by 9, and output the result as a formatted string in the result list.\nExample: Input: ['35 square feet', '75 square feet', '140 square feet', '230 square feet', '320 square feet']; output: ['3.88888889 square yards', '8.33333333 square yards', '15.5555556 square yards', '25.5555556 square yards', '35.5555556 square yards']"}
{"id": "136-9", "oq_id": 136, "desc": "Input: a list of strings containing measurements in square feet.\nOutput: a list of strings containing measurements in square yards.\nFunctionality: The transformation converts square feet to square yards by dividing each numerical value by 9 and then formatting the result.\nExample: Input: ['88 square feet', '345 square feet', '678 square feet', '987 square feet', '1111 square feet']; output: ['9.77777778 square yards', '38.3333333 square yards', '75.3333333 square yards', '109.666667 square yards', '123.444444 square yards']"}
{"id": "136-1", "oq_id": 136, "desc": "Input: a list of string values, representing areas in square feet.\nOutput: a list of string values, representing areas in square yards.\nFunctionality: The transformation converts each area in square feet to square yards by dividing the value by 9 and outputting the result as a formatted string in the result list.\nExample: Input: ['25 square feet', '700 square feet', '4000 square feet', '789 square feet', '1234 square feet']; output: ['2.77777778 square yards', '77.7777778 square yards', '444.444444 square yards', '87.6666667 square yards', '137.111111 square yards']"}
{"id": "136-0", "oq_id": 136, "desc": "Input: a list of string values, with values in square feet format.\nOutput: a list of string values, with values in square yards format.\nFunctionality: The transformation converts square feet values to square yards by dividing each value by 9 and rounding to 8 decimal places, then appending 'square yards' to the result.\nExample: Input: ['15 square feet', '500 square feet', '3000 square feet', '456 square feet', '999 square feet']; output: ['1.66666667 square yards', '55.5555556 square yards', '333.333333 square yards', '50.6666667 square yards', '111 square yards']"}
{"id": "136-2", "oq_id": 136, "desc": "Input: a list of string values, representing areas in square feet.\nOutput: a list of string values, representing areas in square yards.\nFunctionality: The transformation converts each area in square feet to square yards by dividing the value by 9, and formats the result as a string in the output list.\nExample: Input: ['30 square feet', '800 square feet', '5000 square feet', '1000 square feet', '200 square feet']; output: ['3.33333333 square yards', '88.8888889 square yards', '555.555556 square yards', '111.111111 square yards', '22.2222222 square yards']"}
{"id": "136-3", "oq_id": 136, "desc": "Input: a list of string values, representing areas in square feet.\nOutput: a list of string values, representing areas in square yards.\nFunctionality: The transformation converts each area in square feet to square yards by dividing the value by 9 and rounding to 9 decimal places, then formats the result as a string in the output list.\nExample: Input: ['50 square feet', '100 square feet', '150 square feet', '250 square feet', '350 square feet']; output: ['5.55555556 square yards', '11.1111111 square yards', '16.6666667 square yards', '27.7777778 square yards', '38.8888889 square yards']"}
{"id": "136-7", "oq_id": 136, "desc": "Input: a list of strings with measurements in square feet.\nOutput: a list of strings with measurements converted to square yards.\n\nFunctionality: The transformation converts each measurement in square feet to square yards by dividing by 9, and formats the result as a string with the unit \"square yards\".\nExample: Input: ['80 square feet', '160 square feet', '630 square feet', '900 square feet', '720 square feet']; output: ['8.88888889 square yards', '17.7777778 square yards', '70 square yards', '100 square yards', '80 square yards']"}
{"id": "136-6", "oq_id": 136, "desc": "Input: a list of string values, with values in square feet format.\nOutput: a list of string values, with values in square yards format.\nFunctionality: The transformation converts each element from square feet to square yards by dividing the value by 9.\nExample: Input: ['75 square feet', '135 square feet', '245 square feet', '385 square feet', '475 square feet']; output: ['8.33333333 square yards', '15 square yards', '27.2222222 square yards', '42.7777778 square yards', '52.7777778 square yards']"}
{"id": "136-4", "oq_id": 136, "desc": "Input: a list of strings containing measurements in square feet.\nOutput: a list of strings containing measurements in square yards.\nFunctionality: The transformation converts square feet to square yards by dividing each value by 9 and rounding to 8 decimal places, then formats the result as a string in the output list.\nExample: Input: ['70 square feet', '200 square feet', '650 square feet', '750 square feet', '950 square feet']; output: ['7.77777778 square yards', '22.2222222 square yards', '72.2222222 square yards', '83.3333333 square yards', '105.555556 square yards']"}
{"id": "136-5", "oq_id": 136, "desc": "Input: a list of string values, representing areas in square feet.\nOutput: a list of string values, representing areas in square yards.\nFunctionality: The transformation converts each area in square feet to square yards by dividing the value by 9 and rounding to 7 decimal places, then formats the result as a string in the output list.\nExample: Input: ['100 square feet', '400 square feet', '800 square feet', '1200 square feet', '1600 square feet']; output: ['11.1111111 square yards', '44.4444444 square yards', '88.8888889 square yards', '133.333333 square yards', '177.777778 square yards']"}
{"id": "137-8", "oq_id": 137, "desc": "Input: a list of numerical values.\nOutput: a list of strings formatted as '<number> m'.\nFunctionality: The transformation converts each element in the given sequence from inches to meters, and formats the result with ' m' as the unit.\nExample: Input: [123, 246, 369, 492, 615]; output: ['3.1242 m', '6.2484 m', '9.3726 m', '12.4968 m', '15.621 m']"}
{"id": "137-9", "oq_id": 137, "desc": "Input: a list of numerical values representing lengths in inches.\nOutput: a list of numerical values representing lengths in meters.\nFunctionality: The transformation converts each element in the given sequence from inches to meters, using the conversion factor: 1 inch = 0.0254 meters.\nExample: Input: [30, 60, 90, 120, 150]; output: ['0.762 m', '1.524 m', '2.286 m', '3.048 m', '3.81 m']"}
{"id": "137-2", "oq_id": 137, "desc": "Input: a list of numerical values representing lengths in inches.\nOutput: a list of numerical values representing lengths in meters.\nFunctionality: The transformation converts each element from inches to meters by dividing each element by 39.37, and outputs the results in a new list.\nExample: Input: [25, 50, 75, 100, 125]; output: ['0.635 m', '1.27 m', '1.905 m', '2.54 m', '3.175 m']"}
{"id": "137-3", "oq_id": 137, "desc": "Input: a list of numerical values representing lengths in inches. \nOutput: a list of numerical values representing lengths in meters.\nFunctionality: The transformation converts each element from inches to meters by dividing by 39.37 (since 1 inch is approximately equal to 0.0254 meters), and formats the result with 'm' as the unit.\nExample: Input: [360, 720, 1080, 1440, 1800]; output: ['9.144 m', '18.288 m', '27.432 m', '36.576 m', '45.72 m']"}
{"id": "137-1", "oq_id": 137, "desc": "Input: a list of numerical values representing lengths in inches.\nOutput: a list of numerical values representing lengths in meters.\nFunctionality: The transformation converts each element from inches to meters by multiplying each element by 0.0254 and output the result as a list.\nExample: Input: [10, 20, 30, 40, 50]; output: ['0.254 m', '0.508 m', '0.762 m', '1.016 m', '1.27 m']"}
{"id": "137-0", "oq_id": 137, "desc": "Input: a list of numerical values representing lengths in inches. \nOutput: a list of strings representing lengths in meters. \nFunctionality: The transformation converts each length from inches to meters by multiplying it by 0.0254, and formats the result as a string with \"m\" unit appended. \nExample: Input: [1, 500, 750, 1000, 1500]; output: ['0.0254 m', '12.7 m', '19.05 m', '25.4 m', '38.1 m']"}
{"id": "137-4", "oq_id": 137, "desc": "Input: a list of numerical values representing lengths in inches.\nOutput: a list of numerical values representing lengths in meters.\nFunctionality: The transformation converts each element from inches to meters by multiplying each element by 0.0254 and output the result as a list.\nExample: Input: [5, 15, 25, 35, 45]; output: ['0.127 m', '0.381 m', '0.635 m', '0.889 m', '1.143 m']"}
{"id": "137-5", "oq_id": 137, "desc": "Input: a list of numerical values representing lengths in inches.\nOutput: a list of strings representing lengths in meters.\nFunctionality: The transformation converts each element representing length in inches to meters by dividing it by 39.37 (1 inch is approximately equal to 0.0254 meters), and formats the result as a string in the format of '<result> m'.\nExample: Input: [800, 1600, 2400, 3200, 4000]; output: ['20.32 m', '40.64 m', '60.96 m', '81.28 m', '101.6 m']"}
{"id": "137-7", "oq_id": 137, "desc": "Input: a list of numerical values representing lengths in inches.\nOutput: a list of numerical values representing lengths in meters.\nFunctionality: The transformation converts each element in the given sequence from inches to meters, using the conversion factor: 1 inch = 0.0254 meters.\nExample: Input: [55, 110, 165, 220, 275]; output: ['1.397 m', '2.794 m', '4.191 m', '5.588 m', '6.985 m']"}
{"id": "137-6", "oq_id": 137, "desc": "Input: a list of numerical values.\nOutput: a list of strings formatted as meters with two decimal places.\nFunctionality: The transformation converts each element from inches to meters by multiplying the value by 0.0254 and formatting it with two decimal places.\nExample: Input: [2, 4, 6, 8, 10]; output: ['0.0508 m', '0.1016 m', '0.1524 m', '0.2032 m', '0.254 m']"}
{"id": "138-7", "oq_id": 138, "desc": "Input: a list of string values, where each element represents a land area measurement in acres.\nOutput: a list of string values, where each element represents the same land area measurement in square feet.\nFunctionality: The transformation converts each acre value to square feet by multiplying it by 43,560 (the number of square feet in an acre) and formats the result as a string in the output list.\nExample: Input: ['0.7 acres', '1.3 acres', '11 acres', '4.7 acres', '7.9 acres']; output: ['30491 square feet', '56628 square feet', '479160 square feet', '204732 square feet', '344124 square feet']"}
{"id": "138-6", "oq_id": 138, "desc": "Input: a list of string values, where each element includes a numerical value with \"acres\" as the unit of measurement.\nOutput: a list of string values, where each element includes the corresponding area in square feet.\n\nFunctionality: The transformation converts the area from acres to square feet by multiplying each numerical value by 43560 (1 acre = 43560 square feet) and appends \"square feet\" to the result as a string.\n\nExample: Input: ['3.5 acres', '2.1 acres', '12.8 acres', '1.7 acres', '5.2 acres']; output: ['152460 square feet', '91476 square feet', '557568 square feet', '74052 square feet', '226512 square feet']"}
{"id": "138-4", "oq_id": 138, "desc": "Input: a list of string values, where each element includes a numerical value with \"acres\" as the unit of measurement.\nOutput: a list of string values, where each element includes the corresponding numerical value converted to square feet.\n\nFunctionality: The transformation converts each numerical value from acres to square feet in the given sequence, and formats the result as a string in the output list.\n\nExample: Input: ['0.9 acres', '2.7 acres', '13.4 acres', '1.2 acres', '5.5 acres']; output: ['39204 square feet', '117612 square feet', '583704 square feet', '52272 square feet', '239580 square feet']"}
{"id": "138-5", "oq_id": 138, "desc": "Input: a list of string values, each containing a numerical value followed by \"acres\".\nOutput: a list of string values, each representing the numerical value in square feet.\n\nFunctionality: The transformation converts each numerical value from acres to square feet by multiplying it by 43560, then formats the result as a string in the output list.\n\nExample: Input: ['8 acres', '4.9 acres', '14 acres', '0.4 acres', '6.3 acres']; output: ['348480 square feet', '213444 square feet', '609840 square feet', '17424 square feet', '274428 square feet']"}
{"id": "138-1", "oq_id": 138, "desc": "Input: a list of string values, each containing a numerical value followed by \"acres\".\nOutput: a list of string values, each representing the area in square feet.\nFunctionality: The transformation converts each numerical value in acres to square feet by multiplying it by 43560, and then formats the result as a string in the output list.\nExample: Input: ['6 acres', '2.5 acres', '10 acres', '2.3 acres', '7.8 acres']; output: ['261360 square feet', '108900 square feet', '435600 square feet', '100188 square feet', '339768 square feet']"}
{"id": "138-0", "oq_id": 138, "desc": "Input: a list of string values, with numerical and measurement unit values in each element.\nOutput: a list of string values representing area in square feet.\n\nFunctionality: The transformation involves converting acres to square feet. To achieve this, each element in the given sequence is split into two parts - the numerical value and the unit value. The numerical value is then multiplied by 43560 (the conversion factor from acres to square feet) to calculate the area in square feet, and the result is formatted as a string in the output list.\n\nExample: Input: ['3 acres', '1.25 acres', '8 acres', '0.75 acres', '12 acres']; output: ['130680 square feet', '54450 square feet', '348480 square feet', '32670 square feet', '522720 square feet']"}
{"id": "138-2", "oq_id": 138, "desc": "Input: a list of string values, each element containing a numerical value followed by \"acres\".\nOutput: a list of string values, each element containing the numerical value converted to square feet.\nFunctionality: The transformation converts acres to square feet by multiplying each numerical value by 43560.\nExample: Input: ['1.8 acres', '4.2 acres', '9.6 acres', '0.3 acres', '7.4 acres']; output: ['78408 square feet', '182952 square feet', '418176 square feet', '13068 square feet', '322344 square feet']"}
{"id": "138-3", "oq_id": 138, "desc": "Input: a list of string values, where each element represents a land area measurement in acres.\nOutput: a list of string values, where each element represents the same land area measurement in square feet.\nFunctionality: The transformation converts each land area measurement from acres to square feet by multiplying the value by 43560, and output the result as a string in the format \"<value> square feet\".\nExample: Input: ['5 acres', '3.1 acres', '11.5 acres', '2.8 acres', '6.6 acres']; output: ['217800 square feet', '135036 square feet', '500940 square feet', '121967 square feet', '287496 square feet']"}
{"id": "138-8", "oq_id": 138, "desc": "Input: a list of string values, where each element includes a numerical value with \"acres\" as the unit of measurement.\nOutput: a list of string values, where each element includes the numerical value converted to square feet with \"square feet\" as the unit of measurement.\nFunctionality: The transformation converts the numerical value from acres to square feet in each element of the given sequence and formats the result as a string in the output list.\nExample: Input: ['2.3 acres', '0.8 acres', '10.2 acres', '3.6 acres', '6.1 acres']; output: ['100187 square feet', '34848 square feet', '444311 square feet', '156816 square feet', '265716 square feet']"}
{"id": "138-9", "oq_id": 138, "desc": "Input: a list of string values, where each element represents a land area measurement in acres.\nOutput: a list of string values, where each element represents the same land area measurement in square feet.\nFunctionality: The transformation converts each acre value to square feet by multiplying it by 43,560, and formats the result as a string in the output list.\nExample: Input: ['4.5 acres', '1.9 acres', '13 acres', '2.9 acres', '8.2 acres']; output: ['196020 square feet', '82764 square feet', '566280 square feet', '126324 square feet', '357191 square feet']"}
{"id": "139-4", "oq_id": 139, "desc": "Input: a list of string values, with volume measurements in liters in each element.\nOutput: a list of string values, with volume measurements converted to ounces in each element.\nFunctionality: The transformation converts each volume measurement from liters to ounces using the conversion factor of 33.814.\nExample: Input: ['6 L', '600 L', '12 L', '240 L', '60 L']; output: ['202.884136 oz', '20288.4136 oz', '405.768272 oz', '8115.36545 oz', '2028.84136 oz']"}
{"id": "139-5", "oq_id": 139, "desc": "Input: a list of string values, with volume measurements in liters in each element.\nOutput: a list of string values, with volume measurements converted to ounces in each element.\nFunctionality: The transformation converts each volume measurement from liters to ounces by multiplying it by 33.814, then formats the result as a string in the output list.\nExample: Input: ['7 L', '700 L', '14 L', '280 L', '70 L']; output: ['236.698159 oz', '23669.8159 oz', '473.396318 oz', '9467.92636 oz', '2366.98159 oz']"}
{"id": "139-7", "oq_id": 139, "desc": "Input: a list of string values, with numerical values followed by a space and a unit of measurement (liters in this case).\nOutput: a list of string values with numerical values converted from liters to ounces.\nFunctionality: The transformation converts each numerical value from liters to ounces using the conversion factor of 33.814, and formats the result with the unit of measurement as \"oz\".\nExample: Input: ['9 L', '900 L', '18 L', '360 L', '45 L']; output: ['304.326204 oz', '30432.6204 oz', '608.652409 oz', '12173.0482 oz', '1521.63102 oz']"}
{"id": "139-6", "oq_id": 139, "desc": "Input: a list of string values, with numerical values followed by a space and a unit of measurement in each element.\nOutput: a list of string values, with numerical values converted from liters to ounces.\nFunctionality: The transformation calculates the equivalent amount in ounces for each liter value in the given sequence and formats the result in the output list.\nExample: Input: ['8 L', '800 L', '16 L', '320 L', '90 L']; output: ['270.512182 oz', '27051.2182 oz', '541.024363 oz', '10820.4873 oz', '3043.26204 oz']"}
{"id": "139-2", "oq_id": 139, "desc": "Input: a list of string values, with quantity measurements in liters.\nOutput: a list of string values, with quantity measurements converted to ounces.\n\nFunctionality: The transformation converts each quantity in liters to ounces by multiplying the liter value by 33.814, and outputs the result as a list with each quantity formatted as a string with the 'oz' unit.\n\nExample: Input: ['4 L', '1000 L', '20 L', '300 L', '25 L']; output: ['135.256091 oz', '33814.0227 oz', '676.280454 oz', '10144.2068 oz', '845.350568 oz']"}
{"id": "139-3", "oq_id": 139, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement (liters).\nOutput: a list of string values, with numerical values converted to ounces.\nFunctionality: The transformation converts each numerical value from liters to ounces by multiplying by 33.814, and appends the result with \"oz\" to the output list.\nExample: Input: ['5 L', '5000 L', '30 L', '180 L', '80 L']; output: ['169.070114 oz', '169070.114 oz', '1014.42068 oz', '6086.52409 oz', '2705.12182 oz']"}
{"id": "139-1", "oq_id": 139, "desc": "Input: a list of string values, each representing a volume in liters.\nOutput: a list of string values, each representing the equivalent volume in ounces.\nFunctionality: The transformation converts each volume from liters to ounces using the conversion factor 33.814, and formats the result as a string in the output list.\nExample: Input: ['3 L', '750 L', '15 L', '150 L', '75 L']; output: ['101.442068 oz', '25360.517 oz', '507.210341 oz', '5072.10341 oz', '2536.0517 oz']"}
{"id": "139-0", "oq_id": 139, "desc": "Input: a list of string values, with numerical values followed by 'L' (liters) in each element.\nOutput: a list of string values, with numerical values converted to ounces and formatted as strings.\nFunctionality: The transformation converts liters to ounces by multiplying each numerical value by 33.814, and then formats the result with 'oz' as the unit.\nExample: Input: ['2 L', '500 L', '10 L', '200 L', '50 L']; output: ['67.6280454 oz', '16907.0114 oz', '338.140227 oz', '6762.80454 oz', '1690.70114 oz']"}
{"id": "139-8", "oq_id": 139, "desc": "Input: a list of string values, with numerical values followed by a space and a unit of measurement (e.g. 'L' for liters).\nOutput: a list of string values, where each numerical value is converted from liters to ounces and formatted as a string.\n\nFunctionality: The transformation converts each numerical value from liters to ounces by multiplying it by 33.8140227 (conversion factor from liters to ounces) and formatting the result as a string in the output list.\n\nExample: Input: ['10 L', '100 L', '200 L', '500 L', '1000 L']; output: ['338.140227 oz', '3381.40227 oz', '6762.80454 oz', '16907.0114 oz', '33814.0227 oz']"}
{"id": "139-9", "oq_id": 139, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing the numerical value converted from liters to ounces, followed by the unit of measurement \"oz.\"\n\nFunctionality: The transformation converts each numerical value from liters to ounces by multiplying it by 33.814, and formats the result with the converted value and the unit of measurement \"oz.\"\n\nExample: Input: ['15 L', '150 L', '300 L', '450 L', '600 L']; output: ['507.210341 oz', '5072.10341 oz', '10144.2068 oz', '15216.3102 oz', '20288.4136 oz']"}
{"id": "140-7", "oq_id": 140, "desc": "Input: a list of string values, with measurements in centimeters in each element.\nOutput: a list of string values, with measurements in inches in each element.\nFunctionality: The transformation converts each measurement from centimeters to inches by multiplying it by 0.393701 and format the result as a string in the output list.\nExample: Input: ['5 cm', '10 cm', '15 cm', '20 cm', '25 cm']; output: ['1.96850394 inch', '3.93700787 inch', '5.90551181 inch', '7.87401575 inch', '9.84251968 inch']"}
{"id": "140-6", "oq_id": 140, "desc": "Input: a list of string values, with measurements in centimeters in each element.\nOutput: a list of string values, with measurements in inches in each element.\nFunctionality: The transformation converts each measurement from centimeters to inches by multiplying it by 0.393701 and format the result as a string in the output list.\nExample: Input: ['30 cm', '35 cm', '40 cm', '45 cm', '50 cm']; output: ['11.81102362 inch', '13.77952756 inch', '15.74803150 inch', '17.71653543 inch', '19.68503937 inch']"}
{"id": "140-4", "oq_id": 140, "desc": "Input: a list of string values, with measurements in centimeters in each element.\nOutput: a list of string values, with measurements in inches in each element.\nFunctionality: The transformation converts each measurement from centimeters to inches by multiplying it by 0.393701 and format the result as a string in the output list.\nExample: Input: ['3 cm', '6 cm', '9 cm', '12 cm', '15 cm']; output: ['1.18110236 inch', '2.36220472 inch', '3.54330709 inch', '4.72440945 inch', '5.90551181 inch']"}
{"id": "140-5", "oq_id": 140, "desc": "Input: a list of string values, with measurements in centimeters in each element.\nOutput: a list of string values, with measurements in inches in each element.\nFunctionality: The transformation converts each measurement from centimeters to inches by multiplying it by 0.393701.\nExample: Input: ['2 cm', '4 cm', '6 cm', '8 cm', '10 cm']; output: ['0.78740157 inch', '1.57480315 inch', '2.36220472 inch', '3.14960630 inch', '3.93700787 inch']"}
{"id": "140-1", "oq_id": 140, "desc": "Input: a list of string values, with measurements in centimeters in each element.\nOutput: a list of string values, with measurements in inches in each element.\nFunctionality: The transformation converts each measurement from centimeters to inches by multiplying it by 0.393701 and format the result as a string in the output list.\nExample: Input: ['7 cm', '8 cm', '9 cm', '10 cm', '11 cm']; output: ['2.75590551 inch', '3.14960630 inch', '3.54330709 inch', '3.93700787 inch', '4.33070866 inch']"}
{"id": "140-0", "oq_id": 140, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values, with the numerical values converted from centimeters to inches in each element.\nFunctionality: The transformation converts each numerical value from centimeters to inches using the conversion rate of 1 cm = 0.393701 inch, and outputs the converted values in the result list.\nExample: Input: ['10 cm', '15 cm', '20 cm', '25 cm']; output: ['3.93700787 inch', '5.90551181 inch', '7.87401575 inch', '9.84251968 inch']"}
{"id": "140-2", "oq_id": 140, "desc": "Input: a list of string values, with measurements in centimeters in each element.\nOutput: a list of string values, with measurements in inches in each element.\nFunctionality: The transformation converts each measurement from centimeters to inches by multiplying it by 0.393701.\nExample: Input: ['4 cm', '9 cm', '14 cm', '19 cm', '24 cm']; output: ['1.57480315 inch', '3.54330709 inch', '5.51181102 inch', '7.48031496 inch', '9.44881890 inch']"}
{"id": "140-3", "oq_id": 140, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing the same numerical values converted from centimeters to inches.\nFunctionality: The transformation converts each numerical value from centimeters to inches using the conversion factor 1 cm = 0.393701 inch, and formats the result using the appropriate unit of measurement.\nExample: Input: ['12 cm', '18 cm', '24 cm', '30 cm']; output: ['4.72440945 inch', '7.08661417 inch', '9.44881890 inch', '11.81102362 inch']"}
{"id": "140-8", "oq_id": 140, "desc": "Input: a list of string values, with measurements in centimeters in each element.\nOutput: a list of string values, with measurements in inches in each element.\nFunctionality: The transformation converts each measurement from centimeters to inches by multiplying it by 0.39370079, and formats the result using the \" inch\" suffix.\nExample: Input: ['1 cm', '7 cm', '13 cm', '19 cm', '25 cm']; output: ['0.39370079 inch', '2.75590551 inch', '5.11811024 inch', '7.48031496 inch', '9.84251968 inch']"}
{"id": "140-9", "oq_id": 140, "desc": "Input: a list of string values, with measurements in centimeters in each element.\nOutput: a list of string values, with measurements in inches in each element.\nFunctionality: The transformation converts each measurement from centimeters to inches by multiplying it by 0.393701 and format the result as a string in the output list.\nExample: Input: ['50 cm', '55 cm', '60 cm', '65 cm', '70 cm']; output: ['19.68503937 inch', '21.65354331 inch', '23.62204724 inch', '25.59055118 inch', '27.55905512 inch']"}
{"id": "141-4", "oq_id": 141, "desc": "Input: a list of string values, with numerical values followed by 'mg' in each element.\nOutput: a list of string values, with numerical values followed by 'ml'.\nFunctionality: The transformation converts the numerical value from milligrams (mg) to milliliters (ml) by multiplying each element by 2, and appends 'ml' to the result.\nExample: Input: ['8 mg', '55 mg', '90 mg', '120 mg', '350 mg']; output: ['16 ml', '110 ml', '180 ml', '240 ml', '700 ml']"}
{"id": "141-5", "oq_id": 141, "desc": "Input: a list of string values, with numerical values followed by \"mg\" in each element.  \nOutput: a list of string values, with numerical values converted from \"mg\" to \"ml\" in each element.  \nFunctionality: The transformation involves converting each numerical value from milligrams (mg) to milliliters (ml) by multiplying by 2, and then appending \"ml\" to the result.  \nExample: Input: ['25 mg', '45 mg', '70 mg', '130 mg', '325 mg']; output: ['50 ml', '90 ml', '140 ml', '260 ml', '650 ml']"}
{"id": "141-7", "oq_id": 141, "desc": "Input: a list of string values, with numerical values followed by \"mg\" in each element.  \nOutput: a list of string values, with numerical values converted from \"mg\" to \"ml\" in each element.  \nFunctionality: The transformation involves converting each numerical value from milligrams (mg) to milliliters (ml) by multiplying by 2, and output the results as a list.  \nExample: Input: ['18 mg', '38 mg', '65 mg', '170 mg', '225 mg']; output: ['36 ml', '76 ml', '130 ml', '340 ml', '450 ml']"}
{"id": "141-6", "oq_id": 141, "desc": "Input: a list of string values, each element containing a numerical value followed by \"mg\".\nOutput: a list of string values, each element containing the numerical value converted to ml with \"ml\" added at the end.\nFunctionality: The transformation converts each numerical value from mg to ml by multiplying it by 2, and constructs the output list with the result.\nExample: Input: ['12 mg', '48 mg', '85 mg', '180 mg', '275 mg']; output: ['24 ml', '96 ml', '170 ml', '360 ml', '550 ml']"}
{"id": "141-2", "oq_id": 141, "desc": "Input: a list of string values, each element containing a numerical value followed by \"mg\".\nOutput: a list of string values, each element containing the numerical value converted to ml with \"ml\" added at the end.\nFunctionality: The transformation converts each numerical value from mg to ml by multiplying it by 2, and constructs the output list with the result.\nExample: Input: ['10 mg', '40 mg', '80 mg', '200 mg', '400 mg']; output: ['20 ml', '80 ml', '160 ml', '400 ml', '800 ml']"}
{"id": "141-3", "oq_id": 141, "desc": "Input: a list of string values, with numerical values followed by 'mg' in each element.  \nOutput: a list of string values, where 'mg' is converted to 'ml' and the numerical value is divided by 2.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts 'mg' to 'ml', divides the numerical value by 2, and formats each element in the result list.  \nExample: Input: ['15 mg', '35 mg', '60 mg', '175 mg', '275 mg']; output: ['30 ml', '70 ml', '120 ml', '350 ml', '550 ml']"}
{"id": "141-1", "oq_id": 141, "desc": "Input: a list of string values, with numerical values followed by 'mg' in each element.  \nOutput: a list of string values, where 'mg' is converted to 'ml' and the numerical value is divided by 5.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts 'mg' to 'ml', divides the numerical value by 5, and formats each element in the result list.  \nExample: Input: ['2 mg', '30 mg', '75 mg', '125 mg', '250 mg']; output: ['4 ml', '60 ml', '150 ml', '250 ml', '500 ml']"}
{"id": "141-0", "oq_id": 141, "desc": "Input: a list of string values, with numerical values followed by 'mg' in each element.  \nOutput: a list of string values, where 'mg' is replaced by 'ml' and each numerical value is divided by 5 and formatted as a string in the result list.  \nFunctionality: The transformation converts 'mg' to 'ml' and divides each numerical value by 5 in the given sequence, outputting the result as a list.  \nExample: Input: ['5 mg', '20 mg', '50 mg', '150 mg', '300 mg']; output: ['10 ml', '40 ml', '100 ml', '300 ml', '600 ml']"}
{"id": "141-8", "oq_id": 141, "desc": "Input: a list of string values, with numerical values followed by 'mg' in each element.  \nOutput: a list of string values, where 'mg' is converted to 'ml' and the numerical value is doubled.  \nFunctionality: The transformation extracts the numerical value from each element in the given sequence, multiplies it by 2, and replaces 'mg' with 'ml'.  \nExample: Input: ['22 mg', '42 mg', '55 mg', '190 mg', '275 mg']; output: ['44 ml', '84 ml', '110 ml', '380 ml', '550 ml']"}
{"id": "141-9", "oq_id": 141, "desc": "Input: a list of string values, with numerical values followed by \"mg\" in each element.  \nOutput: a list of string values, where the numerical value is converted from mg to ml and formatted as \"X ml\".  \nFunctionality: The transformation extracts the numerical value from each element in the given sequence, multiplies it by 2 to convert from mg to ml, and formats the result as a string with \" ml\" appended.  \nExample: Input: ['7 mg', '33 mg', '88 mg', '140 mg', '275 mg']; output: ['14 ml', '66 ml', '176 ml', '280 ml', '550 ml']"}
{"id": "142-5", "oq_id": 142, "desc": "Input: a list of string values, with numerical values followed by \"feet\" in each element.\nOutput: a list of string values with the numerical values converted to meters and appended with \"m\".\n\nFunctionality: The transformation converts the numerical value in feet to meters by multiplying by 0.3048, and formats the result with \"m\". \n\nExample: Input: ['7 feet', '14 feet', '21 feet', '28 feet', '35 feet']; output: ['2.1336 m', '4.2672 m', '6.4008 m', '8.5344 m', '10.6680 m']"}
{"id": "142-4", "oq_id": 142, "desc": "Input: a list of string values, with numerical values followed by \"feet\" in each element.\nOutput: a list of string values with numerical values converted to meters and formatted as strings in the result list.\nFunctionality: The transformation converts the numerical value from feet to meters by multiplying it by 0.3048 (the conversion factor from feet to meters) and formats the result as a string in the output list.\nExample: Input: ['2 feet', '4 feet', '6 feet', '8 feet', '10 feet']; output: ['0.6096 m', '1.2192 m', '1.8288 m', '2.4384 m', '3.0480 m']"}
{"id": "142-6", "oq_id": 142, "desc": "Input: a list of string values, with numerical values followed by \"feet\" in each element.\nOutput: a list of string values, with numerical values converted to meters and appended with \"m\" in the result list.\nFunctionality: The transformation converts each numerical value from feet to meters by multiplying it with 0.3048, then formats the result with \"m\" as the unit.\nExample: Input: ['12 feet', '22 feet', '32 feet', '42 feet', '52 feet']; output: ['3.6576 m', '6.7056 m', '9.7536 m', '12.8016 m', '15.8496 m']"}
{"id": "142-7", "oq_id": 142, "desc": "Input: a list of string values, with numerical values followed by \"feet\" in each element.\nOutput: a list of string values with the numerical values converted to meters and appended with \"m\".\n\nFunctionality: The transformation converts the numerical value in feet to meters by multiplying by 0.3048 (since 1 foot is approximately 0.3048 meters), and formats the result as a string followed by \"m\".\n\nExample: Input: ['9 feet', '19 feet', '29 feet', '39 feet', '49 feet']; output: ['2.7432 m', '5.7912 m', '8.8392 m', '11.8872 m', '14.9352 m']"}
{"id": "142-3", "oq_id": 142, "desc": "Input: a list of string values, with numerical values followed by \"feet\" in each element.\nOutput: a list of string values with the numerical values converted to meters and formatted with 4 decimal places followed by \"m\".\n\nFunctionality: The transformation converts each numerical value from feet to meters by multiplying it by 0.3048, rounds the result to 4 decimal places, and appends \"m\" to the end of each result.\n\nExample: Input: ['25 feet', '30 feet', '35 feet', '40 feet', '45 feet']; output: ['7.6200 m', '9.1440 m', '10.6680 m', '12.1920 m', '13.7160 m']"}
{"id": "142-2", "oq_id": 142, "desc": "Input: a list of string values, with numerical values followed by \"feet\" in each element.\nOutput: a list of string values with numerical values converted to meters and formatted with \"m\" unit.\n\nFunctionality: The transformation converts each numerical value from feet to meters by multiplying by 0.3048 and appends \"m\" to the result. The output is a list with converted values in meters.\n\nExample: Input: ['8 feet', '11 feet', '16 feet', '1 feet', '19 feet']; output: ['2.4384 m', '3.3528 m', '4.8768 m', '0.3048 m', '5.7912 m']"}
{"id": "142-0", "oq_id": 142, "desc": "Input: a list of string values, with numerical values followed by \"feet\" in each element.\nOutput: a list of string values with the numerical values converted to meters and appended with \"m\".\n\nFunctionality: The transformation converts the numerical values from feet to meters by multiplying them by 0.3048 and appends \"m\" to each result in the output list.\n\nExample: Input: ['10 feet', '15 feet', '12 feet', '6 feet', '2 feet']; output: ['3.0480 m', '4.5720 m', '3.6576 m', '1.8288 m', '0.6096 m']"}
{"id": "142-1", "oq_id": 142, "desc": "Input: a list of string values, with numerical values followed by \"feet\" in each element.\nOutput: a list of string values with the numerical values converted to meters and appended with \"m\".\n\nFunctionality: The transformation converts the numerical value before \"feet\" in each element from feet to meters by multiplying by 0.3048, then formats the result as a string with \"m\" at the end.\n\nExample: Input: ['5 feet', '9 feet', '13 feet', '17 feet', '20 feet']; output: ['1.5240 m', '2.7432 m', '3.9624 m', '5.1816 m', '6.0960 m']"}
{"id": "142-9", "oq_id": 142, "desc": "Input: a list of string values, with numerical values followed by \"feet\" in each element.\nOutput: a list of string values with numerical values converted to meters.\nFunctionality: The transformation converts the numerical value from feet to meters by multiplying it by 0.3048, and appends \"m\" to the result in the output list.\nExample: Input: ['18 feet', '36 feet', '54 feet', '72 feet', '90 feet']; output: ['5.4864 m', '10.9728 m', '16.4592 m', '21.9456 m', '27.4320 m']"}
{"id": "142-8", "oq_id": 142, "desc": "Input: a list of string values, with numerical values followed by \"feet\" in each element.\nOutput: a list of string values with the numerical values converted to meters and appended with \"m\".\nFunctionality: The transformation converts the numerical values from feet to meters by multiplying them by 0.3048 and formats the result in the output list.\nExample: Input: ['11 feet', '24 feet', '37 feet', '50 feet', '63 feet']; output: ['3.3528 m', '7.3152 m', '11.2776 m', '15.2400 m', '19.2024 m']"}
{"id": "144-3", "oq_id": 144, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to millimeters.\nFunctionality: The transformation converts each measurement from inches to millimeters by multiplying by 25.4, and outputs the result as a list of strings.\nExample: Input: ['2 inch', '14 inch', '90 inch', '4 inch', '40 inch']; output: ['50.8 mm', '355.6 mm', '2286 mm', '101.6 mm', '1016 mm']"}
{"id": "144-2", "oq_id": 144, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to millimeters.\nFunctionality: The transformation converts each measurement from inches to millimeters by multiplying by 25.4, and outputs the result as a list of strings.\nExample: Input: ['7 inch', '33 inch', '88 inch', '15 inch', '55 inch']; output: ['177.8 mm', '838.2 mm', '2235.2 mm', '381 mm', '1397 mm']"}
{"id": "144-0", "oq_id": 144, "desc": "Input: a list of string values, with numerical values followed by the unit \"inch\" in each element.\nOutput: a list of string values, with numerical values converted from inches to millimeters and followed by the unit \"mm\".\nFunctionality: The transformation converts each numerical value from inches to millimeters by multiplying by 25.4, then formats the result as a string in the output list.\nExample: Input: ['5 inch', '22 inch', '75 inch', '8 inch', '45 inch']; output: ['127 mm', '558.8 mm', '1905 mm', '203.2 mm', '1143 mm']"}
{"id": "144-1", "oq_id": 144, "desc": "Input: a list of string values, where each element represents a length in inches.\nOutput: a list of string values, where each element represents the equivalent length in millimeters.\nFunctionality: The transformation converts each length in inches to millimeters by multiplying the inch value by 25.4, and outputs the result as a new list of formatted strings.\nExample: Input: ['1 inch', '10 inch', '50 inch', '6 inch', '20 inch']; output: ['25.4 mm', '254 mm', '1270 mm', '152.4 mm', '508 mm']"}
{"id": "144-5", "oq_id": 144, "desc": "Input: a list of string values, where each element represents a length in inches.\nOutput: a list of string values, where each element represents the corresponding length in millimeters.\nFunctionality: The transformation converts each length in inches to millimeters by multiplying the inch value by 25.4, and outputs the result as a new list of formatted strings.\nExample: Input: ['6 inch', '20 inch', '95 inch', '11 inch', '35 inch']; output: ['152.4 mm', '508 mm', '2413 mm', '279.4 mm', '889 mm']"}
{"id": "144-4", "oq_id": 144, "desc": "Input: a list of string values, where each element represents a measurement in inches.\nOutput: a list of string values, where each element represents the equivalent measurement in millimeters.\nFunctionality: The transformation converts each measurement in inches to millimeters by multiplying the inch value by 25.4, and outputs the result as a new list of formatted strings.\nExample: Input: ['9 inch', '25 inch', '70 inch', '12 inch', '30 inch']; output: ['228.6 mm', '635 mm', '1778 mm', '304.8 mm', '762 mm']"}
{"id": "144-6", "oq_id": 144, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to millimeters.\nFunctionality: The transformation converts each measurement from inches to millimeters by multiplying by 25.4, and outputs the result as a list of strings.\nExample: Input: ['4 inch', '18 inch', '80 inch', '9 inch', '60 inch']; output: ['101.6 mm', '457.2 mm', '2032 mm', '228.6 mm', '1524 mm']"}
{"id": "144-7", "oq_id": 144, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to millimeters.\nFunctionality: The transformation converts each measurement from inches to millimeters in the given sequence, and output the result as a list.\nExample: Input: ['8 inch', '28 inch', '85 inch', '7 inch', '50 inch']; output: ['203.2 mm', '711.2 mm', '2159 mm', '177.8 mm', '1270 mm']"}
{"id": "144-9", "oq_id": 144, "desc": "Input: a list of string values, with numerical values followed by the unit \"inch\" in each element.\nOutput: a list of string values, with numerical values converted from inches to millimeters.\nFunctionality: The transformation converts each numerical value in inches to millimeters by multiplying it by 25.4, and formats the result as a string with the unit \"mm\" appended.\nExample: Input: ['10 inch', '30 inch', '110 inch', '19 inch', '75 inch']; output: ['254 mm', '762 mm', '2794 mm', '482.6 mm', '1905 mm']"}
{"id": "144-8", "oq_id": 144, "desc": "Input: a list of string values, with measurements in inches in each element.\nOutput: a list of string values, with measurements converted to millimeters.\nFunctionality: The transformation converts each measurement from inches to millimeters in the given sequence, and output the result as a list.\nExample: Input: ['11 inch', '36 inch', '105 inch', '16 inch', '65 inch']; output: ['279.4 mm', '914.4 mm', '2667 mm', '406.4 mm', '1651 mm']"}
{"id": "145-0", "oq_id": 145, "desc": "Input: a list of strings representing distances in miles.\nOutput: a list of strings representing distances in kilometers.\nFunctionality: The transformation converts each element from miles to kilometers by multiplying by 1.60934, and formats the result as a string in the output list.\nExample: Input: ['5 mile', '10 mile', '50 mile', '100 mile']; output: ['8.04672 km', '16.0934 km', '80.4672 km', '160.934 km']"}
{"id": "145-1", "oq_id": 145, "desc": "Input: a list of string values, each containing a number followed by the word \"mile\".\nOutput: a list of string values, each representing the corresponding distance in kilometers.\nFunctionality: The transformation converts each distance from miles to kilometers using the conversion rate of 1 mile = 1.60934 kilometers.\nExample: Input: ['3 mile', '6 mile', '9 mile', '12 mile']; Output: ['4.82803 km', '9.65606 km', '14.4841 km', '19.3121 km']"}
{"id": "145-3", "oq_id": 145, "desc": "Input: a list of strings with numerical values followed by a unit of measurement.\nOutput: a list of strings with numerical values converted from miles to kilometers, followed by the unit of measurement \"km\".\nFunctionality: The transformation converts each numerical value from miles to kilometers using the conversion factor 1 mile = 1.60934 kilometers.\nExample: Input: ['8 mile', '16 mile', '24 mile', '32 mile']; output: ['12.8748 km', '25.7495 km', '38.6243 km', '51.499 km']"}
{"id": "145-2", "oq_id": 145, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing the numerical values converted from miles to kilometers.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from miles to kilometers by multiplying by 1.60934, and formats the result as a string with \"km\".\nExample: Input: ['25 mile', '50 mile', '75 mile']; output: ['40.2336 km', '80.4672 km', '120.701 km']"}
{"id": "145-6", "oq_id": 145, "desc": "Input: a list of string values, with numerical values followed by a space and the unit 'mile' in each element.\nOutput: a list of string values with numerical values followed by a space and the unit 'km'.\nFunctionality: The transformation converts each numerical value from miles to kilometers using the conversion factor 1 mile = 1.60934 km.\nExample: Input: ['2 mile', '4 mile', '6 mile', '8 mile']; output: ['3.21869 km', '6.43738 km', '9.65606 km', '12.8748 km']"}
{"id": "145-7", "oq_id": 145, "desc": "Input: a list of string values, with numerical values representing miles in each element.\nOutput: a list of string values, with numerical values representing kilometers in each element.\nFunctionality: The transformation converts each mile value to kilometers using the conversion factor of 1 mile = 1.60934 kilometers and formats the result as strings in the output list.\nExample: Input: ['18 mile', '36 mile', '54 mile']; output: ['28.9682 km', '57.9364 km', '86.9046 km']"}
{"id": "145-5", "oq_id": 145, "desc": "Input: a list of string values, with distance values in miles in each element.\nOutput: a list of string values, with distance values converted to kilometers.\nFunctionality: The transformation converts each distance value from miles to kilometers by multiplying it by 1.60934, and formats the result as a string with 'km' appended.\nExample: Input: ['35 mile', '70 mile', '105 mile']; output: ['56.327 km', '112.654 km', '168.981 km']"}
{"id": "145-4", "oq_id": 145, "desc": "Input: a list of string values, with numerical values representing miles in each element.\nOutput: a list of string values, with numerical values representing kilometers in each element.\nFunctionality: The transformation converts each numerical value representing miles in the given sequence to kilometers using the conversion factor of 1 mile = 1.60934 kilometers.\nExample: Input: ['7 mile', '14 mile', '21 mile']; output: ['11.2654 km', '22.5308 km', '33.7962 km']"}
{"id": "145-9", "oq_id": 145, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing the numerical values converted from miles to kilometers.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from miles to kilometers using the conversion factor 1 mile = 1.60934 kilometers, and formats the result as a string in the output list.\nExample: Input: ['27 mile', '54 mile', '81 mile']; output: ['43.4523 km', '86.9046 km', '130.357 km']"}
{"id": "145-8", "oq_id": 145, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing the numerical values converted from miles to kilometers.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it from miles to kilometers using the conversion factor of 1 mile = 1.60934 kilometers, and formats the result as a string in the output list.\nExample: Input: ['22 mile', '44 mile', '66 mile']; output: ['35.4056 km', '70.8111 km', '106.217 km']"}
{"id": "146-1", "oq_id": 146, "desc": "Input: a list of string values in datetime format.\nOutput: a list of string values in datetime format.\nFunctionality: The transformation subtracts one hour from each datetime element in the input sequence and outputs the result as a list.\nExample: Input: ['1998/12/31 23:59:59', '2001/08/15 10:30:45', '2005/04/10 05:20:30', '2018/06/05 21:15:55', '2023/01/01 00:30:20']; output: ['1998/12/31 22:59:59', '2001/08/15 09:30:45', '2005/04/10 04:20:30', '2018/06/05 20:15:55', '2022/12/31 23:30:20']"}
{"id": "146-0", "oq_id": 146, "desc": "Input: a list of string values in datetime format.\nOutput: a list of string values in datetime format.\nFunctionality: The transformation adjusts the time by subtracting 1 hour from each time component in the given sequence.\nExample: Input: ['2010/05/10 12:45:30', '2013/09/20 08:30:15', '2021/11/15 16:20:45', '2022/03/25 14:10:25', '2015/07/02 19:55:40']; Output: ['2010/05/10 11:45:30', '2013/09/20 07:30:15', '2021/11/15 15:20:45', '2022/03/25 13:10:25', '2015/07/02 18:55:40']"}
{"id": "146-2", "oq_id": 146, "desc": "Input: a list of string values in datetime format.\nOutput: a list of string values in datetime format.\nFunctionality: The transformation adjusts the time component in each datetime string from hh:MM:SS to hh-1:MM:SS in the given sequence, and output the result as a list.\nExample: Input: ['2009/11/11 11:11:11', '2012/12/12 12:12:12', '2015/10/10 10:10:10', '2018/09/09 09:09:09', '2021/08/08 08:08:08']; output: ['2009/11/11 10:11:11', '2012/12/12 11:12:12', '2015/10/10 09:10:10', '2018/09/09 08:09:09', '2021/08/08 07:08:08']"}
{"id": "146-3", "oq_id": 146, "desc": "Input: a list of string values, with a specific datetime format in each element.\nOutput: a list of string values, with the hour value decreased by 1 in each element.\nFunctionality: The transformation extracts the hour value from each datetime string in the given sequence, decreases it by 1, and outputs the result as a list.\nExample: Input: ['2003/04/05 06:07:08', '2006/08/10 11:12:13', '2010/12/15 14:15:16', '2014/05/20 17:18:19', '2018/09/25 20:21:22']; output: ['2003/04/05 05:07:08', '2006/08/10 10:12:13', '2010/12/15 13:15:16', '2014/05/20 16:18:19', '2018/09/25 19:21:22']"}
{"id": "146-7", "oq_id": 146, "desc": "Input: a list of string values in datetime format.\nOutput: a list of string values in datetime format.\nFunctionality: The transformation adjusts the hour component in each datetime string by adding 1 hour, and outputs the result as a list.\nExample: Input: ['2004/05/25 10:15:20', '2007/08/30 12:20:25', '2011/12/05 14:25:30', '2015/03/10 16:30:35', '2019/06/15 18:35:40']; output: ['2004/05/25 09:15:20', '2007/08/30 11:20:25', '2011/12/05 13:25:30', '2015/03/10 15:30:35', '2019/06/15 17:35:40']"}
{"id": "146-6", "oq_id": 146, "desc": "Input: a list of string values in datetime format.\nOutput: a list of string values in datetime format.\nFunctionality: The transformation adjusts the time component in each datetime string by adding 1 hour to it, and outputs the modified datetime strings in a list.\nExample: Input: ['2019/02/15 18:20:25', '2022/06/20 21:25:30', '2025/10/25 00:30:35', '2028/01/30 03:35:40', '2031/05/05 06:40:45']; output: ['2019/02/15 17:20:25', '2022/06/20 20:25:30', '2025/10/24 23:30:35', '2028/01/30 02:35:40', '2031/05/05 05:40:45']"}
{"id": "146-4", "oq_id": 146, "desc": "Input: a list of string values in datetime format.\nOutput: a list of string values in datetime format.\nFunctionality: The transformation adjusts the time component in each element of the given sequence by subtracting 1 hour from the time, and outputs the result as a list.\nExample: Input: ['1999/01/01 01:01:01', '2003/02/02 02:02:02', '2007/03/03 03:03:03', '2011/04/04 04:04:04', '2015/05/05 05:05:05']; output: ['1999/01/01 00:01:01', '2003/02/02 01:02:02', '2007/03/03 02:03:03', '2011/04/04 03:04:04', '2015/05/05 04:05:05']"}
{"id": "146-5", "oq_id": 146, "desc": "Input: a list of string values in datetime format.\nOutput: a list of string values in datetime format.\nFunctionality: The transformation adjusts the time component in each element of the given sequence by adding 1 hour to each datetime, and output the adjusted datetime strings in the result list.\nExample: Input: ['2001/03/05 07:10:15', '2004/06/09 09:20:25', '2008/09/13 11:30:35', '2012/12/17 13:40:45', '2016/04/21 15:50:55']; output: ['2001/03/05 08:10:15', '2004/06/09 10:20:25', '2008/09/13 12:30:35', '2012/12/17 14:40:45', '2016/04/21 16:50:55']"}
{"id": "146-8", "oq_id": 146, "desc": "Input: a list of string values in datetime format.\nOutput: a list of string values in datetime format.\nFunctionality: The transformation adjusts the time component in each element of the given sequence by adding 1 hour to each datetime, and output the adjusted datetime strings in the result list.\nExample: Input: ['2014/07/10 16:11:44', '2015/08/11 17:12:45', '2016/09/12 18:13:46', '2017/10/13 19:14:47', '2018/11/14 20:15:48']; output: ['2014/07/10 17:11:44', '2015/08/11 18:12:45', '2016/09/12 19:13:46', '2017/10/13 20:14:47', '2018/11/14 21:15:48']"}
{"id": "146-9", "oq_id": 146, "desc": "Input: a list of string values in datetime format.\nOutput: a list of string values in datetime format.\nFunctionality: The transformation adjusts the time by subtracting 1 hour from each element's time component while keeping the date component the same.\nExample: Input: ['2002/06/30 08:45:50', '2005/10/15 14:30:35', '2008/04/01 18:15:20', '2011/09/20 22:00:05', '2014/12/25 01:45:10']; output: ['2002/06/30 07:45:50', '2005/10/15 13:30:35', '2008/04/01 17:15:20', '2011/09/20 21:00:05', '2014/12/25 00:45:10']"}
{"id": "147-2", "oq_id": 147, "desc": "Input: a list of string values, with numerical values and unit suffixes in each element.\nOutput: a list of string values with a converted unit suffix.\nFunctionality: The transformation converts the unit suffixes from each element in the given sequence to Bytes in the result list.\nExample: Input: ['8B', '80KB', '800MB', '8B', '80B', '800B']; output: ['8 Bytes', '81920 Bytes', '838860800 Bytes', '8 Bytes', '80 Bytes', '800 Bytes']"}
{"id": "147-3", "oq_id": 147, "desc": "Input: a list of string values, with alphanumeric characters and units of measurement.\nOutput: a list of strings with the numeric values converted to bytes and units appended.\nFunctionality: The transformation converts the numeric values in each element to bytes and appends the corresponding unit of measurement in the result list.\nExample: Input: ['15B', '150KB', '1500MB', '1.5GB', '15B', '150B', '1500B']; output: ['15 Bytes', '153600 Bytes', '1572864000 Bytes', 'Unit not recognized Bytes', '15 Bytes', '150 Bytes', '1500 Bytes']"}
{"id": "147-1", "oq_id": 147, "desc": "Input: a list of string values, with different units mentioned in each element.\nOutput: a list of string values representing the numerical value with appropriate units mentioned.\nFunctionality: The transformation extracts the numerical value and unit from each element in the given sequence, converts the numerical value to Bytes, and then formats the result as a string with the numerical value and unit in Bytes.\nExample: Input: ['20B', '200KB', '2MB', '0.02GB', '20B', '200B', '2B']; output: ['20 Bytes', '204800 Bytes', '2097152 Bytes', 'Unit not recognized Bytes', '20 Bytes', '200 Bytes', '2 Bytes']"}
{"id": "147-0", "oq_id": 147, "desc": "Input: a list of string values, each containing a numerical value followed by a unit of measurement.\nOutput: a list of strings with the numerical value converted to bytes and the unit of measurement included.\nFunctionality: The transformation converts the numerical value in each element to bytes based on the unit of measurement provided, and formats the result in a string.\nExample: Input: ['5B', '50KB', '500MB', '0.5GB', '5B', '50B', '500B']; output: ['5 Bytes', '51200 Bytes', '524288000 Bytes', 'Unit not recognized Bytes', '5 Bytes', '50 Bytes', '500 Bytes']"}
{"id": "147-4", "oq_id": 147, "desc": "Input: a list of string values, with data size units included in each element.\nOutput: a list of strings representing the data size in Bytes.\n\nFunctionality: The transformation converts the data size units in each element of the given sequence to Bytes, and formats the result as a string.\n\nExample: Input: ['30B', '300KB', '3MB', '0.03GB', '30B', '300B', '3B']; output: ['30 Bytes', '307200 Bytes', '3145728 Bytes', 'Unit not recognized Bytes', '30 Bytes', '300 Bytes', '3 Bytes']"}
{"id": "147-5", "oq_id": 147, "desc": "Input: a list of string values, with different units and numerical values included.\nOutput: a list of strings with standardized units and numerical values.\nFunctionality: The transformation extracts the numerical values from each element in the given sequence, converts the units to Bytes, and formats the result as strings.\nExample: Input: ['25B', '250KB', '2500MB', '2.5GB', '25B', '250B', '2500B']; output: ['25 Bytes', '256000 Bytes', '2621440000 Bytes', 'Unit not recognized Bytes', '25 Bytes', '250 Bytes', '2500 Bytes']"}
{"id": "147-7", "oq_id": 147, "desc": "Input: a list of string values, with a combination of numerical values and units in each element.\nOutput: a list of string values, with numerical values formatted as bytes and units remained unchanged.\nFunctionality: The transformation converts the numerical values in each element to bytes based on the provided units (B, KB, MB, GB). If the unit is not recognized, it remains unchanged in the result list.\nExample: Input: ['12B', '120KB', '1.2MB', '0.012GB', '12B', '120B', '1.2B']; output: ['12 Bytes', '122880 Bytes', 'Unit not recognized Bytes', 'Unit not recognized Bytes', '12 Bytes', '120 Bytes', 'Unit not recognized Bytes']"}
{"id": "147-6", "oq_id": 147, "desc": "Input: a list of string values, with numerical values and unit suffixes in each element.\nOutput: a list of string values.\nFunctionality: The transformation converts the numerical values from bytes units (B, KB, MB) to Bytes unit and formats them with the corresponding unit suffix in the result list.\nExample: Input: ['3B', '30KB', '300MB', '3B', '30B', '300B']; output: ['3 Bytes', '30720 Bytes', '314572800 Bytes', '3 Bytes', '30 Bytes', '300 Bytes']"}
{"id": "147-8", "oq_id": 147, "desc": "Input: a list of string values, each containing a numerical value followed by a unit of measurement.\nOutput: a list of strings with the numerical value converted to bytes and the unit of measurement adjusted to \"Bytes\".\nFunctionality: The transformation calculates the byte equivalent of the numerical value based on the unit of measurement provided in each element of the given sequence, and formats the output as a string with the numerical value followed by \"Bytes\".\nExample: Input: ['7B', '70KB', '700MB', '0.7GB', '7B', '70B', '700B']; output: ['7 Bytes', '71680 Bytes', '734003200 Bytes', 'Unit not recognized Bytes', '7 Bytes', '70 Bytes', '700 Bytes']"}
{"id": "147-9", "oq_id": 147, "desc": "Input: a list of string values, with sizes specified in different units (B, KB, MB).\nOutput: a list of string values, with sizes converted to Bytes format.\nFunctionality: The transformation converts each size from different units to Bytes in the given sequence and outputs the result as a formatted string list.\nExample: Input: ['1B', '10KB', '100MB', '1000B', '10B', '100B']; output: ['1 Bytes', '10240 Bytes', '104857600 Bytes', '1000 Bytes', '10 Bytes', '100 Bytes']"}
{"id": "148-8", "oq_id": 148, "desc": "Input: a list of string values, with data storage sizes in each element.\nOutput: a list of string values representing the storage size in Bytes.\nFunctionality: The transformation converts each storage size in the given sequence to Bytes and formats the result as a string in the output list.\nExample: Input: ['1GB', '2GB', '1000MB', '50KB', '1b']; output: ['1,073,741,824 Bytes', '2,147,483,648 Bytes', '1,048,576,000 Bytes', '51,200 Bytes', '0.125 Bytes']"}
{"id": "148-9", "oq_id": 148, "desc": "Input: a list of string values, with values representing data sizes in different units (MB, GB, KB, etc.).\nOutput: a list of string values, with values converted to Bytes format.\nFunctionality: The transformation converts each data size value in the given sequence to Bytes format and formats the result as a string in the output list.\nExample: Input: ['4MB', '300B', '5GB', '150KB']; output: ['4,194,304 Bytes', '300 Bytes', '5,368,709,120 Bytes', '153,600 Bytes']"}
{"id": "148-7", "oq_id": 148, "desc": "Input: a list of string values representing file sizes.\nOutput: a list of string values representing file sizes in Bytes.\nFunctionality: The transformation converts each file size from a human-readable format (e.g., '200B', '1GB') to Bytes in the result list.\nExample: Input: ['200B', '1GB', '100KB', '30MB']; output: ['200 Bytes', '1,073,741,824 Bytes', '102,400 Bytes', '31,457,280 Bytes']"}
{"id": "148-6", "oq_id": 148, "desc": "Input: a list of string values, with values representing data sizes in different units (GB, MB, KB, B).\nOutput: a list of string values, with values converted to Bytes.\nFunctionality: The transformation converts each data size value from the given sequence to Bytes and formats the result as a string.\nExample: Input: ['50GB', '500MB', '10KB', '100B']; output: ['53,687,091,200 Bytes', '524,288,000 Bytes', '10,240 Bytes', '100 Bytes']"}
{"id": "148-4", "oq_id": 148, "desc": "Input: a list of string values representing file sizes.\nOutput: a list of string values representing file sizes in Bytes.\n\nFunctionality: The transformation converts each file size from a human-readable format (e.g., '25B', '250KB', '2MB') to Bytes in the result list. \nExample: Input: ['25B', '250KB', '2MB', '10GB']; output: ['25 Bytes', '256,000 Bytes', '2,097,152 Bytes', '10,737,418,240 Bytes']"}
{"id": "148-5", "oq_id": 148, "desc": "Input: a list of string values, with sizes expressed in different units (KB, GB, b, MB).\nOutput: a list of string values representing sizes in Bytes.\nFunctionality: The transformation converts each size from the given sequence to Bytes and outputs the result as a list.\nExample: Input: ['1000KB', '5GB', '1b', '75MB']; output: ['1,024,000 Bytes', '5,368,709,120 Bytes', '0.125 Bytes', '78,643,200 Bytes']"}
{"id": "148-1", "oq_id": 148, "desc": "Input: a list of string values, with values representing data sizes in different units (Bytes, KB, MB, GB).\nOutput: a list of string values, with values converted to Bytes.\nFunctionality: The transformation converts each data size representation in the given sequence to Bytes and formats the result as a string.\nExample: Input: ['15B', '500KB', '10MB', '5GB']; output: ['15 Bytes', '512,000 Bytes', '10,485,760 Bytes', '5,368,709,120 Bytes']"}
{"id": "148-0", "oq_id": 148, "desc": "Input: a list of string values, with data storage units specified in each element.\nOutput: a list of string values, with data storage sizes converted to Bytes.\nFunctionality: The transformation converts the data storage units in each element of the given sequence to Bytes and outputs the results in the new list.\nExample: Input: ['5GB', '200MB', '50KB', '1b']; output: ['5,368,709,120 Bytes', '209,715,200 Bytes', '51,200 Bytes', '0.125 Bytes']"}
{"id": "148-2", "oq_id": 148, "desc": "Input: a list of string values, with storage size units in each element.\nOutput: a list of string values, with storage size in bytes in each element.\nFunctionality: The transformation converts each storage size unit to bytes based on the conversion rate (1GB = 2^30 bytes, 1MB = 2^20 bytes, 1KB = 2^10 bytes) and formats the result as a string in the output list.\nExample: Input: ['2GB', '50B', '1000MB', '20KB']; output: ['2,147,483,648 Bytes', '50 Bytes', '1,048,576,000 Bytes', '20,480 Bytes']"}
{"id": "148-3", "oq_id": 148, "desc": "Input: a list of string values, with data storage units specified in each element.\nOutput: a list of string values, with data storage sizes converted to Bytes.\nFunctionality: The transformation converts the data storage units in each element of the given sequence to Bytes and outputs the results in the same format.\nExample: Input: ['1GB', '100MB', '1b', '500KB']; output: ['1,073,741,824 Bytes', '104,857,600 Bytes', '0.125 Bytes', '512,000 Bytes']"}
{"id": "149-8", "oq_id": 149, "desc": "Input: a list of strings representing data sizes in different units.\nOutput: a list of strings representing data sizes in Bytes.\nFunctionality: The transformation converts each element from the given sequence to Bytes unit and outputs the result as a list.\nExample: Input: ['45B', '450KB', '4500MB', '25GB']; output: ['4.50E1 Bytes', '4.61E5 Bytes', '4.72E9 Bytes', '2.68E+10 Bytes']"}
{"id": "149-9", "oq_id": 149, "desc": "Input: a list of strings representing data sizes in different units.\nOutput: a list of strings representing data sizes in Bytes.\nFunctionality: The transformation converts the data sizes in the given sequence to Bytes format using scientific notation, and output the result as a list of strings.\nExample: Input: ['55B', '550KB', '5500MB', '30GB']; output: ['5.50E1 Bytes', '5.63E5 Bytes', '5.77E9 Bytes', '3.22E+10 Bytes']"}
{"id": "149-4", "oq_id": 149, "desc": "Input: a list of strings representing data sizes in different units.\nOutput: a list of strings representing data sizes in Bytes.\nFunctionality: The transformation converts each element from the given sequence to Bytes unit using scientific notation, and output the result as a list.\nExample: Input: ['25B', '250KB', '2500MB', '15GB']; output: ['2.50E1 Bytes', '2.56E5 Bytes', '2.62E9 Bytes', '1.61E+10 Bytes']"}
{"id": "149-5", "oq_id": 149, "desc": "Input: a list of strings representing data sizes in different units.\nOutput: a list of strings representing data sizes in Bytes.\nFunctionality: The transformation converts each data size in the given sequence to Bytes format and outputs the result as a list.\nExample: Input: ['30B', '300KB', '3000MB', '12GB']; output: ['3.00E1 Bytes', '3.07E5 Bytes', '3.15E9 Bytes', '1.29E+10 Bytes']"}
{"id": "149-7", "oq_id": 149, "desc": "Input: a list of strings representing data sizes in different units.\nOutput: a list of strings representing data sizes in Bytes.\nFunctionality: The transformation converts each element from the given sequence to Bytes unit using scientific notation, and output the result as a list.\nExample: Input: ['35B', '350KB', '3500MB', '18GB']; output: ['3.50E1 Bytes', '3.58E5 Bytes', '3.67E9 Bytes', '1.93E+10 Bytes']"}
{"id": "149-6", "oq_id": 149, "desc": "Input: a list of string values, representing sizes in different units.\nOutput: a list of string values, representing sizes in bytes using scientific notation.\nFunctionality: The transformation converts each size from the given sequence to bytes using a conversion factor, and outputs the result in scientific notation as a string.\nExample: Input: ['40B', '400KB', '4000MB', '8GB']; output: ['4.00E1 Bytes', '4.10E5 Bytes', '4.19E9 Bytes', '8.59E9 Bytes']"}
{"id": "149-2", "oq_id": 149, "desc": "Input: a list of strings representing data sizes in different units.\nOutput: a list of strings representing data sizes in Bytes.\nFunctionality: The transformation converts each data size in the given sequence to Bytes format using scientific notation, and output the result as a list.\nExample: Input: ['20B', '200KB', '2000MB', '10GB']; output: ['2.00E1 Bytes', '2.05E5 Bytes', '2.10E9 Bytes', '1.07E+10 Bytes']"}
{"id": "149-3", "oq_id": 149, "desc": "Input: a list of strings representing data sizes in different units.\nOutput: a list of strings representing data sizes in Bytes format using scientific notation.\nFunctionality: The transformation converts each data size from the given sequence to Bytes using scientific notation, and outputs the results in the new list.\nExample: Input: ['50B', '500KB', '5000MB', '20GB']; output: ['5.00E1 Bytes', '5.12E5 Bytes', '5.24E9 Bytes', '2.15E+10 Bytes']"}
{"id": "149-1", "oq_id": 149, "desc": "Input: a list of string values, representing sizes in different units.\nOutput: a list of string values, representing sizes in bytes using scientific notation.\nFunctionality: The transformation converts the sizes from various units (B, KB, MB, GB) to bytes using scientific notation, and formats the result as strings in the output list.\nExample: Input: ['15B', '150KB', '1500MB', '5GB']; output: ['1.50E1 Bytes', '1.54E5 Bytes', '1.57E9 Bytes', '5.37E9 Bytes']"}
{"id": "149-0", "oq_id": 149, "desc": "Input: a list of string values, representing different units of measure.\nOutput: a list of string values, formatted in scientific notation as Bytes.\n\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, converts it to Bytes and formats it in scientific notation, providing the result as a list.\n\nExample: Input: ['5B', '50KB', '500MB', '2GB']; output: ['5.00E0 Bytes', '5.12E4 Bytes', '5.24E8 Bytes', '2.15E9 Bytes']"}
{"id": "150-9", "oq_id": 150, "desc": "Input: a list of string values, each containing an address.\nOutput: a list of string values.\nFunctionality: The transformation extracts the city name from each address in the given sequence and outputs the list of city names.\nExample: Input: ['987 Pine St, San Antonio, TX, 78201', '654 Birch Ave, St. Louis, MO, 63101', '321 Elm Blvd, Salt Lake City, UT, 84101']; output: ['San Antonio', 'St. Louis', 'Salt Lake City']"}
{"id": "150-8", "oq_id": 150, "desc": "Input: a list of strings containing addresses.\nOutput: a list of strings containing city names.\nFunctionality: The transformation extracts the city name from each address in the given sequence and outputs it as a list of city names.\nExample: Input: ['789 Birch Rd, Charlotte, NC, 28201', '654 Maple Ave, Nashville, TN, 37201', '321 Elm Blvd, Kansas City, MO, 64101']; output: ['Charlotte', 'Nashville', 'Kansas City']"}
{"id": "150-5", "oq_id": 150, "desc": "Input: a list of complex text strings, each containing an address with city information.\nOutput: a list of city names extracted from the addresses.\nFunctionality: The transformation extracts the city name from each address in the given sequence and outputs a list of city names.\nExample: Input: ['111 Maple St, Boston, MA, 02101', '222 Elm Rd, Philadelphia, PA, 19101', '333 Oak Ave, Detroit, MI, 48201']; output: ['Boston', 'Philadelphia', 'Detroit']"}
{"id": "150-4", "oq_id": 150, "desc": "Input: a list of complex text strings containing addresses.\nOutput: a list of city names.\nFunctionality: The transformation extracts the city name from each address in the given sequence and outputs the city names as a new list.\nExample: Input: ['123 Palm St, Phoenix, AZ, 85001', '456 Cedar Rd, Austin, TX, 78701', '789 Pine Ave, Portland, OR, 97201']; Output: ['Phoenix', 'Austin', 'Portland']"}
{"id": "150-6", "oq_id": 150, "desc": "Input: a list of string values, with addresses containing city names.\nOutput: a list of string values containing only the city names.\nFunctionality: The transformation extracts the city name from each address in the given sequence and outputs the city names as a list.\nExample: Input: ['543 Elm St, Baltimore, MD, 21201', '765 Maple Rd, Tampa, FL, 33601', '987 Pine Ave, Sacramento, CA, 95814']; output: ['Baltimore', 'Tampa', 'Sacramento']"}
{"id": "150-7", "oq_id": 150, "desc": "Input: a list of strings containing addresses.\nOutput: a list of strings containing city names.\nFunctionality: The transformation extracts the city name from each address in the given sequence and outputs it as a list of city names.\nExample: Input: ['369 Oak Ave, Las Vegas, NV, 89101', '258 Pine St, Minneapolis, MN, 55401', '147 Cedar Rd, Indianapolis, IN, 46201']; output: ['Las Vegas', 'Minneapolis', 'Indianapolis']"}
{"id": "150-3", "oq_id": 150, "desc": "Input: a list of string values, with addresses containing city names.\nOutput: a list of string values containing only the city names.\nFunctionality: The transformation extracts the city name from each address in the given sequence and outputs the city names as a list.\nExample: Input: ['742 Maple Rd, Orlando, FL, 32801', '369 Elm St, Denver, CO, 80201', '951 Oak Ave, San Diego, CA, 92101']; output: ['Orlando', 'Denver', 'San Diego']"}
{"id": "150-2", "oq_id": 150, "desc": "Input: a list of string values, each containing an address with city information.\nOutput: a list of string values, each containing only the city name extracted from the address.\nFunctionality: The transformation extracts the city name from each address in the given sequence and outputs the list of city names.\nExample: Input: ['432 Park Ave, Chicago, IL, 60601', '678 Broadway, Los Angeles, CA, 90001', '987 Elm St, Dallas, TX, 75201']; output: ['Chicago', 'Los Angeles', 'Dallas']"}
{"id": "150-0", "oq_id": 150, "desc": "Input: a list of strings containing addresses.\nOutput: a list of strings containing city names.\nFunctionality: The transformation extracts the city name from each address in the given sequence and outputs it as a list of city names.\nExample: Input: ['500 Main St, Houston, TX, 77002', '123 Elm St, San Francisco, CA, 94104', '800 Broadway Ave, New York, NY, 10001']; output: ['Houston', 'San Francisco', 'New York']"}
{"id": "150-1", "oq_id": 150, "desc": "Input: a list of complex text strings, each containing an address.\nOutput: a list of city names extracted from the addresses.\nFunctionality: The transformation extracts the city name from each address in the given sequence and outputs them as a list of strings.\nExample: Input: ['555 Maple Ln, Miami, FL, 33101', '777 Pine St, Seattle, WA, 98101', '999 Oak St, Atlanta, GA, 30301']; output: ['Miami', 'Seattle', 'Atlanta']"}
{"id": "151-9", "oq_id": 151, "desc": "Input: a list of strings, each containing an address with a varying format.\nOutput: a list of strings representing the suite number in uppercase format.\n\nFunctionality: The transformation extracts the suite number from each address in the given sequence, converts it to uppercase, and outputs the result as a list.\n\nExample: Input: ['1357 hilltop ln, Suite 1500, Nashville, TN 37201', '246 sunset blvd, Rm 1400, Memphis, TN 38101', '357 lake rd, Ste 1300, Knoxville, TN 37901', '468 river ave, room 1200, Chattanooga, TN 37401', '579 valley view, Suite 1100, Franklin, TN 37064']; output: ['SUITE 1500', 'RM 1400', 'STE 1300', 'ROOM 1200', 'SUITE 1100']"}
{"id": "151-8", "oq_id": 151, "desc": "Input: a list of complex text values.\nOutput: a list of text values.\nFunctionality: The transformation extracts the specified room numbers from each element in the given sequence and outputs them as strings in the result list.\nExample: Input: ['123 springview, room 1200, Denver, CO 80201', '456 lake ave, Ste 1100, Boulder, CO 80301', '789 mountain rd, Room 1000, Colorado Springs, CO 80901', '321 river blvd, rm 900, Aurora, CO 80001', '654 valley st, Suite 800, Fort Collins, CO 80525']; output: ['ROOM 1200', 'STE 1100', 'ROOM 1000', 'RM 900', 'SUITE 800']"}
{"id": "151-6", "oq_id": 151, "desc": "Input: a list of complex text strings containing address information.\nOutput: a list of strings representing specific room or suite numbers from the input addresses.\nFunctionality: The transformation extracts the specific room or suite number from each address in the given sequence, and outputs them as a list of strings.\nExample: Input: ['777 park lane, room 801, Chicago, IL 60601', '888 city view, Suite 700, Springfield, IL 62701', '999 river rd, Ste 602, Peoria, IL 61601', '666 sunset blvd, rm 501, Rockford, IL 61101', '555 lake st, Suite 400, Naperville, IL 60540']; Output: ['ROOM 801', 'SUITE 700', 'STE 602', 'RM 501', 'SUITE 400']"}
{"id": "151-7", "oq_id": 151, "desc": "Input: a list of complex text strings containing address information.\nOutput: a list of strings representing specific room or suite numbers from the input addresses.\nFunctionality: The transformation extracts specific room or suite numbers from each element in the given sequence and outputs them as a list.\nExample: Input: ['444 hillcrest ave, Ste 1000, Dallas, TX 75201', '555 valley view, rm 900, Houston, TX 77001', '666 oak lane, Suite 800, Austin, TX 78701', '777 pine rd, room 701, San Antonio, TX 78201', '888 palm ct, Ste 600, Fort Worth, TX 76101']; output: ['STE 1000', 'RM 900', 'SUITE 800', 'ROOM 701', 'STE 600']"}
{"id": "151-5", "oq_id": 151, "desc": "Input: a list of complex text strings.\nOutput: a list of textual values.\nFunctionality: The transformation extracts the specified text elements (e.g. Suite, Ste, Rm, etc.) from each element in the given sequence, and outputs them as a list.\nExample: Input: ['999 mountain view, Suite 800, Seattle, WA 98101', '888 valley rd, Ste 702, Spokane, WA 99201', '777 lake blvd, rm 301, Tacoma, WA 98401', '666 river st, Suite 200, Vancouver, WA 98660', '555 forest ave, Room 100, Bellevue, WA 98004']; output: ['SUITE 800', 'STE 702', 'RM 301', 'SUITE 200', 'ROOM 100']"}
{"id": "151-4", "oq_id": 151, "desc": "Input: a list of complex textual values with addresses, room numbers, and city-state-zipcode information.\nOutput: a list of room numbers extracted from each element.\nFunctionality: The transformation extracts the room number from each element in the given sequence, and outputs the room number as a string in the result list.\nExample: Input: ['1111 ocean view, rm 700, Miami, FL 33101', '2222 beach blvd, Suite 600, Orlando, FL 32801', '3333 palm rd, room 501, Tampa, FL 33601', '4444 seashore blvd, Ste 400, Fort Lauderdale, FL 33301', '5555 sandy ln, Room 300, Key West, FL 33040']; output: ['RM 700', 'SUITE 600', 'ROOM 501', 'STE 400', 'ROOM 300']"}
{"id": "151-0", "oq_id": 151, "desc": "Input: a list of complex text strings.\nOutput: a list of strings representing specific parts of the input strings.\nFunctionality: The transformation extracts the specified keyword (e.g., 'SUITE', 'ROOM', etc.) along with the following numerical value from each element in the given sequence and formats them as strings in the result list.\nExample: Input: ['555 main st, suite 200, San Francisco, CA 94105', '1234 elm ave, room B, Los Angeles, CA 90001', '987 oak lane, Ste C, San Diego, CA 92101', '456 pine rd, rm 100, Sacramento, CA 95814', '789 maple ct, Suite D, San Jose, CA 95123']; output: ['SUITE 200', 'ROOM B', 'STE C', 'RM 100', 'SUITE D']"}
{"id": "151-1", "oq_id": 151, "desc": "Input: a list of strings containing addresses with room numbers.\nOutput: a list of strings with only the room numbers extracted.\nFunctionality: The transformation extracts the room numbers from each address in the given sequence and outputs them as a list of strings.\nExample: Input: ['1000 valley view, ste 500, Phoenix, AZ 85001', '2001 sunset blvd, Room 201, Tucson, AZ 85701', '300 main st, Suite 100, Flagstaff, AZ 86001', '400 oak ave, rm B, Sedona, AZ 86336', '500 pine rd, Ste A, Scottsdale, AZ 85250']; output: ['STE 500', 'ROOM 201', 'SUITE 100', 'RM B', 'STE A']"}
{"id": "151-3", "oq_id": 151, "desc": "Input: a list of complex text strings containing addresses.\nOutput: a list of extracted room or suite numbers.\nFunctionality: The transformation extracts the room or suite numbers from each address in the given sequence and outputs them as a list of strings.\nExample: Input: ['321 pine blvd, rm 502, Atlanta, GA 30301', '654 oak st, Ste 409, Savannah, GA 31401', '987 maple rd, Room 307, Augusta, GA 30901', '741 elm ave, Suite 210, Macon, GA 31201', '852 sunset blvd, Ste 110, Columbus, GA 31901']; output: ['RM 502', 'STE 409', 'ROOM 307', 'SUITE 210', 'STE 110']"}
{"id": "151-2", "oq_id": 151, "desc": "Input: a list of complex text values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specified substring (e.g. 'SUITE 300') from each element in the given sequence and outputs it as a string in the result list.\nExample: Input: ['1234 rose lane, suite 300, New York, NY 10001', '567 tulip rd, Room 401, Brooklyn, NY 11201', '890 daisy st, Ste D, Queens, NY 11354', '432 lily ave, rm 201, Bronx, NY 10451', '876 sunflower ct, Suite B, Staten Island, NY 10301']; output: ['SUITE 300', 'ROOM 401', 'STE D', 'RM 201', 'SUITE B']"}
{"id": "152-1", "oq_id": 152, "desc": "Input: a list of complex text values with addresses and states.\nOutput: a list of state abbreviations.\nFunctionality: The transformation extracts the state abbreviation from each address element in the given sequence and outputs a list of state abbreviations.\nExample: Input: ['456 maple st, Seattle, WA, 98101', '789 cherry ave, Portland, OR, 97201', '1010 walnut dr, Denver, CO, 80202', '1111 oakland blvd, Oakland, CA, 94612', '1212 pine ln, Phoenix, AZ, 85001']; output: ['WA', 'OR', 'CO', 'CA', 'AZ']"}
{"id": "152-0", "oq_id": 152, "desc": "Input: a list of string values, each representing an address with state information.\nOutput: a list of string values.\nFunctionality: The transformation extracts the state abbreviation from each address in the given sequence and outputs them as a list of strings.\nExample: Input: ['500 main st, Los Angeles, CA, 90012', '1234 elm st, San Francisco, California', '800 broadway ave, New York, NY, 10001', '987 oak ln, Chicago, IL, 60611', '345 pine rd, Boston, MA, 02116']; output: ['CA', 'CA', 'NY', 'IL', 'MA']"}
{"id": "152-2", "oq_id": 152, "desc": "Input: a list of string values, with addresses in each element.\nOutput: a list of string values representing the states from each address.\nFunctionality: The transformation extracts the state abbreviation (e.g., TX, TN) from each address in the given sequence and outputs it in a new list.\nExample: Input: ['1313 cherry st, Dallas, TX, 75201', '1414 elm dr, Austin, TX, 78701', '1515 walnut ave, Houston, TX, 77002', '1616 oak st, San Antonio, TX, 78201', '1717 maple ave, Nashville, TN, 37201']; output: ['TX', 'TX', 'TX', 'TX', 'TN']"}
{"id": "152-3", "oq_id": 152, "desc": "Input: a list of complex text values containing addresses.\nOutput: a list of string values representing state abbreviations.\nFunctionality: The transformation extracts the state abbreviation from each address in the given sequence and outputs them as a list of strings.\nExample: Input: ['1818 pine rd, Atlanta, GA, 30301', '1919 magnolia dr, Miami, FL, 33101', '2020 birch ln, Orlando, FL, 32801', '2121 maple st, Tampa, FL, 33601', '2222 oak ave, Jacksonville, FL, 32201']; output: ['GA', 'FL', 'FL', 'FL', 'FL']"}
{"id": "153-8", "oq_id": 153, "desc": "Input: a list of string values, each containing an address.\nOutput: a list of string values.\nFunctionality: The transformation extracts the street name from each address in the given sequence, and outputs the street names as a list of strings.\nExample: Input: ['852 hilltop drive, San Diego, CA, 92101', '147 valley road, Las Vegas, NV, 89101']; output: ['hilltop drive', 'valley road']"}
{"id": "153-9", "oq_id": 153, "desc": "Input: a list of strings containing addresses.\nOutput: a list of strings representing street names.\nFunctionality: The transformation extracts the street name from each address in the given sequence, and outputs a list of street names.\nExample: Input: ['963 spring avenue, Austin, TX, 78701', '258 autumn lane, San Antonio, TX, 78201']; output: ['spring avenue', 'autumn lane']"}
{"id": "153-4", "oq_id": 153, "desc": "Input: a list of complex text values.\nOutput: a list of specific text values.\nFunctionality: The transformation extracts the specific text 'beach road' or 'mountain drive' from each element in the given sequence and outputs them in a new list.\nExample: Input: ['741 beach road, Honolulu, HI, 96813', '852 mountain drive, Anchorage, AK, 99501']; output: ['beach road', 'mountain drive']"}
{"id": "153-5", "oq_id": 153, "desc": "Input: a list of complex text values containing addresses.\nOutput: a list of string values representing street names.\n\nFunctionality: The transformation extracts the street name from each address in the given sequence and outputs a list of street names as strings.\nExample: Input: ['369 lake street, Denver, CO, 80201', '258 river road, Phoenix, AZ, 85001']; output: ['lake street', 'river road']"}
{"id": "153-7", "oq_id": 153, "desc": "Input: a list of complex text values.\nOutput: a list of strings.\nFunctionality: The transformation extracts the street name from each address in the given sequence and outputs them as a list of strings.\nExample: Input: ['741 vineyard road, Portland, OR, 97201', '369 garden street, Seattle, WA, 98101']; output: ['vineyard road', 'garden street']"}
{"id": "153-6", "oq_id": 153, "desc": "Input: a list of complex text values containing addresses.\nOutput: a list of specific strings representing street names.\nFunctionality: The transformation extracts the street name from each address in the given sequence and outputs a list of these extracted street names.\nExample: Input: ['654 park lane, Atlanta, GA, 30301', '987 forest avenue, Nashville, TN, 37201']; output: ['park lane', 'forest avenue']"}
{"id": "153-2", "oq_id": 153, "desc": "Input: a list of string values containing addresses.\nOutput: a list of string values representing street names.\n\nFunctionality: The transformation extracts the street name from each address in the given sequence and outputs the street names in a new list.\nExample: Input: ['321 elm avenue, Chicago, IL, 60601', '654 birch lane, Dallas, TX, 75201', '987 oak drive, Houston, TX, 77002']; Output: ['elm avenue', 'birch lane', 'oak drive']"}
{"id": "153-3", "oq_id": 153, "desc": "Input: a list of strings containing addresses.\nOutput: a list of strings representing street names.\nFunctionality: The transformation extracts the street names from each address in the given sequence, and outputs a list of street names.\nExample: Input: ['890 rose lane, Miami, FL, 33101', '246 sunflower road, Orlando, FL, 32801']; output: ['rose lane', 'sunflower road']"}
{"id": "153-1", "oq_id": 153, "desc": "Input: a list of strings containing addresses.\nOutput: a list of strings representing street names.\nFunctionality: The transformation extracts the street name from each address in the given sequence, and outputs a list of street names.\nExample: Input: ['555 pine street, New York, NY, 10001', '999 maple road, Boston, MA, 02108']; output: ['pine street', 'maple road']"}
{"id": "153-0", "oq_id": 153, "desc": "Input: a list of strings containing addresses.\nOutput: a list of strings representing street names.\nFunctionality: The transformation extracts the street name from each address in the given sequence and outputs them in a list.\nExample: Input: ['123 main st, Seattle, WA, 98101', '456 test blvd Ste A, Los Angeles, CA, 90001', '789 oak avenue, San Francisco, CA, 94105']; output: ['main st', 'test blvd', 'oak avenue']"}
{"id": "154-8", "oq_id": 154, "desc": "Input: a list of string values containing addresses.\nOutput: a list of string values with only the street addresses extracted.\nFunctionality: The transformation extracts only the street address from each element in the given sequence and outputs them in a new list.\nExample: Input: ['999 lakeside drive, Charlotte, NC, 28202', '123 mountain view avenue, Raleigh, NC, 27601', '456 main street, Durham, NC']; output: ['999 lakeside drive', '123 mountain view avenue', '456 main street']"}
{"id": "154-9", "oq_id": 154, "desc": "Input: a list of text strings.\nOutput: a list of text strings.\nFunctionality: The transformation extracts the address information from each element in the given sequence, removing the city, state, and zip code, and outputting the result as a list of address strings.\nExample: Input: ['555 ocean drive, Miami, FL, 33132', '777 sunset blvd, Key West, FL, 33040', '888 palm beach ave, West Palm Beach, FL']; output: ['555 ocean drive', '777 sunset blvd', '888 palm beach ave']"}
{"id": "154-1", "oq_id": 154, "desc": "Input: a list of string values, with addresses in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts only the street address from each element in the given sequence and outputs it as a list.\nExample: Input: ['890 pine road, San Francisco, CA, 94105', '22 oak lane, Los Angeles, CA, 90001', '400 cherry street, San Diego, CA']; output: ['890 pine road', '22 oak lane', '400 cherry street']"}
{"id": "154-0", "oq_id": 154, "desc": "Input: a list of string values, with addresses in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the street address from each element in the given sequence and outputs it as a list.\nExample: Input: ['1234 elm street, houston, tx, 77002', '700 grand ave, Dallas, TX, 75230', '45 maple drive, Atlanta, GA']; output: ['1234 elm street', '700 grand ave', '45 maple drive']"}
{"id": "154-2", "oq_id": 154, "desc": "Input: a list of text strings.\nOutput: a list of text strings.\nFunctionality: The transformation extracts only the street addresses from each element in the given sequence, and output the result as a list.\nExample: Input: ['333 broadway ave, New York, NY, 10001', '555 park blvd, Chicago, IL, 60601', '999 lake shore drive, Miami, FL']; output: ['333 broadway ave', '555 park blvd', '999 lake shore drive']"}
{"id": "154-3", "oq_id": 154, "desc": "Input: a list of string values containing addresses.\nOutput: a list of string values with only the street addresses extracted.\nFunctionality: The transformation extracts only the street address from each element in the given sequence and outputs them in a new list.\nExample: Input: ['77 hillcrest road, Philadelphia, PA, 19103', '600 main avenue, Boston, MA, 02109', '200 oakwood drive, Seattle, WA']; output: ['77 hillcrest road', '600 main avenue', '200 oakwood drive']"}
{"id": "154-7", "oq_id": 154, "desc": "Input: a list of complex text values containing addresses.\nOutput: a list of simplified address strings.\nFunctionality: The transformation extracts only the street addresses from each element in the given sequence and outputs them as a list.\nExample: Input: ['600 sunnyvale road, Sunnyvale, CA, 94085', '333 shady oaks lane, Orlando, FL, 32801', '777 peachtree street, Atlanta, GA']; output: ['600 sunnyvale road', '333 shady oaks lane', '777 peachtree street']"}
{"id": "154-6", "oq_id": 154, "desc": "Input: a list of string values containing addresses.\nOutput: a list of string values with only the street addresses.\nFunctionality: The transformation extracts the street address from each element in the given sequence, and outputs the street address only in the result list.\nExample: Input: ['456 beach blvd, Tampa, FL, 33602', '888 mountain view drive, Austin, TX, 78701', '111 river road, Nashville, TN']; output: ['456 beach blvd', '888 mountain view drive', '111 river road']"}
{"id": "154-4", "oq_id": 154, "desc": "Input: a list of string values containing addresses.\nOutput: a list of string values with only the street addresses extracted.\nFunctionality: The transformation extracts only the street address from each element in the given sequence, removing the city, state, and zip code information.\nExample: Input: ['1234 springfield lane, Springfield, IL, 62701', '987 maple court, Boise, ID, 83702', '456 pine street, Portland, OR']; output: ['1234 springfield lane', '987 maple court', '456 pine street']"}
{"id": "154-5", "oq_id": 154, "desc": "Input: a list of string values, each containing an address.\nOutput: a list of string values, each containing a cleaned address.\nFunctionality: The transformation extracts the street address from each element in the given sequence, and outputs the cleaned address in the result list.\nExample: Input: ['321 highland ave, Denver, CO, 80202', '999 washington st, Phoenix, AZ, 85003', '777 grove road, Las Vegas, NV']; output: ['321 highland ave', '999 washington st', '777 grove road']"}
{"id": "155-8", "oq_id": 155, "desc": "Input: a list of string values, containing dates in different formats.\nOutput: a list of string values, with dates formatted as specified.\nFunctionality: The transformation extracts the day and month from each date in the given sequence and formats it as specified in the output.\nExample: Input: ['1968-01-30', '1978-Nov-21', '3/17/1972', '1995-06-16', '11/27/1989 07:15:20']; output: ['January 30', 'November 21', 'March 17', 'June 16', 'November 27']"}
{"id": "155-9", "oq_id": 155, "desc": "Input: a list of string values, containing dates in different formats.\nOutput: a list of string values, with dates formatted as specified.\nFunctionality: The transformation extracts the day and month from each date in the given sequence and formats it as specified in the output.\nExample: Input: ['1947-07-13', '1960-Sep-05', '8/31/1955', '1972-04-22', '9/12/1968 14:50:01']; output: ['July 13', 'September 5', 'August 31', 'April 22', 'September 12']"}
{"id": "155-2", "oq_id": 155, "desc": "Input: a list of string values, with dates in different formats in each element.\nOutput: a list of string values in a specific date format.\nFunctionality: The transformation extracts the day and month from each element in the given sequence, and formats the result as a string in the \"Month Day\" format.\nExample: Input: ['1975-04-17', '1980-Feb-28', '6/20/1978', '1999-07-04', '9/15/1987 20:10:05']; output: ['April 17', 'February 28', 'June 20', 'July 4', 'September 15']"}
{"id": "155-3", "oq_id": 155, "desc": "Input: a list of string values, containing dates in different formats.\nOutput: a list of string values, with dates formatted in a specific style.\nFunctionality: The transformation extracts the date portion from each element in the given sequence, converts it into the desired format, and outputs the result as a list.\nExample: Input: ['1962-12-05', '1974-Oct-15', '4/30/1968', '1990-03-25', '10/12/1985 05:55:12']; output: ['December 5', 'October 15', 'April 30', 'March 25', 'October 12']"}
{"id": "155-1", "oq_id": 155, "desc": "Input: a list of string values, containing dates in different formats.\nOutput: a list of string values, with dates formatted as specified.\nFunctionality: The transformation extracts the day and month from each date in the given sequence and formats it as the specified string.\nExample: Input: ['1987-08-02', '1996-Dec-25', '3/8/1995', '2001-10-18', '11/5/1989 08:45:30']; output: ['August 2', 'December 25', 'March 8', 'October 18', 'November 5']"}
{"id": "155-0", "oq_id": 155, "desc": "Input: a list of string values, with date values in various formats in each element.\nOutput: a list of string values with simplified date formats.\nFunctionality: The transformation extracts and simplifies the date part from each element in the given sequence, and formats the result as a string in the format Month Day.\nExample: Input: ['2020-05-15', 'Mar-10-2018', '9/1/2015', '2019-11-30', '5/20/2013 15:30:45']; output: ['May 15', 'March 10', 'September 1', 'November 30', 'May 20']"}
{"id": "155-4", "oq_id": 155, "desc": "Input: a list of string values, containing dates in different formats.\nOutput: a list of string values, with dates formatted as specified.\nFunctionality: The transformation extracts the month and day from each date in the given sequence and formats it as \"Month Day\" in the result list.\nExample: Input: ['1955-06-30', '1970-Mar-08', '7/25/1965', '1983-09-12', '12/7/1958 18:20:30']; output: ['June 30', 'March 8', 'July 25', 'September 12', 'December 7']"}
{"id": "155-5", "oq_id": 155, "desc": "Input: a list of string values, containing dates in different formats.\nOutput: a list of string values, with dates formatted as specified.\nFunctionality: The transformation extracts the day and month from each date in the given sequence and formats it as \"Month Day\" in the result list.\nExample: Input: ['2007-10-11', '2015-Apr-27', '8/2/2013', '2020-01-01', '6/15/2009 10:25:55']; output: ['October 11', 'April 27', 'August 2', 'January 1', 'June 15']"}
{"id": "155-7", "oq_id": 155, "desc": "Input: a list of string values, containing dates in different formats.\nOutput: a list of string values, with dates formatted in a specific style.\nFunctionality: The transformation extracts the day and month from each element in the given sequence, and formats the dates as \"Month Day\" in the result list.\nExample: Input: ['1982-09-08', '1990-Jun-02', '5/14/1987', '2003-12-10', '7/3/1995 22:40:15']; output: ['September 8', 'June 2', 'May 14', 'December 10', 'July 3']"}
{"id": "155-6", "oq_id": 155, "desc": "Input: a list of string values, with dates in different formats in each element.\nOutput: a list of string values in a specific date format.\nFunctionality: The transformation extracts the day and month from each element in the given sequence, and formats the result as a string in the \"Month Day\" format.\nExample: Input: ['1998-03-23', '2005-May-14', '6/10/1999', '2011-08-19', '4/25/2007 12:35:40']; output: ['March 23', 'May 14', 'June 10', 'August 19', 'April 25']"}
{"id": "156-9", "oq_id": 156, "desc": "Input: a list of strings containing dates and times.\nOutput: a list of strings containing dates and times.\nFunctionality: The transformation changes the format of the time in each element by adding 12 hours to the time.\nExample: Input: ['June 22, 2025, 10:05', 'August 09, 2025, 16:35', 'April 15, 2025, 08:20', 'September 04, 2025, 18:45', 'November 27, 2025, 15:15', '']; output: ['June 22, 2025, 22:35', 'August 10, 2025, 05:05', 'April 15, 2025, 20:50', 'September 05, 2025, 07:15', 'November 28, 2025, 03:45', '']"}
{"id": "156-8", "oq_id": 156, "desc": "Input: a list of strings containing dates and times.\nOutput: a list of strings containing dates and times.\nFunctionality: The transformation is to change each date and time in the given sequence to the next day and time by adding 12 hours and 30 minutes, outputting the result as a list.\nExample: Input: ['October 30, 2024, 17:20', 'March 17, 2024, 14:50', 'July 01, 2024, 10:10', 'December 09, 2024, 18:30', 'February 28, 2024, 11:55', '']; output: ['October 31, 2024, 05:50', 'March 18, 2024, 03:20', 'July 01, 2024, 22:40', 'December 10, 2024, 07:00', 'February 29, 2024, 00:25', '']"}
{"id": "156-3", "oq_id": 156, "desc": "Input: a list of strings containing dates and times.\nOutput: a list of strings containing only dates.\nFunctionality: The transformation extracts the date part from each element in the given sequence and outputs it as a list.\nExample: Input: ['March 09, 2019, 19:20', 'November 03, 2019, 12:45', 'June 05, 2019, 08:15', 'August 12, 2019, 17:30', 'October 28, 2019, 10:40', '']; output: ['March 09, 2019', 'November 03, 2019', 'June 05, 2019', 'August 12, 2019', 'October 28, 2019', '']"}
{"id": "156-2", "oq_id": 156, "desc": "Input: a list of strings containing dates and times.\nOutput: a list of strings containing only the times.\nFunctionality: The transformation extracts the time portion from each element in the given sequence, and outputs it as a list of strings.\nExample: Input: ['July 17, 2018, 07:45', 'December 30, 2018, 16:00', 'May 22, 2018, 10:30', 'September 08, 2018, 13:55', 'January 19, 2018, 14:35', '']; output: ['07:45', '16:00', '10:30', '13:55', '14:35', '']"}
{"id": "156-0", "oq_id": 156, "desc": "Input: a list of strings containing dates and times.\nOutput: a list of strings containing only the time part of the input.\n\nFunctionality: The transformation extracts the time part from each element in the given sequence of date and time strings, and outputs only the time in the result list.\n\nExample: Input: ['September 15, 2016, 08:30', 'March 05, 2016, 18:45', 'June 20, 2016, 09:30', 'July 10, 2016, 14:20', 'November 11, 2016, 10:45', '']; output: ['08:30', '18:45', '09:30', '14:20', '10:45', '']"}
{"id": "156-1", "oq_id": 156, "desc": "Input: a list of strings containing dates and times.\nOutput: a list of strings containing only dates.\nFunctionality: The transformation extracts the date part from each element in the given sequence and outputs it as a list.\nExample: Input: ['October 25, 2017, 12:15', 'February 14, 2017, 17:30', 'May 05, 2017, 09:00', 'August 30, 2017, 15:10', 'April 02, 2017, 11:25', '']; output: ['October 25, 2017', 'February 14, 2017', 'May 05, 2017', 'August 30, 2017', 'April 02, 2017', '']"}
{"id": "156-5", "oq_id": 156, "desc": "Input: a list of strings containing dates and times.\nOutput: a list of strings containing only the time part of the input.\n\nFunctionality: The transformation extracts the time part from each element in the given sequence of dates and times, and outputs only the time in the result list.\nExample: Input: ['September 28, 2021, 13:40', 'August 14, 2021, 19:05', 'June 11, 2021, 07:30', 'March 19, 2021, 15:25', 'December 03, 2021, 10:55']; output: ['13:40', '19:05', '07:30', '15:25', '10:55']"}
{"id": "156-4", "oq_id": 156, "desc": "Input: a list of strings containing dates and times.\nOutput: a list of strings containing only dates.\nFunctionality: The transformation extracts the date part from each element in the given sequence and outputs it as a list.\nExample: Input: ['December 07, 2020, 14:10', 'February 18, 2020, 18:00', 'April 30, 2020, 10:20', 'July 23, 2020, 16:50', 'September 12, 2020, 11:15', '']; output: ['December 07, 2020', 'February 18, 2020', 'April 30, 2020', 'July 23, 2020', 'September 12, 2020', '']"}
{"id": "156-6", "oq_id": 156, "desc": "Input: a list of strings containing dates and times.\nOutput: a list of strings containing only the time part of the input.\n\nFunctionality: The transformation extracts the time part from each element in the given sequence of dates and times, and outputs only the time in the result list.\nExample: Input: ['January 13, 2022, 16:55', 'May 08, 2022, 09:15', 'October 01, 2022, 18:40', 'August 20, 2022, 14:30', 'February 26, 2022, 12:00']; output: ['16:55', '09:15', '18:40', '14:30', '12:00']"}
{"id": "156-7", "oq_id": 156, "desc": "Input: a list of strings containing dates and times.\nOutput: a list of strings containing dates and times.\nFunctionality: The transformation changes the format of the time in each element by converting it from AM/PM to 24-hour format. \nExample: Input: ['April 16, 2023, 11:00', 'November 21, 2023, 15:25', 'February 05, 2023, 08:45', 'July 04, 2023, 19:00', 'June 27, 2023, 12:35', '']; output: ['April 16, 2023, 23:30', 'November 22, 2023, 03:55', 'February 05, 2023, 21:15', 'July 05, 2023, 07:30', 'June 28, 2023, 01:05', '']"}
{"id": "157-9", "oq_id": 157, "desc": "Input: a list of string values, with names in various formats.\nOutput: a list of string values representing the initials of the first and last name.\nFunctionality: The transformation extracts the initials of the first and last name from each element in the given sequence, and formats the result as a string in the output list.\nExample: Input: ['Nguyen, Thi', 'Binh Nguyen', 'Mr. Long Q. Tran, III', 'Trang Le', 'Hien T. Nguyen']; output: ['T. Nguyen', 'B. Nguyen', 'L. Tran', 'T. Le', 'H. Nguyen']"}
{"id": "157-8", "oq_id": 157, "desc": "Input: a list of string values, each representing a full name.\nOutput: a list of string values, each representing the initials of the first name and full last name.\nFunctionality: The transformation extracts the first initial of the first name and combines it with the full last name from each element in the given sequence, producing the result list.\nExample: Input: ['Garcia, Sofia', 'Antonio Lopez', 'Dr. Laura A. Rivera, Sr.', 'Elena Gomez', 'Manuel G. Garcia']; output: ['S. Garcia', 'A. Lopez', 'D. Rivera', 'E. Gomez', 'M. Garcia']"}
{"id": "157-0", "oq_id": 157, "desc": "Input: a list of string values, each containing a full name.\nOutput: a list of string values, each containing an initial and last name.\nFunctionality: The transformation extracts the initial letter of the first name and combines it with the last name from each element in the given sequence to create the result list.\nExample: Input: ['Smith, Jane', 'Emily Brown', 'Mrs. Rebecca L. Jameson', 'Michael Johnson', 'Robert R. Smith']; output: ['J. Smith', 'E. Brown', 'M. Jameson', 'M. Johnson', 'R. Smith']"}
{"id": "157-1", "oq_id": 157, "desc": "Input: a list of string values, each representing a person's name.\nOutput: a list of string values, representing the initials of first and last name.\nFunctionality: The transformation extracts the initials of the first name and last name from each element in the given sequence and formats them as strings in the result list.\nExample: Input: ['Adams, Sarah', 'David Taylor', 'Dr. Michael J. Miller, Jr.', 'Emily White', 'Alex A. Adams']; output: ['S. Adams', 'D. Taylor', 'D. Miller', 'E. White', 'A. Adams']"}
{"id": "157-3", "oq_id": 157, "desc": "Input: a list of string values, with names in \"First Last\" format.\nOutput: a list of string values, representing initials of first name and full last name.\n\nFunctionality: The transformation extracts the first letter of the first name followed by a period and space, and then the full last name from each element in the given sequence, outputting the result as a list.\n\nExample: Input: ['Hall, Patricia', 'Daniel Parker', 'Mrs. Anna M. Young', 'Paul Robinson', 'Sara E. Hall']; output: ['P. Hall', 'D. Parker', 'M. Young', 'P. Robinson', 'S. Hall']"}
{"id": "157-2", "oq_id": 157, "desc": "Input: a list of string values, with names formatted as \"First name Last name\".\nOutput: a list of string values, with names formatted as \"Initial Last name\".\nFunctionality: The transformation extracts the initial of the first name and combines it with the last name from each element in the given sequence, then outputs the results as a list.\nExample: Input: ['Jones, Linda', 'Christopher Green', 'Miss Jessica K. Hill', 'Ryan Williams', 'Laura L. Jones']; output: ['L. Jones', 'C. Green', 'M. Hill', 'R. Williams', 'L. Jones']"}
{"id": "157-6", "oq_id": 157, "desc": "Input: a list of string values with full names.\nOutput: a list of string values with initials and last names.\nFunctionality: The transformation extracts the initials and last names from each full name in the given sequence, and formats them in the result list.\nExample: Input: ['Thompson, Margaret', 'Peter Martinez', 'Mr. Kevin P. Campbell, Jr.', 'Natalie Scott', 'Henry T. Thompson']; output: ['M. Thompson', 'P. Martinez', 'K. Campbell', 'N. Scott', 'H. Thompson']"}
{"id": "157-7", "oq_id": 157, "desc": "Input: a list of string values with full names.\nOutput: a list of string values with initials and last names.\nFunctionality: The transformation extracts the initials and last names from each full name in the given sequence, and formats them in the result list.\nExample: Input: ['Perez, Maria', 'Jose Rodriguez', 'Mrs. Patricia L. Vasquez', 'Carlos Hernandez', 'Luisa M. Perez']; output: ['M. Perez', 'J. Rodriguez', 'M. Vasquez', 'C. Hernandez', 'L. Perez']"}
{"id": "157-5", "oq_id": 157, "desc": "Input: a list of string values, with names formatted as \"First name Last name\".\nOutput: a list of string values, with names formatted as \"First initial. Last name\".\n\nFunctionality: The transformation extracts the first initial of the first name and combines it with the last name from each element in the given sequence to create the result list.\n\nExample: Input: ['Brown, Elizabeth', 'Mark Davis', 'Miss Sophia S. Adams', 'William Turner', 'Karen L. Brown']; output: ['E. Brown', 'M. Davis', 'M. Adams', 'W. Turner', 'K. Brown']"}
{"id": "157-4", "oq_id": 157, "desc": "Input: a list of string values, with full names in each element.\nOutput: a list of string values representing initials of first name and last name.\nFunctionality: The transformation extracts the initials of the first name and last name from each full name in the given sequence, and formats the result as a string in the output list.\nExample: Input: ['Collins, Jennifer', 'Matthew Roberts', 'Dr. Robert A. Gordon, Sr.', 'Olivia Wilson', 'George G. Collins']; output: ['J. Collins', 'M. Roberts', 'D. Gordon', 'O. Wilson', 'G. Collins']"}
{"id": "158-5", "oq_id": 158, "desc": "Input: a list of string values, with names containing both first and last names.\nOutput: a list of string values, with initials of the first name followed by the last name.\nFunctionality: The transformation extracts the initials of the first name and appends them to the last name, forming the new sequence.\nExample: Input: ['Sophia Reed', 'Mr. William R. James, III', 'Benjamin Hill', 'Linda Edwards', 'Jacob Walker']; output: ['RS', 'WJ', 'HB', 'EL', 'JW']"}
{"id": "158-4", "oq_id": 158, "desc": "Input: a list of string values, each containing a person's full name.\nOutput: a list of string values, each containing the initials of the first and last name of the person.\nFunctionality: The transformation extracts the initials from the first and last name of each person in the given sequence and concatenates them to form the result list.\nExample: Input: ['Kelly Wilson', 'Mr. John A. Adams, III', 'Eva Turner', 'William Harris', 'Grace Martinez']; output: ['KW', 'MA', 'ET', 'WH', 'GM']"}
{"id": "158-6", "oq_id": 158, "desc": "Input: a list of string values, with names in each element.\nOutput: a list of string values.\nFunctionality: The transformation takes the initials of the first and last name from each element in the given sequence and combine them to create a new string in the result list.\nExample: Input: ['Emily Wright', 'Mr. George L. Wilson, III', 'Hannah Carter', 'Jonathan Gray', 'Megan Parker']; output: ['WE', 'WG', 'CH', 'GJ', 'MP']"}
{"id": "158-7", "oq_id": 158, "desc": "Input: a list of string values, where each element represents a name.\nOutput: a list of string values, where each element consists of the initials of the first and last name.\n\nFunctionality: The transformation extracts the initials from the first and last name of each element in the given sequence and concatenates them to form the result list.\n\nExample: Input: ['Lauren Torres', 'Mr. Eric S. Martin, III', 'Rachel Brooks', 'Tyler Cook', 'Abigail Cooper']; output: ['LT', 'ME', 'RB', 'TC', 'AC']"}
{"id": "158-3", "oq_id": 158, "desc": "Input: a list of string values, with names in each element.\nOutput: a list of string values.\nFunctionality: The transformation takes the initials of the first and last name from each element in the given sequence and outputs them as strings in the result list.\nExample: Input: ['Richard Scott', 'Mr. Charles W. Brown, III', 'Nancy Miller', 'Samuel Young', 'Olivia Davis']; output: ['RS', 'BC', 'NM', 'SY', 'OD']"}
{"id": "158-2", "oq_id": 158, "desc": "Input: a list of string values, where each element represents a name.\nOutput: a list of string values.\nFunctionality: The transformation takes the initials of the first and last name from each element in the given sequence and outputs them as strings in the result list.\nExample: Input: ['Lucy Lee', 'Mr. David M. Taylor, III', 'Paula Hall', 'Mark Allen', 'Laura King']; output: ['LL', 'TD', 'PH', 'MA', 'LK']"}
{"id": "158-0", "oq_id": 158, "desc": "Input: a list of string values, with names in various formats.\nOutput: a list of string values with initials from first and last names.\nFunctionality: The transformation extracts the initials from the first and last names in each element and formats them as uppercase initials, providing the output list.\nExample: Input: ['Doe, Jane', 'Michael Johnson', 'Mr. Robert K. Smith, III', 'Emma Brown', 'Chris White']; output: ['DJ', 'MJ', 'RKS', 'EB', 'CW']"}
{"id": "158-1", "oq_id": 158, "desc": "Input: a list of strings representing names.\nOutput: a list of strings representing initials of the first and last name.\nFunctionality: The transformation extracts the first letter of the first name and last name from each element in the given sequence, and combines them to form the initials in the output list.\nExample: Input: ['Thomas Pierce', 'Mr. Andrew J. Peters, III', 'Sarah Green', 'Peter Lewis', 'Kelly Clark']; Output: ['TP', 'MP', 'SG', 'PL', 'KC']"}
{"id": "158-9", "oq_id": 158, "desc": "Input: a list of string values, where each element represents a name.\nOutput: a list of string values.\nFunctionality: The transformation takes the initials of the first and last name from each element in the given sequence and outputs them as strings in the result list.\nExample: Input: ['Maria Garcia', 'Mr. Alexander E. Smith, III', 'Daniel Reed', 'Chloe Wood', 'Victor Nguyen']; output: ['MG', 'MAES', 'DR', 'CW', 'VN']"}
{"id": "158-8", "oq_id": 158, "desc": "Input: a list of string values, where each element represents a full name.\nOutput: a list of string values, where each element is formed by the initials of the first and last name.\nFunctionality: The transformation extracts the first character of the first name and the first character of the last name, converts them to uppercase, and concatenates them to form the initials.\nExample: Input: ['Scott Murphy', 'Mr. Matthew D. Thomas, III', 'Catherine Baker', 'Jeremy Patel', 'Rebecca Diaz']; output: ['SM', 'MT', 'CB', 'JP', 'RD']"}
{"id": "159-6", "oq_id": 159, "desc": "Input: a list of string values, each element containing a full name.\nOutput: a list of string values, each element containing the last name extracted from the full name.\nFunctionality: The transformation extracts the last name from each full name in the given sequence and outputs the last names as strings in the result list.\nExample: Input: ['Wang, Jessica', 'Daniel Evans', 'Ms. Laura M. Wright', 'Tyler Morgan']; output: ['Wang', 'Evans', 'Wright', 'Morgan']"}
{"id": "159-7", "oq_id": 159, "desc": "Input: a list of string values, with names in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the last name from each element in the given sequence and outputs it in the result list.\nExample: Input: ['Nguyen, Amanda', 'Frank Rodriguez', 'Mr. George E. Hall', 'Heather Torres']; output: ['Nguyen', 'Rodriguez', 'Hall', 'Torres']"}
{"id": "159-5", "oq_id": 159, "desc": "Input: a list of string values, each element containing a full name.\nOutput: a list of string values, each element containing the last name extracted from the full name.\nFunctionality: The transformation extracts the last name from each full name in the given sequence and outputs the last names as strings in the result list.\nExample: Input: ['Garcia, Maria', 'Joseph Clark', 'Mrs. Angela S. Davis', 'Tony Ramirez']; output: ['Garcia', 'Clark', 'Davis', 'Ramirez']"}
{"id": "159-4", "oq_id": 159, "desc": "Input: a list of string values, each containing a person's full name.\nOutput: a list of string values, each containing the person's last name.\nFunctionality: The transformation extracts the last name from each full name in the given sequence and outputs it as a list.\nExample: Input: ['Chen, Eric', 'Samantha Green', 'Dr. Steven L. Carter, DVM', 'Michelle Parker']; output: ['Chen', 'Green', 'Carter', 'Parker']"}
{"id": "159-0", "oq_id": 159, "desc": "Input: a list of string values, representing names in various formats.\nOutput: a list of string values, representing last names.\nFunctionality: The transformation extracts the last name from each element in the given sequence, and outputs the last names as a list.\nExample: Input: ['Brown, William', 'Sarah White', 'Dr. Olivia Grey, MD', 'Michael Thompson']; output: ['Brown', 'White', 'Grey', 'Thompson']"}
{"id": "159-1", "oq_id": 159, "desc": "Input: a list of string values, with names in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the initial and last name from each element in the given sequence, and output the result list.\nExample: Input: ['Phelps, Emily', 'David Brown', 'Mr. Robert N. Miller, II', 'Linda Harris']; output: ['Phelps', 'Brown', 'Miller', 'Harris']"}
{"id": "159-3", "oq_id": 159, "desc": "Input: a list of string values, each element containing a full name.\nOutput: a list of string values, each element containing only the last name.\nFunctionality: The transformation extracts the last name from each full name in the given sequence and outputs it as a list.\nExample: Input: ['Kim, Rachel', 'Peter Harris', 'Mr. Mark A. Reynolds', 'Cynthia Adams']; output: ['Kim', 'Harris', 'Reynolds', 'Adams']"}
{"id": "159-2", "oq_id": 159, "desc": "Input: a list of string values, each containing a full name with various titles.\nOutput: a list of string values, each containing the last name extracted from the full name in the input list.\nFunctionality: The transformation extracts the last name from each full name in the input sequence and outputs the last names as a list.\nExample: Input: ['Lee, Jennifer', 'Thomas Scott', 'Mrs. Mary K. Taylor, PhD', 'Kevin King']; output: ['Lee', 'Scott', 'Taylor', 'King']"}
{"id": "159-9", "oq_id": 159, "desc": "Input: a list of string values, each element representing a name in various formats.\nOutput: a list of string values, each element containing only the last name of the corresponding input name.\nFunctionality: The transformation extracts the last name from each element in the given sequence, and formats it as a string in the result list.\nExample: Input: ['Rivera, Julia', 'Matthew Turner', 'Mrs. Jessica W. Scott', 'Paula Simmons']; Output: ['Rivera', 'Turner', 'Scott', 'Simmons']"}
{"id": "159-8", "oq_id": 159, "desc": "Input: a list of string values, each element containing a full name.\nOutput: a list of string values, each element containing only the last name.\nFunctionality: The transformation extracts the last name from each full name in the given sequence and outputs it as a list.\nExample: Input: ['Holmes, Emily', 'James Thompson', 'Dr. Amy J. Lewis, DDS', 'Christopher Davis']; output: ['Holmes', 'Thompson', 'Lewis', 'Davis']"}
{"id": "160-2", "oq_id": 160, "desc": "Input: a list of string values containing names in different formats.\nOutput: a list of string values containing initials of first and last names.\nFunctionality: The transformation extracts the first letter of the first and last names from each element in the given sequence and combines them to form initials in the result list.\nExample: Input: ['Dr. Michael J. Murphy, Ph.D.', 'Emily Nicole Wilson', \"Joseph Patrick O'Brien\", 'Sara Louise Garcia', 'Benjamin Frank Thompson']; output: ['M', 'N', 'P', 'L', 'F']"}
{"id": "160-3", "oq_id": 160, "desc": "Input: a list of strings, each containing a full name.\nOutput: a list of strings, each containing the initial and last name of the corresponding person in the input sequence.\nFunctionality: The transformation extracts the first letter of the first name and the first letter of the last name from each full name in the input sequence, and combines them as the output.\nExample: Input: ['Mrs. Amanda L. Baker', 'Daniel James Miller', 'Katherine Grace Young', 'Peter Richard Sanchez', 'Olivia Anne Russo']; output: ['A', 'J', 'G', 'R', 'A']"}
{"id": "160-1", "oq_id": 160, "desc": "Input: a list of string values, each containing a full name.\nOutput: a list of string values, each containing the initial letter of the first name and the last name.\nFunctionality: The transformation extracts the initial letter of the first name and the last name from each element in the given sequence, and formats the result as a list of strings.\nExample: Input: ['George R. Washington, Jr.', 'Mary Elizabeth Johnson', 'Thomas Lee White', 'Lucy Margaret Davis', 'William Henry Martinez']; output: ['R', 'E', 'L', 'M', 'H']"}
{"id": "160-0", "oq_id": 160, "desc": "Input: a list of strings containing names with titles and last names.\nOutput: a list of strings containing the initial letter of the first name and the last name.\nFunctionality: The transformation extracts the initial letter of the first name and the last name from each element in the given sequence and outputs them as strings in the result list.\nExample: Input: ['Ms. Laura K. Lee, IV', 'Robert Allen Grayson', 'Jane Mary Doe', 'Samuel David Brown', 'Jennifer Ann Smith']; output: ['L', 'A', 'M', 'D', 'A']"}
{"id": "160-4", "oq_id": 160, "desc": "Input: a list of string values, each containing a full name.\nOutput: a list of string values, each containing the initials of the first and last names.\nFunctionality: The transformation extracts the first letter of the first name and the first letter of the last name from each element in the given sequence, and combines them to form the result list.\nExample: Input: ['Mark Steven Davis', 'Karen Michelle Thompson', 'Victor Louis Perez', 'Catherine Marie Torres', 'Albert Peter Evans']; output: ['S', 'M', 'L', 'M', 'P']"}
{"id": "160-5", "oq_id": 160, "desc": "Input: a list of string values, each containing a full name.\nOutput: a list of string values, each containing the initial and last name's first letter.\nFunctionality: The transformation extracts the first letter of the first name and the first letter of the last name from each element in the given sequence, and combines them into a new string in the result list.\nExample: Input: ['Caroline E. Reynolds', 'David Scott Anderson', 'Jessica Lynn Carter', 'Richard Thomas Harris', 'Grace Angela Phillips']; output: ['E', 'S', 'L', 'T', 'A']"}
{"id": "160-7", "oq_id": 160, "desc": "Input: a list of string values, where each element represents a full name.\nOutput: a list of string values, where each element is formed by the initials of the first and last name.\nFunctionality: The transformation extracts the first character of the first name and the first character of the last name, converts them to uppercase, and concatenates them to form the initials.\nExample: Input: ['Linda Marie Clarke', 'Patrick Michael Nguyen', 'Isabel Sofia Morales', 'Carlos Miguel Gonzalez', 'Rosemary Elizabeth Martinez']; output: ['M', 'M', 'S', 'M', 'E']"}
{"id": "160-6", "oq_id": 160, "desc": "Input: a list of string values, with full names in each element.\nOutput: a list of string values, with initials of first and last names in each element.\nFunctionality: The transformation extracts the initials from the first and last names of each element in the given sequence, and combines them to form the result list.\nExample: Input: ['Tony Carlos Munoz', 'Sophia Rose Patel', 'Miguel Antonio Fernandez', 'Maria Isabella Ramirez', 'Julian Marcus Smith']; output: ['C', 'R', 'A', 'I', 'M']"}
{"id": "160-8", "oq_id": 160, "desc": "Input: a list of string values, with names containing first, middle, and last names.\nOutput: a list of string values, containing only the initial and last name of each person.\nFunctionality: The transformation extracts the initial letter of the first name and the last name from each element in the given sequence and outputs them as a list.\nExample: Input: ['Colin Lawrence Wright', 'Rebecca Marie Baker', 'Vincent John Reyes', 'Natalie Anne Cooper', 'Francisco Javier Rodriguez']; output: ['C Wright', 'R Baker', 'V Reyes', 'N Cooper', 'F Rodriguez']"}
{"id": "160-9", "oq_id": 160, "desc": "Input: a list of string values, each containing a full name.\nOutput: a list of string values, each containing the initial letter of the first name followed by the last name.\nFunctionality: The transformation extracts the initial letter of the first name and appends it to the last name, outputting the result as a new list of strings.\nExample: Input: ['Lauren Elizabeth Adams', 'Ethan Christopher Wilson', 'Victoria Maria Lopez', 'Juan Pablo Hernandez', 'Alicia Marie Carter']; output: ['E Adams', 'C Wilson', 'M Lopez', 'P Hernandez', 'M Carter']"}
{"id": "161-1", "oq_id": 161, "desc": "Input: a list of complex text strings.\nOutput: a list of specific text strings.\n\nFunctionality: The transformation extracts the domain name from the given sequence that contains cookie information and outputs it as a list with the domain name.\nExample: Input: ['sessionid=abcd1234; domain=.google.com; path=/; expires=Wed, 31 Dec 2025 23:59:59 GMT']; output: ['.google.com']"}
{"id": "161-0", "oq_id": 161, "desc": "Input: a list of strings containing key-value pairs separated by semicolons.\nOutput: a list of strings containing values associated with the key 'domain'.\n\nFunctionality: The transformation extracts the value associated with the key 'domain' from each element in the given sequence and outputs it in a list.\n\nExample: Input: ['uid=1234; domain=.example.com; expires=Tue, 01 Jan 2022 00:00:00 GMT; path=/']; output: ['.example.com']"}
{"id": "161-2", "oq_id": 161, "desc": "Input: a list of complex text values.\nOutput: a list of strings representing domain names.\n\nFunctionality: The transformation extracts the domain name from each element in the given sequence based on a specific pattern, and outputs the domain name as a string in the result list.\n\nExample: Input: ['user=testuser; domain=.testsite.com; path=/; expires=Sun, 15 Nov 2020 12:00:00 GMT']; output: ['.testsite.com']"}
{"id": "161-3", "oq_id": 161, "desc": "Input: a list of strings containing key-value pairs separated by semicolons.\nOutput: a list of strings containing specific values extracted from the input strings.\nFunctionality: The transformation extracts the domain value from each element in the given sequence and outputs it in a new list.\nExample: Input: ['theme=dark; path=/; expires=Thu, 20 Aug 2020 18:00:00 GMT; domain=.website.com']; output: ['.website.com']"}
{"id": "161-7", "oq_id": 161, "desc": "Input: a list of complex text values.\nOutput: a list of strings representing domain names.\n\nFunctionality: The transformation extracts the domain name from the given sequence by locating the substring starting with 'domain=' and ending with the next semicolon ';'. The extracted domain name is then formatted as a string in the result list.\n\nExample: Input: ['settings=preferences; path=/; domain=.mywebsite.com; expires=Mon, 10 Aug 2020 10:00:00 GMT']; output: ['.mywebsite.com']"}
{"id": "161-6", "oq_id": 161, "desc": "Input: a list of complex text values containing specific information.\nOutput: a list of strings representing a specific part of the input text.\nFunctionality: The transformation extracts the domain name from each element in the given sequence and outputs it as a string in the result list.\nExample: Input: ['lang=en; domain=.example.net; path=/; expires=Sat, 01 May 2021 15:30:00 GMT']; output: ['.example.net']"}
{"id": "161-4", "oq_id": 161, "desc": "Input: a list of strings containing key-value pairs separated by semicolons.\nOutput: a list of strings containing values associated with the key 'domain'.\n\nFunctionality: The transformation extracts the value associated with the key 'domain' from each element in the given sequence and outputs it in a list.\n\nExample: Input: ['userid=5678; domain=.example.org; path=/; expires=Fri, 25 Dec 2020 06:00:00 GMT']; output: ['.example.org']"}
{"id": "161-5", "oq_id": 161, "desc": "Input: a list of strings containing cookie data.\nOutput: a list of strings containing domain information.\nFunctionality: The transformation extracts the domain information from the cookie data in each element of the given sequence and outputs it as a string in the result list.\nExample: Input: ['cart=items; path=/; domain=.shop.com; expires=Wed, 30 Sep 2020 20:00:00 GMT']; output: ['.shop.com']"}
{"id": "161-8", "oq_id": 161, "desc": "Input: a list of complex text strings.\nOutput: a list of strings representing domain names.\n\nFunctionality: The transformation extracts the domain name from each element in the given sequence based on a specific pattern, and outputs the domain name as a string in the result list.\n\nExample: Input: ['token=abcdef12345; domain=.domain.com; path=/; expires=Fri, 12 Jun 2020 07:00:00 GMT']; output: ['.domain.com']"}
{"id": "161-9", "oq_id": 161, "desc": "Input: a list of strings containing cookie information.\nOutput: a list of strings containing domain information extracted from the input strings.\nFunctionality: The transformation extracts the domain from each element in the given sequence by finding the substring between \"domain=\" and the next \";\" character, and outputs it as a list.\nExample: Input: ['session=xyz123; domain=.testsite.org; path=/; expires=Tue, 30 Nov 2021 16:45:00 GMT']; output: ['.testsite.org']"}
{"id": "162-0", "oq_id": 162, "desc": "Input: a list of string values representing dates in the format \"MM/DD/YYYY\".\nOutput: a list of string values representing the day of the week corresponding to each date.\n\nFunctionality: The transformation converts each date in the given sequence to the corresponding day of the week and outputs the results in a new list.\n\nExample: Input: ['06/30/2016', '11/15/2017', '09/05/2018', '04/20/2019']; output: ['Thursday', 'Wednesday', 'Wednesday', 'Saturday']"}
{"id": "162-1", "oq_id": 162, "desc": "Input: a list of string values, with date formatted strings in each element.\nOutput: a list of string values representing the day of the week for each date.\nFunctionality: The transformation extracts the day of the week from each date in the given sequence and outputs it as a list of strings.\nExample: Input: ['12/25/2020', '08/03/2018', '07/11/2017', '03/10/2016']; output: ['Friday', 'Friday', 'Tuesday', 'Thursday']"}
{"id": "162-3", "oq_id": 162, "desc": "Input: a list of string values representing dates in the format \"MM/DD/YYYY\".\nOutput: a list of string values representing the day of the week corresponding to each date.\n\nFunctionality: The transformation converts each date in the given sequence to the corresponding day of the week and outputs the results in a new list.\n\nExample: Input: ['06/08/2017', '04/01/2015', '11/30/2018', '02/17/2019']; output: ['Thursday', 'Wednesday', 'Friday', 'Sunday']"}
{"id": "162-2", "oq_id": 162, "desc": "Input: a list of strings in date format.\nOutput: a list of strings in day of the week format.\nFunctionality: The transformation converts each date from the given sequence to the corresponding day of the week and outputs the result as a list.\nExample: Input: ['02/14/2015', '10/19/2014', '07/04/2013', '09/22/2016']; output: ['Saturday', 'Sunday', 'Thursday', 'Thursday']"}
{"id": "162-6", "oq_id": 162, "desc": "Input: a list of string values representing dates in the format \"MM/DD/YYYY\".\nOutput: a list of string values representing the day of the week corresponding to each date.\nFunctionality: The transformation converts each date in the given sequence to the corresponding day of the week and outputs the results in a new list.\nExample: Input: ['06/01/2020', '10/10/2018', '11/25/2017', '03/30/2016']; output: ['Monday', 'Wednesday', 'Saturday', 'Wednesday']"}
{"id": "162-7", "oq_id": 162, "desc": "Input: a list of string values representing dates in the format \"MM/DD/YYYY\".\nOutput: a list of string values representing the day of the week corresponding to each date.\n\nFunctionality: The transformation converts each date in the given sequence to the corresponding day of the week and outputs the results in a new list.\n\nExample: Input: ['05/06/2019', '07/17/2018', '10/28/2014', '12/05/2015']; output: ['Monday', 'Tuesday', 'Tuesday', 'Saturday']"}
{"id": "162-5", "oq_id": 162, "desc": "Input: a list of string values representing dates in the format \"MM/DD/YYYY\".\nOutput: a list of string values representing the day of the week corresponding to each date.\n\nFunctionality: The transformation converts each date in the given sequence to the corresponding day of the week and outputs the results in a new list.\n\nExample: Input: ['04/18/2017', '03/07/2018', '09/01/2019', '01/10/2020']; output: ['Tuesday', 'Wednesday', 'Sunday', 'Friday']"}
{"id": "162-4", "oq_id": 162, "desc": "Input: a list of string values representing dates in the format 'MM/DD/YYYY'.\nOutput: a list of string values representing the day of the week corresponding to each date.\n\nFunctionality: The transformation converts each date in the given sequence to the corresponding day of the week and outputs the results in a new list.\n\nExample: Input: ['08/12/2015', '07/03/2016', '05/28/2014', '12/09/2013']; output: ['Wednesday', 'Sunday', 'Wednesday', 'Monday']"}
{"id": "162-9", "oq_id": 162, "desc": "Input: a list of string values representing dates in the format 'MM/DD/YYYY'.\nOutput: a list of string values representing the day of the week corresponding to each date.\n\nFunctionality: The transformation converts each date in the given sequence to the corresponding day of the week and outputs the results in a new list.\n\nExample: Input: ['07/22/2014', '11/03/2013', '02/02/2016', '09/15/2017']; output: ['Tuesday', 'Sunday', 'Tuesday', 'Friday']"}
{"id": "162-8", "oq_id": 162, "desc": "Input: a list of string values representing dates in the format \"MM/DD/YYYY\".\nOutput: a list of string values representing the day of the week corresponding to each date.\n\nFunctionality: The transformation converts each date in the given sequence to the corresponding day of the week and outputs the results in a new list.\nExample: Input: ['02/29/2016', '01/07/2017', '05/24/2018', '08/13/2015']; output: ['Monday', 'Saturday', 'Thursday', 'Thursday']"}
{"id": "163-3", "oq_id": 163, "desc": "Input: a list of string values in date format.\nOutput: a list of string values representing months.\nFunctionality: The transformation extracts the month from each date in the given sequence and outputs the month name in the result list.\nExample: Input: ['1975-08-05', '2012-Apr-14', '9/10/2001', '2016-11-07']; output: ['August', 'April', 'September', 'November']"}
{"id": "163-2", "oq_id": 163, "desc": "Input: a list of string values, representing dates in different formats.\nOutput: a list of string values, representing the months extracted from the dates.\nFunctionality: The transformation extracts the month information from each date in the given sequence, and outputs the list of months in string format.\nExample: Input: ['1987-04-02', '2008-Oct-17', '11/30/1996', '2015-07-22']; output: ['April', 'October', 'November', 'July']"}
{"id": "163-0", "oq_id": 163, "desc": "Input: a list of string values, representing dates in different formats.\nOutput: a list of string values, representing the months extracted from the dates.\nFunctionality: The transformation extracts the month information from each date in the given sequence, and outputs the list of months in string format.\nExample: Input: ['2020-05-20', '2019-Nov-30', '3/15/2018', '2017-08-10']; output: ['May', 'November', 'March', 'August']"}
{"id": "163-1", "oq_id": 163, "desc": "Input: a list of string values, representing dates in different formats.\nOutput: a list of string values, representing the months extracted from the dates.\nFunctionality: The transformation extracts the month information from each date in the given sequence and outputs the months as a list of strings.\nExample: Input: ['1998-12-25', '2005-Sep-13', '8/21/2010', '2014-03-01']; output: ['December', 'September', 'August', 'March']"}
{"id": "163-5", "oq_id": 163, "desc": "Input: a list of string values, representing dates in different formats.\nOutput: a list of string values, representing the months extracted from the dates in seq_a.\nFunctionality: The transformation extracts the month from each date in the given sequence, and formats the month as a string in the result list.\nExample: Input: ['1950-06-07', '2000-May-28', '5/10/2005', '2011-12-31']; output: ['June', 'May', 'May', 'December']"}
{"id": "163-4", "oq_id": 163, "desc": "Input: a list of string values, representing dates in different formats.\nOutput: a list of string values, representing the months extracted from the dates.\nFunctionality: The transformation extracts the month information from each date in the given sequence, and outputs the list of months in string format.\nExample: Input: ['1963-01-30', '2021-Jan-01', '6/25/1992', '2018-09-12']; output: ['January', 'January', 'June', 'September']"}
{"id": "163-6", "oq_id": 163, "desc": "Input: a list of string values, representing dates in different formats.\nOutput: a list of string values, representing the months extracted from the dates.\nFunctionality: The transformation extracts the month information from each date in the given sequence, and outputs the list of months in string format.\nExample: Input: ['1939-09-15', '1995-Apr-09', '10/20/2017', '2010-04-18']; output: ['September', 'April', 'October', 'April']"}
{"id": "163-7", "oq_id": 163, "desc": "Input: a list of string values, representing dates in different formats.\nOutput: a list of string values, representing the months extracted from the dates.\nFunctionality: The transformation extracts the month information from each date in the given sequence, and outputs the list of months in string format.\nExample: Input: ['1927-02-20', '1984-Jul-02', '4/12/1980', '2013-06-03']; output: ['February', 'July', 'April', 'June']"}
{"id": "163-9", "oq_id": 163, "desc": "Input: a list of string values, representing dates in different formats.\nOutput: a list of string values, representing the months extracted from the dates.\nFunctionality: The transformation extracts the month information from each date in the given sequence, and outputs the list of months in string format.\nExample: Input: ['1903-11-01', '2017-Dec-24', '12/8/2020', '2014-08-03']; output: ['November', 'December', 'December', 'August']"}
{"id": "163-8", "oq_id": 163, "desc": "Input: a list of string values, representing dates in different formats.\nOutput: a list of string values, representing the months extracted from the dates.\nFunctionality: The transformation extracts the month information from each date in the given sequence, and outputs the list of months in string format.\nExample: Input: ['1915-07-10', '2003-Aug-25', '1/5/1967', '2019-10-19']; output: ['July', 'August', 'January', 'October']"}
{"id": "164-6", "oq_id": 164, "desc": "Input: a list of string values, containing dates in various formats.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the day from each date in the given sequence and outputs it as a string in the result list.\nExample: Input: ['01-13-2018', '05-29-2012', '10/09/2010', '8/21/2007 01:55 PM', 'April 7, 2008', 'July 9, 2016']; output: ['1', '5', '10', '8', '4', '7']"}
{"id": "164-7", "oq_id": 164, "desc": "Input: a list of string values, containing dates in various formats.\nOutput: a list of string values representing the month in numeric format.\nFunctionality: The transformation extracts the month from each date element in the given sequence and outputs the month as a string formatted as a numeric value.\nExample: Input: ['07-18-2011', '04-05-2014', '03/26/2015', '6/14/2010 11:30 AM', 'October 11, 2009', 'December 9, 2013']; output: ['7', '4', '3', '6', '10', '12']"}
{"id": "164-5", "oq_id": 164, "desc": "Input: a list of string values, containing dates in various formats.\nOutput: a list of string values representing the month in numeric format.\nFunctionality: The transformation extracts the month part from each element in the given sequence and outputs it as a string.\nExample: Input: ['09-07-2009', '02-22-2016', '02/28/2011', '11/12/2013 10:10 AM', 'May 20, 2010', 'October 31, 2014']; output: ['9', '2', '2', '11', '5', '10']"}
{"id": "164-4", "oq_id": 164, "desc": "Input: a list of string values, containing dates in various formats.\nOutput: a list of string values representing the month in each date.\nFunctionality: The transformation extracts the month from each date in the given sequence, and outputs the month as a string in the result list.\nExample: Input: ['02-28-2010', '08-03-2008', '04/15/2012', '9/05/2015 05:20 PM', 'March 17, 2011', 'July 10, 2013']; output: ['2', '8', '4', '9', '3', '7']"}
{"id": "164-0", "oq_id": 164, "desc": "Input: a list of string values, containing dates in various formats.\nOutput: a list of string values, representing the month in each date.\nFunctionality: The transformation extracts the month value from each date in the given sequence and formats it as a string in the result list.\nExample: Input: ['12-25-2016', '09-14-2013', '07/04/2010', '5/21/2018 09:45 AM', 'August 19, 2017', 'October 5, 2015']; output: ['12', '9', '7', '5', '8', '10']"}
{"id": "164-1", "oq_id": 164, "desc": "Input: a list of string values, containing dates in various formats.\nOutput: a list of string values representing the month in each date.\nFunctionality: The transformation extracts the month from each date in the given sequence, and outputs the month as a string in the result list.\nExample: Input: ['11-30-2006', '06-10-2011', '03/12/2015', '7/17/2008 02:15 PM', 'January 8, 2010', 'April 22, 2012']; output: ['11', '6', '3', '7', '1', '4']"}
{"id": "164-3", "oq_id": 164, "desc": "Input: a list of string values, containing dates in various formats.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the day from each date in the given sequence and outputs it as a string in the result list.\nExample: Input: ['05-12-2011', '10-18-2016', '07/29/2014', '12/01/2009 03:40 PM', 'June 3, 2017', 'November 12, 2010']; output: ['5', '10', '7', '12', '6', '11']"}
{"id": "164-2", "oq_id": 164, "desc": "Input: a list of string values, containing dates in various formats.\nOutput: a list of string values representing the month as a number.\nFunctionality: The transformation extracts the month from each date element in the given sequence and outputs the month as a string formatted as a number.\nExample: Input: ['08-02-2013', '03-16-2014', '06/25/2009', '10/10/2017 08:30 AM', 'December 30, 2012', 'September 14, 2011']; output: ['8', '3', '6', '10', '12', '9']"}
{"id": "164-9", "oq_id": 164, "desc": "Input: a list of string values, containing dates in various formats.\nOutput: a list of string values.\nFunctionality: The transformation extracts the month from each date in the given sequence and outputs it as a string in the result list.\nExample: Input: ['03-22-2017', '12-07-2010', '04/21/2013', '11/05/2015 04:45 PM', 'September 28, 2011', 'May 11, 2016']; output: ['3', '12', '4', '11', '9', '5']"}
{"id": "164-8", "oq_id": 164, "desc": "Input: a list of string values, containing dates in various formats.\nOutput: a list of string values representing the day in each date.\nFunctionality: The transformation extracts the day from each date in the given sequence, and outputs the day as a string in the result list.\nExample: Input: ['10-20-2013', '01-04-2012', '09/02/2016', '3/30/2011 09:20 AM', 'August 6, 2014', 'February 15, 2015']; output: ['10', '1', '9', '3', '6', '15']"}
{"id": "165-5", "oq_id": 165, "desc": "Input: a list of string values, with website URLs in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the relevant organization name from each URL in the given sequence and outputs it as a list.\nExample: Input: ['www.nasa.gov', 'space.nasa.com', 'photos.nasa.co.uk', 'weather.bbc.com', 'maps.google.com']; output: ['nasa', 'nasa', 'nasa', 'bbc', 'google']"}
{"id": "165-4", "oq_id": 165, "desc": "Input: a list of strings containing website URLs.\nOutput: a list of strings representing the domain names extracted from each URL.\n\nFunctionality: The transformation extracts the domain name from each URL in the given sequence and outputs the result as a list of domain names.\nExample: Input: ['news.nytimes.com', 'www.nytimes.co.uk', 'shop.nytimes.com', 'photos.pinterest.com', 'www.pinterest.com']; output: ['nytimes', 'nytimes', 'nytimes', 'pinterest', 'pinterest']"}
{"id": "165-6", "oq_id": 165, "desc": "Input: a list of string values, representing website URLs.\nOutput: a list of string values, representing the domain names extracted from each URL.\n\nFunctionality: The transformation extracts the domain name from each URL in the given sequence, and outputs the domain names as strings in the resulting list.\n\nExample: Input: ['classroom.google.com', 'meet.google.co.in', 'gmail.google.com', 'www.microsoft.com', 'office.microsoft.co.uk']; output: ['google', 'google', 'google', 'microsoft', 'microsoft']"}
{"id": "165-7", "oq_id": 165, "desc": "Input: a list of string values, where each element is a website URL.\nOutput: a list of string values.\n\nFunctionality: The transformation extracts the main domain name from each website URL in the given sequence, and outputs the extracted domain names as strings in the result list.\n\nExample: Input: ['news.reuters.com', 'www.reuters.co.in', 'photos.reuters.com', 'books.barnesandnoble.com', 'www.barnesandnoble.com']; output: ['reuters', 'reuters', 'reuters', 'barnesandnoble', 'barnesandnoble']"}
{"id": "165-3", "oq_id": 165, "desc": "Input: a list of string values, with URLs containing the names of online shopping platforms.\nOutput: a list of string values.\nFunctionality: The transformation extracts the platform name from each URL in the given sequence, and outputs a list of these platform names.\nExample: Input: ['www.amazon.com', 'books.amazon.co.uk', 'music.amazon.fr', 'www.flipkart.com', 'books.flipkart.co.in']; Output: ['amazon', 'amazon', 'amazon', 'flipkart', 'flipkart']"}
{"id": "165-2", "oq_id": 165, "desc": "Input: a list of strings representing website URLs.\nOutput: a list of strings representing domain names.\n\nFunctionality: The transformation extracts the domain name from each URL in the given sequence by taking the substring between 'www.' and the following '.' or until the end of the string if 'www.' is not present, and outputs the result as a list.\n\nExample: Input: ['news.bbc.com', 'sport.bbc.co.uk', 'www.bbc.co.in', 'upload.dropbox.com', 'photos.instagram.com']; output: ['bbc', 'bbc', 'bbc', 'dropbox', 'instagram']"}
{"id": "165-0", "oq_id": 165, "desc": "Input: a list of string values, representing website URLs.\nOutput: a list of string values, representing the domain names extracted from each URL.\n\nFunctionality: The transformation extracts the domain name from each URL in the given sequence, and outputs the domain names as strings in the result list.\nExample: Input: ['mail.google.com', 'docs.google.co.in', 'playstore.google.com', 'www.news.bbc.co.uk', 'photos.facebook.com']; output: ['google', 'google', 'google', 'bbc', 'facebook']"}
{"id": "165-1", "oq_id": 165, "desc": "Input: a list of string values, each containing a domain name.\nOutput: a list of string values, each containing the corresponding website provider.\n\nFunctionality: The transformation extracts the provider name from each domain name in the given sequence, and outputs a list of provider names.\n\nExample: Input: ['maps.google.com', 'drive.google.co.uk', 'mail.yahoo.com', 'finance.yahoo.co.jp', 'www.yahoo.com']; output: ['google', 'google', 'yahoo', 'yahoo', 'yahoo']"}
{"id": "165-9", "oq_id": 165, "desc": "Input: a list of strings containing website URLs.\nOutput: a list of strings representing the domain name of each URL.\n\nFunctionality: The transformation extracts the domain name from each URL in the given sequence, and outputs the result as a list of domain names.\nExample: Input: ['news.aljazeera.com', 'www.aljazeera.co.uk', 'photos.aljazeera.com', 'books.bookdepository.com', 'www.bookdepository.com']; output: ['aljazeera', 'aljazeera', 'aljazeera', 'bookdepository', 'bookdepository']"}
{"id": "165-8", "oq_id": 165, "desc": "Input: a list of string values, each element containing a domain name.\nOutput: a list of string values.\nFunctionality: The transformation extracts the company name from each domain name in the given sequence, and outputs the company names as a list.\nExample: Input: ['maps.apple.com', 'photos.apple.co.uk', 'cloud.apple.com', 'www.ibm.com', 'mail.ibm.co.in']; output: ['apple', 'apple', 'apple', 'ibm', 'ibm']"}
{"id": "166-4", "oq_id": 166, "desc": "Input: a list of string values representing URLs.\nOutput: a list of string values representing domain extensions.\nFunctionality: The transformation extracts the domain extensions from each URL in the given sequence and outputs them as a list of strings.\nExample: Input: ['wikipedia.org', 'reddit.co.uk', 'github.com.au', 'stackoverflow.com', 'bitbucket.ca']; output: ['org', 'co.uk', 'com.au', 'com', 'ca']"}
{"id": "166-5", "oq_id": 166, "desc": "Input: a list of string values, each element representing a domain name.\nOutput: a list of string values, each element representing the domain extension.\n\nFunctionality: The transformation extracts the domain extension from each element in the given sequence, and outputs the domain extension as a string in the result list.\nExample: Input: ['buzzfeed.com', 'reddit.co.uk', 'independent.com.au', 'vice.com', 'thedailybeast.ca']; output: ['com', 'co.uk', 'com.au', 'com', 'ca']"}
{"id": "166-7", "oq_id": 166, "desc": "Input: a list of string values, each element representing a domain name.\nOutput: a list of string values, each element representing the domain extension.\n\nFunctionality: The transformation extracts the domain extension from each element in the given sequence, and output the domain extension as a string in the result list.\nExample: Input: ['wsj.com', 'usatoday.co.uk', 'bbc.com.au', 'reuters.com', 'cbsnews.ca']; output: ['com', 'co.uk', 'com.au', 'com', 'ca']"}
{"id": "166-6", "oq_id": 166, "desc": "Input: a list of string values, each element representing a domain name.\nOutput: a list of string values, each element representing the domain extension.\n\nFunctionality: The transformation extracts the domain extension from each element in the given sequence, and output the domain extension as a string in the result list.\nExample: Input: ['etsy.com', 'zara.co.uk', 'forever21.com.au', 'h&m.com', 'asos.ca']; output: ['com', 'co.uk', 'com.au', 'com', 'ca']"}
{"id": "166-2", "oq_id": 166, "desc": "Input: a list of string values, representing website URLs.\nOutput: a list of string values, representing domain extensions of the URLs.\n\nFunctionality: The transformation extracts the domain extension from each URL in the given sequence, and formats each extension as a string in the result list.\n\nExample: Input: ['bbc.co.uk', 'nike.com', 'adidas.com.au', 'coca-cola.com', 'pepsi.ca']; output: ['co.uk', 'com', 'com.au', 'com', 'ca']"}
{"id": "166-3", "oq_id": 166, "desc": "Input: a list of string values, each containing a domain name.\nOutput: a list of string values, each containing the top-level domain (TLD) from the input domain names.\nFunctionality: The transformation extracts the top-level domain (TLD) from each element in the given sequence, and formats each TLD as a string in the resulting list.\nExample: Input: ['uber.com', 'lyft.co.uk', 'airbnb.com.au', 'expedia.com', 'booking.ca']; output: ['com', 'co.uk', 'com.au', 'com', 'ca']"}
{"id": "166-1", "oq_id": 166, "desc": "Input: a list of strings representing domain names.\nOutput: a list of strings representing domain extensions.\nFunctionality: The transformation extracts the domain extension from each element in the given sequence, and outputs the extensions in a new list.\nExample: Input: ['instagram.com', 'linkedin.co.uk', 'netflix.com.au', 'spotify.com', 'ebay.ca']; output: ['com', 'co.uk', 'com.au', 'com', 'ca']"}
{"id": "166-0", "oq_id": 166, "desc": "Input: a list of string values, representing domain names.\nOutput: a list of string values, representing domain extensions.\n\nFunctionality: The transformation extracts the domain extension from each element in the given sequence, and outputs the extensions as strings in the result list.\n\nExample: Input: ['google.com', 'apple.co.uk', 'microsoft.com.au', 'yahoo.com', 'amazon.ca']; output: ['com', 'co.uk', 'com.au', 'com', 'ca']"}
{"id": "166-8", "oq_id": 166, "desc": "Input: a list of string values, each element representing a domain name.\nOutput: a list of string values, each element representing the domain extension.\n\nFunctionality: The transformation extracts the domain extension from each domain name in the given sequence and outputs the domain extension as strings in the resulting list.\n\nExample: Input: ['weather.com', 'accuweather.co.uk', 'bbcweather.com.au', 'metoffice.com', 'weatherchannel.ca']; output: ['com', 'co.uk', 'com.au', 'com', 'ca']"}
{"id": "166-9", "oq_id": 166, "desc": "Input: a list of string values, with domain names and extensions in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the domain extensions from each element in the given sequence, and output the extensions as a list of strings.\nExample: Input: ['apple.com', 'samsung.co.uk', 'huawei.com.au', 'oneplus.com', 'motorola.ca']; output: ['com', 'co.uk', 'com.au', 'com', 'ca']"}
{"id": "167-7", "oq_id": 167, "desc": "Input: a list of string values, each representing an email address.\nOutput: a list of boolean values.\nFunctionality: The transformation checks if each email address in the given sequence is valid, and outputs a boolean value indicating validity in the result list.\nExample: Input: ['tech@example.com', 'info@example.com', 'invalid.email@', 'user@.com', 'email@domain.']; output: ['true', 'true', 'false', 'true', 'true']"}
{"id": "167-6", "oq_id": 167, "desc": "Input: a list of string values, representing email addresses.\nOutput: a list of boolean values.\nFunctionality: The transformation checks the validity of each email address in the given sequence and outputs True if the email address is valid, and False if it is invalid.\nExample: Input: ['test@example.com', 'account@example.com', 'invalidemail@.com', 'user@domaincom', 'email@.']; output: ['true', 'true', 'true', 'false', 'true']"}
{"id": "167-4", "oq_id": 167, "desc": "Input: a list of string values representing email addresses.\nOutput: a list of boolean values.\nFunctionality: The transformation checks if each email address is in a valid format (containing \"@\" and \".\"), and outputs \"true\" if it is valid and \"false\" if it is invalid.\nExample: Input: ['support@example.com', 'sales@example.com', 'invalid.email.com', 'user@com', 'email@domaincom']; output: ['true', 'true', 'false', 'false', 'false']"}
{"id": "167-5", "oq_id": 167, "desc": "Input: a list of string values, each representing an email address.\nOutput: a list of boolean values.\nFunctionality: The transformation checks if each email address in the given sequence is valid, and outputs True if it is valid and False if it is invalid.\nExample: Input: ['admin@example.com', 'service@example.com', 'invalid_email@', 'email@domaincom', 'user@.com']; output: ['true', 'true', 'false', 'false', 'true']"}
{"id": "167-1", "oq_id": 167, "desc": "Input: a list of string values representing email addresses.\nOutput: a list of boolean values.\nFunctionality: The transformation checks if the email address is in a valid format (containing \"@\" and \".\"), and outputs \"true\" if valid, \"false\" if not.\nExample: Input: ['user@example.com', 'test.user@example.com', 'name@example', 'another_email@example.com', 'email@domain']; output: ['true', 'true', 'false', 'true', 'false']"}
{"id": "167-0", "oq_id": 167, "desc": "Input: a list of string values, representing email addresses.\nOutput: a list of boolean values.\nFunctionality: The transformation checks if each element in the given sequence is a valid email address, and outputs a list of boolean values indicating validity.\nExample: Input: ['john.doe@example.com', 'jane.doe@example.com', 'invalidemail@.com', 'abcd@efg.com', 'email@domain..com']; output: ['true', 'true', 'false', 'true', 'false']"}
{"id": "167-2", "oq_id": 167, "desc": "Input: a list of string values, each representing an email address.\nOutput: a list of boolean values.\nFunctionality: The transformation checks if each email address in the given sequence is valid, and outputs True if it is valid and False if it is invalid.\nExample: Input: ['hello@example.com', 'world@example.com', 'invalidemail@.com', 'test@example', 'email@domain.com']; output: ['true', 'true', 'true', 'false', 'true']"}
{"id": "167-3", "oq_id": 167, "desc": "Input: a list of string values representing email addresses.\nOutput: a list of boolean values.\nFunctionality: The transformation checks if each email address is in a valid format (containing \"@\" and \".\"), and outputs \"true\" if valid, \"false\" if invalid.\nExample: Input: ['info@example.com', 'contact@example.com', 'invalid_email.com', 'user@domain', 'email@.com']; output: ['true', 'true', 'false', 'false', 'true']"}
{"id": "167-8", "oq_id": 167, "desc": "Input: a list of string values containing email addresses.\nOutput: a list of boolean values.\nFunctionality: The transformation checks if each element in the input sequence is a valid email address, and outputs a boolean value accordingly.\nExample: Input: ['marketing@example.com', 'hr@example.com', 'invalid.email@.', 'domain.com', '@example.com']; output: ['true', 'true', 'false', 'false', 'true']"}
{"id": "167-9", "oq_id": 167, "desc": "Input: a list of string values, each representing an email address.\nOutput: a list of boolean values.\nFunctionality: The transformation checks if each email address in the given sequence is valid, and outputs True if it is valid and False if it is invalid.\nExample: Input: ['customer@example.com', 'support@example.com', 'invalid..email.com', 'email@domain.', 'user@domain.']; output: ['true', 'true', 'false', 'true', 'true']"}
{"id": "168-8", "oq_id": 168, "desc": "Input: a list of string values, each containing a mathematical expression.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each mathematical expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['20 + 8', '28/4', '(9+1)*3', '5 - 1', '4 / 4 + 1']; Output: ['28', '7', '30', '4', '2']"}
{"id": "168-9", "oq_id": 168, "desc": "Input: a list of string values, with numerical values and mathematical expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each mathematical expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['18 - 2', '32/4', '(7+3)/2', '6 + 10', '12 / 3 + 1']; output: ['16', '8', '5', '16', '5']"}
{"id": "168-2", "oq_id": 168, "desc": "Input: a list of string values, with numerical values and mathematical expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each mathematical expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['15 - 8', '24/3', '(8+2)/2', '12 - 9', '6 / 3 + 2']; output: ['7', '8', '5', '3', '4']"}
{"id": "168-3", "oq_id": 168, "desc": "Input: a list of string values, with numerical values and mathematical operations in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the result of each mathematical operation from each element in the given sequence, and format each result as a string in the result list.\nExample: Input: ['9 + 5', '14/2', '(3+7)*2', '8 - 2', '5 / 1 + 3']; output: ['14', '7', '20', '6', '8']"}
{"id": "168-1", "oq_id": 168, "desc": "Input: a list of string values, each containing a mathematical expression.\nOutput: a list of numerical values as strings.\n\nFunctionality: The transformation evaluates each mathematical expression in the given sequence and outputs the result as a string in the result list.\nExample: Input: ['8 + 12', '20/4', '(6+4)*2', '9 - 5', '9 / 3 + 1']; output: ['20', '5', '20', '4', '4']"}
{"id": "168-0", "oq_id": 168, "desc": "Input: a list of string values, with numerical expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each numerical expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['5 * 3', '10/2', '(2+5)*3', '7 - 2', '4 / 2 + 3']; output: ['15', '5', '21', '5', '5']"}
{"id": "168-4", "oq_id": 168, "desc": "Input: a list of string values, each containing a mathematical expression.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each mathematical expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['2 * 10', '18/6', '(4+6)*2', '16 - 2', '7 / 1 + 4']; Output: ['20', '3', '20', '14', '11']"}
{"id": "168-5", "oq_id": 168, "desc": "Input: a list of string values, each containing a mathematical expression.\nOutput: a list of numerical values.\n\nFunctionality: The transformation evaluates each mathematical expression in the given sequence and outputs the result as a list of numerical values.\n\nExample: Input: ['30 - 10', '30/5', '(5+5)*2', '15 - 6', '10 / 2 + 3']; Output: ['20', '6', '20', '9', '8']"}
{"id": "168-7", "oq_id": 168, "desc": "Input: a list of string values, with numerical expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each numerical expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['12 - 4', '21/3', '(2+8)/2', '14 - 7', '9 / 3 + 3']; output: ['8', '7', '5', '7', '6']"}
{"id": "168-6", "oq_id": 168, "desc": "Input: a list of string values, each containing a mathematical expression.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each mathematical expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['3 + 15', '16/4', '(1+9)*2', '10 - 3', '8 / 4 + 2']; Output: ['18', '4', '20', '7', '4']"}
{"id": "169-8", "oq_id": 169, "desc": "Input: a list of strings containing network addresses in CIDR notation.\nOutput: a list of strings containing the IP addresses or network ranges extracted from the CIDR notation.\n\nFunctionality: The transformation extracts the IP address range or individual IP addresses from each element in the given CIDR notation sequence, and outputs them as formatted strings in the result list.\n\nExample: Input: ['192.168.100.0-192.168.100.255', 'fc00::/64', '192.168.110.0/22', '10.50.60.70/30', 'fe80::3002::3002']; output: ['192.168.100.255', 'fc00::', '192.168.110.0', '10.50.60.70', 'fe80::3002::3002']"}
{"id": "169-9", "oq_id": 169, "desc": "Input: a list of string values, each containing IP addresses or CIDR notation.\nOutput: a list of strings with formatted IP addresses.\nFunctionality: The transformation extracts the ending IP address from the CIDR notation or the provided IP address range and outputs it as a string in the result list.\nExample: Input: ['192.168.120.0-192.168.120.255', 'fe80::1/128', 'fc00::1/64', '2001:db8:85a3:0:0:8a2e:370:7334', 'fe80::6']; output: ['192.168.120.255', 'fe80::1', 'fc00::1', '2001:db8:85a3:0:0:8a2e:370:7334', 'fe80::6']"}
{"id": "169-1", "oq_id": 169, "desc": "Input: a list of strings representing IP addresses or CIDR notation.\nOutput: a list of strings representing the last IP address or the network address from the given range.\nFunctionality: The transformation extracts the last IP address of a range or the network address from each element in the given sequence and outputs it as a list.\nExample: Input: ['192.168.10.0-192.168.10.255', '2001:db8::/32', '192.168.20.0-192.168.20.255', '10.10.10.0/30', 'fe80::ff01-fe80::ff02']; output: ['192.168.10.255', '2001:db8::', '192.168.20.255', '10.10.10.0', 'fe80::ff02']"}
{"id": "169-0", "oq_id": 169, "desc": "Input: a list of strings representing IP addresses or CIDR blocks.\nOutput: a list of transformed IP addresses.\n\nFunctionality: The transformation involves extracting the last IP address or the base IP address from each element in the given sequence. For CIDR blocks, it involves extracting the base IP address.\nExample: Input: ['10.0.0.0-10.0.0.255', '172.16.0.0-172.16.0.255', 'fd00::/8', 'fe80::f001:abcd:1234:5678-fe80::f002:abcd:1234:5678', '192.168.1.0/24']; output: ['10.0.0.255', '172.16.0.255', 'fd00::', 'fe80::f002:abcd:1234:5678', '192.168.1.0']"}
{"id": "169-2", "oq_id": 169, "desc": "Input: a list of strings, each representing an IP address range in CIDR notation.\nOutput: a list of strings, each representing the end address of the IP address range.\nFunctionality: The transformation extracts the end address from the given CIDR notation format and outputs it as a list of strings.\nExample: Input: ['172.20.0.0-172.20.0.255', 'fc00::/7', '192.168.30.0/24', '2001:0db8:85a3::8a2e:0370:7334', 'fe80::1-fe80::2']; output: ['172.20.0.255', 'fc00::', '192.168.30.0', '2001:0db8:85a3::8a2e:0370:7334', 'fe80::2']"}
{"id": "169-3", "oq_id": 169, "desc": "Input: a list of strings containing IP address ranges in CIDR notation or IP address ranges specified by a range (e.g., 192.168.40.0-192.168.40.255).\nOutput: a list of IP addresses in string format.\n\nFunctionality: The transformation extracts the ending IP address from each element in the given sequence of IP address ranges and outputs them as individual IP addresses in the result list.\nExample: Input: ['192.168.40.0-192.168.40.255', '3ffe:1900:4545:3:200:f8ff:fe21:67cf', '192.168.50.0-192.168.50.255', '10.20.30.0/24', 'fe80::a00:27ff:fe84:89d6-fe80::a00:27ff:fe84:89d7']; output: ['192.168.40.255', '3ffe:1900:4545:3:200:f8ff:fe21:67cf', '192.168.50.255', '10.20.30.0', 'fe80::a00:27ff:fe84:89d7']"}
{"id": "169-7", "oq_id": 169, "desc": "Input: a list of string values representing IP addresses and CIDR notation.\nOutput: a list of string values representing IP addresses.\nFunctionality: The transformation extracts the IP address from each element in the given sequence, removing any CIDR notation, and output the result as a list.\nExample: Input: ['172.50.0.0-172.50.0.255', '2001:0db8:85a3:0:0:8a2e:370:7334', '192.168.90.0/24', '10.40.50.60/30', 'fe80::2001:0db8:85a3::8a2e:370:7334']; output: ['172.50.0.255', '2001:0db8:85a3:0:0:8a2e:370:7334', '192.168.90.0', '10.40.50.60', 'fe80::2001:0db8:85a3::8a2e:370:7334']"}
{"id": "169-6", "oq_id": 169, "desc": "Input: a list of strings containing CIDR notation.\nOutput: a list of strings representing the IP addresses.\n\nFunctionality: The transformation involves extracting the IP address range provided in CIDR notation from each element of the input sequence and outputting the corresponding IP address. \n\nExample: Input: ['192.168.70.0-192.168.70.255', 'fe80::/32', '192.168.80.0/22', '10.30.40.50/30', 'fe80::2001:0db8:85a3::8a2e:370:7334']; Output: ['192.168.70.255', 'fe80::', '192.168.80.0', '10.30.40.50', 'fe80::2001:0db8:85a3::8a2e:370:7334']"}
{"id": "169-4", "oq_id": 169, "desc": "Input: a list of string values, with IP address range or CIDR notation.\nOutput: a list of IP addresses in string format.\n\nFunctionality: The transformation extracts the end IP address from each element in the given sequence representing IP address range or CIDR notation, and outputs the final IP address as a string in the result list.\nExample: Input: ['192.168.60.0-192.168.60.255', 'fe80::/64', '172.30.0.0-172.30.0.255', '2001:db8:85a3:0:0:8a2e:370:7334', 'fe80::fe80::']; output: ['192.168.60.255', 'fe80::', '172.30.0.255', '2001:db8:85a3:0:0:8a2e:370:7334', 'fe80::fe80::']"}
{"id": "169-5", "oq_id": 169, "desc": "Input: a list of strings representing IP addresses and CIDR or range notation.\nOutput: a list of strings representing IP addresses.\n\nFunctionality: The transformation extracts the IP address from each element in the given sequence, removing any CIDR or range notation, and outputs the result as a list.\n\nExample: Input: ['192.168.90.0/24', '172.40.0.0-172.40.0.255', 'fe80::10-fe80::20', 'fc00:1234:85a3::8a2e:370:7334', '192.168.60.0/24']; output: ['192.168.90.0', '172.40.0.255', 'fe80::20', 'fc00:1234:85a3::8a2e:370:7334', '192.168.60.0']"}
{"id": "170-9", "oq_id": 170, "desc": "Input: a list of strings representing IP address ranges.\nOutput: a list of strings representing individual IP addresses.\nFunctionality: The transformation extracts the end IP address from each range in the given sequence and outputs them as individual strings in the result list.\nExample: Input: ['192.168.0.1-192.168.0.100', 'fd00::/8', 'fe80::dead:beef-fe80::dead:beef:1', '2001:db8::/32']; output: ['192.168.0.100', 'fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff', 'fe80::dead:beef:1', '2001:db8:ffff:ffff:ffff:ffff:ffff:ffff']"}
{"id": "170-8", "oq_id": 170, "desc": "Input: a list of string values, each representing a range of IP addresses or IPv6 addresses.\nOutput: a list of string values, representing the last address in each range.\nFunctionality: The transformation extracts the last IP address from each range in the given sequence and outputs it as a string in the result list.\nExample: Input: ['172.16.0.0-172.16.255.255', 'fc00::1-fc00::ff', 'fe80::1-fe80::10', '192.168.1.1/24']; output: ['172.16.255.255', 'fc00::ff', 'fe80::10', '192.168.1.255']"}
{"id": "170-0", "oq_id": 170, "desc": "Input: a list of string values, each representing an IP address or range in IPv4 or IPv6 format.\nOutput: a list of string values, each representing an IP address.\n\nFunctionality: The transformation extracts the last IP address from each element in the given sequence, considering ranges when applicable, and outputs the result as a list of IP addresses.\nExample: Input: ['10.0.0.1-10.0.0.5', '172.16.0.0/16', 'fe80::1-fe80::2', '192.168.1.1/24']; output: ['10.0.0.5', '172.16.255.255', 'fe80::2', '192.168.1.255']"}
{"id": "170-1", "oq_id": 170, "desc": "Input: a list of string values, each containing an IP address with a range or subnet.\nOutput: a list of string values, each containing the last IP address from the range or subnet.\n\nFunctionality: The transformation extracts the last IP address from each element in the given sequence by identifying the end of the range or subnet, and outputs the result as a list.\n\nExample: Input: ['192.168.1.100-192.168.1.150', 'fc00::/7', '2001:0DB8:0:CD30::/60', '10.1.2.3/20']; output: ['192.168.1.150', 'fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff', '2001:db8:0:cd3f:ffff:ffff:ffff:ffff', '10.1.15.255']"}
{"id": "170-3", "oq_id": 170, "desc": "Input: a list of strings, where each string represents an IP address or IP range.\nOutput: a list of strings containing individual IP addresses from the input sequences.\n\nFunctionality: The transformation extracts individual IP addresses from each element of the given sequence, considering both IPv4 and IPv6 formats, and outputs the addresses in a list format.\nExample: Input: ['192.168.100.1-192.168.100.50', 'fc00::/8', 'fe80::dead:beef-fe80::dead:beef:1', '2001:0DB8::/32']; Output: ['192.168.100.50', 'fcff:ffff:ffff:ffff:ffff:ffff:ffff:ffff', 'fe80::dead:beef:1', '2001:db8:ffff:ffff:ffff:ffff:ffff:ffff']"}
{"id": "170-2", "oq_id": 170, "desc": "Input: a list of string values, each representing a range of IP addresses or network prefixes.\nOutput: a list of string values, each representing the last IP address or the full expanded network address.\n\nFunctionality: The transformation extracts the ending IP address or expands the network prefix range to the full address, then formats it as a string in the result list.\n\nExample: Input: ['172.31.0.0-172.31.255.255', '2607:f0d0::/32', 'fe80::1-fe80::10', 'fd00::/8']; output: ['172.31.255.255', '2607:f0d0:ffff:ffff:ffff:ffff:ffff:ffff', 'fe80::10', 'fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff']"}
{"id": "170-6", "oq_id": 170, "desc": "Input: a list of string values, each representing a range of IP addresses or subnet.\nOutput: a list of string values, each representing the last IP address in the range or the end address of the subnet.\n\nFunctionality: The transformation extracts the last IP address from the given IP range or the end address of the subnet in each element of the sequence and outputs them as strings in the result list.\n\nExample: Input: ['192.168.0.0-192.168.255.255', '2001:0DB8:AC10:A::/64', 'fe80::1-fe80::10', 'fd00::/16']; output: ['192.168.255.255', '2001:db8:ac10:a:ffff:ffff:ffff:ffff', 'fe80::10', 'fd00:ffff:ffff:ffff:ffff:ffff:ffff:ffff']"}
{"id": "170-7", "oq_id": 170, "desc": "Input: a list of string values, with IP address ranges in each element.\nOutput: a list of string values, representing the end of each IP address range.\n\nFunctionality: The transformation extracts the end of each IP address range from the given sequence by splitting the string at the \"-\" delimiter and taking the second part, outputting the result as a list.\n\nExample: Input: ['10.10.10.1-10.10.10.255', 'fd00::1-fd00::100', 'fe80::1-fe80::ff', '2001:0DB8::1-2001:0DB8::F']; output: ['10.10.10.255', 'fd00::100', 'fe80::ff', '2001:0DB8::F']"}
{"id": "170-5", "oq_id": 170, "desc": "Input: a list of string values, representing IP addresses or IP address ranges in IPv4 or IPv6 format.\nOutput: a list of string values, representing the ending IP address of each range in the input.\n\nFunctionality: The transformation extracts the ending IP address from each element in the given sequence, and outputs the list of ending IP addresses.\nExample: Input: ['172.16.0.1-172.16.0.10', 'fdf8:f53b:82e4::/48', 'fe80::abcd:1234-fe80::abcd:1234:5', 'fe80::1-fe80::ff']; output: ['172.16.0.10', 'fdf8:f53b:82e4:ffff:ffff:ffff:ffff:ffff', 'fe80::abcd:1234:5', 'fe80::ff']"}
{"id": "170-4", "oq_id": 170, "desc": "Input: a list of string values, each representing an IP address range.\nOutput: a list of string values, each representing the ending IP address of the range.\nFunctionality: The transformation extracts the ending IP address from each range in the given sequence and outputs it as a string in the result list.\nExample: Input: ['10.0.0.0-10.0.0.255', 'fe80::/64', '2001:0DB8:0:CD30::/64', 'fd00::1-fd00::ffff']; output: ['10.0.0.255', 'fe80::ffff:ffff:ffff:ffff', '2001:db8:0:cd30:ffff:ffff:ffff:ffff', 'fd00::ffff']"}
{"id": "171-9", "oq_id": 171, "desc": "Input: a list of IPv4 addresses.\nOutput: a list of IPv6 addresses.\nFunctionality: The transformation converts each IPv4 address in the given sequence to its IPv6 counterpart by using the format 0:0:0:0:0:ffff: followed by the IPv4 address converted to hexadecimal form.\nExample: Input: ['172.168.0.1', '190.89.3.4', '201.97.5.6', '213.128.0.0', '235.10.1.2']; output: ['0:0:0:0:0:ffff:aca8:1', '0:0:0:0:0:ffff:be59:304', '0:0:0:0:0:ffff:c961:506', '0:0:0:0:0:ffff:d580:0', '0:0:0:0:0:ffff:eb0a:102']"}
{"id": "171-8", "oq_id": 171, "desc": "Input: a list of strings representing IPv4 addresses.\nOutput: a list of strings representing IPv6 addresses.\n\nFunctionality: The transformation converts each IPv4 address in the given sequence to an IPv6 address by adding the appropriate prefix and formatting.\nExample: Input: ['155.255.255.254', '240.0.0.1', '192.0.0.1', '169.1.1.1', '10.1.1.1']; output: ['0:0:0:0:0:ffff:9bff:fffe', '0:0:0:0:0:ffff:f000:1', '0:0:0:0:0:ffff:c000:1', '0:0:0:0:0:ffff:a901:101', '0:0:0:0:0:ffff:a01:101']"}
{"id": "171-3", "oq_id": 171, "desc": "Input: a list of strings representing IPv4 addresses.\nOutput: a list of strings representing IPv6 addresses.\nFunctionality: The transformation converts each IPv4 address from the input sequence to its equivalent IPv6 address and outputs the result as a list.\nExample: Input: ['140.5.10.3', '150.25.31.5', '180.34.5.6', '200.56.7.8', '220.78.9.10']; output: ['0:0:0:0:0:ffff:8c05:a03', '0:0:0:0:0:ffff:9619:1f05', '0:0:0:0:0:ffff:b422:506', '0:0:0:0:0:ffff:c838:708', '0:0:0:0:0:ffff:dc4e:90a']"}
{"id": "171-2", "oq_id": 171, "desc": "Input: a list of strings representing IPv4 addresses.\nOutput: a list of strings representing IPv6 addresses.\nFunctionality: The transformation converts each IPv4 address from the input sequence to its equivalent IPv6 address and outputs the result as a list.\nExample: Input: ['100.64.0.1', '169.254.3.2', '172.10.5.10', '192.168.0.1', '172.16.15.1']; output: ['0:0:0:0:0:ffff:6440:1', '0:0:0:0:0:ffff:a9fe:302', '0:0:0:0:0:ffff:ac0a:50a', '0:0:0:0:0:ffff:c0a8:1', '0:0:0:0:0:ffff:ac10:f01']"}
{"id": "171-0", "oq_id": 171, "desc": "Input: a list of strings representing IPv4 addresses.\nOutput: a list of strings representing IPv6 addresses.\n\nFunctionality: The transformation converts each IPv4 address in the given sequence to its corresponding IPv6 address format by adding the appropriate prefix and using the IPv4 address as the hexadecimal values in the resulting IPv6 address.\nExample: Input: ['192.168.1.1', '172.16.254.1', '10.10.1.1', '172.31.255.255', '127.0.0.1']; output: ['0:0:0:0:0:ffff:c0a8:101', '0:0:0:0:0:ffff:ac10:fe01', '0:0:0:0:0:ffff:a0a:101', '0:0:0:0:0:ffff:ac1f:ffff', '0:0:0:0:0:ffff:7f00:1']"}
{"id": "171-1", "oq_id": 171, "desc": "Input: a list of IPv4 addresses (string values).\nOutput: a list of IPv6 addresses (string values).\nFunctionality: The transformation converts each IPv4 address in the given sequence to its corresponding IPv6 address format and output the result as a list.\nExample: Input: ['198.51.100.2', '203.0.113.4', '192.0.2.16', '200.200.200.200', '0.0.0.0']; output: ['0:0:0:0:0:ffff:c633:6402', '0:0:0:0:0:ffff:cb00:7104', '0:0:0:0:0:ffff:c000:210', '0:0:0:0:0:ffff:c8c8:c8c8', '0:0:0:0:0:ffff:0:0']"}
{"id": "171-5", "oq_id": 171, "desc": "Input: a list of IPv4 addresses.\nOutput: a list of IPv6 addresses.\nFunctionality: The transformation converts each IPv4 address in the given sequence to its IPv6 counterpart and outputs the result as a list.\nExample: Input: ['128.0.0.1', '224.0.0.1', '233.255.255.255', '169.9.1.2', '168.255.255.254']; output: ['0:0:0:0:0:ffff:8000:1', '0:0:0:0:0:ffff:e000:1', '0:0:0:0:0:ffff:e9ff:ffff', '0:0:0:0:0:ffff:a909:102', '0:0:0:0:0:ffff:a8ff:fffe']"}
{"id": "171-4", "oq_id": 171, "desc": "Input: a list of IPv4 addresses.\nOutput: a list of IPv6 addresses.\nFunctionality: The transformation converts each IPv4 address in the given sequence to its IPv6 counterpart by using the format 0:0:0:0:0:ffff: followed by the IPv4 address components hexadecimal equivalent.\nExample: Input: ['210.100.1.1', '220.90.2.2', '230.80.3.3', '240.70.4.4', '250.60.5.5']; output: ['0:0:0:0:0:ffff:d264:101', '0:0:0:0:0:ffff:dc5a:202', '0:0:0:0:0:ffff:e650:303', '0:0:0:0:0:ffff:f046:404', '0:0:0:0:0:ffff:fa3c:505']"}
{"id": "171-6", "oq_id": 171, "desc": "Input: a list of string values containing IPv4 addresses.\nOutput: a list of string values containing IPv6 addresses.\nFunctionality: The transformation converts each IPv4 address in the input sequence to its corresponding IPv6 address format and outputs the result as a list.\nExample: Input: ['251.5.5.5', '30.30.30.30', '120.0.0.0', '88.88.88.88', '18.18.18.18']; output: ['0:0:0:0:0:ffff:fb05:505', '0:0:0:0:0:ffff:1e1e:1e1e', '0:0:0:0:0:ffff:7800:0', '0:0:0:0:0:ffff:5858:5858', '0:0:0:0:0:ffff:1212:1212']"}
{"id": "171-7", "oq_id": 171, "desc": "Input: a list of string values representing IPv4 addresses.\nOutput: a list of string values representing IPv6 addresses.\nFunctionality: The transformation converts each IPv4 address in the given sequence to an IPv6 address using the format \"0:0:0:0:0:ffff:IP1:IP2\" where IP1 and IP2 are the two parts of the IPv4 address in hexadecimal.\nExample: Input: ['47.47.47.47', '90.90.90.90', '56.56.56.56', '9.9.9.9', '4.4.4.4']; output: ['0:0:0:0:0:ffff:2f2f:2f2f', '0:0:0:0:0:ffff:5a5a:5a5a', '0:0:0:0:0:ffff:3838:3838', '0:0:0:0:0:ffff:909:909', '0:0:0:0:0:ffff:404:404']"}
{"id": "172-8", "oq_id": 172, "desc": "Input: a list of string values representing ISBN-10 numbers.\nOutput: a list of string values representing ISBN-13 numbers.\nFunctionality: The transformation converts each ISBN-10 number in the given sequence to ISBN-13 format by adding the prefix '978-' and recalculating the check digit, then outputs the result as a list.\nExample: Input: ['013271348X', '095615938X', '0895147560', '0956218732', '0643178192']; output: ['978-0-132-71348-1', '978-0-956-15938-0', '978-0-895-14756-1', '978-0-956-21873-5', '978-0-643-17819-9']"}
{"id": "172-9", "oq_id": 172, "desc": "Input: a list of string values, with ISBN-10 format in each element.\nOutput: a list of string values, with ISBN-13 format in each element.\nFunctionality: The transformation converts each ISBN-10 code in the given sequence to its corresponding ISBN-13 format and output as a list.\nExample: Input: ['043278246X', '072315938X', '0823347560', '0956218732', '0643178192']; Output: ['978-0-432-78246-0', '978-0-723-15938-4', '978-0-823-34756-8', '978-0-956-21873-5', '978-0-643-17819-9']"}
{"id": "172-2", "oq_id": 172, "desc": "Input: a list of string values, with ISBN-10 format in each element.\nOutput: a list of string values, with ISBN-13 format in each element.\nFunctionality: The transformation converts each ISBN-10 code in the given sequence to its corresponding ISBN-13 format and output as a list.\nExample: Input: ['041723689X', '023615934X', '0825147560', '0956238743', '0643178192']; Output: ['978-0-417-23689-6', '978-0-236-15934-5', '978-0-825-14756-2', '978-0-956-23874-0', '978-0-643-17819-9']"}
{"id": "172-3", "oq_id": 172, "desc": "Input: a list of string values, with ISBN-10 format in each element.\nOutput: a list of string values, with ISBN-13 format in each element.\nFunctionality: The transformation converts each ISBN-10 code in the given sequence to its corresponding ISBN-13 format and output as a list.\nExample: Input: ['043278936X', '053615938X', '0125147560', '0956218732', '0643178192']; Output: ['978-0-432-78936-0', '978-0-536-15938-0', '978-0-125-14756-9', '978-0-956-21873-5', '978-0-643-17819-9']"}
{"id": "172-1", "oq_id": 172, "desc": "Input: a list of string values representing ISBN-10 numbers.\nOutput: a list of string values representing ISBN-13 numbers.\nFunctionality: The transformation converts each ISBN-10 number in the given sequence to ISBN-13 format by adding the appropriate prefix and calculating the check digit, outputting the result as a list.\nExample: Input: ['097432855X', '064315857X', '0137816870', '0362453983', '0264187912']; output: ['978-0-974-32855-3', '978-0-643-15857-3', '978-0-137-81687-3', '978-0-362-45398-0', '978-0-264-18791-4']"}
{"id": "172-0", "oq_id": 172, "desc": "Input: a list of string values, with ISBN-10 format in each element.\nOutput: a list of string values, with ISBN-13 format in each element.\nFunctionality: The transformation converts each ISBN-10 format in the given sequence to ISBN-13 format and outputs the result as a list.\nExample: Input: ['013605782X', '032157561X', '0548063740', '0786852543', '0916251802']; Output: ['978-0-136-05782-6', '978-0-321-57561-6', '978-0-548-06374-3', '978-0-786-85254-3', '978-0-916-25180-2']"}
{"id": "172-4", "oq_id": 172, "desc": "Input: a list of string values representing ISBN-10 numbers.\nOutput: a list of string values representing ISBN-13 numbers.\nFunctionality: The transformation converts each ISBN-10 number in the given sequence to the corresponding ISBN-13 format by adding the prefix \"978-\" and calculating the check digit, then outputs the result as a list.\nExample: Input: ['043246578X', '062315238X', '0825147560', '0956268743', '0643178142']; output: ['978-0-432-46578-3', '978-0-623-15238-6', '978-0-825-14756-2', '978-0-956-26874-7', '978-0-643-17814-4']"}
{"id": "172-5", "oq_id": 172, "desc": "Input: a list of string values representing ISBN-10 numbers.\nOutput: a list of string values representing ISBN-13 numbers.\nFunctionality: The transformation converts each ISBN-10 number in the given sequence to the corresponding ISBN-13 number by adding the prefix \"978-\" and calculating the check digit, then outputs the result as a list.\nExample: Input: ['043276388X', '072345938X', '0825147960', '0956218732', '0643458192']; output: ['978-0-432-76388-9', '978-0-723-45938-5', '978-0-825-14796-8', '978-0-956-21873-5', '978-0-643-45819-2']"}
{"id": "172-7", "oq_id": 172, "desc": "Input: a list of string values representing ISBN-10 numbers.\nOutput: a list of string values representing ISBN-13 numbers.\nFunctionality: The transformation converts each ISBN-10 number in the given sequence to the corresponding ISBN-13 format by adding the prefix '978-' and calculating the check digit, then outputs the result as a list.\nExample: Input: ['043259936X', '032315938X', '0695147560', '0956283732', '0643178192']; output: ['978-0-432-59936-5', '978-0-323-15938-8', '978-0-695-14756-3', '978-0-956-28373-3', '978-0-643-17819-9']"}
{"id": "172-6", "oq_id": 172, "desc": "Input: a list of string values representing ISBN-10 numbers.\nOutput: a list of string values representing ISBN-13 numbers.\nFunctionality: The transformation converts each ISBN-10 number in the given sequence to ISBN-13 format by adding the prefix '978-' and recalculating the check digit, then outputs the result as a list.\nExample: Input: ['083277831X', '012314338X', '0345147520', '0956218732', '0643178192']; output: ['978-0-832-77831-5', '978-0-123-14338-9', '978-0-345-14752-3', '978-0-956-21873-5', '978-0-643-17819-9']"}
{"id": "173-1", "oq_id": 173, "desc": "Input: a list of strings containing numerical values.\nOutput: a list of strings representing specific numbers extracted from each element.\nFunctionality: The transformation extracts the specific number after the second occurrence of a comma and before the third comma in each element of the given sequence, formatting it as a string in the output list.\nExample: Input: ['$GPGSV,3,1,11,01,40,274,38,02,42,123,44,03,20,181,40,04,25,156,45*75', '$GPGSV,3,2,11,08,32,218,42,09,25,289,44,10,12,006,47,11,19,303,*72', '$GPGSV,3,3,11,23,54,233,49,24,43,223,56*75']; output: ['02', '09', '24']"}
{"id": "173-0", "oq_id": 173, "desc": "Input: a list of strings containing GPS coordinates.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the altitude value from each GPS coordinate string in the given sequence and outputs them as a list of numerical values.\nExample: Input: ['GPGGA,123456.789,1234.5678,N,0456.7890,W,1,05,1.6,100.0,M,23.3,M,,*5A', '$GPGGA,011223.456,3145.6789,S,0987.6543,E,1,04,1.0,543.2,M,12.3,M,,*5B', 'GPGGA,120000.000,3512.3456,N,0723.4567,W,1,07,1.5,200.0,M,34.5,M,,*5C']; output: ['1.6', '1.0', '1.5']"}
{"id": "173-2", "oq_id": 173, "desc": "Input: a list of strings with specific format containing alphanumeric characters, numbers, and special characters.\nOutput: a list of strings of the same format containing alphanumeric characters, numbers, and special characters.\nFunctionality: The transformation extracts the last part of each element in the given sequence, which starts with 'K*', and outputs it as a separate list element.\nExample: Input: ['$GPVTG,054.7,T,034.4,M,005.5,N,010.2,K*48', '$GPVTG,001.8,T,001.4,M,18.9,N,34.9,K*46', '$GPVTG,123.6,T,123.4,M,12.3,N,28.3,K*47']; output: ['K*48', 'K*46', 'K*47']"}
{"id": "173-3", "oq_id": 173, "desc": "Input: a list of strings containing alphanumeric values. \nOutput: a list of strings containing numerical values. \nFunctionality: The transformation extracts the specific numerical value located at a specific position within each element in the given sequence and outputs them as strings in the result list. \nExample: Input: ['$GPGSA,A,3,17,14,06,07,30,22,00,,,,,,2.0,1.6,1.2*39', '$GPGSA,A,3,27,30,21,10,28,11,14,03,,,,,1.8,1.5,1.2*3B', '$GPGSA,A,3,21,30,25,32,06,09,12,05,,,,,2.5,1.8,1.3*30']; output: ['22', '11', '09']"}
{"id": "173-4", "oq_id": 173, "desc": "Input: a list of strings containing GPS coordinates.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the specified value (altitude) from each element in the given sequence and outputs it as a list of numerical values.\nExample: Input: ['GPGGA,123456.789,1234.5678,N,0456.7890,E,1,08,1.8,200.0,M,34.5,M,,*5A', 'GPGGA,011223.456,3145.6789,S,0987.6543,W,1,07,1.5,543.2,M,12.3,M,,*5B', 'GPGGA,120000.000,3512.3456,N,0723.4567,W,1,09,2.0,300.0,M,23.3,M,,*5C']; Output: ['1.8', '1.5', '2.0']"}
{"id": "173-5", "oq_id": 173, "desc": "Input: a list of string values, with numerical values embedded in a specific format.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts a specific numerical value from each element in the given sequence based on the position and format, and outputs these values as a list.\nExample: Input: ['$GPGSA,A,1,02,24,20,23,29,13,11,06,09,04,,1.6,2.7,5.6*3D', '$GPGSA,A,3,21,30,25,32,06,09,12,05,,,,,2.5,1.8,1.3*30', '$GPGSA,A,3,27,30,21,10,28,11,14,03,,,,,1.8,1.5,1.2*3B']; output: ['13', '09', '11']"}
{"id": "174-8", "oq_id": 174, "desc": "Input: a list of string values containing GPS data.\nOutput: a list of string values representing speed in kilometers per hour.\nFunctionality: The transformation extracts the speed information from each element of the given GPS data sequence and formats it as a string in the result list with 'km/h'.\nExample: Input: ['$GPRMC,114926.000,A,2047.4026,N,12612.7610,W,0.00,64.91,281011,,*12', '$GPRMC,161904.000,A,4749.7214,S,15809.5183,W,0.00,82.12,241015,,*22']; output: ['0 km/h', '0 km/h']"}
{"id": "174-9", "oq_id": 174, "desc": "Input: a list of string values, each containing GPS location information.\nOutput: a list of string values, each representing the speed in kilometers per hour.\n\nFunctionality: The transformation extracts the speed information from each GPS location string in the given sequence and converts it to kilometers per hour format in the result list.\n\nExample: Input: ['$GPRMC,155827.000,V,0000.0000,N,00000.0000,E,0.00,0.00,110606,,*1B', '$GPRMC,092048.000,A,6551.2634,N,07245.0634,W,0.00,86.50,161216,,*14', '$GPRMC,214742.000,A,5516.1267,S,06639.4978,W,13.75,63.09,261015,,*15', '$GPRMC,063328.000,A,4819.1170,N,16302.4683,W,0.00,73.91,270704,,*18', '$GPRMC,122315.000,A,1408.9166,N,10841.8534,E,0.00,84.27,121010,,*1A']; \nOutput: ['0 km/h', '0 km/h', '25.4650 km/h', '0 km/h', '0 km/h']"}
{"id": "174-4", "oq_id": 174, "desc": "Input: a list of strings with GPS data in NMEA format.\nOutput: a list of strings representing speed in km/h.\nFunctionality: The transformation extracts the speed information from each element in the given sequence and formats it as a string in the result list.\nExample: Input: ['$GPRMC,105739.000,A,1259.5137,N,16912.5032,E,16.84,45.75,040509,,*27', '$GPRMC,182716.000,A,3525.6148,S,09443.8020,W,5.92,72.99,100220,,*19', '$GPRMC,053917.000,V,0000.0000,N,00000.0000,W,0.00,0.00,020116,,*1A', '$GPRMC,121457.000,V,0000.0000,N,00000.0000,W,0.00,0.00,110409,,*1A', '$GPRMC,090246.000,A,2029.2776,S,14516.8228,E,22.06,67.33,291117,,*11']; Output: ['31.1877 km/h', '10.9638 km/h', '0 km/h', '0 km/h', '40.8551 km/h']"}
{"id": "174-5", "oq_id": 174, "desc": "Input: a list of string values containing GPS coordinates and speed information.\nOutput: a list of string values representing the speed in kilometers per hour.\nFunctionality: The transformation extracts the speed information from each element in the given sequence and converts it to kilometers per hour, then formats the result as a string in the output list.\nExample: Input: ['$GPRMC,074531.000,A,4650.9156,S,09714.1546,W,27.38,54.80,120515,,*11', '$GPRMC,093221.000,A,1516.4207,S,13235.6390,E,0.00,81.46,280421,,*12']; output: ['50.7078 km/h', '0 km/h']"}
{"id": "174-7", "oq_id": 174, "desc": "Input: a list of string values, each containing GPS data with speed information.\nOutput: a list of string values representing the speed in kilometers per hour.\n\nFunctionality: The transformation extracts the speed information from each GPS data string in the given sequence and converts it to kilometers per hour format in the result list.\nExample: Input: ['$GPRMC,194332.000,A,0828.3204,S,05107.0426,E,0.00,49.56,060507,,*1C', '$GPRMC,040615.000,V,0000.0000,N,00000.0000,E,0.00,0.00,240919,,*1F', '$GPRMC,153711.000,V,0000.0000,N,00000.0000,E,0.00,0.00,121222,,*10', '$GPRMC,214804.000,A,4357.0659,S,06917.9484,W,3.28,68.03,081205,,*27', '$GPRMC,081230.000,V,0000.0000,N,00000.0000,W,0.00,0.00,121115,,*16']; \nOutput: ['0 km/h', '0 km/h', '0 km/h', '6.0746 km/h', '0 km/h']"}
{"id": "174-6", "oq_id": 174, "desc": "Input: a list of string values, each containing GPS data with speed information in km/h.\nOutput: a list of numerical values extracted from the speed information.\nFunctionality: The transformation extracts the numerical speed value from each element in the given sequence and outputs them in a list.\nExample: Input: ['$GPRMC,092011.000,V,0000.0000,N,00000.0000,W,0.00,0.00,170116,,*16', '$GPRMC,054713.000,V,0000.0000,N,00000.0000,W,0.00,0.00,240121,,*13', '$GPRMC,155948.000,V,0000.0000,N,00000.0000,W,0.00,0.00,050702,,*1F', '$GPRMC,084409.000,A,4314.4562,S,14620.2029,E,17.95,56.38,071102,,*14', '$GPRMC,182725.000,A,3154.6716,N,11733.1549,E,0.00,61.81,090721,,*1C']; output: [0, 0, 0, 33.2434, 0]"}
{"id": "174-2", "oq_id": 174, "desc": "Input: a list of string values containing GPS data.\nOutput: a list of string values representing speed in kilometers per hour.\nFunctionality: The transformation extracts the speed information from each element of the given GPS data sequence and formats it as a string in kilometers per hour in the result list.\nExample: Input: ['$GPRMC,050123.000,A,1329.3728,N,13924.9743,E,22.05,78.44,090607,,*1F', '$GPRMC,121809.000,A,4542.7086,N,11724.3065,E,0.00,61.20,250421,,*27', '$GPRMC,164637.000,A,1232.9948,S,08937.2151,W,19.68,43.91,241105,,*2A', '$GPRMC,082431.000,V,0000.0000,N,00000.0000,W,0.00,0.00,041205,,*17', '$GPRMC,102857.000,V,0000.0000,N,00000.0000,W,0.00,0.00,110319,,*1C']; output: ['40.8366 km/h', '0 km/h', '36.4474 km/h', '0 km/h', '0 km/h']"}
{"id": "174-3", "oq_id": 174, "desc": "Input: a list of string values, each containing a GPS data string.\nOutput: a list of string values, each representing the speed in km/h.\nFunctionality: The transformation extracts the speed information from each GPS data string in the given sequence and formats it as a string in the output list.\nExample: Input: ['$GPRMC,191754.000,A,7046.3157,S,12152.8040,W,0.00,67.85,020813,,*29', '$GPRMC,120840.000,V,0000.0000,N,00000.0000,W,0.00,0.00,101105,,*1C']; output: ['0 km/h', '0 km/h']"}
{"id": "174-1", "oq_id": 174, "desc": "Input: a list of string values containing GPS data.\nOutput: a list of string values representing speed in kilometers per hour.\nFunctionality: The transformation extracts the speed information from each element of the given GPS data sequence and formats it as a string in the result list with 'km/h'.\nExample: Input: ['$GPRMC,063819.000,V,0000.0000,N,00000.0000,W,0.00,0.00,010106,,*28', '$GPRMC,142507.000,V,0000.0000,N,00000.0000,W,2.75,46.03,180820,,*1E', '$GPRMC,205734.000,A,2952.0013,S,03923.6998,W,0.00,30.40,031204,,*2A', '$GPRMC,022438.000,A,5750.9644,S,16326.1840,W,13.28,62.18,050910,,*10', '$GPRMC,111530.000,A,0852.7501,N,13032.1415,E,0.00,87.21,181117,,*1D']; Output: ['0 km/h', '5.0930 km/h', '0 km/h', '24.5946 km/h', '0 km/h']"}
{"id": "174-0", "oq_id": 174, "desc": "Input: a list of string values containing GPS data.\nOutput: a list of string values representing the speed in kilometers per hour.\nFunctionality: The transformation extracts the speed values from each element in the given sequence by parsing the GPS data and converting it to kilometers per hour, then output the result as a list.\nExample: Input: ['$GPRMC,120345.000,A,3749.5821,N,12223.4137,W,3.75,55.20,150520,,*15', '$GPRMC,093402.000,A,1956.7214,S,17518.9296,E,8.27,48.91,140210,,*1F', '$GPRMC,184509.000,A,3058.6012,N,09836.4699,W,0.00,72.50,090313,,*10', '$GPRMC,072315.000,A,6430.8462,S,12034.7025,E,6.12,68.92,041119,,*1D', '$GPRMC,092731.000,A,2857.3126,N,10844.8204,E,18.93,70.83,221205,,*1C']; output: ['6.9450 km/h', '15.3160 km/h', '0 km/h', '11.3342 km/h', '35.0584 km/h']"}
{"id": "175-8", "oq_id": 175, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing numerical values followed by a new unit of measurement.\nFunctionality: The transformation converts each numerical value from feet to meters, rounding to one decimal place, and appends the new unit of measurement 'm' to each result.\nExample: Input: ['6.3 ft', '9.7 ft', '13.1 ft', '16.5 ft', '19.9 ft']; output: ['1.9 m', '3.0 m', '4.0 m', '5.0 m', '6.1 m']"}
{"id": "175-9", "oq_id": 175, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing numerical values followed by a new unit of measurement.\nFunctionality: The transformation converts each numerical value from feet to meters, and formats the result as a string with the new unit of measurement.\nExample: Input: ['0.3 ft', '0.6 ft', '0.9 ft', '1.2 ft', '1.5 ft']; output: ['0.1 m', '0.2 m', '0.3 m', '0.4 m', '0.5 m']"}
{"id": "175-7", "oq_id": 175, "desc": "Input: a list of strings with numerical values followed by a unit of measurement.\nOutput: a list of strings with numerical values followed by a different unit of measurement.\nFunctionality: The transformation converts the numerical value from feet to meters in each element of the input list and formats the result as a string with the new unit of measurement.\nExample: Input: ['9 ft', '12 ft', '15 ft', '18 ft', '21 ft']; output: ['2.7 m', '3.7 m', '4.6 m', '5.5 m', '6.4 m']"}
{"id": "175-6", "oq_id": 175, "desc": "Input: a list of string values, with numerical values and unit of measurement in each element.\nOutput: a list of string values with numerical values representing meters.\nFunctionality: The transformation converts each numerical value from feet to meters, and appends 'm' unit to the result list.\nExample: Input: ['0.8 ft', '1.6 ft', '2.4 ft', '3.2 ft', '4 ft']; output: ['0.2 m', '0.5 m', '0.7 m', '1.0 m', '1.2 m']"}
{"id": "175-4", "oq_id": 175, "desc": "Input: a list of string values, with numerical values and units in each element.\nOutput: a list of string values with converted numerical values and units.\nFunctionality: The transformation converts the numerical values in feet to meters, rounding to the nearest tenth, and includes the converted value with the new unit in the result list.\nExample: Input: ['0.5 ft', '1.5 ft', '2.5 ft', '3.5 ft', '4.5 ft']; output: ['0.2 m', '0.5 m', '0.8 m', '1.1 m', '1.4 m']"}
{"id": "175-5", "oq_id": 175, "desc": "Input: a list of strings with numerical values followed by a unit of measurement.\nOutput: a list of strings with numerical values followed by a different unit of measurement.\nFunctionality: The transformation converts the numerical value from feet to meters in each element of the given sequence and appends 'm' as the unit of measurement in the result list.\nExample: Input: ['7 ft', '14 ft', '21 ft', '28 ft', '35 ft']; output: ['2.1 m', '4.3 m', '6.4 m', '8.5 m', '10.7 m']"}
{"id": "175-1", "oq_id": 175, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing numerical values followed by a new unit of measurement.\nFunctionality: The transformation converts each numerical value from feet to meters, and formats the result as a string with the new unit of measurement.\nExample: Input: ['1.5 ft', '4.5 ft', '7.5 ft', '10.5 ft', '13.5 ft']; output: ['0.5 m', '1.4 m', '2.3 m', '3.2 m', '4.1 m']"}
{"id": "175-0", "oq_id": 175, "desc": "Input: a list of strings with numerical values followed by a unit of measurement.\nOutput: a list of strings with numerical values converted to a different unit of measurement.\nFunctionality: The transformation converts the numerical value in each element from feet to meters, and formats the result as strings with the new unit.\nExample: Input: ['2 ft', '4 ft', '8 ft', '16 ft', '32 ft']; output: ['0.6 m', '1.2 m', '2.4 m', '4.9 m', '9.8 m']"}
{"id": "175-2", "oq_id": 175, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing numerical values followed by a new unit of measurement.\nFunctionality: The transformation converts each numerical value from feet to meters, and appends \"m\" to the result list.\nExample: Input: ['2.3 ft', '5.7 ft', '8.2 ft', '10.9 ft', '13.4 ft']; output: ['0.7 m', '1.7 m', '2.5 m', '3.3 m', '4.1 m']"}
{"id": "175-3", "oq_id": 175, "desc": "Input: a list of string values, with numerical values followed by a unit of measurement in each element.\nOutput: a list of string values representing numerical values in meters.\nFunctionality: The transformation extracts the numerical value from each element, converts it to meters, and formats it as a string with the unit of measurement 'm'.\nExample: Input: ['3.2 ft', '6.4 ft', '9.6 ft', '12.8 ft', '16 ft']; output: ['1.0 m', '2.0 m', '2.9 m', '3.9 m', '4.9 m']"}
{"id": "176-9", "oq_id": 176, "desc": "Input: a list of strings with user-agent information.\nOutput: a list of strings representing the operating system information extracted from each user-agent string.\n\nFunctionality: The transformation extracts the operating system information from each user-agent string by identifying the specific pattern mentioning the operating system and outputs it as a list of strings. If the operating system information is not found in a user-agent string, it outputs \"nan\" for that entry in the result list.\n\nExample: Input: ['Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)', 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)', 'Mozilla/5.0 (X11; U; Linux i686; rv:1.9.0.5) Gecko/2008121622 Ubuntu/8.10 (intrepid) Firefox/3.0.5', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.100 Safari/534.30', 'Firefox/3.6.11 WinCE; 320x240']; Output: ['Windows NT 6.1', 'Windows NT 6.1', 'X11', 'Windows NT 5.1', 'nan']"}
{"id": "176-8", "oq_id": 176, "desc": "Input: a list of string values representing user agent information.\nOutput: a list of string values representing the operating systems extracted from each user agent string.\nFunctionality: The transformation extracts the operating system information from each user agent string in the input sequence and outputs a list containing only the operating systems.\nExample: Input: ['Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.112 Safari/534.30', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0', 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36']; output: ['Windows NT 6.1', 'Windows', 'Macintosh', 'Windows NT 6.1', 'Windows NT 6.1']"}
{"id": "176-6", "oq_id": 176, "desc": "Input: a list of string values, each containing information about web browsers.\nOutput: a list of string values representing the operating system used in each browser.\nFunctionality: The transformation extracts the operating system information from each element in the given sequence and outputs it as a list.\nExample: Input: ['Mozilla/5.0 (Windows NT 6.1; rv:23.0) Gecko/20100101 Firefox/23.0', 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)', 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36', 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)']; output: ['Windows NT 6.1', 'Windows NT 6.1', 'Windows NT 6.1', 'Macintosh', 'Windows NT 6.1']"}
{"id": "176-7", "oq_id": 176, "desc": "Input: a list of text strings.\nOutput: a list of text strings.\nFunctionality: The transformation extracts the operating system information from each element in the given sequence and outputs it in the result list.\nExample: Input: ['Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2225.0 Safari/537.36', 'Mozilla/5.0 (Windows NT 6.1; rv:65.0) Gecko/20100101 Firefox/65.0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.112 Safari/534.30', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36']; output: ['Windows NT 6.1', 'Windows NT 6.1', 'Windows NT 6.1', 'Windows NT 6.1', 'Windows NT 6.1']"}
{"id": "176-5", "oq_id": 176, "desc": "Input: a list of strings containing user agent information.\nOutput: a list of strings representing the operating system information extracted from each user agent.\n\nFunctionality: The transformation extracts the operating system information (e.g., 'Windows NT 6.1') from each user agent string in the given sequence and outputs the extracted operating system information as a list of strings.\n\nExample: Input: ['Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.122 Safari/534.30', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.155 Safari/537.36', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:28.0) Gecko/20100101 Firefox/28.0', 'Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.83 Safari/537.1']; \nOutput: ['Windows NT 6.1', 'Windows NT 6.1', 'Windows NT 6.1', 'Windows NT 6.3', 'Windows NT 6.1']"}
{"id": "176-4", "oq_id": 176, "desc": "Input: a list of strings with user agent information.\nOutput: a list of strings with extracted Windows versions.\n\nFunctionality: The transformation extracts the Windows version information from each element in the given sequence, filtering out other details, and output the Windows version as a string in the result list.\nExample: Input: ['Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)', 'Mozilla/5.0 (Windows NT 6.1; rv:62.0) Gecko/20100101 Firefox/62.0']; output: ['Windows NT 6.2', 'Windows NT 6.1']"}
{"id": "176-0", "oq_id": 176, "desc": "Input: a list of strings with user agent information.\nOutput: a list of strings representing the operating system extracted from each user agent string.\nFunctionality: The transformation extracts the operating system information from each user agent string in the given sequence and outputs it as a list of strings.\nExample: Input: ['Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 6.1; Trident/5.0)', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5; rv:64.0) Gecko/20100101 Firefox/64.0', 'Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36', 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0', 'Mozilla/5.0 (X11; U; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0']; output: ['Windows', 'Macintosh', 'X11', 'Windows', 'X11']"}
{"id": "176-1", "oq_id": 176, "desc": "Input: a list of strings containing user agent information.\nOutput: a list of strings representing the operating system extracted from each user agent string.\nFunctionality: The transformation extracts the operating system information (Windows NT version or Macintosh) from each user agent string in the given sequence and outputs them as a list of strings.\nExample: Input: ['Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/27.0.1453.90 Safari/537.1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2226.0 Safari/537.36', 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36']; output: ['Windows NT 6.0', 'Windows NT 5.1', 'Windows NT 6.1', 'Windows NT 6.1', 'Macintosh']"}
{"id": "176-3", "oq_id": 176, "desc": "Input: a list of string values containing user agent information.\nOutput: a list of string values representing the operating systems extracted from each element in the input list.\nFunctionality: The transformation extracts the operating system information from each user agent string in the given sequence and outputs the extracted operating systems as a list.\nExample: Input: ['Mozilla/5.0 (X11; U; Linux x86_64; en-GB; rv:1.9.1.20) Gecko/20120908 Paolo/1.22.7', 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.104 Safari/537.36', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36', 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)', 'Mozilla/5.0 (Windows NT 6.1; rv:63.0) Gecko/20100101 Firefox/63.0']; output: ['X11', 'Windows NT 6.3', 'Windows', 'Windows NT 6.1', 'Windows NT 6.1']"}
{"id": "176-2", "oq_id": 176, "desc": "Input: a list of string values containing user agent strings.\nOutput: a list of string values representing the operating system information extracted from each user agent string.\nFunctionality: The transformation involves parsing each user agent string to extract the operating system information (Windows version or Linux) and output it as a string in the result list.\nExample: Input: ['Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36', 'Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; Touch)', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36', 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)', 'Mozilla/5.0 (X11; U; Linux i686; rv:1.9.2) Gecko/20100101 Firefox/3.5.5']; Output: ['Windows NT 6.1', 'Windows NT 6.3', 'Windows NT 6.1', 'Windows NT 6.1', 'X11']"}
{"id": "177-9", "oq_id": 177, "desc": "Input: a list of string values, each containing an ISBN-13 number.\nOutput: a list of string values, each containing the corresponding ISBN-10 number.\nFunctionality: The transformation converts each ISBN-13 number in the input list to the corresponding ISBN-10 number format.\nExample: Input: ['ISBN13-0321641311', 'ISBN13-0137925734', 'ISBN13-0321713731', 'ISBN13-0132354766', 'ISBN13-0321660104']; output: ['978-0-321-64131-1', '978-0-137-92573-5', '978-0-321-71373-5', '978-0-132-35476-9', '978-0-321-66010-7']"}
{"id": "177-8", "oq_id": 177, "desc": "Input: a list of string values, each containing an ISBN-13 number.\nOutput: a list of string values, each containing the corresponding ISBN-10 number.\nFunctionality: The transformation converts each ISBN-13 number in the input list to the corresponding ISBN-10 number format.\nExample: Input: ['ISBN13-032139284X', 'ISBN13-0321305780', 'ISBN13-0980205191', 'ISBN13-0132353026', 'ISBN13-0974605494']; output: ['978-0-321-39284-8', '978-0-321-30578-7', '978-0-980-20519-0', '978-0-132-35302-1', '978-0-974-60549-4']"}
{"id": "177-5", "oq_id": 177, "desc": "Input: a list of string values, each containing an ISBN-13 number.\nOutput: a list of string values, each containing the corresponding ISBN-10 number.\nFunctionality: The transformation converts each ISBN-13 number in the input list to the corresponding ISBN-10 number format.\nExample: Input: ['ISBN13-0972469709', 'ISBN13-0976871784', 'ISBN13-0137121845', 'ISBN13-032189131X', 'ISBN13-0321268372']; output: ['978-0-972-46970-8', '978-0-976-87178-1', '978-0-137-12184-7', '978-0-321-89131-0', '978-0-321-26837-2']"}
{"id": "177-4", "oq_id": 177, "desc": "Input: a list of string values, each containing an ISBN-13 number.\nOutput: a list of string values, each containing the corresponding ISBN-10 number.\nFunctionality: The transformation converts each ISBN-13 number in the input list to the corresponding ISBN-10 number format.\nExample: Input: ['ISBN13-0321967006', 'ISBN13-0321432524', 'ISBN13-0321200953', 'ISBN13-0322005921', 'ISBN13-0132354952']; output: ['978-0-321-96700-8', '978-0-321-43252-0', '978-0-321-20095-2', '978-0-322-00592-1', '978-0-132-35495-0']"}
{"id": "177-6", "oq_id": 177, "desc": "Input: a list of string values, each containing an ISBN-13 number.\nOutput: a list of string values, formatted as ISBN-10 numbers.\n\nFunctionality: The transformation converts each ISBN-13 number in the input sequence to the corresponding ISBN-10 format, and outputs the result as a list.\n\nExample: Input: ['ISBN13-0321200325', 'ISBN13-0321640943', 'ISBN13-0321565895', 'ISBN13-0321466394', 'ISBN13-0321154943']; output: ['978-0-321-20032-7', '978-0-321-64094-9', '978-0-321-56589-1', '978-0-321-46639-6', '978-0-321-15494-1']"}
{"id": "177-7", "oq_id": 177, "desc": "Input: a list of string values, each containing an ISBN-13 number.\nOutput: a list of string values, formatted as ISBN-10 numbers.\nFunctionality: The transformation converts each ISBN-13 number in the given sequence to the corresponding ISBN-10 format, and outputs the result as a list.\nExample: Input: ['ISBN13-0321287370', 'ISBN13-0321427181', 'ISBN13-0321623217', 'ISBN13-0321706434', 'ISBN13-0973737025']; output: ['978-0-321-28737-3', '978-0-321-42718-2', '978-0-321-62321-8', '978-0-321-70643-0', '978-0-973-73702-8']"}
{"id": "177-3", "oq_id": 177, "desc": "Input: a list of string values, each containing an ISBN-13 number.\nOutput: a list of string values, each containing the corresponding ISBN-10 number.\nFunctionality: The transformation converts each ISBN-13 number in the input list to the corresponding ISBN-10 number format.\nExample: Input: ['ISBN13-0974383918', 'ISBN13-0340827030', 'ISBN13-0471412925', 'ISBN13-0321209039', 'ISBN13-0321616820']; output: ['978-0-974-38391-0', '978-0-340-82703-1', '978-0-471-41292-2', '978-0-321-20903-0', '978-0-321-61682-1']"}
{"id": "177-2", "oq_id": 177, "desc": "Input: a list of string values, each containing an ISBN-13 number.\nOutput: a list of string values, each containing the corresponding ISBN-10 number.\nFunctionality: The transformation converts each ISBN-13 number in the input list to the corresponding ISBN-10 number format.\nExample: Input: ['ISBN13-0321359430', 'ISBN13-0321117002', 'ISBN13-0321113554', 'ISBN13-0321031974', 'ISBN13-0321225214']; output: ['978-0-321-35943-8', '978-0-321-11700-7', '978-0-321-11355-9', '978-0-321-03197-6', '978-0-321-22521-4']"}
{"id": "177-0", "oq_id": 177, "desc": "Input: a list of string values, each containing an ISBN-13 number.\nOutput: a list of string values, each containing the corresponding ISBN-10 number.\nFunctionality: The transformation converts each ISBN-13 number in the input list to the corresponding ISBN-10 number format.\nExample: Input: ['ISBN13-0471900263', 'ISBN13-0486420587', 'ISBN13-0792365664', 'ISBN13-0486240637', 'ISBN13-0596526100']; output: ['978-0-471-90026-9', '978-0-486-42058-5', '978-0-792-36566-2', '978-0-486-24063-3', '978-0-596-52610-8']"}
{"id": "177-1", "oq_id": 177, "desc": "Input: a list of string values, each containing an ISBN-13 number.\nOutput: a list of string values, each containing the corresponding ISBN-10 number.\nFunctionality: The transformation extracts the numerical portion from the ISBN-13 numbers in the input sequence, converts them to ISBN-10 format, and outputs the result as a list.\nExample: Input: ['ISBN13-0321350910', 'ISBN13-0060571509', 'ISBN13-0471140796', 'ISBN13-0486426364', 'ISBN13-0321096995']; Output: ['978-0-321-35091-6', '978-0-060-57150-4', '978-0-471-14079-5', '978-0-486-42636-5', '978-0-321-09699-9']"}
{"id": "178-0", "oq_id": 178, "desc": "Input: a list of string values, each representing a full name.\nOutput: a list of string values, each representing a modified version of the full name.\nFunctionality: The transformation extracts the first letter of the first name and combines it with the last name, separated by a period, for each element in the given sequence.\nExample: Input: [\"'Doe, Jane'\", \"'Robert Williams'\", \"'Ms. Maria L. Garcia, II'\", \"'William Johnson'\", \"'Lucy M. White'\"]; output: ['J. Doe', 'R. Williams', 'M. Garcia', 'W. Johnson', 'L. White']"}
{"id": "178-1", "oq_id": 178, "desc": "Input: a list of string values, with names in each element.\nOutput: a list of string values with abbreviated names.\nFunctionality: The transformation extracts the first letter of the first name and combines it with the last name to create an abbreviated name, outputting the result as a list of strings.\nExample: Input: [\"'Lee, David'\", \"'Emily Brown'\", \"'Dr. Michael J. Taylor, II'\", \"'Sarah Smith'\", \"'Thomas K. Johnson'\"]; output: ['D. Lee', 'E. Brown', 'D. Taylor', 'S. Smith', 'T. Johnson']"}
{"id": "178-3", "oq_id": 178, "desc": "Input: a list of string values, with name formats including titles and full names.\nOutput: a list of string values, with abbreviated names.\nFunctionality: The transformation extracts the initials of the first name and the full last name from each element in the given sequence and formats the result list as 'X. LastName'.\nExample: Input: [\"'King, Sarah'\", \"'Kevin Davis'\", \"'Mrs. Patricia K. Lewis, Jr.'\", \"'Lucas Thomas'\", \"'Sophia L. Allen'\"]; output: ['S. King', 'K. Davis', 'M. Lewis', 'L. Thomas', 'S. Allen']"}
{"id": "178-2", "oq_id": 178, "desc": "Input: a list of string values, with full names in each element.\nOutput: a list of string values representing abbreviated names.\nFunctionality: The transformation extracts the first letter of the first name and combines it with the last name, formatted as a string, in the result list.\nExample: Input: ['Rodriguez, Maria', 'William Johnson', 'Mr. Daniel L. Thompson, III', 'Emma White', 'Oliver C. Smith']; output: ['M. Rodriguez', 'W. Johnson', 'D. Thompson', 'E. White', 'O. Smith']"}
{"id": "178-6", "oq_id": 178, "desc": "Input: a list of string values with names in various formats.\nOutput: a list of string values with names in a standardized format.\nFunctionality: The transformation extracts the first letter of the first name and the full last name from each element in the given sequence and formats the result as 'First initial. Last name'.\nExample: Input: [\"'Jensen, Anna'\", \"'Daniel Wilson'\", \"'Dr. Christopher P. Lee, Jr.'\", \"'Hannah White'\", \"'Benjamin C. Roberts'\"]; output: ['A. Jensen', 'D. Wilson', 'D. Lee', 'H. White', 'B. Roberts']"}
{"id": "178-7", "oq_id": 178, "desc": "Input: a list of string values, with name formats including title, first name, middle initial, last name.\nOutput: a list of string values, with initials and last names.\nFunctionality: The transformation extracts the first letter of the first name and middle initial, and combines them with the last name initial, followed by the last name, in the given sequence. \nExample: Input: [\"'Baker, Laura'\", \"'Mark Thompson'\", \"'Mrs. Samantha X. Adams, II'\", \"'Nicholas Hall'\", \"'Isabella S. Lewis'\"]; output: ['L. Baker', 'M. Thompson', 'M. Adams', 'N. Hall', 'I. Lewis']"}
{"id": "178-5", "oq_id": 178, "desc": "Input: a list of string values, each representing a full name.\nOutput: a list of string values, each representing a modified version of the full name.\nFunctionality: The transformation extracts the first letter of the first name and displays it with a period before the last name.\nExample: Input: [\"'Thomas, Rachel'\", \"'Andrew Garcia'\", \"'Ms. Julia K. Miller, II'\", \"'Logan James'\", \"'Ella M. Johnson'\"]; output: ['R. Thomas', 'A. Garcia', 'M. Miller', 'L. James', 'E. Johnson']"}
{"id": "178-4", "oq_id": 178, "desc": "Input: a list of string values with names in various formats.\nOutput: a list of string values with names in the format of initial followed by last name.\nFunctionality: The transformation extracts the first letter of the first name and combines it with the last name from each element in the given sequence to form the result list.\nExample: Input: [\"'Nguyen, Joseph'\", \"'Melissa White'\", \"'Mr. Samuel T. Brown, Jr.'\", \"'Nora Robinson'\", \"'Henry W. Williams'\"]; output: ['J. Nguyen', 'M. White', 'S. Brown', 'N. Robinson', 'H. Williams']"}
{"id": "178-9", "oq_id": 178, "desc": "Input: a list of string values, each containing a name in various formats.\nOutput: a list of string values, each representing the name in the format \"First Initial. Last Name\"\nFunctionality: The transformation extracts the first initial and last name from each element in the given sequence, and formats the result as a string in the specified format.\nExample: Input: ['Park, Sarah', 'Frank Garcia', 'Mr. George T. Davis, III', 'Amelia Robinson', 'David K. Wilson']; output: ['S. Park', 'F. Garcia', 'G. Davis', 'A. Robinson', 'D. Wilson']"}
{"id": "178-8", "oq_id": 178, "desc": "Input: a list of string values, with name formats including title, first name, middle name initial, last name, and suffix.\nOutput: a list of string values, with initials of the first name followed by the last name.\nFunctionality: The transformation extracts initials of the first name and the last name from each element in the given sequence, and combines them in the result list.\nExample: Input: [\"'Chen, Steven'\", \"'Emma Taylor'\", \"'Ms. Grace L. Clark, Jr.'\", \"'Jacob Johnson'\", \"'Olivia M. Brown'\"]; output: ['S. Chen', 'E. Taylor', 'M. Clark', 'J. Johnson', 'O. Brown']"}
{"id": "179-3", "oq_id": 179, "desc": "Input: a list of string values, with numerical values in decimal format in each element.\nOutput: a list of string values representing numerical values with reduced decimal places.\nFunctionality: The transformation rounds each numerical value in the given sequence to 1 decimal place and output the result as a list.\nExample: Input: ['2.222', '0.333', '4.444', '5.555', '6.666']; output: ['2.2', '0.33', '4.4', '5.6', '6.7']"}
{"id": "179-2", "oq_id": 179, "desc": "Input: a list of string values, with numerical values in decimal format in each element.\nOutput: a list of string values in decimal format.\nFunctionality: The transformation rounds each numerical value to one decimal place in the given sequence and output the result as a list.\nExample: Input: ['1.111', '0.222', '3.333', '4.444', '5.555']; output: ['1.1', '0.2', '3.3', '4.4', '5.6']"}
{"id": "179-0", "oq_id": 179, "desc": "Input: a list of string values, with numerical values in decimal or scientific notation in each element.\nOutput: a list of string values in decimal or scientific notation.\nFunctionality: The transformation rounds each numerical value in the given sequence to one decimal place or converts it to scientific notation if necessary, and outputs the result as a list.\nExample: Input: ['3.567', '0.005', '123.45', '9.876', '5.4321']; output: ['3.6', '0.005', '1.2E+02', '9.9', '5.4']"}
{"id": "179-1", "oq_id": 179, "desc": "Input: a list of string values, representing decimal numbers.\nOutput: a list of string values, representing formatted decimal numbers.\nFunctionality: The transformation rounds each decimal number in the given sequence to 1 decimal place or formats it in scientific notation if necessary.\nExample: Input: ['6.789', '0.123456', '456.789', '7.8910', '1.09876']; output: ['6.8', '0.1', '4.6E+02', '7.9', '1.1']"}
{"id": "179-5", "oq_id": 179, "desc": "Input: a list of string values, with numerical values in decimal format in each element.\nOutput: a list of string values with numerical values rounded to one decimal place.\nFunctionality: The transformation rounds each numerical value in the given sequence to one decimal place and outputs the result as a list.\nExample: Input: ['4.444', '0.555', '6.666', '7.777', '8.888']; output: ['4.4', '0.6', '6.7', '7.8', '8.9']"}
{"id": "179-4", "oq_id": 179, "desc": "Input: a list of string values, with numerical values in decimal format in each element.\nOutput: a list of string values with numerical values rounded to one decimal place.\nFunctionality: The transformation rounds each numerical value in the given sequence to one decimal place and outputs the result as a list.\nExample: Input: ['3.333', '0.444', '5.555', '6.666', '7.777']; output: ['3.3', '0.4', '5.6', '6.7', '7.8']"}
{"id": "179-6", "oq_id": 179, "desc": "Input: a list of string values, with numerical values in decimal format in each element.\nOutput: a list of string values representing rounded numerical values.\nFunctionality: The transformation rounds each numerical value to the nearest tenth in the given sequence and outputs the results as strings in the result list.\nExample: Input: ['5.555', '0.666', '7.777', '8.888', '9.999']; output: ['5.6', '0.67', '7.8', '8.9', '10']"}
{"id": "179-7", "oq_id": 179, "desc": "Input: a list of string values, with numerical values in decimal format in each element.\nOutput: a list of string values, with numerical values rounded to one decimal place.\nFunctionality: The transformation rounds each numerical value in the given sequence to one decimal place, and output the rounded values as strings in the result list.\nExample: Input: ['6.666', '0.777', '8.888', '9.999', '1.1111']; output: ['6.7', '0.8', '8.9', '10.0', '1.1']"}
{"id": "179-9", "oq_id": 179, "desc": "Input: a list of string values, each containing a numerical value represented as a decimal.\nOutput: a list of string values representing rounded numerical values with one decimal place.\nFunctionality: The transformation rounds each numerical value in the input sequence to one decimal place and outputs the rounded values as strings in the result list.\nExample: Input: ['8.888', '0.999', '1.1111', '2.2222', '3.3333']; output: ['8.9', '1', '1.1', '2.2', '3.3']"}
{"id": "179-8", "oq_id": 179, "desc": "Input: a list of string values, with numerical values in decimal format in each element.\nOutput: a list of string values representing numerical values rounded to one decimal place.\nFunctionality: The transformation rounds each numerical value in the given sequence to one decimal place and outputs the result as a list.\nExample: Input: ['7.777', '0.888', '9.999', '1.1111', '2.2222']; output: ['7.8', '0.9', '10.0', '1.1', '2.2']"}
{"id": "181-4", "oq_id": 181, "desc": "Input: a list of complex text values with temperature values in Celsius.\nOutput: a list of complex text values with temperature values in Fahrenheit.\nFunctionality: The transformation converts each temperature value from Celsius to Fahrenheit in the given sequence and output the result as a list.\nExample: Input: ['7\u0392\u038aC', '21\u0392\u038aC', '40\u0392\u038aC', '8\u0392\u038aC', '11\u0392\u038aC']; output: ['50\u0392\u038aF', '69.08\u0392\u038aF', '104\u0392\u038aF', '46.52\u0392\u038aF', '51.44\u0392\u038aF']"}
{"id": "181-5", "oq_id": 181, "desc": "Input: a list of string values with temperature in Celsius.\nOutput: a list of string values with temperature converted to Fahrenheit.\nFunctionality: The transformation converts each element from Celsius to Fahrenheit using the formula (Celsius * 9/5) + 32 and outputs the result as a list of strings.\nExample: Input: ['30\u0392\u038aC', '45\u0392\u038aC', '60\u0392\u038aC', '25\u0392\u038aC', '28\u0392\u038aC']; Output: ['86\u0392\u038aF', '113\u0392\u038aF', '140\u0392\u038aF', '77\u0392\u038aF', '82.4\u0392\u038aF']"}
{"id": "181-7", "oq_id": 181, "desc": "Input: a list of string values with a specific format (number followed by \u0392\u038aC).\nOutput: a list of string values with the number converted to Fahrenheit and expressed as a string with \u0392\u038aF attached.\n\nFunctionality: The transformation converts each number in the Celsius format to Fahrenheit and appends \u0392\u038aF to the result as a string.\nExample: Input: ['1\u0392\u038aC', '14\u0392\u038aC', '27\u0392\u038aC', '0\u0392\u038aC', '3\u0392\u038aC']; output: ['50\u0392\u038aF', '57.2\u0392\u038aF', '80.6\u0392\u038aF', '32.7\u0392\u038aF', '37.0\u0392\u038aF']"}
{"id": "181-6", "oq_id": 181, "desc": "Input: a list of string values with a specific format (number followed by \u0392\u038aC).\nOutput: a list of string values with the number converted to Fahrenheit and expressed as a string with \u0392\u038aF attached.\n\nFunctionality: The transformation converts each temperature value from Celsius to Fahrenheit in the given sequence, and formats the result as a string with \u0392\u038aF attached.\nExample: Input: ['11\u0392\u038aC', '24\u0392\u038aC', '37\u0392\u038aC', '10\u0392\u038aC', '13\u0392\u038aC']; output: ['50\u0392\u038aF', '75.2\u0392\u038aF', '98.6\u0392\u038aF', '50\u0392\u038aF', '55.4\u0392\u038aF']"}
{"id": "181-2", "oq_id": 181, "desc": "Input: a list of string values with a specific pattern (number followed by \u0392\u038aC).\nOutput: a list of strings representing the temperature values in Fahrenheit with a specific pattern (number followed by \u0392\u038aF).\nFunctionality: The transformation converts each temperature value from Celsius to Fahrenheit in the given sequence and formats the result as strings in the desired pattern.\nExample: Input: ['5\u0392\u038aC', '18\u0392\u038aC', '31\u0392\u038aC', '2\u0392\u038aC', '4\u0392\u038aC']; output: ['50\u0392\u038aF', '91.4\u0392\u038aF', '114.8\u0392\u038aF', '37.4\u0392\u038aF', '42.8\u0392\u038aF']"}
{"id": "181-3", "oq_id": 181, "desc": "Input: a list of string values with temperature in Celsius.\nOutput: a list of string values with temperature converted to Fahrenheit.\nFunctionality: The transformation converts each element from Celsius to Fahrenheit using the formula (Celsius * 9/5) + 32 and outputs the result as a list of strings.\nExample: Input: ['20\u0392\u038aC', '32\u0392\u038aC', '49\u0392\u038aC', '16\u0392\u038aC', '23\u0392\u038aC']; Output: ['68\u0392\u038aF', '89.6\u0392\u038aF', '120.2\u0392\u038aF', '61.5\u0392\u038aF', '73.4\u0392\u038aF']"}
{"id": "181-1", "oq_id": 181, "desc": "Input: a list of string values with a specific format (number followed by a special character and unit).\nOutput: a list of string values with numbers converted to a different unit.\nFunctionality: The transformation converts the numbers from Celsius to Fahrenheit in each element of the given sequence and outputs the result as a list.\nExample: Input: ['15\u0392\u038aC', '28\u0392\u038aC', '42\u0392\u038aC', '7\u0392\u038aC', '9\u0392\u038aC']; output: ['59\u0392\u038aF', '82.4\u0392\u038aF', '107.6\u0392\u038aF', '99.32\u0392\u038aF', '48.32\u0392\u038aF']"}
{"id": "181-0", "oq_id": 181, "desc": "Input: a list of string values with a specific format (number followed by \u0392\u038aC).\nOutput: a list of string values with the number converted to Fahrenheit and expressed as a string with \u0392\u038aF attached.\n\nFunctionality: The transformation converts each temperature value from Celsius to Fahrenheit in the given sequence, and formats the result as a string with \u0392\u038aF attached.\nExample: Input: ['25\u0392\u038aC', '38\u0392\u038aC', '55\u0392\u038aC', '12\u0392\u038aC', '19\u0392\u038aC']; output: ['50\u0392\u038aF', '91.4\u0392\u038aF', '114.8\u0392\u038aF', '37.4\u0392\u038aF', '42.8\u0392\u038aF']"}
{"id": "181-8", "oq_id": 181, "desc": "Input: a list of string values with a specific format (temperature values in \u0392\u038aC).\nOutput: a list of string values with temperature values converted to \u0392\u038aF format.\nFunctionality: The transformation converts each temperature value from \u0392\u038aC to \u0392\u038aF and outputs the result as a list of strings.\nExample: Input: ['12\u0392\u038aC', '26\u0392\u038aC', '39\u0392\u038aC', '6\u0392\u038aC', '14\u0392\u038aC']; output: ['50\u0392\u038aF', '78.8\u0392\u038aF', '102.2\u0392\u038aF', '42.8\u0392\u038aF', '57.4\u0392\u038aF']"}
{"id": "181-9", "oq_id": 181, "desc": "Input: a list of string values with a specific format (temperature values in \u0392\u038aC).\nOutput: a list of string values with temperature values converted to \u0392\u038aF format.\nFunctionality: The transformation converts each temperature value from \u0392\u038aC to \u0392\u038aF and outputs the result as a list of strings.\nExample: Input: ['22\u0392\u038aC', '35\u0392\u038aC', '50\u0392\u038aC', '18\u0392\u038aC', '21\u0392\u038aC']; output: ['50\u0392\u038aF', '91.4\u0392\u038aF', '114.8\u0392\u038aF', '37.4\u0392\u038aF', '42.8\u0392\u038aF']"}
{"id": "182-5", "oq_id": 182, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element in the sequence to an integer, multiplies it by 3, and outputs the result as a string in the new list.\nExample: Input: ['19', '38', '57', '76', '95']; output: ['57', '114', '171', '228', '285']"}
{"id": "182-4", "oq_id": 182, "desc": "Input: a list of string values, each representing a numerical value.\nOutput: a list of string values, each representing a numerical value.\nFunctionality: The transformation multiplies each numerical value in the input sequence by 3 to get the corresponding value in the output sequence.\nExample: Input: ['7', '14', '21', '28', '35']; output: ['21', '42', '63', '84', '105']"}
{"id": "182-6", "oq_id": 182, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation updates each element in the input sequence by adding 222 to the numerical value in each element, resulting in the output list.\nExample: Input: ['111', '222', '333', '444', '555']; output: ['333', '666', '999', '1332', '1665']"}
{"id": "182-7", "oq_id": 182, "desc": "Input: a list of string values, representing numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation multiplies each numerical value by 3 to get the output list.\nExample: Input: ['50', '100', '150', '200', '250']; output: [150, 300, 450, 600, 750]"}
{"id": "182-3", "oq_id": 182, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation multiplies each numerical value in each string element by 3 and outputs the result as a list.\nExample: Input: ['100', '200', '300', '400', '500']; output: ['300', '600', '900', '1200', '1500']"}
{"id": "182-2", "oq_id": 182, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation multiplies each element from the given sequence by 3 and outputs the result as a list.\nExample: Input: ['11', '22', '33', '44', '55']; output: ['33', '66', '99', '132', '165']"}
{"id": "182-0", "oq_id": 182, "desc": "Input: a list of string values, containing numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation multiplies each numerical value parsed from the string by 3, and outputs the result as a list.\nExample: Input: ['2', '4', '6', '7', '10']; output: [6, 12, 18, 21, 30]"}
{"id": "182-1", "oq_id": 182, "desc": "Input: a list of string values, containing numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation multiplies each numerical value by 9, and converts the result back to a string, outputting a list of these modified numerical values.\nExample: Input: ['0', '3', '6', '9', '12']; output: ['0', '27', '54', '81', '108']"}
{"id": "182-9", "oq_id": 182, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation multiplies each element from the given sequence by 3, and output the result as a list.\nExample: Input: ['13', '26', '39', '52', '65']; output: ['39', '78', '117', '156', '195']"}
{"id": "182-8", "oq_id": 182, "desc": "Input: a list of string values, containing numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation multiplies each numerical value parsed from the string by 3, and outputs the result as a list.\nExample: Input: ['4', '8', '12', '16', '20']; output: ['12', '24', '36', '48', '60']"}
{"id": "183-6", "oq_id": 183, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation pads zeros to the left of each element in the given sequence to make it a five-digit number, and output the result as a list.\nExample: Input: ['12', '34', '56', '78', '90']; output: ['00012', '00034', '00056', '00078', '00090']"}
{"id": "183-7", "oq_id": 183, "desc": "Input: a list of string values, representing numerical values.\nOutput: a list of string values, with leading zeros added to each number.\nFunctionality: The transformation adds leading zeros to each number in the given sequence to ensure they all have a consistent length, and output the result as a list.\nExample: Input: ['9876', '5432', '1098', '7654', '3210']; output: ['09876', '05432', '01098', '07654', '03210']"}
{"id": "183-5", "oq_id": 183, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds leading zeros to each element in the given sequence to make the length of each element five characters long, and output the result as a list.\nExample: Input: ['100', '200', '300', '400', '500']; output: ['00100', '00200', '00300', '00400', '00500']"}
{"id": "183-4", "oq_id": 183, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds '00' at the beginning of each element in the given sequence.\nExample: Input: ['777', '555', '333', '111', '999']; output: ['00777', '00555', '00333', '00111', '00999']"}
{"id": "183-0", "oq_id": 183, "desc": "Input: a list of string values containing numerical values.\nOutput: a list of strings representing the same numerical values but padded with leading zeros to have a length of 5 characters.\nFunctionality: The transformation takes each element from the given sequence, converts it to a string, pads it with leading zeros if necessary to have a length of 5 characters, and outputs the result as a list.\nExample: Input: ['1', '23', '456', '7890', '111']; output: ['00001', '00023', '00456', '07890', '00111']"}
{"id": "183-1", "oq_id": 183, "desc": "Input: a list of string values representing numerical values.\nOutput: a list of string values representing numerical values with leading zeros.\nFunctionality: The transformation adds leading zeros to each element in the given sequence to make all values have a length of 5 characters, and outputs the result as a list.\nExample: Input: ['3', '22', '3333', '44444', '555555']; output: ['00003', '00022', '03333', '44444', '555555']"}
{"id": "183-3", "oq_id": 183, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds '0' at the beginning of each element in the given sequence.\nExample: Input: ['1010', '20202', '303030', '4040404', '50505050']; Output: ['01010', '20202', '303030', '4040404', '50505050']"}
{"id": "183-2", "oq_id": 183, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values, where each number is padded with zeros to have a length of 5 digits.\nFunctionality: The transformation pads each number in the given sequence with zeros at the beginning to make it a 5-digit number, and outputs the result as a list.\nExample: Input: ['999', '8888', '77777', '666666', '5555555']; output: ['00999', '08888', '77777', '666666', '5555555']"}
{"id": "183-9", "oq_id": 183, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds a leading zero to each element in the given sequence, if the element does not already start with a zero.\nExample: Input: ['5678', '1234', '7890', '2345', '8901']; output: ['05678', '01234', '07890', '02345', '08901']"}
{"id": "183-8", "oq_id": 183, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds a leading zero to each element in the given sequence, if the element does not already have one, and outputs the result as a list.\nExample: Input: ['6543', '2109', '8765', '4321', '0987']; output: ['06543', '02109', '08765', '04321', '00987']"}
{"id": "184-3", "oq_id": 184, "desc": "Input: a list of string values, with numerical values in scientific notation mixed with regular decimal notation.\nOutput: a list of string values, with numerical values in regular decimal notation.\nFunctionality: The transformation converts each element from scientific notation to regular decimal notation in the given sequence and outputs the result as a list.\nExample: Input: ['4.321', '5.678E-4', '123456789', '5.5555e+9', '11.222']; output: ['4.3', '0.0', '123456789.0', '5555500000.0', '11.2']"}
{"id": "184-2", "oq_id": 184, "desc": "Input: a list of string values, with numerical values in scientific notation or decimal point format.\nOutput: a list of numerical values in decimal point format.\nFunctionality: The transformation converts each element from scientific notation or decimal point format to decimal point format, and output the result as a list.\nExample: Input: ['9.876', '1.234E+3', '987654321', '1.111e-4', '76.543']; output: ['9.9', '1234.0', '987654321.0', '0.0', '76.5']"}
{"id": "184-0", "oq_id": 184, "desc": "Input: a list of string values, with numerical values represented in scientific notation or regular floating point format.\nOutput: a list of string values representing numerical values in regular floating point format.\nFunctionality: The transformation converts each numerical value in the input sequence from scientific notation to regular floating point format, and output the results as a list of strings.\nExample: Input: ['0.9876', '5.4321E-1', '8765432109', '3.14159e+10', '0.123']; output: ['1.0', '0.5', '8765432109.0', '31415900000.0', '0.1']"}
{"id": "184-1", "oq_id": 184, "desc": "Input: a list of string values, with numerical values in various formats in each element.\nOutput: a list of string values representing numerical values in a specific format.\nFunctionality: The transformation converts each element in the given sequence to a specific numerical format, rounding to one decimal point.\nExample: Input: ['6.789', '4.321E-2', '9876543210', '7.777e-7', '54.321']; output: ['6.8', '0.0', '9876543210.0', '0.0', '54.3']"}
{"id": "184-5", "oq_id": 184, "desc": "Input: a list of string values, containing numerical values in various formats.\nOutput: a list of string values representing numbers in a specific format.\nFunctionality: The transformation rounds each numerical value in the given sequence to one decimal place.\nExample: Input: ['3.456', '6.789E-6', '9876543210', '8.888e-3', '0.4321']; output: ['3.5', '0.0', '9876543210.0', '0.0', '0.4']"}
{"id": "184-4", "oq_id": 184, "desc": "Input: a list of string values, with numerical values in scientific notation, decimal point values, and integers in each element.\nOutput: a list of string values with formatted numerical values.\nFunctionality: The transformation rounds each numerical value in the given sequence to one decimal point and converts it to a string, outputting the results as a list.\nExample: Input: ['9.8765', '1.2345E-5', '8765432109', '2.2222e-6', '76.5432']; output: ['9.9', '0.0', '8765432109.0', '0.0', '76.5']"}
{"id": "184-6", "oq_id": 184, "desc": "Input: a list of string values, with numerical values in scientific notation or decimal point format.\nOutput: a list of string values representing numerical values rounded to one decimal place.\nFunctionality: The transformation converts each element from the given sequence to numerical values, rounds them to one decimal place, and outputs the result as a list of strings.\nExample: Input: ['1.234', '7.891E-7', '123456789', '9.9999e-12', '12.345']; output: ['1.2', '0.0', '123456789.0', '0.0', '12.3']"}
{"id": "184-7", "oq_id": 184, "desc": "Input: a list of string values, with numerical values in scientific notation or decimal format.\nOutput: a list of numerical values in decimal format.\nFunctionality: The transformation converts each numerical value in scientific notation or decimal format to a decimal number and rounds it to one decimal place, then outputs the result as a list.\nExample: Input: ['5.4321', '2.3456E-8', '9876543210', '6.666e+13', '9.8765']; output: ['5.4', '0.0', '9876543210.0', '66660000000000.0', '9.9']"}
{"id": "184-9", "oq_id": 184, "desc": "Input: a list of string values, with numerical values in scientific notation, floating point, and integer formats in each element.\nOutput: a list of numerical values in floating point format.\nFunctionality: The transformation converts each element from the given sequence to numerical values in floating point format, taking into account scientific notation, floating point, and integer formats.\nExample: Input: ['0.1234', '3.5678E-1', '8765432109', '4.4444e+16', '98.765']; output: ['0.1', '0.4', '8765432109.0', '44444000000000000.0', '98.8']"}
{"id": "184-8", "oq_id": 184, "desc": "Input: a list of string values, with numerical values in scientific notation or decimal format.\nOutput: a list of string values representing numerical values in decimal format.\nFunctionality: The transformation converts each element from scientific notation to decimal format, rounds the values to one decimal point, and output the result as a list of strings.\nExample: Input: ['8.765', '9.8765E-9', '123456789', '7.7777e-15', '43.210']; output: ['8.8', '0.0', '123456789.0', '0.0', '43.2']"}
{"id": "185-0", "oq_id": 185, "desc": "Input: a list of string values, with numerical values represented as floating point numbers.\nOutput: a list of string values, with numerical values represented in scientific notation.\nFunctionality: The transformation converts each floating point number in the given sequence to scientific notation, and outputs the result as a list with each number represented in scientific notation.\nExample: Input: ['3.21', '0.002', '890.5', '46.789', '0.00067']; output: ['3.2E0', '2.0E-3', '8.9E2', '4.7E1', '6.7E-4']"}
{"id": "185-1", "oq_id": 185, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values representing scientific notation of the numerical values.\nFunctionality: The transformation converts each numerical value from the given sequence to scientific notation, and output the result as a list of strings.\nExample: Input: ['-1.23', '5.678', '1000', '0.000567', '7.89']; output: ['-1.2E0', '5.7E0', '1.0E3', '5.7E-4', '7.9E0']"}
{"id": "185-3", "oq_id": 185, "desc": "Input: a list of string values, with numerical values represented in scientific notation or decimal form.\nOutput: a list of string values, with numerical values represented in scientific notation.\nFunctionality: The transformation converts each element from decimal form to scientific notation in the given sequence, and outputs the result as a list.\nExample: Input: ['0.2345', '456.7', '0.00987', '8901', '12.345']; output: ['2.3E-1', '4.6E2', '9.9E-3', '8.9E3', '1.2E1']"}
{"id": "185-2", "oq_id": 185, "desc": "Input: a list of string values, with numerical values in scientific notation format.\nOutput: a list of string values in scientific notation format.\nFunctionality: The transformation converts each numerical value in the given sequence to scientific notation format with one decimal place and outputs the result as a list.\nExample: Input: ['9.876', '34.56', '0.000123', '321.4', '5.678']; output: ['9.9E0', '3.5E1', '1.2E-4', '3.2E2', '5.7E0']"}
{"id": "185-6", "oq_id": 185, "desc": "Input: a list of string values, with numerical values in scientific notation format.\nOutput: a list of string values, with numerical values in scientific notation format.\nFunctionality: The transformation converts each numerical value in the given sequence from regular decimal format to scientific notation format, and output the result as a list.\nExample: Input: ['7890', '12.345', '0.8901', '2345.6', '0.4567']; output: ['7.9E3', '1.2E1', '8.9E-1', '2.3E3', '4.6E-1']"}
{"id": "185-7", "oq_id": 185, "desc": "Input: a list of string values, with numerical values represented as strings.\nOutput: a list of strings in scientific notation format.\n\nFunctionality: The transformation converts each numerical value from the given sequence into scientific notation format, and outputs the result as a new list.\n\nExample: Input: ['4321', '0.2345', '0.4567', '789.0', '0.6789']; output: ['4.3E3', '2.3E-1', '4.6E-1', '7.9E2', '6.8E-1']"}
{"id": "185-5", "oq_id": 185, "desc": "Input: a list of string values, with numerical values in scientific notation format.\nOutput: a list of string values, with numerical values in scientific notation format.\nFunctionality: The transformation converts each numerical value in the given sequence from regular decimal format to scientific notation format, and output the result as a list.\nExample: Input: ['1234.5', '0.000567', '23.456', '7890', '0.000123']; output: ['1.2E3', '5.7E-4', '2.3E1', '7.9E3', '1.2E-4']"}
{"id": "185-4", "oq_id": 185, "desc": "Input: a list of string values, with numerical values in scientific notation included.\nOutput: a list of string values in scientific notation.\n\nFunctionality: The transformation converts each numerical value from standard notation to scientific notation in the given sequence and outputs the result as a list.\n\nExample: Input: ['56.78', '0.000345', '1234.5', '6789', '0.00789']; output: ['5.7E1', '3.4E-4', '1.2E3', '6.8E3', '7.9E-3']"}
{"id": "185-9", "oq_id": 185, "desc": "Input: a list of string values, with numerical values in scientific notation format.\nOutput: a list of string values, with numerical values in scientific notation format.\nFunctionality: The transformation converts each numerical value in the given sequence from regular decimal format to scientific notation format, and output the result as a list.\nExample: Input: ['5678', '0.000123', '8901', '0.5678', '0.4567']; output: ['5.7E3', '1.2E-4', '8.9E3', '5.7E-1', '4.6E-1']"}
{"id": "185-8", "oq_id": 185, "desc": "Input: a list of string values, with numerical values in scientific notation format.\nOutput: a list of string values in scientific notation format.\nFunctionality: The transformation converts each numerical value in the given sequence to scientific notation format.\nExample: Input: ['7890', '0.789', '23.456', '0.1234', '1.234']; output: ['7.9E3', '7.9E-1', '2.3E1', '1.2E-1', '1.2E0']"}
{"id": "186-1", "oq_id": 186, "desc": "Input: a list of string values, containing numerical values in various formats.\nOutput: a list of string values, with numerical values formatted in scientific notation with two decimal places.\nFunctionality: The transformation converts each numerical value in scientific notation with two decimal places while maintaining the original value's sign, and outputs the result as a list.\nExample: Input: ['-5.678', '6.789E-3', '4.567E+8', '9.87654', '1.23']; output: ['-5.68E0', '6.79E-3', '4.57E8', '9.88E0', '1.23E0']"}
{"id": "186-0", "oq_id": 186, "desc": "Input: a list of string values, with numerical values in various formats in each element.\nOutput: a list of string values in scientific notation format.\nFunctionality: The transformation converts each element from the given sequence into scientific notation format and outputs the result as a list.\nExample: Input: ['0.001', '3.14159', '1.2345E-6', '9876543210', '2.345']; output: ['1.00E-3', '3.14E0', '1.23E-6', '9.88E9', '2.35E0']"}
{"id": "186-2", "oq_id": 186, "desc": "Input: a list of string values, with numerical values in scientific notation in each element.\nOutput: a list of string values in scientific notation format.\nFunctionality: The transformation converts each element from the given sequence to scientific notation format and outputs the result as a list.\nExample: Input: ['55.432', '7.8910E+12', '0.002345', '987654.321', '123.454']; output: ['5.54E1', '7.89E+12', '2.34E-3', '9.88E5', '1.23E2']"}
{"id": "186-3", "oq_id": 186, "desc": "Input: a list of string values, containing numerical values in various formats.\nOutput: a list of string values in scientific notation format.\nFunctionality: The transformation converts each numerical value in scientific notation, maintain the original value.\nExample: Input: ['0.123', '1.234E-3', '3456789012', '67.89e-7', '8.765']; output: ['1.23E-1', '1.23E-3', '3.46E9', '6.79E-6', '8.77E0']"}
{"id": "186-7", "oq_id": 186, "desc": "Input: a list of string values, with numerical values represented in various formats.\nOutput: a list of string values with numerical values in scientific notation format.\nFunctionality: The transformation converts each numerical value in the given sequence to scientific notation format and output the result as a list of strings.\nExample: Input: ['98.765', '4.567E+5', '0.0012345', '3456789012', '6.789']; output: ['9.88E1', '4.57E5', '1.23E-3', '3.46E9', '6.79E0']"}
{"id": "186-6", "oq_id": 186, "desc": "Input: a list of string values, with numerical values in different formats in each element.\nOutput: a list of string values with numerical values in scientific notation format.\nFunctionality: The transformation converts each numerical value in the given sequence to scientific notation format with two significant figures.\nExample: Input: ['2.345', '5.678E-3', '7890123456', '12.345e-6', '9.876']; output: ['2.35E0', '5.68E-3', '7.89E9', '1.23E-5', '9.88E0']"}
{"id": "186-4", "oq_id": 186, "desc": "Input: a list of string values, with numerical values in scientific notation or decimal format in each element.\nOutput: a list of string values in scientific notation.\nFunctionality: The transformation converts each numerical value from the given sequence to scientific notation and output the result as a list of strings.\nExample: Input: ['123.456', '7.89E+6', '0.00012345', '8765432109', '2.345']; output: ['1.23E2', '7.89E6', '1.23E-4', '8.77E9', '2.35E0']"}
{"id": "186-5", "oq_id": 186, "desc": "Input: a list of string values, containing numerical values in various formats.\nOutput: a list of string values in scientific notation format.\nFunctionality: The transformation converts each numerical value in the given sequence to scientific notation format and outputs the result as a list.\nExample: Input: ['3.14159', '1.234E-5', '4567890123', '98.76e-4', '5.678']; output: ['3.14E0', '1.23E-5', '4.57E9', '9.88E-3', '5.68E0']"}
{"id": "186-8", "oq_id": 186, "desc": "Input: a list of string values, with numerical values in scientific notation format in each element.\nOutput: a list of string values in scientific notation format.\nFunctionality: The transformation converts each numerical value from scientific notation to a new scientific notation format with two significant figures.\nExample: Input: ['1.234', '9.8765E-7', '1234567890', '7.89e-3', '567.89']; output: ['1.23E0', '9.88E-7', '1.23E9', '7.89E-3', '5.68E2']"}
{"id": "186-9", "oq_id": 186, "desc": "Input: a list of string values, with numerical values represented in scientific notation or decimal form.\nOutput: a list of string values in scientific notation form.\nFunctionality: The transformation converts each numerical value from decimal form to scientific notation in the given sequence, and outputs the result as a list.\nExample: Input: ['34.567', '1.23E+9', '0.001234', '1234567890', '1.234']; output: ['3.46E1', '1.23E9', '1.23E-3', '1.23E9', '1.23E0']"}
{"id": "187-2", "oq_id": 187, "desc": "Input: a list of string values containing words/phrases in snake_case.\nOutput: a list of string values containing words/phrases in camelCase.\n\nFunctionality: The transformation converts words/phrases in snake_case to camelCase by capitalizing the first letter of each subsequent word/phrase while removing underscores.\n\nExample: Input: ['product_id', 'product_name', 'unit_price', 'quantity_in_stock']; output: ['productId', 'productName', 'unitPrice', 'quantityInStock']"}
{"id": "187-3", "oq_id": 187, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts the elements in the sequence from snake_case to camelCase by capitalizing the first letter of each word after the first word and removing underscores.\nExample: Input: ['customer_id', 'customer_name', 'email_address', 'shipping_address']; output: ['customerId', 'customerName', 'emailAddress', 'shippingAddress']"}
{"id": "187-1", "oq_id": 187, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element in the given sequence from snake_case to camelCase format and outputs the result as a list.\nExample: Input: ['user_id', 'password_hash', 'is_active', 'last_login']; output: ['userId', 'passwordHash', 'isActive', 'lastLogin']"}
{"id": "187-0", "oq_id": 187, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element in the given sequence from snake_case to camelCase format and outputs the result as a list.\nExample: Input: ['first_name', 'last_name', 'date_of_birth', 'phone_number']; output: ['firstName', 'lastName', 'dateOfBirth', 'phoneNumber']"}
{"id": "187-4", "oq_id": 187, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts the elements in the sequence from snake_case to camelCase by capitalizing the first letter of each word after the first word and removing underscores.\nExample: Input: ['order_id', 'order_date', 'total_amount', 'is_completed']; output: ['orderId', 'orderDate', 'totalAmount', 'isCompleted']"}
{"id": "187-5", "oq_id": 187, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts snake_case strings to camelCase strings by removing underscores and capitalizing the first letter of each word after the first one.\nExample: Input: ['employee_id', 'full_name', 'department', 'hire_date']; output: ['employeeId', 'fullName', 'department', 'hireDate']"}
{"id": "187-7", "oq_id": 187, "desc": "Input: a list of string values containing words/phrases in snake_case.\nOutput: a list of string values containing words/phrases in camelCase.\nFunctionality: The transformation converts words/phrases from snake_case to camelCase in the given sequence and outputs the result as a new list.\nExample: Input: ['supplier_id', 'supplier_name', 'contact_person', 'product_category']; output: ['supplierId', 'supplierName', 'contactPerson', 'productCategory']"}
{"id": "187-6", "oq_id": 187, "desc": "Input: a list of string values representing variable names.\nOutput: a list of string values representing variable names in camelCase format.\nFunctionality: The transformation converts each element from the given sequence to camelCase format by capitalizing the first letter of each word after the first word, removing any underscores in between words, and outputting the result as a list.\nExample: Input: ['student_id', 'student_name', 'major_subject', 'enrollment_year']; output: ['studentId', 'studentName', 'majorSubject', 'enrollmentYear']"}
{"id": "187-8", "oq_id": 187, "desc": "Input: a list of string values containing snake_case words.\nOutput: a list of string values containing camelCase words.\nFunctionality: The transformation converts each element from snake_case to camelCase in the given sequence, and output the result as a list.\nExample: Input: ['transaction_id', 'transaction_date', 'payment_amount', 'is_approved']; output: ['transactionId', 'transactionDate', 'paymentAmount', 'isApproved']"}
{"id": "187-9", "oq_id": 187, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation capitalizes the first letter of each word in the given sequence and removes underscores, outputting the result as a list of camel case strings.\nExample: Input: ['account_id', 'account_type', 'balance_amount', 'is_active']; output: ['accountId', 'accountType', 'balanceAmount', 'isActive']"}
{"id": "188-8", "oq_id": 188, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation pads each element in the given sequence with spaces on the left side, and outputs the result as a list.\nExample: Input: ['123', '456', '789', '000']; output: ['  123', '  456', '  789', '  000']"}
{"id": "188-9", "oq_id": 188, "desc": "Input: a list of string values. \nOutput: a list of string values. \nFunctionality: The transformation adds a space at the beginning of each element in the given sequence. \nExample: Input: ['test', 'sequence', 'function']; output: [' test', 'sequence', 'function']"}
{"id": "188-7", "oq_id": 188, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation pads each element in the given sequence with spaces on the left side, and outputs the result as a list.\nExample: Input: ['aaa', 'bbb', 'ccc', 'ddd']; output: ['  aaa', '  bbb', '  ccc', '  ddd']"}
{"id": "188-6", "oq_id": 188, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation pads each element in the given sequence with four spaces on the left, and output the result as a list.\nExample: Input: ['x', 'y', 'z']; output: ['    x', '    y', '    z']"}
{"id": "188-4", "oq_id": 188, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation does not change the input sequence; it simply outputs the input sequence as is.\nExample: Input: ['apple', 'banana', 'cherry']; output: ['apple', 'banana', 'cherry']"}
{"id": "188-5", "oq_id": 188, "desc": "Input: a list of string values\nOutput: a list of string values\nFunctionality: The transformation creates an exact copy of the input list.\nExample: Input: ['hello', 'world', 'python']; output: ['hello', 'world', 'python']"}
{"id": "188-1", "oq_id": 188, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation pads each element in the given sequence with spaces on the left side, and outputs the resulting list.\nExample: Input: ['12345', '67890', 'qwerty', 'uiop']; output: ['12345', '67890', 'qwerty', ' uiop']"}
{"id": "188-0", "oq_id": 188, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation pads each element in the given sequence with spaces on the left side, and outputs the result as a list.\nExample: Input: ['abc', 'def', 'ghi', 'jkl']; output: ['  abc', '  def', '  ghi', '  jkl']"}
{"id": "188-2", "oq_id": 188, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds two spaces at the beginning of each element in the given sequence and outputs the result as a list.\nExample: Input: ['aaa', 'bbb', 'ccc', 'ddd', 'eee']; output: ['  aaa', '  bbb', '  ccc', '  ddd', '  eee']"}
{"id": "188-3", "oq_id": 188, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation pads each element in the given sequence with spaces to the left to ensure they have a consistent length, and output the result as a list.\nExample: Input: ['1', '22', '333', '4444', '55555']; output: ['    1', '   22', '  333', ' 4444', '55555']"}
{"id": "189-8", "oq_id": 189, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element in the given sequence to all uppercase letters.\nExample: Input: ['January', 'February', 'March', 'April', 'May']; output: ['JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY']"}
{"id": "189-9", "oq_id": 189, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each string element in the input sequence to uppercase.\nExample: Input: ['red', 'green', 'blue', 'yellow']; output: ['RED', 'GREEN', 'BLUE', 'YELLOW']"}
{"id": "189-4", "oq_id": 189, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation does not change the elements of the given sequence, outputting the sequence as it is.\nExample: Input: ['123', '456', '789', '0']; output: ['123', '456', '789', '0']"}
{"id": "189-5", "oq_id": 189, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element from the given sequence to uppercase.\nExample: Input: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']; output: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY']"}
{"id": "189-7", "oq_id": 189, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation changes the case of each element in the input sequence to all uppercase, and outputs the result as a list.\nExample: Input: ['cat', 'dog', 'fish', 'bird']; output: ['CAT', 'DOG', 'FISH', 'BIRD']"}
{"id": "189-6", "oq_id": 189, "desc": "Input: a list of string values, representing days of the week in the format 'Sun', 'Mon', 'Tue', etc.\nOutput: a list of string values, representing days of the week in uppercase format 'SUN', 'MON', 'TUE', etc.\nFunctionality: The transformation converts each day of the week to uppercase letters.\nExample: Input: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']; output: ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']"}
{"id": "189-2", "oq_id": 189, "desc": "Input: a list of string values, with text phrases in each element.\nOutput: a list of string values.\nFunctionality: The transformation converts each text phrase in the given sequence to uppercase and outputs the result as a list.\nExample: Input: ['Lorem ipsum dolor sit amet', 'consectetur adipiscing elit', 'sed do eiusmod tempor']; output: ['LOREM IPSUM DOLOR SIT AMET', 'CONSECTETUR ADIPISCING ELIT', 'SED DO EIUSMOD TEMPOR']"}
{"id": "189-3", "oq_id": 189, "desc": "Input: a list of string values.\nOutput: a list of string values (all uppercase).\nFunctionality: The transformation converts each element from the given sequence to uppercase and outputs the result as a list.\nExample: Input: ['alpha', 'bravo', 'charlie', 'delta', 'echo']; output: ['ALPHA', 'BRAVO', 'CHARLIE', 'DELTA', 'ECHO']"}
{"id": "189-1", "oq_id": 189, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element from the given sequence to uppercase.\nExample: Input: ['apple', 'banana', 'cherry', 'date']; output: ['APPLE', 'BANANA', 'CHERRY', 'DATE']"}
{"id": "189-0", "oq_id": 189, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each string element to uppercase in the given sequence.\nExample: Input: ['Hello', 'world', 'Python is fun']; output: ['HELLO', 'WORLD', 'PYTHON IS FUN']"}
{"id": "190-9", "oq_id": 190, "desc": "Input: a list of string values, representing decimal numbers.\nOutput: a list of string values, representing decimal numbers.\n\nFunctionality: The transformation leaves the values in the given sequence unchanged and outputs them as a list.\n\nExample: Input: ['0.1', '0.2', '0.3', '0.4', '0.5']; output: ['0.1', '0.2', '0.3', '0.4', '0.5']"}
{"id": "190-8", "oq_id": 190, "desc": "Input: a list of string values, representing decimal numbers.\nOutput: a list of string values, representing scientific notation numbers.\nFunctionality: The transformation converts each decimal number in the given sequence to scientific notation format.\nExample: Input: ['0.001', '0.002', '0.003', '0.004', '0.005']; output: ['1.00E-3', '2.00E-3', '3.00E-3', '4.00E-3', '5.00E-3']"}
{"id": "190-5", "oq_id": 190, "desc": "Input: a list of string values, with numerical values in decimal format in each element.\nOutput: a list of string values with numerical values truncated to two decimal places.\nFunctionality: The transformation truncates each numerical value in the input sequence to two decimal places and outputs the result as a list of strings.\nExample: Input: ['12.345', '23.456', '34.567', '45.678', '56.789']; output: ['12.34', '23.45', '34.56', '45.67', '56.78']"}
{"id": "190-4", "oq_id": 190, "desc": "Input: a list of string values, representing decimal numbers.\nOutput: a list of string values, representing decimal numbers.\nFunctionality: The transformation leaves the values in the given sequence unchanged and outputs them as a list.\nExample: Input: ['0.1', '0.2', '0.3', '0.4', '0.5']; output: ['0.1', '0.2', '0.3', '0.4', '0.5']"}
{"id": "190-6", "oq_id": 190, "desc": "Input: a list of string values representing decimal numbers.\nOutput: a list of string values representing decimal numbers.\nFunctionality: The transformation adds a \"0\" before the decimal point for each element in the given sequence.\nExample: Input: ['.01', '.02', '.03', '.04', '.05']; output: ['0.01', '0.02', '0.03', '0.04', '0.05']"}
{"id": "190-7", "oq_id": 190, "desc": "Input: a list of string values, with numerical values in decimal format.\nOutput: a list of string values, with numerical values potentially in scientific notation.\nFunctionality: The transformation converts each element from the given sequence to scientific notation if it has more than 4 digits after the decimal point, and outputs the result as a list.\nExample: Input: ['.1', '1.2', '12.3', '123.4', '1234.5']; output: ['0.1', '1.2', '12.3', '123.4', '1.23E3']"}
{"id": "190-3", "oq_id": 190, "desc": "Input: a list of string values, representing numerical values in decimal format.\nOutput: a list of string values, representing numerical values in scientific notation format.\nFunctionality: The transformation converts each numerical value in the given sequence from decimal format to scientific notation and output the result as a list of strings.\nExample: Input: ['0.001', '0.002', '0.003', '0.004', '0.005']; output: ['1.00E-3', '2.00E-3', '3.00E-3', '4.00E-3', '5.00E-3']"}
{"id": "190-2", "oq_id": 190, "desc": "Input: a list of string values, representing decimal numerical values.\nOutput: a list of string values, representing decimal or scientific notation numerical values.\nFunctionality: The transformation formats each element in the given sequence to a specific decimal or scientific notation format.\nExample: Input: ['0.01', '2.345', '67.89', '1000.0', '0.001']; output: ['0.01', '2.34', '67.89', '1.00E3', '1.00E-3']"}
{"id": "190-0", "oq_id": 190, "desc": "Input: a list of string values, with numerical values in decimal or scientific notation format.\nOutput: a list of string values, with numerical values in scientific notation format where appropriate.\nFunctionality: The transformation converts numerical values from decimal notation to scientific notation if needed in the given sequence, and output the result as a new list.\nExample: Input: ['0.005', '1.23', '45.6', '789.0', '1234']; output: ['5.00E-3', '1.23', '45.6', '789', '1.23E3']"}
{"id": "190-1", "oq_id": 190, "desc": "Input: a list of string values, representing numerical values in various formats.\nOutput: a list of string values, representing numerical values in scientific notation format.\nFunctionality: The transformation converts each element from the input sequence to scientific notation format in the output list.\nExample: Input: ['.002', '3.456', '123.45', '6789.0', '0.1']; output: ['2.00E-3', '3.45', '123.45', '6.79E3', '0.1']"}
{"id": "191-9", "oq_id": 191, "desc": "Input: a list of string values representing weights in kilograms.\nOutput: a list of string values representing weights in pounds.\nFunctionality: The transformation converts each weight from kilograms to pounds, keeping one digit after the decimal and rounding up if necessary, and outputs the result as a list.\nExample: Input: ['4.32', '8.64', '12.96', '17.28', '21.6', '25.92', '30.24', '34.56', '38.88', '43.2', '47.52', '51.84']; output: ['9.5', '19.0', '28.6', '38.1', '47.6', '57.1', '66.7', '76.2', '85.7', '95.2', '104.8', '114.3']"}
{"id": "191-8", "oq_id": 191, "desc": "Input: a list of string values representing numerical values.\nOutput: a list of string values representing numerical values.\nFunctionality: The transformation converts each string element to a float, rounds it to one decimal place, and then converts it back to a string in the output list.\nExample: Input: ['0.9', '1.8', '2.7', '3.6', '4.5', '5.4', '6.3', '7.2', '8.1', '9', '9.9', '10.8']; output: ['2.0', '4.0', '6.0', '7.9', '9.9', '11.9', '13.9', '15.9', '17.9', '19.8', '21.8', '23.8']"}
{"id": "191-6", "oq_id": 191, "desc": "Input: a list of string values representing decimal numbers.\nOutput: a list of string values representing decimal numbers.\nFunctionality: The transformation converts each decimal number from the given sequence to the nearest whole number (rounding to nearest whole number) and outputs the result as a list of strings.\nExample: Input: ['0.75', '1.5', '2.25', '3', '3.75', '4.5', '5.25', '6', '6.75', '7.5', '8.25', '9']; output: ['1', '2', '2', '3', '4', '5', '5', '6', '7', '8', '8', '9']"}
{"id": "191-7", "oq_id": 191, "desc": "Input: a list of string values, with decimal numerical values in each element.\nOutput: a list of numerical values (rounding to the nearest integer).\nFunctionality: The transformation converts each decimal string in the given sequence to a floating-point number, multiplies by 2, and rounds the result to the nearest integer for the output list.\nExample: Input: ['7.8', '15.6', '23.4', '31.2', '39', '46.8', '54.6', '62.4', '70.2', '78', '85.8', '93.6']; output: ['16', '31', '52', '69', '78', '104', '121', '138', '155', '172', '190', '206']"}
{"id": "191-5", "oq_id": 191, "desc": "Input: a list of string values, with numerical values in each element. \nOutput: a list of numerical values.\nFunctionality: The transformation converts each string element to a floating-point number, rounds it to one decimal place, and multiplies by 2.2 to get the final result in the list.\nExample: Input: ['1.23', '2.46', '3.69', '4.92', '6.15', '7.38', '8.61', '9.84', '11.07', '12.3', '13.53', '14.76']; output: ['2.7', '5.4', '8.1', '10.8', '13.6', '16.3', '19.0', '21.7', '24.4', '27.1', '29.8', '32.5']"}
{"id": "191-4", "oq_id": 191, "desc": "Input: a list of string values, each representing a numerical value with no units.\nOutput: a list of numerical values with one digit after the decimal point.\nFunctionality: The transformation converts each numerical string from the input sequence to a float, divides the result by 4.8, rounds to one decimal place, and outputs the result as a list of strings.\nExample: Input: ['15', '30', '45', '60', '75', '90', '105', '120', '135', '150', '165', '180']; output: ['3.1', '6.1', '9.2', '12.3', '15.6', '19.7', '24.0', '27.6', '31.0', '34.5', '38.3', '41.6']"}
{"id": "191-0", "oq_id": 191, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values representing numerical values with one digit after the decimal.\nFunctionality: The transformation converts each numerical value from the input sequence to a floating point number, then rounds it to one digit after the decimal, and outputs the result as a string in the result list.\nExample: Input: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']; output: ['0.0', '2.2', '4.4', '6.6', '8.8', '11.0', '13.2', '15.4', '17.6', '19.8', '22.0', '24.3']"}
{"id": "191-1", "oq_id": 191, "desc": "Input: a list of string values representing floating point numbers.\nOutput: a list of strings representing floating point numbers.\n\nFunctionality: The transformation converts each element in the given sequence from string to float, then multiplies each element by 2.2, rounds to one decimal place, and formats the result as a string in the output list.\n\nExample: Input: ['0.5', '1.5', '2.5', '3.5', '4.5', '5.5', '6.5', '7.5', '8.5', '9.5', '10.5', '11.5']; output: ['1.1', '3.3', '5.5', '7.7', '9.9', '12.1', '14.3', '16.5', '18.7', '20.9', '23.1', '25.4']"}
{"id": "191-3", "oq_id": 191, "desc": "Input: a list of string values representing numerical values.\nOutput: a list of string values representing numerical values.\n\nFunctionality: The transformation rounds each element in the given sequence to one decimal place, converts it to a float, and then converts it back to a string before adding it to the output list.\nExample: Input: ['0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1', '1.1', '1.2']; output: ['0.2', '0.4', '0.7', '0.9', '1.1', '1.3', '1.5', '1.8', '2.0', '2.2', '2.4', '2.6']"}
{"id": "191-2", "oq_id": 191, "desc": "Input: a list of string values, representing decimal numbers.\nOutput: a list of numerical values, rounded to one decimal place.\nFunctionality: The transformation converts each string element to a floating-point number, rounds it to one decimal place, and outputs the result as a list.\nExample: Input: ['2.3', '4.6', '6.9', '9.2', '11.5', '13.8', '16.1', '18.4', '20.7', '23', '25.3', '27.6']; output: [5.1, 10.1, 15.2, 20.3, 25.4, 30.4, 35.5, 40.6, 45.6, 50.7, 55.8, 60.8]"}
{"id": "192-8", "oq_id": 192, "desc": "Input: a list of string values, with numerical and non-numerical characters in each element.\nOutput: a list of string values, with formatted numerical values separated by commas.\nFunctionality: The transformation formats each numerical value in the given sequence by adding commas as thousand separators.\nExample: Input: ['123456789', '5432', '8765.432\\t1,234.567', '135797531', '2468']; output: ['123,456,789', '5,432', '', '135,797,531', '2,468']"}
{"id": "192-9", "oq_id": 192, "desc": "Input: a list of string values, with numerical and non-numerical characters in each element.\nOutput: a list of string values, with formatted numerical values separated by commas.\nFunctionality: The transformation formats each numerical value in the given sequence by adding commas as thousand separators.\nExample: Input: ['987654321', '7654', '7654.321\\t7,654.321', '246813579', '13579']; output: ['987,654,321', '7,654', '', '246,813,579', '13,579']"}
{"id": "192-7", "oq_id": 192, "desc": "Input: a list of string values, with numerical values in various formats within each element.\nOutput: a list of string values with numerical values formatted with commas.\nFunctionality: The transformation adds commas to separate every three digits in each numerical value in the given sequence.\nExample: Input: ['8888888888', '4444', '6666.666\\t4,444.444', '555555555', '2222']; output: ['8,888,888,888', '4,444', '', '555,555,555', '2,222']"}
{"id": "192-6", "oq_id": 192, "desc": "Input: a list of string values, with numerical values in various formats within each element.\nOutput: a list of string values with numeric values formatted with commas.\nFunctionality: The transformation formats each numeric value in the given sequence with commas, and output the result as a list of strings.\nExample: Input: ['7777777777', '9999', '7777.777\\t6,666.666', '666666666', '3333']; output: ['7,777,777,777', '9,999', '', '666,666,666', '3,333']"}
{"id": "192-4", "oq_id": 192, "desc": "Input: a list of string values, with numerical values in various formats within each element.\nOutput: a list of string values with numerical values formatted with commas.\nFunctionality: The transformation adds commas to separate every three digits in each numerical value in the given sequence.\nExample: Input: ['5555555555', '3333', '2222.222\\t1,111.111', '888888888', '6666']; output: ['5,555,555,555', '3,333', '', '888,888,888', '6,666']"}
{"id": "192-5", "oq_id": 192, "desc": "Input: a list of string values, with numerical values in various formats within each element.\nOutput: a list of string values with numerical values formatted with commas.\nFunctionality: The transformation adds commas to separate thousands in each numerical value within the given sequence and outputs the result as a list.\nExample: Input: ['6666666666', '1111', '9999.999\\t8,888.888', '777777777', '4444']; output: ['6,666,666,666', '1,111', '', '777,777,777', '4,444']"}
{"id": "192-1", "oq_id": 192, "desc": "Input: a list of string values, with various numerical formats in each element.\nOutput: a list of string values representing numerical values with comma-separated thousands.\nFunctionality: The transformation extracts and formats each number in the given sequence with comma-separated thousands in the result list.\nExample: Input: ['1111111111', '2222', '3333.333\\t3,333.333', '444444444', '5555']; output: ['1,111,111,111', '2,222', '', '444,444,444', '5,555']"}
{"id": "192-0", "oq_id": 192, "desc": "Input: a list of string values, with numerical values in various formats within each element.\nOutput: a list of string values with numerical values formatted with commas.\nFunctionality: The transformation formats each numerical value in the given sequence with commas, and output the result as a list of strings.\nExample: Input: ['9876543210', '5678', '4321.321\\t4,321.321', '987654321', '5678']; output: ['9,876,543,210', '5,678', '', '987,654,321', '5,678']"}
{"id": "192-2", "oq_id": 192, "desc": "Input: a list of string values, with numerical values in various formats within each element.\nOutput: a list of string values with numerical values formatted with commas.\nFunctionality: The transformation formats each numerical value in the given sequence with commas, and output the result as a list of strings.\nExample: Input: ['9999999999', '8888', '7777.777\\t7,777.777', '666666666', '5555']; output: ['9,999,999,999', '8,888', '', '666,666,666', '5,555']"}
{"id": "192-3", "oq_id": 192, "desc": "Input: a list of string values, with numerical values in various formats within each element.\nOutput: a list of string values with numeric values formatted with commas.\nFunctionality: The transformation formats each numeric value in the given sequence with commas, and output the result as a list of strings.\nExample: Input: ['4444444444', '6666', '7777.777\\t9,999.999', '888888888', '9999']; output: ['4,444,444,444', '6,666', '', '888,888,888', '9,999']"}
{"id": "193-8", "oq_id": 193, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of formatted numerical values with K.\nFunctionality: The transformation converts the numerical values in each element into thousands (K) format in the result list.\nExample: Input: ['9876', '5432', '109876', '321098', '765432', '543210', '678909', '876543', '987654', '123456']; output: ['9K', '5K', '109K', '321K', '765K', '543K', '678K', '876K', '987K', '123K']"}
{"id": "193-9", "oq_id": 193, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values formatted as numbers with K, M, or B suffix.\nFunctionality: The transformation formats each numerical value in the given sequence based on its magnitude, using K for thousands, M for millions, and B for billions.\nExample: Input: ['777', '8888', '99999', '1111111', '22222222', '333333333', '4444444444', '55555555555', '666666666666', '1234567890']; output: ['0K', '8K', '99K', '1M', '22M', '333M', '4B', '55B', '666B', '1B']"}
{"id": "193-4", "oq_id": 193, "desc": "Input: a list of strings with numerical values.\nOutput: a list of strings with numerically formatted values (K, M, B).\nFunctionality: The transformation formats each numerical value in the given sequence to include K, M, or B based on the magnitude of the number, and output the result as a list of strings.\nExample: Input: ['999', '8888', '77777', '666666', '5555555', '44444444', '333333333', '2222222222', '11111111111', '101010101010']; output: ['0K', '8K', '77K', '666K', '5M', '44M', '333M', '2B', '11B', '101B']"}
{"id": "193-5", "oq_id": 193, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of formatted numerical values with K.\nFunctionality: The transformation formats each numerical value in the given sequence by adding 'K' at the end, and output the result as a list.\nExample: Input: ['54321', '12345', '98765', '67890', '87654', '54321', '32109', '98765', '54321', '87654']; output: ['54K', '12K', '98K', '67K', '87K', '54K', '32K', '98K', '54K', '87K']"}
{"id": "193-7", "oq_id": 193, "desc": "Input: a list of string values, representing numerical values.\nOutput: a list of string values, representing formatted numerical values.\nFunctionality: The transformation formats each numerical value in the given sequence with appropriate K, M, or B suffix based on magnitude, and output the result as a list.\nExample: Input: ['7890', '12345', '67890', '543210', '987654', '3210987', '7654321', '12345678', '87654321', '9876543210']; output: ['7K', '12K', '67K', '543K', '987K', '3M', '7M', '12M', '87M', '9B']"}
{"id": "193-6", "oq_id": 193, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values with number formatting.\nFunctionality: The transformation formats each number in the given sequence with K (thousands) notation in the result list.\nExample: Input: ['1111', '2222', '3333', '4444', '5555', '6666', '7777', '8888', '9999', '1010']; output: ['1K', '2K', '3K', '4K', '5K', '6K', '7K', '8K', '9K', '1K']"}
{"id": "193-2", "oq_id": 193, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of formatted numerical values with K.\nFunctionality: The transformation formats each numerical value in the given sequence by adding 'K' at the end, and output the result as a list.\nExample: Input: ['11111', '22222', '33333', '44444', '55555', '66666', '77777', '88888', '99999', '101010']; output: ['11K', '22K', '33K', '44K', '55K', '66K', '77K', '88K', '99K', '101K']"}
{"id": "193-3", "oq_id": 193, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of formatted numerical values with K.\nFunctionality: The transformation formats each numerical value in the given sequence to include 'K' at the end, representing thousands.\nExample: Input: ['1234', '5678', '91011', '121314', '151617', '181920', '212223', '242526', '272829', '303132']; output: ['1K', '5K', '91K', '121K', '151K', '181K', '212K', '242K', '272K', '303K']"}
{"id": "193-1", "oq_id": 193, "desc": "Input: a list of string values, where each element represents a numerical value.\nOutput: a list of string values, formatted as numbers with K, M, B notations.\nFunctionality: The transformation converts each numerical value from the given sequence to a shortened notation with K, M, B for thousands, millions, and billions respectively, and outputs the result as a list.\nExample: Input: ['5000', '60000', '700000', '8000000', '90000000', '1000000000', '2000', '30000', '400000', '5000000']; output: ['5K', '60K', '700K', '8M', '90M', '1B', '2K', '30K', '400K', '5M']"}
{"id": "193-0", "oq_id": 193, "desc": "Input: a list of strings with numerical values.\nOutput: a list of strings representing the numerical values formatted in K, M, B.\nFunctionality: The transformation converts the numerical values in each element from the given sequence to a formatted string representing thousands (K), millions (M), or billions (B) and outputs the result as a list.\nExample: Input: ['12345', '67890', '543210', '987654', '3210987', '7654321', '12345678', '87654321', '987654321', '1234567890']; output: ['12K', '67K', '543K', '987K', '3M', '7M', '12M', '87M', '987M', '1B']"}
{"id": "194-8", "oq_id": 194, "desc": "Input: a list of string values, with numerical values in different formats.\nOutput: a list of string values in a specific number format.\nFunctionality: The transformation formats each numerical value in the input sequence to have commas before decimals and two digits after.\nExample: Input: ['888888', '99999.99', '111.111', '222.222']; output: ['888,888.00', '99,999.99', '111.11', '222.22']"}
{"id": "194-9", "oq_id": 194, "desc": "Input: a list of string values with numerical formats.\nOutput: a list of string values with numerical formats.\nFunctionality: The transformation formats each element in the given sequence to have commas separating thousands and two decimal places, resulting in the desired output list.\nExample: Input: ['444444', '33333.33', '22222.22', '11111.11']; output: ['444,444.00', '33,333.33', '22,222.22', '11,111.11']"}
{"id": "194-1", "oq_id": 194, "desc": "Input: a list of string values with numerical values in various formats.\nOutput: a list of strings representing numbers in a specific format.\nFunctionality: The transformation formats each numerical value in the given sequence with commas and two decimal places, and output the result as a list of strings.\nExample: Input: ['111111', '22222.22', '33333.33', '44444.44']; output: ['111,111.00', '22,222.22', '33,333.33', '44,444.44']"}
{"id": "194-0", "oq_id": 194, "desc": "Input: a list of string values with numerical values in different formats.\nOutput: a list of string values representing numerical values with comma formatting and two digits after the decimal point.\nFunctionality: The transformation formats each element in the given sequence by adding commas for thousands separation and rounding to two decimal places, then outputs the result as a list.\nExample: Input: ['765432', '98765.43', '98765.456', '98765.462']; output: ['765,432.00', '98,765.43', '98,765.45', '98,765.46']"}
{"id": "194-2", "oq_id": 194, "desc": "Input: a list of string values, with numerical values represented as strings.\nOutput: a list of string values representing numerical values with comma-separated thousands and two decimal places.\nFunctionality: The transformation converts each element in the given sequence to a numerical value, formats it with comma-separated thousands and two decimal places, and output the result as a list of strings.\nExample: Input: ['999999', '88888.88', '77777.77', '66666.66']; output: ['999,999.00', '88,888.88', '77,777.77', '66,666.66']"}
{"id": "194-3", "oq_id": 194, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values in a specific number format.\nFunctionality: The transformation formats each numerical value in the given sequence with commas for thousands and two decimal places, and output the result as a list of formatted strings.\nExample: Input: ['555555', '44444.44', '3333.33', '222.22']; output: ['555,555.00', '44,444.44', '3,333.33', '222.22']"}
{"id": "194-7", "oq_id": 194, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values in a specific number format.\nFunctionality: The transformation formats each numerical value in the given sequence with commas for thousands and two decimal places, and output the result as a list of formatted strings.\nExample: Input: ['777777', '66666.66', '5555.55', '444.44']; output: ['777,777.00', '66,666.66', '5,555.55', '444.44']"}
{"id": "194-6", "oq_id": 194, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values in a specific number format.\nFunctionality: The transformation formats each numerical value in the given sequence with commas for thousands and two decimal places, and output the result as a list of formatted strings.\nExample: Input: ['222222', '33333.33', '4444.44', '555.55']; output: ['222,222.00', '33,333.33', '4,444.43', '555.54']"}
{"id": "194-4", "oq_id": 194, "desc": "Input: a list of string values with numerical content.\nOutput: a list of string values with numerical content formatted with commas and two decimal places.\nFunctionality: The transformation formats each numerical value in the given sequence with commas and two decimal places and outputs the result as a list.\nExample: Input: ['123456', '4567.89', '4545.45', '1212.12']; output: ['123,456.00', '4,567.89', '4,545.45', '1,212.12']"}
{"id": "194-5", "oq_id": 194, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of string values in a specific number format.\nFunctionality: The transformation formats each numerical value in the given sequence with commas for thousands and rounded to two decimal places, and output the result as a list.\nExample: Input: ['987654', '76543.21', '54321.123', '321.012']; output: ['987,654.00', '76,543.21', '54,321.12', '321.01']"}
{"id": "195-8", "oq_id": 195, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation pads numbers with leading zeros if the number is a single digit in each element of the given sequence, and output the modified strings in the result list.\nExample: Input: ['14', '9', '22', '33', '46']; output: ['14', '09', '22', '33', '46']"}
{"id": "195-9", "oq_id": 195, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation pads numbers with leading zeros if they are not already two digits long in each element from the given sequence, and output the result as a list.\nExample: Input: ['7', '15', '29', '30', '49']; output: ['07', '15', '29', '30', '49']"}
{"id": "195-2", "oq_id": 195, "desc": "Input: a list of string values, containing numerical values.\nOutput: a list of string values, with numbers padded to two digits.\nFunctionality: The transformation pads numbers in each element from the given sequence to two digits by adding a leading zero if necessary, and outputs the result as a list.\nExample: Input: ['22', '33', '14', '7', '9']; output: ['22', '33', '14', '07', '09']"}
{"id": "195-3", "oq_id": 195, "desc": "Input: a list of string values, representing numbers.\nOutput: a list of string values, representing numbers with padded zeros.\nFunctionality: The transformation pads zeros to the left of each number in the given sequence, if the number is less than 10, and outputs the result as a list.\nExample: Input: ['8', '9', '6', '13', '24']; output: ['08', '09', '06', '13', '24']"}
{"id": "195-1", "oq_id": 195, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation pads numbers in each element from the given sequence with a leading zero if it's a single-digit number, and output the result as a list.\nExample: Input: ['9', '8', '17', '11', '4']; output: ['09', '08', '17', '11', '04']"}
{"id": "195-0", "oq_id": 195, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation pads the numbers in each element with zeros to have a length of 2 digits, and outputs the result as a list of strings.\nExample: Input: ['4', '6', '7', '10', '15']; output: ['04', '06', '07', '10', '15']"}
{"id": "195-4", "oq_id": 195, "desc": "Input: a list of string values representing numbers.\nOutput: a list of string values representing numbers with padded zeros.\nFunctionality: The transformation pads zeros to the left of each element in the given sequence to make them two digits long, and outputs the result as a list of strings.\nExample: Input: ['5', '16', '23', '12', '8']; output: ['05', '16', '23', '12', '08']"}
{"id": "195-5", "oq_id": 195, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation does not alter the elements, it simply passes the input list as the output list.\nExample: Input: ['19', '28', '35', '47', '36']; output: ['19', '28', '35', '47', '36']"}
{"id": "195-7", "oq_id": 195, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation pads the numbers in each element with zeros to have a length of 2 digits, and outputs the result as a list of strings.\nExample: Input: ['3', '8', '11', '19', '27']; output: ['03', '08', '11', '19', '27']"}
{"id": "195-6", "oq_id": 195, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation does not alter the elements, so it passes the input list directly as the output list.\nExample: Input: ['17', '26', '13', '21', '40']; output: ['17', '26', '13', '21', '40']"}
{"id": "196-9", "oq_id": 196, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts number from each element in the given sequence, and format each number as a string in the result list.\nExample: Input: ['0 x', '4 y', '8 z']; output: ['0', '4', '8']"}
{"id": "196-8", "oq_id": 196, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation creates an exact copy of the given input sequence.\nExample: Input: ['1', '2', '3', '4', '5']; output: ['1', '2', '3', '4', '5']"}
{"id": "196-3", "oq_id": 196, "desc": "Input: a list of string values, with numerical values followed by alphabetic characters in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the numerical value from each element in the given sequence, and outputs them as a list of numerical values.\nExample: Input: ['3 abc', '6 def', '9 ghi']; output: ['3', '6', '9']"}
{"id": "196-2", "oq_id": 196, "desc": "Input: a list of string values, each containing a sequence of numbers separated by space.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the first number from each element in the given sequence, and outputs a list of these extracted numbers as strings.\nExample: Input: ['1 2 3', '4 5 6', '7 8 9']; output: ['1', '4', '7']"}
{"id": "196-0", "oq_id": 196, "desc": "Input: a list of string values with alphanumeric characters in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the numerical part from each element in the given sequence, and outputs them as a list of numerical values.\nExample: Input: ['3a', '7b', '2c', '1d']; output: ['3', '7', '2', '1']"}
{"id": "196-1", "oq_id": 196, "desc": "Input: a list of string values\nOutput: a list of string values\nFunctionality: The transformation keeps the elements in the given sequence as they are, outputting an exact copy.\nExample: Input: ['123', '456', '789']; output: ['123', '456', '789']"}
{"id": "196-5", "oq_id": 196, "desc": "Input: a list of string values, with numerical values in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts numbers from each element in the given sequence, removes any non-numeric characters, and outputs the numbers as strings in the result list.\nExample: Input: ['3', '7 s', '1 a']; output: ['3', '7', '1']"}
{"id": "196-4", "oq_id": 196, "desc": "Input: a list of string values, with a single letter following each number.\nOutput: a list of string values, with only the number part extracted.\nFunctionality: The transformation removes the letter following each number in the given sequence and outputs the result as a list.\nExample: Input: ['1a', '2b', '3c']; output: ['1', '2', '3']"}
{"id": "196-6", "oq_id": 196, "desc": "Input: a list of string values with multiple numerical values separated by spaces.\nOutput: a list of string values containing the first number from each element in the input list.\nFunctionality: The transformation extracts the first number from each element in the given sequence, and outputs it as a string in the result list.\nExample: Input: ['1 2 3 4 5', '6 7 8 9 10']; output: ['1', '6']"}
{"id": "196-7", "oq_id": 196, "desc": "Input: a list of string values with alphanumeric characters and special characters.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts numbers from each element in the given sequence by removing non-numeric characters, and formats each number as a string in the result list.\nExample: Input: ['2 3!@#', '6 $%^', '1 &*(']; Output: ['2', '6', '1']"}
{"id": "197-9", "oq_id": 197, "desc": "Input: a list of string values, each representing a date in a specific format.\nOutput: a list of string values.\nFunctionality: The transformation extracts the month from each date in the given sequence and outputs the month as a string in the result list.\nExample: Input: ['Thursday, 10th February, 1994', 'Saturday, 2nd July, 1988', 'Wednesday, 29th December, 2010', 'Monday, 14th April, 1997', 'Friday, 11th January, 2008']; output: ['February', 'July', 'December', 'April', 'January']"}
{"id": "197-8", "oq_id": 197, "desc": "Input: a list of string values, each representing a date in a specific format.\nOutput: a list of string values.\nFunctionality: The transformation extracts the month from each date in the given sequence and outputs the month as a string in the result list.\nExample: Input: ['Saturday, 12th November, 1983', 'Monday, 27th May, 1985', 'Thursday, 15th October, 1970', 'Tuesday, 9th April, 1996', 'Friday, 20th March, 2009']; output: ['November', 'May', 'October', 'April', 'March']"}
{"id": "197-0", "oq_id": 197, "desc": "Input: a list of string values, each representing a date in a specific format.\nOutput: a list of string values.\nFunctionality: The transformation extracts the month from each date in the given sequence and outputs the month as a string in the result list.\nExample: Input: ['Saturday, 8th December, 2007', 'Tuesday, 15th October, 1996', 'Thursday, 21st June, 1984', 'Sunday, 25th April, 2010', 'Wednesday, 12th September, 1973']; output: ['December', 'October', 'June', 'April', 'September']"}
{"id": "197-1", "oq_id": 197, "desc": "Input: a list of string values, each representing a date in a specific format.\nOutput: a list of string values.\nFunctionality: The transformation extracts the month from each date in the given sequence and outputs the month as a string in the result list.\nExample: Input: ['Friday, 7th November, 2025', 'Monday, 4th February, 1963', 'Tuesday, 19th July, 1988', 'Thursday, 10th December, 1978', 'Wednesday, 5th May, 1999']; output: ['November', 'February', 'July', 'December', 'May']"}
{"id": "197-3", "oq_id": 197, "desc": "Input: a list of string values, each representing a date in a specific format.\nOutput: a list of string values.\nFunctionality: The transformation extracts the month from each date in the given sequence and outputs the month as a string in the result list.\nExample: Input: ['Sunday, 11th June, 1989', 'Tuesday, 9th September, 2003', 'Wednesday, 8th February, 1978', 'Friday, 12th October, 1990', 'Monday, 15th March, 1971']; output: ['June', 'September', 'February', 'October', 'March']"}
{"id": "197-2", "oq_id": 197, "desc": "Input: a list of string values, each representing a date in a specific format.\nOutput: a list of string values.\nFunctionality: The transformation extracts the month from each date in the given sequence and outputs the month as a string in the result list.\nExample: Input: ['Saturday, 6th March, 1976', 'Monday, 28th August, 2000', 'Tuesday, 23rd January, 1990', 'Thursday, 17th May, 1984', 'Friday, 14th April, 1995']; output: ['March', 'August', 'January', 'May', 'April']"}
{"id": "197-6", "oq_id": 197, "desc": "Input: a list of string values, each representing a date in a specific format.\nOutput: a list of string values.\nFunctionality: The transformation extracts the month from each date in the given sequence and outputs the month as a string in the result list.\nExample: Input: ['Wednesday, 2nd March, 1977', 'Saturday, 5th August, 1995', 'Sunday, 16th December, 1984', 'Thursday, 11th October, 2001', 'Monday, 24th February, 1969']; output: ['March', 'August', 'December', 'October', 'February']"}
{"id": "197-7", "oq_id": 197, "desc": "Input: a list of string values, each representing a date in a specific format.\nOutput: a list of string values.\nFunctionality: The transformation extracts the month from each date in the given sequence and outputs the month as a string in the result list.\nExample: Input: ['Tuesday, 18th July, 1972', 'Thursday, 13th May, 2019', 'Wednesday, 7th September, 1994', 'Sunday, 31st March, 2002', 'Monday, 24th June, 1985']; output: ['July', 'May', 'September', 'March', 'June']"}
{"id": "197-5", "oq_id": 197, "desc": "Input: a list of string values, each representing a date in a specific format.\nOutput: a list of string values.\nFunctionality: The transformation extracts the month from each date in the given sequence and outputs the month as a string in the result list.\nExample: Input: ['Friday, 30th June, 1987', 'Monday, 17th September, 1990', 'Tuesday, 20th February, 2007', 'Thursday, 22nd August, 1985', 'Sunday, 13th January, 2002']; output: ['June', 'September', 'February', 'August', 'January']"}
{"id": "197-4", "oq_id": 197, "desc": "Input: a list of string values, each representing a date in a specific format.\nOutput: a list of string values.\nFunctionality: The transformation extracts the month from each date in the given sequence and outputs the month as a string in the result list.\nExample: Input: ['Monday, 1st January, 2001', 'Friday, 24th July, 2015', 'Thursday, 3rd November, 1983', 'Saturday, 19th April, 1997', 'Wednesday, 6th June, 1979']; output: ['January', 'July', 'November', 'April', 'June']"}
{"id": "198-5", "oq_id": 198, "desc": "Input: a list of string values, each containing multiple words.\nOutput: a list of string values with spaces inserted between words.\nFunctionality: The transformation inserts a space between words in each element of the given sequence.\nExample: Input: ['CrystalClear', 'DiamondInTheRough', 'GoldenSunset', 'EmeraldCity', 'RubyRed']; output: ['Crystal Clear', 'Diamond In The Rough', 'Golden Sunset', 'Emerald City', 'Ruby Red']"}
{"id": "198-4", "oq_id": 198, "desc": "Input: a list of strings with mixed upper and lowercase characters.\nOutput: a list of strings with spaces added between mixed case words.\nFunctionality: The transformation adds spaces between mixed case words in each element of the input sequence.\nExample: Input: ['WildAndFree', 'RoseGarden', 'PeacefulMind', 'StarryNight', 'BurningDesire']; output: ['Wild And Free', 'Rose Garden', 'Peaceful Mind', 'Starry Night', 'Burning Desire']"}
{"id": "198-6", "oq_id": 198, "desc": "Input: a list of string values containing concatenated words.\nOutput: a list of string values with spaces separating the words.\nFunctionality: The transformation adds spaces between the words in each element of the given sequence.\nExample: Input: ['SilentWhispers', 'WhirlingDervish', 'InfiniteLoop', 'EternalFlame', 'EndlessPossibilities']; output: ['Silent Whispers', 'Whirling Dervish', 'Infinite Loop', 'Eternal Flame', 'Endless Possibilities']"}
{"id": "198-7", "oq_id": 198, "desc": "Input: a list of string values containing words.\nOutput: a list of string values with spaces added between words.\nFunctionality: The transformation adds a space between each word in the given sequence and outputs the result as a list.\nExample: Input: ['SingingBirds', 'LaughingChildren', 'GlowingEmbers', 'DancingFlames', 'WhistlingWinds']; output: ['Singing Birds', 'Laughing Children', 'Glowing Embers', 'Dancing Flames', 'Whistling Winds']"}
{"id": "198-3", "oq_id": 198, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation separates the words in each element by capital letters, replacing them with spaces to create a list of phrases.\nExample: Input: ['SummerNights', 'StarGazing', 'SecretGarden', 'WhisperingWind', 'DeepThoughts']; output: ['Summer Nights', 'Star Gazing', 'Secret Garden', 'Whispering Wind', 'Deep Thoughts']"}
{"id": "198-2", "oq_id": 198, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds a whitespace between each word in the given sequence elements to format them as separate words in the output list.\nExample: Input: ['ButterflyDreams', 'OceanBreeze', 'MountainHigh', 'SkyIsLimit', 'JoyfulHeart']; output: ['Butterfly Dreams', 'Ocean Breeze', 'Mountain High', 'Sky Is Limit', 'Joyful Heart']"}
{"id": "198-0", "oq_id": 198, "desc": "Input: a list of strings with no spaces.\nOutput: a list of strings with spaces inserted between each word.\nFunctionality: The transformation inserts a space between each word in the given sequence to format the output with spaces between words.\nExample: Input: ['MorningCoffee', 'BigBlueSky', 'DanceInRain', 'IceCreamTreat', 'HappyFeet']; output: ['Morning Coffee', 'Big Blue Sky', 'Dance In Rain', 'Ice Cream Treat', 'Happy Feet']"}
{"id": "198-1", "oq_id": 198, "desc": "Input: a list of string values containing concatenated words.\nOutput: a list of string values with spaces separating words.\nFunctionality: The transformation inserts spaces between each word in the given sequence to separate them and outputs the result as a new list.\nExample: Input: ['LoveIsBlind', 'HighSchoolMemories', 'MoonlightSonata', 'WinterWonderland', 'RainbowConnection']; output: ['Love Is Blind', 'High School Memories', 'Moonlight Sonata', 'Winter Wonderland', 'Rainbow Connection']"}
{"id": "198-9", "oq_id": 198, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation splits each string element by capital letters and inserts a space in between, and outputs the formatted strings as a list.\nExample: Input: ['TwinklingStars', 'ShimmeringWaters', 'GentleBreeze', 'GoldenSunrise', 'BrightHorizon']; output: ['Twinkling Stars', 'Shimmering Waters', 'Gentle Breeze', 'Golden Sunrise', 'Bright Horizon']"}
{"id": "198-8", "oq_id": 198, "desc": "Input: a list of string values containing concatenated words.\nOutput: a list of string values with words separated by whitespace.\nFunctionality: The transformation splits each word in the given sequence by capitalization and adds whitespace in between, resulting in a list of strings with words separated.\nExample: Input: ['MorningDew', 'MidnightMoon', 'AfternoonDelight', 'EveningShadows', 'SunriseMagic']; output: ['Morning Dew', 'Midnight Moon', 'Afternoon Delight', 'Evening Shadows', 'Sunrise Magic']"}
{"id": "199-6", "oq_id": 199, "desc": "Input: a list of string values containing phrases with spaces.\nOutput: a list of string values with concatenated phrases in CamelCase format.\nFunctionality: The transformation removes spaces and combines words in each element of the given sequence to form CamelCase strings in the output.\nExample: Input: ['Family comes first', 'Cherishing loved ones', 'Spending quality time together']; output: ['FamilyComesFirst', 'CherishingLovedOnes', 'SpendingQualityTimeTogether']"}
{"id": "199-7", "oq_id": 199, "desc": "Input: a list of string values, with a sentence in each element.\nOutput: a list of strings.\nFunctionality: The transformation removes spaces and formats the input strings into CamelCase in the output list.\nExample: Input: ['Eating healthy is important', 'Cooking nutritious meals', 'Maintaining a balanced diet', 'Exercising regularly', 'Feeling energized and strong']; output: ['EatingHealthyIsImportant', 'CookingNutritiousMeals', 'MaintainingABalancedDiet', 'ExercisingRegularly', 'FeelingEnergizedAndStrong']"}
{"id": "199-5", "oq_id": 199, "desc": "Input: a list of string values, with phrases in each element.\nOutput: a list of string values.\nFunctionality: The transformation removes spaces and formats the phrases by combining words with Camel Case in the resulting list.\nExample: Input: ['Work hard, play hard', 'Balancing work and life', 'Setting goals and achieving them', 'Thriving in a competitive environment', 'Success comes with dedication']; output: ['WorkHard,PlayHard', 'BalancingWorkAndLife', 'SettingGoalsAndAchievingThem', 'ThrivingInACompetitiveEnvironment', 'SuccessComesWithDedication']"}
{"id": "199-4", "oq_id": 199, "desc": "Input: a list of string values with spaces.\nOutput: a list of string values with spaces removed and each word capitalized.\nFunctionality: The transformation removes spaces and capitalizes each word in the given sequence elements.\nExample: Input: ['Music is my passion', 'Playing the guitar', 'Creating new melodies', 'Finding inspiration', 'Jamming with friends']; output: ['MusicIsMyPassion', 'PlayingTheGuitar', 'CreatingNewMelodies', 'FindingInspiration', 'JammingWithFriends']"}
{"id": "199-0", "oq_id": 199, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes spaces from each element in the given sequence and converts it to CamelCase.\nExample: Input: ['This is just a test', 'Try again later', 'Keep up the good work', 'Great job so far', 'Almost there now']; output: ['ThisIsJustATest', 'TryAgainLater', 'KeepUpTheGoodWork', 'GreatJobSoFar', 'AlmostThereNow']"}
{"id": "199-1", "oq_id": 199, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes spaces from each element in the given sequence and concatenates the words in CamelCase format.\nExample: Input: ['Python is a great language', 'Learning something new', 'Code is fun', 'Technology is amazing', 'Keep improving your skills']; output: ['PythonIsAGreatLanguage', 'LearningSomethingNew', 'CodeIsFun', 'TechnologyIsAmazing', 'KeepImprovingYourSkills']"}
{"id": "199-3", "oq_id": 199, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes spaces and capitalizes the first letter of each word in the given sequence elements, then concatenates the words to form a single string.\nExample: Input: [\"Let's go on an adventure\", 'Discover new places', 'Travel the world', 'Make memories', 'Live life to the fullest']; output: [\"Let'sGoOnAnAdventure\", 'DiscoverNewPlaces', 'TravelTheWorld', 'MakeMemories', 'LiveLifeToTheFullest']"}
{"id": "199-2", "oq_id": 199, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes spaces from each element in the given sequence and concatenates the words to form a CamelCase string in the result list.\nExample: Input: ['Summer is finally here', 'Looking forward to new adventures', 'Relaxing at the beach', 'Reading a good book', 'Enjoying the sun']; output: ['SummerIsFinallyHere', 'LookingForwardToNewAdventures', 'RelaxingAtTheBeach', 'ReadingAGoodBook', 'EnjoyingTheSun']"}
{"id": "199-9", "oq_id": 199, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation concatenates all words in each element in the given sequence, removes spaces, and converts to CamelCase format in the output list.\nExample: Input: ['Art brings joy', 'Expressing creativity', 'Painting with passion', 'Inspiring others through art', 'Finding beauty in the world']; output: ['ArtBringsJoy', 'ExpressingCreativity', 'PaintingWithPassion', 'InspiringOthersThroughArt', 'FindingBeautyInTheWorld']"}
{"id": "199-8", "oq_id": 199, "desc": "Input: a list of string values containing phrases.\nOutput: a list of string values with spaces removed and each word in CamelCase format.\nFunctionality: The transformation removes spaces from each element in the input sequence, converts each phrase into CamelCase format, and output the results as a list.\nExample: Input: ['Nature is beautiful', 'Exploring the great outdoors', 'Hiking in the mountains', 'Camping under the stars', 'Breathing in fresh air']; output: ['NatureIsBeautiful', 'ExploringTheGreatOutdoors', 'HikingInTheMountains', 'CampingUnderTheStars', 'BreathingInFreshAir']"}
{"id": "200-3", "oq_id": 200, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element from the given sequence to all uppercase letters.\nExample: Input: ['Spring is here', 'Flowers are blooming', 'Sunshine and warmth', 'Outdoor adventures']; output: ['SPRING IS HERE', 'FLOWERS ARE BLOOMING', 'SUNSHINE AND WARMTH', 'OUTDOOR ADVENTURES']"}
{"id": "200-2", "oq_id": 200, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each string element to all uppercase letters.\nExample: Input: ['Programming is fun', 'Coding is creative', 'Software development', 'Debugging is challenging']; output: ['PROGRAMMING IS FUN', 'CODING IS CREATIVE', 'SOFTWARE DEVELOPMENT', 'DEBUGGING IS CHALLENGING']"}
{"id": "200-0", "oq_id": 200, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each string in the given sequence to uppercase.\nExample: Input: ['Hello World', 'Python is awesome', 'Data Science', 'Machine Learning', 'Artificial Intelligence']; output: ['HELLO WORLD', 'PYTHON IS AWESOME', 'DATA SCIENCE', 'MACHINE LEARNING', 'ARTIFICIAL INTELLIGENCE']"}
{"id": "200-1", "oq_id": 200, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element in the given sequence to uppercase.\nExample: Input: ['The quick brown fox', 'Jumps over the lazy dog', 'Lorem ipsum dolor sit amet', 'Consectetur adipiscing elit']; output: ['THE QUICK BROWN FOX', 'JUMPS OVER THE LAZY DOG', 'LOREM IPSUM DOLOR SIT AMET', 'CONSECTETUR ADIPISCING ELIT']"}
{"id": "200-5", "oq_id": 200, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element in the given sequence to all uppercase letters.\nExample: Input: ['Rainy days', 'Thunderstorms and lightning', 'Umbrellas and raincoats', 'Pitter patter of raindrops']; output: ['RAINY DAYS', 'THUNDERSTORMS AND LIGHTNING', 'UMBRELLAS AND RAINCOATS', 'PITTER PATTER OF RAINDROPS']"}
{"id": "200-4", "oq_id": 200, "desc": "Input: a list of string values containing text phrases.\nOutput: a list of string values in all uppercase.\nFunctionality: The transformation converts each element in the given sequence to all uppercase letters and outputs the result as a list.\nExample: Input: ['Coffee is life', 'Espresso is strong', 'Cappuccino with foam', 'Latte art designs']; output: ['COFFEE IS LIFE', 'ESPRESSO IS STRONG', 'CAPPUCCINO WITH FOAM', 'LATTE ART DESIGNS']"}
{"id": "200-6", "oq_id": 200, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element in the given sequence to all uppercase letters.\nExample: Input: ['Music is my passion', 'Rock and roll', 'Classical symphonies', 'Jazz improvisation']; output: ['MUSIC IS MY PASSION', 'ROCK AND ROLL', 'CLASSICAL SYMPHONIES', 'JAZZ IMPROVISATION']"}
{"id": "200-7", "oq_id": 200, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element in the given sequence to all uppercase letters and outputs the result as a list.\nExample: Input: ['Travel around the world', 'Explore new cultures', 'Discover new places', 'Adventure awaits']; output: ['TRAVEL AROUND THE WORLD', 'EXPLORE NEW CULTURES', 'DISCOVER NEW PLACES', 'ADVENTURE AWAITS']"}
{"id": "200-9", "oq_id": 200, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each string in the given sequence to uppercase.\nExample: Input: ['Healthy lifestyle', 'Exercise and nutrition', 'Mental well-being', 'Balance and harmony']; output: ['HEALTHY LIFESTYLE', 'EXERCISE AND NUTRITION', 'MENTAL WELL-BEING', 'BALANCE AND HARMONY']"}
{"id": "200-8", "oq_id": 200, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element in the given sequence to uppercase.\nExample: Input: ['Books are my escape', 'Reading is a hobby', 'Library adventures', 'Immerse in stories']; output: ['BOOKS ARE MY ESCAPE', 'READING IS A HOBBY', 'LIBRARY ADVENTURES', 'IMMERSE IN STORIES']"}
{"id": "201-0", "oq_id": 201, "desc": "Input: a list of string values, each element containing special characters.\nOutput: a list of string values, with special characters encoded as %XX format.\nFunctionality: The transformation encodes special characters in each element of the given sequence to their %XX format and outputs the result as a list.\nExample: Input: ['$','#','%20','!','&',\"'\",')','\"','(']; output: ['%24', '%23', '', '%21', '%26', '%27', '%29', '%22', '%28']"}
{"id": "201-1", "oq_id": 201, "desc": "Input: a list of string values, containing special characters and some encoded characters.\nOutput: a list of string values, where the encoded characters are replaced with their corresponding special characters.\nFunctionality: The transformation replaces the encoded characters in each element in the given sequence with their corresponding special characters, and outputs the result as a list.\nExample: Input: ['!', '%', '#', '&', '(', ')', '%20', \"'\", '\"', '$']; output: ['%21', '%25', '%23', '%26', '%28', '%29', '', '%27', '%22', '%24']"}
{"id": "201-3", "oq_id": 201, "desc": "Input: a list of string values, containing special characters and potential encoded characters.\nOutput: a list of string values, where any encoded characters are decoded.\nFunctionality: The transformation replaces any encoded characters in the given sequence with their corresponding characters in the result list.\nExample: Input: ['%', '&', '$', \"'\", '!', '%20', '(', ')', '#', '\"']; output: ['%25', '%26', '%24', '%27', '%21', ' ', '%28', '%29', '%23', '%22']"}
{"id": "201-2", "oq_id": 201, "desc": "Input: a list of special characters and one string value ('%20') in seq_a.\nOutput: a list of string values, replacing '&' with '%26', '\"' with '%22', '%' with '%25', '!' with '%21', '#' with '%23', '(' with '%28', ')' with '%29', and '$' with '%24', and \"'\" with '%27', while keeping the original string value ('%20') unchanged.\nFunctionality: The transformation replaces specific special characters with their respective encoded values, while keeping the original string value unchanged.\nExample: Input: ['&', '\"', '%', '!', '#', '(', ')', '%20', '$', \"'\"]; output: ['%26', '%22', '%25', '%21', '%23', '%28', '%29', '%20', '%24', '%27']"}
{"id": "201-6", "oq_id": 201, "desc": "Input: a list of string values, containing special characters and symbols.\nOutput: a list of string values with special characters transformed to their ASCII encoded representation.\nFunctionality: The transformation converts each special character in the given sequence to its ASCII encoded representation and outputs the result as a list.\nExample: Input: ['(', ')', '#', '%20', '&', '%', '$', '!', \"'\", '\"']; output: ['%28', '%29', '%23', '', '%26', '%25', '%24', '%21', '%27', '%22']"}
{"id": "201-7", "oq_id": 201, "desc": "Input: a list of string values, containing special characters.\nOutput: a list of string values, with special characters encoded as per URL encoding standards.\nFunctionality: The transformation encodes each special character in the given sequence based on URL encoding standards, and outputs the encoded characters as a list.\nExample: Input: ['$', '%', '%20', \"'\", '(', ')', '#', '!', '&', '\"']; output: ['%24', '%25', '', '%27', '%28', '%29', '%23', '%21', '%26', '%22']"}
{"id": "201-5", "oq_id": 201, "desc": "Input: a list of string values containing special characters.\nOutput: a list of string values with special characters converted to their corresponding URL encoded format.\nFunctionality: The transformation encodes special characters in each element of the given sequence using URL encoding and outputs the result as a list.\nExample: Input: ['%)20', '#', '!', '%', '&', \"'\", '(', ')', '$', '\"']; output: ['%25%2920', '%23', '%21', '%25', '%26', '%27', '%28', '%29', '%24', '%22']"}
{"id": "201-4", "oq_id": 201, "desc": "Input: a list of string values, with special characters included.\nOutput: a list of string values with special characters transformed to their ASCII representation if applicable.\nFunctionality: The transformation replaces certain special characters with their corresponding ASCII representation in the given sequence, and outputs the result as a list.\nExample: Input: ['%', '#', '!', '(', ')', '&', \"'\", '\"', '$', '%20']; output: ['%25', '%23', '%21', '%28', '%29', '%26', '%27', '%22', '%24', '']"}
{"id": "201-9", "oq_id": 201, "desc": "Input: a list of string values, with special characters and encoded characters.  \nOutput: a list of string values, where the special characters are encoded according to percent-encoding standards.  \nFunctionality: The transformation encodes each special character in the given sequence using percent-encoding and outputs the result as a list of strings.  \nExample: Input: ['%', '!', '$', \"'\", '(', ')', '&', '\"', '%20', '#']; output: ['%25', '%21', '%24', '%27', '%28', '%29', '%26', '%22', '', '%23']"}
{"id": "201-8", "oq_id": 201, "desc": "Input: a list of special characters and text strings.\nOutput: a list of encoded special characters using URL encoding.\nFunctionality: The transformation encodes each special character in the given sequence using URL encoding, and outputs the encoded characters as a list.\nExample: Input: ['!', '$', \"'\", '(', ')', '%', '#', '%20', '&', '\"']; output: ['%21', '%24', '%27', '%28', '%29', '%25', '%23', '', '%26', '%22']"}
{"id": "202-1", "oq_id": 202, "desc": "Input: a list of complex text strings.\nOutput: a list of complex text strings.\nFunctionality: The transformation removes multiple spaces within each element in the given sequence and outputs the result as a list with single spaces between words in each element.\nExample: Input: ['1 2 3 4 5', 'I am good', 'How are you doing', '1       2 3  4', 'This is interesting']; output: ['1 2 3 4 5', 'I am good', 'How are you doing', '1 2 3 4', 'This is interesting']"}
{"id": "202-0", "oq_id": 202, "desc": "Input: a list of string values, with spaces-separated numerical values in some elements.\nOutput: a list of string values.\nFunctionality: The transformation removes extra spaces in each element and output the result as a list of strings.\nExample: Input: ['1  2  3', 'Where are you', 'Why is this happening', '1 2 3 4 5', 'What a great day']; output: ['1 2 3', 'Where are you', 'Why is this happening', '1 2 3 4 5', 'What a great day']"}
{"id": "202-2", "oq_id": 202, "desc": "Input: a list of string values with various text contents.\nOutput: a list of string values with formatted text.\nFunctionality: The transformation removes multiple spaces within each element in the input sequence, and outputs the result with a single space separator in each element.\nExample: Input: ['1 2 3 4 5', 'I am fine', 'How are you', '1         2 3 4', 'This is fun']; output: ['1 2 3 4 5', 'I am fine', 'How are you', '1 2 3 4', 'This is fun']"}
{"id": "202-3", "oq_id": 202, "desc": "Input: a list of string values, with a mix of numerical and non-numerical characters in each element.\nOutput: a list of string values.\nFunctionality: The transformation removes extra spaces and non-numerical characters from each element in the given sequence, resulting in a formatted string in the output list.\nExample: Input: ['1    2  3 4 5', 'What is happening', 'How are you', '1   2  4  4', 'This is great']; output: ['1 2 3 4 5', 'What is happening', 'How are you', '1 2 4 4', 'This is great']"}
{"id": "202-7", "oq_id": 202, "desc": "Input: a list of string values, with mixed text and numerical values in each element.\nOutput: a list of strings with space-separated numerical values.\nFunctionality: The transformation extracts and formats the numerical values from each element in the given sequence, outputting them as strings in the result list with spaces separating the numbers.\nExample: Input: ['1 2 3 4 5', 'I am great', 'How are you', '1  2  3 4', 'This is amazing']; output: ['1 2 3 4 5', '', '', '1 2 3 4', '']"}
{"id": "202-6", "oq_id": 202, "desc": "Input: a list of string values with text and numerical characters in each element. \nOutput: a list of string values with text and spaces adjusted.\nFunctionality: The transformation removes extra spaces between numbers in each element of the given sequence and outputs the adjusted string in the result list.\nExample: Input: ['1 2 3 4 5', 'I am happy', 'How are you doing', '1          2 3 4       5', 'This is fantastic']; output: ['1 2 3 4 5', 'I am happy', 'How are you doing', '1 2 3 4 5', 'This is fantastic']"}
{"id": "202-4", "oq_id": 202, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes multiple spaces from each element in the given sequence and output the result as a list of strings.\nExample: Input: ['1 2 3 4 5', 'I am doing well', 'How are you', '1 2   3 4 5', 'This is fun']; output: ['1 2 3 4 5', 'I am doing well', 'How are you', '1 2 3 4 5', 'This is fun']"}
{"id": "202-5", "oq_id": 202, "desc": "Input: a list of string values, with mixed text and numerical values in each element.\nOutput: a list of strings with only numerical values.\nFunctionality: The transformation extracts numerical values from each element in the given sequence by splitting the strings and outputting the numerical values as a single string in the result list.\nExample: Input: ['1 2 3 4', 'You are awesome', 'What is going on', '1 2 3 4 5', 'This is exciting']; output: ['1 2 3 4', '', '', '1 2 3 4 5', '']"}
{"id": "202-8", "oq_id": 202, "desc": "Input: a list of strings with multiple words and extra spaces.\nOutput: a list of strings with words separated by a single space.\n\nFunctionality: The transformation removes any extra spaces within each element in the given sequence and outputs the result as a list of strings with words separated by a single space.\n\nExample: Input: ['1  2  3  4  5', 'What is your name', 'How are you', '1    2  3  4  5', 'This is awesome']; output: ['1 2 3 4 5', 'What is your name', 'How are you', '1 2 3 4 5', 'This is awesome']"}
{"id": "202-9", "oq_id": 202, "desc": "Input: a list of string values, with various text content in each element.\nOutput: a list of string values.\nFunctionality: The transformation simply copies the input sequence to the output sequence as it is.\nExample: Input: ['1 2 3 4 5', 'I am fantastic', 'How are you', '1 2 3     4 5', 'This is cool']; output: ['1 2 3 4 5', 'I am fantastic', 'How are you', '1 2 3 4 5', 'This is cool']"}
{"id": "203-2", "oq_id": 203, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts the strings in the input list to lowercase, replaces spaces with hyphens, and outputs the modified strings in a new list.\nExample: Input: ['Essential cybersecurity measures for small businesses', 'Exploring the world of e-commerce platforms', 'Tips for improving search engine rankings', 'The future of virtual reality technology', 'Implementing machine learning algorithms']; Output: ['essential-cybersecurity-measures-for-small-businesses', 'exploring-the-world-of-e-commerce-platforms', 'tips-for-improving-search-engine-rankings', 'the-future-of-virtual-reality-technology', 'implementing-machine-learning-algorithms']"}
{"id": "203-3", "oq_id": 203, "desc": "Input: a list of strings.\nOutput: a list of strings formatted as lowercase words separated by hyphens.\n\nFunctionality: The transformation converts each string in the input list to lowercase, replaces spaces with hyphens, and outputs the formatted strings in a new list.\n\nExample: Input: ['Effective strategies for social media marketing', 'The benefits of using content management systems', 'Innovations in mobile app development', 'The importance of user experience design', 'Maximizing data analysis for business insights']; output: ['effective-strategies-for-social-media-marketing', 'the-benefits-of-using-content-management-systems', 'innovations-in-mobile-app-development', 'the-importance-of-user-experience-design', 'maximizing-data-analysis-for-business-insights']"}
{"id": "203-1", "oq_id": 203, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each string element in the given sequence to a lowercase, replaces spaces with dashes, and output the result as a list.\nExample: Input: ['Comparing different programming languages', 'Creating responsive web design layouts', 'Understanding blockchain technology', 'Tips for effective project management', 'Building scalable web applications']; output: ['comparing-different-programming-languages', 'creating-responsive-web-design-layouts', 'understanding-blockchain-technology', 'tips-for-effective-project-management', 'building-scalable-web-applications']"}
{"id": "203-0", "oq_id": 203, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element in the given sequence to a lowercase, replaces spaces with hyphens, and outputs the result as a list.\nExample: Input: ['Best practices for optimizing website performance', 'Introduction to cloud computing services', 'How to secure your online accounts', 'The impact of artificial intelligence on society', 'Improving data visualization techniques']; output: ['best-practices-for-optimizing-website-performance', 'introduction-to-cloud-computing-services', 'how-to-secure-your-online-accounts', 'the-impact-of-artificial-intelligence-on-society', 'improving-data-visualization-techniques']"}
{"id": "203-4", "oq_id": 203, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each element from the given sequence into a lowercase, hyphenated version suitable for URLs.\nExample: Input: ['Introduction to Internet of Things (IoT)', 'Best practices for email marketing campaigns', 'The role of UX/UI design in product development', 'Tips for creating engaging online content', 'Optimizing website accessibility for all users']; output: ['introduction-to-internet-of-things-iot', 'best-practices-for-email-marketing-campaigns', 'the-role-of-ux-ui-design-in-product-development', 'tips-for-creating-engaging-online-content', 'optimizing-website-accessibility-for-all-users']"}
{"id": "203-5", "oq_id": 203, "desc": "Input: a list of string values, each representing a sentence.\nOutput: a list of string values, each representing a formatted version of the sentence.\n\nFunctionality: The transformation converts each sentence in the given sequence to a lower-case, hyphenated version where spaces are replaced with hyphens and all characters are lowercase.\nExample: Input: ['Essential cybersecurity practices for remote work', 'Utilizing data analytics for business decision-making', 'The impact of 5G technology on communication', 'Tips for building a strong personal brand online', 'Exploring the world of virtual events']; \noutput: ['essential-cybersecurity-practices-for-remote-work', 'utilizing-data-analytics-for-business-decision-making', 'the-impact-of-5g-technology-on-communication', 'tips-for-building-a-strong-personal-brand-online', 'exploring-the-world-of-virtual-events']"}
{"id": "203-7", "oq_id": 203, "desc": "Input: a list of strings containing sentences or phrases.\nOutput: a list of strings containing formatted lowercase strings with hyphens replacing spaces.\nFunctionality: The transformation formats each sentence by converting it to lowercase and replacing spaces with hyphens.\nExample: Input: ['Introduction to data science and its applications', 'The importance of mobile-responsive web design']; output: ['introduction-to-data-science-and-its-applications', 'the-importance-of-mobile-responsive-web-design']"}
{"id": "203-6", "oq_id": 203, "desc": "Input: a list of string values, representing phrases or titles.\nOutput: a list of string values, formatted as lowercase with hyphens instead of spaces.\nFunctionality: The transformation converts each element in the given sequence to lowercase and replaces spaces with hyphens in the resulting list.\nExample: Input: ['The future of augmented reality applications', 'Maximizing the benefits of cloud storage solutions', 'Best practices for image optimization on websites', 'Creating effective digital marketing strategies', 'The role of chatbots in customer service']; output: ['the-future-of-augmented-reality-applications', 'maximizing-the-benefits-of-cloud-storage-solutions', 'best-practices-for-image-optimization-on-websites', 'creating-effective-digital-marketing-strategies', 'the-role-of-chatbots-in-customer-service']"}
{"id": "203-8", "oq_id": 203, "desc": "Input: a list of string values, representing sentences or phrases.\nOutput: a list of string values, formatted as lowercase with hyphens instead of spaces.\nFunctionality: The transformation converts each sentence in the given sequence to lowercase and replaces spaces with hyphens in the result list.\nExample: Input: ['Effective strategies for online reputation management', 'Tips for creating a successful e-commerce website', 'The benefits of using open-source software']; output: ['effective-strategies-for-online-reputation-management', 'tips-for-creating-a-successful-e-commerce-website', 'the-benefits-of-using-open-source-software']"}
{"id": "203-9", "oq_id": 203, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation converts each string in the given sequence to a lowercase, replaces spaces with hyphens, and outputs the result as a list.\nExample: Input: ['The future of work in a digital world', 'Best practices for optimizing website user experience']; output: ['the-future-of-work-in-a-digital-world', 'best-practices-for-optimizing-website-user-experience']"}
{"id": "204-7", "oq_id": 204, "desc": "Input: a list of string values, with phone numbers in various formats.\nOutput: a list of string values containing only numerical digits representing phone numbers.\nFunctionality: The transformation removes any non-numerical characters (such as parentheses, hyphens, spaces) from each phone number in the given sequence and outputs the resulting numbers as strings in the result list.\nExample: Input: ['(432) 543-6543', '876-987-0987', '765-876-9876', '8765432999']; output: ['4325436543', '8769870987', '7658769876', '8765432999']"}
{"id": "204-6", "oq_id": 204, "desc": "Input: a list of string values, representing phone numbers in different formats.\nOutput: a list of string values with phone numbers in a standardized format.\nFunctionality: The transformation removes any non-numeric characters (like parentheses, dashes) from each element in the given sequence to format the phone numbers consistently, then outputs the results as a list.\nExample: Input: ['(123)-456-7890', '987-654-3210', '555-555-5555', '7777777777']; output: ['1234567890', '9876543210', '5555555555', '7777777777']"}
{"id": "204-4", "oq_id": 204, "desc": "Input: a list of string values, representing phone numbers in different formats.\nOutput: a list of string values with phone numbers in a standardized format.\nFunctionality: The transformation removes any non-numeric characters (like parentheses, dashes, and spaces) from each phone number in the input sequence, and outputs the result as a list of standardized phone numbers.\nExample: Input: ['(777)-888-9999', '000-111-2222', '333-444-5555', '4567890123']; output: ['7778889999', '0001112222', '3334445555', '4567890123']"}
{"id": "204-5", "oq_id": 204, "desc": "Input: a list of string values, with phone numbers in various formats.\nOutput: a list of string values containing only numerical digits representing phone numbers.\nFunctionality: The transformation removes any non-numerical characters from each phone number in the given sequence, and outputs the cleaned up phone numbers as a list.\nExample: Input: ['(999) 000-1111', '222-333-4444', '555-666-7777', '5678901234']; output: ['9990001111', '2223334444', '5556667777', '5678901234']"}
{"id": "204-1", "oq_id": 204, "desc": "Input: a list of string values, with phone numbers in specific formats.\nOutput: a list of string values with phone numbers in a standardized format.\nFunctionality: The transformation removes any characters that are not digits from each phone number in the given sequence, and output the cleaned phone numbers as strings in the result list.\nExample: Input: ['(111) 222-3333', '444-555-6666', '777-888-9999', '1234567890']; output: ['1112223333', '4445556666', '7778889999', '1234567890']"}
{"id": "204-0", "oq_id": 204, "desc": "Input: a list of string values, representing phone numbers in different formats.\nOutput: a list of string values with phone numbers in a standardized format.\nFunctionality: The transformation removes any non-numeric characters from each element in the given sequence, and outputs the phone numbers without any separators.\nExample: Input: ['(123)-456-7890', '987-654-3210', '555-555-5555', '7777777777']; output: ['1234567890', '9876543210', '5555555555', '7777777777']"}
{"id": "204-2", "oq_id": 204, "desc": "Input: a list of string values, representing phone numbers in different formats.\nOutput: a list of string values with phone numbers in a standardized format.\nFunctionality: The transformation removes any non-numeric characters from each element in the given sequence, and outputs the result as a list.\nExample: Input: ['(333)-444-5555', '666-777-8888', '999-000-1111', '2345678901']; output: ['3334445555', '6667778888', '9990001111', '2345678901']"}
{"id": "204-3", "oq_id": 204, "desc": "Input: a list of string values, with phone numbers in various formats.\nOutput: a list of string values containing only numerical digits representing phone numbers.\nFunctionality: The transformation removes any non-numerical characters from each phone number in the given sequence, and outputs the cleaned up phone numbers as a list.\nExample: Input: ['(555) 666-7777', '888-999-0000', '111-222-3333', '3456789012']; output: ['5556667777', '8889990000', '1112223333', '3456789012']"}
{"id": "204-8", "oq_id": 204, "desc": "Input: a list of string values, representing phone numbers in different formats.\nOutput: a list of string values with phone numbers in a standardized format.\nFunctionality: The transformation removes any special characters and formatting from each phone number in the given sequence.\nExample: Input: ['(654)-765-8765', '098-987-6543', '890-987-6543', '9746104356']; output: ['6547658765', '0989876543', '8909876543', '9746104356']"}
{"id": "204-9", "oq_id": 204, "desc": "Input: a list of string values, with phone numbers in various formats.\nOutput: a list of string values containing only numerical digits representing phone numbers.\nFunctionality: The transformation removes any non-numerical characters (such as parentheses, dashes, and spaces) from each phone number in the given sequence and outputs the cleaned numerical digits as a string in the result list.\nExample: Input: ['(765) 876-9876', '765-765-8765', '876-987-8765', '7865432190']; output: ['7658769876', '7657658765', '8769878765', '7865432190']"}
{"id": "205-4", "oq_id": 205, "desc": "Input: a list of string values with phone numbers in a continuous string format.\nOutput: a list of string values with formatted phone numbers with dashes.\nFunctionality: The transformation adds dashes in between the digits of each phone number in the given sequence and outputs the formatted phone numbers as a list.\nExample: Input: ['1231231234', '2342342345', '3453453456', '4564564567', '5675675678']; output: ['123-123-1234', '234-234-2345', '345-345-3456', '456-456-4567', '567-567-5678']"}
{"id": "205-5", "oq_id": 205, "desc": "Input: a list of string values with phone numbers in a continuous string format.\nOutput: a list of string values with formatted phone numbers with dashes.\nFunctionality: The transformation adds dashes in between the digits of each phone number in the given sequence and outputs the formatted phone numbers as a list.\nExample: Input: ['9876541230', '3698521470', '8745129630', '2589634710', '7412589630']; output: ['987-654-1230', '369-852-1470', '874-512-9630', '258-963-4710', '741-258-9630']"}
{"id": "205-7", "oq_id": 205, "desc": "Input: a list of string values with numeric characters representing phone numbers.\nOutput: a list of string values formatted as phone numbers.\nFunctionality: The transformation formats each element in the given sequence as a phone number by adding dashes at specific positions.\nExample: Input: ['8888777766', '9999888855', '1111222299', '7777666655', '1111222277']; output: ['888-877-7766', '999-988-8855', '111-122-2299', '777-766-6655', '111-122-2277']"}
{"id": "205-6", "oq_id": 205, "desc": "Input: a list of string values with numeric characters.\nOutput: a list of string values formatted as phone numbers with dashes.\nFunctionality: The transformation formats each element in the given sequence as a phone number by adding dashes after every third character.\nExample: Input: ['1010101010', '2020202020', '3030303030', '4040404040', '5050505050']; output: ['101-010-1010', '202-020-2020', '303-030-3030', '404-040-4040', '505-050-5050']"}
{"id": "205-2", "oq_id": 205, "desc": "Input: a list of string values with numerical characters.\nOutput: a list of string values formatted as phone numbers with dashes.\nFunctionality: The transformation formats each element in the given sequence as a phone number by adding dashes after every third character.\nExample: Input: ['2468135790', '3698521470', '9876543210', '1593572468', '7539514682']; output: ['246-813-5790', '369-852-1470', '987-654-3210', '159-357-2468', '753-951-4682']"}
{"id": "205-3", "oq_id": 205, "desc": "Input: a list of string values with phone numbers in a continuous string format.\nOutput: a list of string values with formatted phone numbers with dashes.\nFunctionality: The transformation adds dashes in between the digits of each phone number in the given sequence and outputs the formatted phone numbers as a list.\nExample: Input: ['4445556666', '1112223333', '7778889999', '2223334444', '9998887777']; output: ['444-555-6666', '111-222-3333', '777-888-9999', '222-333-4444', '999-888-7777']"}
{"id": "205-1", "oq_id": 205, "desc": "Input: a list of string values with phone numbers in a continuous string format.\nOutput: a list of string values with formatted phone numbers with dashes.\nFunctionality: The transformation adds dashes in between the digits of each phone number in the given sequence and outputs the formatted phone numbers as a list.\nExample: Input: ['9998887777', '1112223333', '5554446666', '7776665555', '3332221111']; output: ['999-888-7777', '111-222-3333', '555-444-6666', '777-666-5555', '333-222-1111']"}
{"id": "205-0", "oq_id": 205, "desc": "Input: a list of string values with numeric characters.\nOutput: a list of string values formatted as phone numbers with dashes.\nFunctionality: The transformation formats each element in the given sequence as a phone number by adding dashes after every third character.\nExample: Input: ['1234567890', '9876543210', '1357924680', '0246813579', '3692581470']; output: ['123-456-7890', '987-654-3210', '135-792-4680', '024-681-3579', '369-258-1470']"}
{"id": "205-8", "oq_id": 205, "desc": "Input: a list of string values with phone numbers in a continuous string format.\nOutput: a list of string values with formatted phone numbers with dashes.\nFunctionality: The transformation adds dashes in between the digits of each phone number in the given sequence and outputs the formatted phone numbers as a list.\nExample: Input: ['6666333388', '9999666644', '1111222288', '2222111144', '5555999944']; output: ['666-633-3388', '999-966-6644', '111-122-2288', '222-211-1144', '555-599-9944']"}
{"id": "205-9", "oq_id": 205, "desc": "Input: a list of string values with phone numbers in a continuous string format.\nOutput: a list of string values with formatted phone numbers with dashes.\nFunctionality: The transformation adds dashes in between the digits of each phone number in the given sequence and outputs the formatted phone numbers as a list.\nExample: Input: ['7776665555', '5554443333', '3332221111', '8889997777', '1112223333']; output: ['777-666-5555', '555-444-3333', '333-222-1111', '888-999-7777', '111-222-3333']"}
{"id": "206-5", "oq_id": 206, "desc": "Input: a list of string values, each containing a combination of alphabetic and numerical characters.\nOutput: a list of string values, with alphanumeric characters sorted in ascending order and numerical characters arranged alternatively with alphabetic characters.\nFunctionality: The transformation sorts the alphanumeric characters in each element of the given sequence and alternates the numeric characters with alphabetic characters in the output list.\nExample: Input: ['T1S3R5Q7', 'P9O2N4M6']; output: ['Q1R3S5T7', 'M2N4O6P9']"}
{"id": "206-4", "oq_id": 206, "desc": "Input: a list of string values, each containing a combination of alphabetic characters and numerical digits.\nOutput: a list of string values, each with sorted alphanumeric characters followed by alternating numeric/alphabet characters.\nFunctionality: The transformation sorts the alphanumeric characters in each element in the given sequence, then alternates between numeric and alphabet characters in the result list.\nExample: Input: ['R4Q6P8O9', 'N1M2L3K5']; output: ['O4P6Q8R9', 'K1L2M3N5']"}
{"id": "206-6", "oq_id": 206, "desc": "Input: a list of string values, each containing a combination of alphabetic characters and numerical values.\nOutput: a list of string values, sorted alphabetically, with the numerical values alternating between characters sorted in descending order.\nFunctionality: The transformation sorts each element in the given sequence alphabetically, extracts the numerical values, and then alternates the numerical values between the sorted characters in descending order.\nExample: Input: ['W5V3U2T1', 'S9R7Q8P6']; output: ['T1U2V3W5', 'P6Q7R8S9']"}
{"id": "206-7", "oq_id": 206, "desc": "Input: a list of strings containing alphanumeric characters.\nOutput: a list of strings with sorted alphanumeric characters and alternating numeric/alphabet characters.\nFunctionality: The transformation sorts each alphanumeric string in the given sequence, and then alternates between numeric and alphabet characters before outputting the result as a list of strings.\nExample: Input: ['Z8Y6X5W4', 'V3U2T1S7']; output: ['W4X5Y6Z8', 'S1T2U3V7']"}
{"id": "206-3", "oq_id": 206, "desc": "Input: a list of string values, each containing a combination of alphabetic characters and numerical digits.\nOutput: a list of string values, with alphabetic characters and numerical digits arranged in a specific pattern.\nFunctionality: The transformation extracts the numeric digits from each element in the given sequence, sorts them in ascending order, and then alternates the numeric and alphabetic characters in each element to form the result list.\nExample: Input: ['F3G1H5I6', 'J7K9L2M8']; output: ['F1G3H5I6', 'J2K7L8M9']"}
{"id": "206-2", "oq_id": 206, "desc": "Input: a list of string values, each containing a combination of alphabetic characters and numerical digits.\nOutput: a list of string values, each with sorted alphanumeric characters followed by alternate numeric/alphabet characters.\nFunctionality: The transformation sorts the alphanumeric characters in each element in the given sequence, then alternates between the numerical and alphabetic characters in the output list.\nExample: Input: ['M7N5O9P1', 'Q3R2S8T6']; output: ['M1N5O7P9', 'Q2R3S6T8']"}
{"id": "206-0", "oq_id": 206, "desc": "Input: a list of strings containing alphanumeric characters.\nOutput: a list of strings with sorted alphanumeric characters and alternating numeric/alphabet characters.\nFunctionality: The transformation sorts each alphanumeric string in the given sequence, and then alternates the numeric and alphabet characters before outputting the result as a list of strings.\nExample: Input: ['X9Y8Z7W6', 'V5U4T3S2']; output: ['W6X7Y8Z9', 'S2T3U4V5']"}
{"id": "206-1", "oq_id": 206, "desc": "Input: a list of string values containing alphanumeric characters.\nOutput: a list of string values containing alphanumeric characters.\nFunctionality: The transformation sorts each element in the given sequence in alphanumeric order and then alternates between alphabet and numeric characters before outputting the result as a list.\nExample: Input: ['K6J5I4H3', 'G2F1E9D8C7']; output: ['H3I4J5K6', 'C1D2E7F8G9']"}
{"id": "206-9", "oq_id": 206, "desc": "Input: a list of string values, each containing a combination of alphabetic characters and numerical digits.\nOutput: a list of string values, with alphabetic characters unchanged and numerical digits sorted in increasing order within each element.\n\nFunctionality: The transformation sorts the numeric digits within each element of the given sequence in ascending order while keeping the alphabetic characters unchanged, and outputs the result as a list of strings.\n\nExample: Input: ['O9P7Q5R3', 'S1T4U6V8']; output: ['O3P5Q7R9', 'S1T4U6V8']"}
{"id": "206-8", "oq_id": 206, "desc": "Input: a list of strings containing alphanumeric characters.\nOutput: a list of strings with alphanumeric characters sorted by alternating alphabetical and numerical characters.\nFunctionality: The transformation sorts each alphanumeric string in the given sequence by alternating between alphabetical and numerical characters, outputting the sorted strings in a list.\nExample: Input: ['C2D4E7F9', 'G6H3I1J5']; output: ['C2D4E7F9', 'G1H3I5J6']"}
{"id": "207-6", "oq_id": 207, "desc": "Input: a list of string values, each representing a month.\nOutput: a list of string values, each representing the corresponding month number.\nFunctionality: The transformation converts each month name into its corresponding numerical value (e.g. 'April' to '4') and outputs the result as a list.\nExample: Input: ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March', '']; output: ['4', '5', '6', '7', '8', '9', '10', '11', '12', '1', '2', '3', '']"}
{"id": "207-7", "oq_id": 207, "desc": "Input: a list of string values, each representing a month.\nOutput: a list of string values, each representing the corresponding month number.\nFunctionality: The transformation converts each month name into its numerical equivalent (e.g., 'June' to '6') and outputs the result as a list of strings.\nExample: Input: ['June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', '']; output: ['6', '7', '8', '9', '10', '11', '12', '1', '2', '3', '4', '5', '']"}
{"id": "207-5", "oq_id": 207, "desc": "Input: a list of string values, each representing a month.\nOutput: a list of string values, each representing the corresponding month number.\nFunctionality: The transformation converts the month names into their numerical equivalents (e.g., January to 1, February to 2) and outputs the result as a list of strings.\nExample: Input: ['November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', '']; output: ['11', '12', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '']"}
{"id": "207-4", "oq_id": 207, "desc": "Input: a list of string values, each representing a month.\nOutput: a list of string values, each representing the corresponding month number.\nFunctionality: The transformation converts each month name into its numerical equivalent (e.g., September to 9, October to 10) and outputs the result as a list of strings.\nExample: Input: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', '']; output: ['9', '10', '11', '12', '1', '2', '3', '4', '5', '6', '7', '8', '']"}
{"id": "207-0", "oq_id": 207, "desc": "Input: a list of string values, each representing a month.\nOutput: a list of string values, each representing the corresponding month number.\nFunctionality: The transformation converts each month name into its numerical equivalent (e.g., February to 2, March to 3) and outputs the result as a list.\nExample: Input: ['February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', '']; output: ['2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '1', '']"}
{"id": "207-1", "oq_id": 207, "desc": "Input: a list of string values representing months of the year.\nOutput: a list of string values representing the corresponding numeric month.\nFunctionality: The transformation converts each month name to its corresponding numeric value and outputs the results as a list of strings.\nExample: Input: ['March', 'April', 'May', ...]; output: ['3', '4', '5', ...]"}
{"id": "207-3", "oq_id": 207, "desc": "Input: a list of string values, each representing a month.\nOutput: a list of string values, each representing the corresponding month number.\nFunctionality: The transformation converts each month name into its numerical equivalent (e.g., January to 1, February to 2) and outputs the result as a list.\nExample: Input: ['July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', '']; output: ['7', '8', '9', '10', '11', '12', '1', '2', '3', '4', '5', '6', '']"}
{"id": "207-2", "oq_id": 207, "desc": "Input: a list of string values representing months of the year.\nOutput: a list of string values representing corresponding numbers for each month.\nFunctionality: The transformation converts each month name to its corresponding number in the result list.\nExample: Input: ['May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', '']; output: ['5', '6', '7', '8', '9', '10', '11', '12', '1', '2', '3', '4', '']"}
{"id": "207-9", "oq_id": 207, "desc": "Input: a list of string values, each representing a month.\nOutput: a list of string values, each representing the corresponding month number.\nFunctionality: The transformation converts each month name into its numerical equivalent (e.g., October to 10, November to 11) and outputs the result as a list of strings.\nExample: Input: ['October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', '']; output: ['10', '11', '12', '1', '2', '3', '4', '5', '6', '7', '8', '9', '']"}
{"id": "207-8", "oq_id": 207, "desc": "Input: a list of string values, each representing a month.\nOutput: a list of string values, each representing the corresponding month number.\nFunctionality: The transformation converts each month name into its numerical equivalent (e.g., January to 1, February to 2) and outputs the result as a list.\nExample: Input: ['August', 'September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', '']; output: ['8', '9', '10', '11', '12', '1', '2', '3', '4', '5', '6', '7', '']"}
{"id": "208-9", "oq_id": 208, "desc": "Input: a list of strings containing XML elements with attributes.\nOutput: a list of strings with XML elements without attributes.\nFunctionality: The transformation removes the attributes from each XML element in the given sequence and outputs the result as a list of strings.\nExample: Input: ['<info1 xns:id=\"aaa\">111</info1>', '<info2 xns:id=\"bbb\">222</info2>', '<info3 xns:id=\"ccc\">333</info3>']; output: ['<info1>111</info1>', '<info2>222</info2>', '<info3>333</info3>']"}
{"id": "208-8", "oq_id": 208, "desc": "Input: a list of strings containing XML elements with attributes.\nOutput: a list of strings with XML elements without attributes.\nFunctionality: The transformation removes the attributes from each XML element in the given sequence and outputs the result as a list of strings.\nExample: Input: ['<record1 xns:id=\"123\">abc</record1>', '<record2 xns:id=\"456\">def</record2>', '<record3 xns:id=\"789\">xyz</record3>']; output: ['<record1>abc</record1>', '<record2>def</record2>', '<record3>xyz</record3>']"}
{"id": "208-3", "oq_id": 208, "desc": "Input: a list of string values, each containing XML tags with attributes.\nOutput: a list of string values, with XML tags without attributes.\nFunctionality: The transformation removes the attributes from XML tags in each element of the given sequence and outputs the modified sequence as a list.\nExample: Input: ['<code1 xns:id=\"zzz\">123xyz</code1>', '<code2 xns:id=\"456abc\">456def</code2>', '<code3 xns:id=\"789test\">789</code3>']; output: ['<code1>123xyz</code1>', '<code2>456def</code2>', '<code3>789</code3>']"}
{"id": "208-2", "oq_id": 208, "desc": "Input: a list of strings containing XML elements with attributes.\nOutput: a list of strings with XML elements without attributes.\nFunctionality: The transformation removes the attributes from each XML element in the given sequence and outputs the result as a list.\nExample: Input: ['<data1 xns:id=\"aaa\">111</data1>', '<data2 xns:id=\"bbb\">222</data2>', '<data3 xns:id=\"ccc\">333</data3>']; output: ['<data1>111</data1>', '<data2>222</data2>', '<data3>333</data3>']"}
{"id": "208-0", "oq_id": 208, "desc": "Input: a list of strings containing XML elements with attributes.\nOutput: a list of strings with XML elements without attributes.\nFunctionality: The transformation removes the attributes from each XML element in the given sequence and outputs the result as a list of strings.\nExample: Input: ['<example1 xns:id=\"123\">abc</example1>', '<example2 xns:id=\"456\">def</example2>', '<example3 xns:id=\"789\">xyz</example3>']; output: ['<example1>abc</example1>', '<example2>def</example2>', '<example3>xyz</example3>']"}
{"id": "208-1", "oq_id": 208, "desc": "Input: a list of strings containing XML-like elements with attributes.\nOutput: a list of strings with attributes removed.\nFunctionality: The transformation removes the attributes within the XML-like elements in each string of the given sequence and outputs the formatted strings.\nExample: Input: ['<test1 xns:id=\"test\">a</test1>', '<test2 xns:id=\"example\">b</test2>', '<test3 xns:id=\"123abc\">c</test3>']; output: ['<test1>a</test1>', '<test2>b</test2>', '<test3>c</test3>']"}
{"id": "208-5", "oq_id": 208, "desc": "Input: a list of strings containing XML elements with attributes.\nOutput: a list of strings with XML elements without attributes.\nFunctionality: The transformation removes the attributes from each XML element in the given sequence and outputs the result as a list.\nExample: Input: ['<number1 xns:id=\"123\">1</number1>', '<number2 xns:id=\"456\">2</number2>', '<number3 xns:id=\"789\">3</number3>']; output: ['<number1>1</number1>', '<number2>2</number2>', '<number3>3</number3>']"}
{"id": "208-4", "oq_id": 208, "desc": "Input: a list of strings containing XML elements with attributes.\nOutput: a list of strings with XML elements without attributes.\nFunctionality: The transformation removes the attributes from each XML element in the given sequence and outputs the result as a list of strings.\nExample: Input: ['<value1 xns:id=\"aaa\">abc</value1>', '<value2 xns:id=\"bbb\">def</value2>', '<value3 xns:id=\"ccc\">xyz</value3>']; output: ['<value1>abc</value1>', '<value2>def</value2>', '<value3>xyz</value3>']"}
{"id": "208-6", "oq_id": 208, "desc": "Input: a list of string values, each representing an XML tag with attributes and text content.\nOutput: a list of string values, each representing an XML tag without attributes.\nFunctionality: The transformation removes the attributes from each XML tag in the given sequence, and outputs the modified tags as strings in the result list.\nExample: Input: ['<tag1 xns:id=\"abc123\">123</tag1>', '<tag2 xns:id=\"def456\">abc</tag2>', '<tag3 xns:id=\"test\">xyz</tag3>']; output: ['<tag1>123</tag1>', '<tag2>abc</tag2>', '<tag3>xyz</tag3>']"}
{"id": "208-7", "oq_id": 208, "desc": "Input: a list of strings containing XML-like elements with attributes.\nOutput: a list of strings with attributes removed.\nFunctionality: The transformation removes the attributes within the XML-like elements in each string of the given sequence and outputs the formatted strings.\nExample: Input: ['<element1 xns:id=\"test\">a</element1>', '<element2 xns:id=\"example\">b</element2>', '<element3 xns:id=\"123abc\">c</element3>']; output: ['<element1>a</element1>', '<element2>b</element2>', '<element3>c</element3>']"}
{"id": "209-9", "oq_id": 209, "desc": "Input: a list of string values representing numerical values.\nOutput: a list of string values representing numerical values.\nFunctionality: The transformation converts each element from the given sequence to Fahrenheit from Celsius using the formula (C * 9/5) + 32, and output the result as a list.\nExample: Input: ['85', '90', '95', '100', '105']; output: ['29', '32', '35', '38', '41']"}
{"id": "209-8", "oq_id": 209, "desc": "Input: a list of string values representing numerical values.\nOutput: a list of string values representing numerical values.\nFunctionality: The transformation converts each element from the given sequence to a number, divides it by 5, rounds the result to the nearest whole number, and converts it back to a string.\nExample: Input: ['50', '55', '60', '65', '70']; output: ['10', '11', '12', '13', '14']"}
{"id": "209-0", "oq_id": 209, "desc": "Input: a list of string values, each representing a number.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each element from string to integer, then subtracts 29 from the integer values, and outputs the result as a list of numerical values.\nExample: Input: ['25', '30', '35', '40', '45']; output: [-4, -1, 2, 4, 7]"}
{"id": "209-1", "oq_id": 209, "desc": "Input: a list of string values representing numerical values.\nOutput: a list of string values representing numerical values.\nFunctionality: The transformation converts each element from the given sequence to a number, divides it by 3 and rounds the result to the nearest whole number, then converts it back to a string.\nExample: Input: ['68', '72', '76', '80', '84']; output: ['20', '22', '24', '27', '29']"}
{"id": "209-3", "oq_id": 209, "desc": "Input: a list of string values, each representing a number.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each element from string to a numerical value, subtracts 3 from each number, and outputs the result as a list.\nExample: Input: ['0', '5', '10', '15', '20']; output: [-18, -15, -12, -9, -7]"}
{"id": "209-2", "oq_id": 209, "desc": "Input: a list of string values, each representing a number.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each element from string to integer, subtracts 2 from the value, and converts it back to a string before adding it to the output list.\nExample: Input: ['10', '15', '20', '25', '30']; output: [-12, -9, -7, -4, -1]"}
{"id": "209-6", "oq_id": 209, "desc": "Input: a list of string values representing numerical values.\nOutput: a list of string values representing numerical values.\nFunctionality: The transformation converts each element from the given sequence to an integer, subtracts 30 from it, then divides by 2, and finally rounds it to the nearest whole number before outputting as strings in the result list.\nExample: Input: ['32', '36', '40', '44', '48']; output: ['0', '2', '4', '7', '9']"}
{"id": "209-7", "oq_id": 209, "desc": "Input: a list of string values, each representing a number.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each element from string to integer, then subtracts 10 from each element in the given sequence to generate the output list.\nExample: Input: ['15', '20', '25', '30', '35']; output: [-9, -7, -4, -1, 2]"}
{"id": "209-5", "oq_id": 209, "desc": "Input: a list of string values representing numerical values.\nOutput: a list of string values representing numerical values.\nFunctionality: The transformation converts each element from the given sequence to a number, divides it by 3 and rounds it to the nearest whole number, then converts it back to a string in the result list.\nExample: Input: ['70', '75', '80', '85', '90']; output: ['21', '25', '27', '28', '30']"}
{"id": "209-4", "oq_id": 209, "desc": "Input: a list of string values representing numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation converts each element in the given sequence from string to numerical value by casting, and output the result as a list.\nExample: Input: ['100', '105', '110', '115', '120']; output: [100, 105, 110, 115, 120]"}
{"id": "210-8", "oq_id": 210, "desc": "Input: a list of string values with special characters and alphanumeric strings.\nOutput: a list of string values containing only alphanumeric strings.\nFunctionality: The transformation removes any special characters from each element in the given sequence and outputs the alphanumeric strings as a list.\nExample: Input: ['(*JLKJ32)', '(*&JLKJSJDKjs', 'sdkjllkjf', '239sdkajs', 'kjdskjdsa*']; output: ['JLKJ32', 'JLKJSJDKjs', 'sdkjllkjf', '239sdkajs', 'kjdskjdsa']"}
{"id": "210-9", "oq_id": 210, "desc": "Input: a list of strings with special characters, letters, and numbers.\nOutput: a list of strings without special characters and only containing letters and numbers.\nFunctionality: The transformation removes any special characters from each element in the given sequence and outputs the result without special characters.\nExample: Input: ['djsk1238JLK*', '239jlkajsk', 'sdklklas', ')(*KDALJKJ', '(*&JKLsdak']; output: ['djsk1238JLK', '239jlkajsk', 'sdklklas', 'KDALJKJ', 'JKLsdak']"}
{"id": "210-1", "oq_id": 210, "desc": "Input: a list of string values with special characters.\nOutput: a list of strings with special characters removed.\nFunctionality: The transformation removes any special characters from each element in the given sequence and outputs the result as a list with cleaned strings.\nExample: Input: ['234jhksdf~!', '&8jfjsaj$J', 'JDSJ(*)', '47jkdsfBALKS', 'L*()LL']; output: ['234jhksdf', '8jfjsajJ', 'JDSJ', '47jkdsfBALKS', 'LLL']"}
{"id": "210-0", "oq_id": 210, "desc": "Input: a list of strings with special characters and alphanumeric characters.\nOutput: a list of strings with only alphanumeric characters.\nFunctionality: The transformation removes all special characters from each element in the given sequence, and outputs the result as a list.\nExample: Input: ['abc798jksd@@', '78njks*&&*Lkj', '*)(*Axf@l1', '7145KEKjajk', 'KKjskd((**??']; output: ['abc798jksd', '78njksLkj', 'Axfl1', '7145KEKjajk', 'KKjskd']"}
{"id": "210-2", "oq_id": 210, "desc": "Input: a list of strings with special characters, alphanumeric characters, and symbols.\nOutput: a list of strings with only alphanumeric characters.\nFunctionality: The transformation removes special characters from each element in the given sequence, and outputs the strings with only alphanumeric characters.\nExample: Input: ['jkajs98123!@#', 'LSJDS*&)(*', '127HSLDhdskjs', '$*KJKLSJFJ12', 'jfjdkjskl(**']; output: ['jkajs98123', 'LSJDS', '127HSLDhdskjs', 'KJKLSJFJ12', 'jfjdkjskl']"}
{"id": "210-3", "oq_id": 210, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes special characters from each element in the given sequence, retaining only alphanumeric characters and spaces, and outputs the result as a list.\nExample: Input: ['12KDJSKLDJ123', '&*$JKJD*#)*', 'KSJdksjd*213', 'LKJDSJ(*)', '(KSJXKJ2390']; output: ['12KDJSKLDJ123', 'JKJD', 'KSJdksjd213', 'LKJDSJ', 'KSJXKJ2390']"}
{"id": "210-7", "oq_id": 210, "desc": "Input: a list of string values with special characters and alphanumeric characters.\nOutput: a list of string values with only alphanumeric characters.\nFunctionality: The transformation removes any special characters from each element in the given sequence and outputs the resulting string with only alphanumeric characters.\nExample: Input: ['JKJADJ!@#)', ')(*&JJSJDKS', '1930JJDSJ*', '(*&JLKJ*', ')(*JLJLK']; output: ['JKJADJ', 'JJSJDKS', '1930JJDSJ', 'JLKJ', 'JLJLK']"}
{"id": "210-6", "oq_id": 210, "desc": "Input: a list of string values, including special characters.\nOutput: a list of string values, removing special characters.\nFunctionality: The transformation removes any special characters from each element in the given sequence and outputs the cleaned strings in the result list.\nExample: Input: ['098KLSJ***', 'jfds9813k*)%', 'sakljfklas', '()(KJDJ)*', 'LJSDKAJ23803']; output: ['098KLSJ', 'jfds9813k', 'sakljfklas', 'KJDJ', 'LJSDKAJ23803']"}
{"id": "210-4", "oq_id": 210, "desc": "Input: a list of string values with special characters and alphanumeric characters.\nOutput: a list of string values with only alphanumeric characters.\nFunctionality: The transformation removes any special characters from each element in the given sequence and outputs the resulting alphanumeric string in the result list.\nExample: Input: ['jkdjska3301!@#', '(KSJ*)*(()', '30JKDSJKJ*', '&JKJS(**', '(*&8JDSKJ*']; output: ['jkdjska3301', 'KSJ', '30JKDSJKJ', 'JKJS', '8JDSKJ']"}
{"id": "210-5", "oq_id": 210, "desc": "Input: a list of string values, including special characters.\nOutput: a list of string values, removing special characters.\nFunctionality: The transformation removes any special characters from each element in the given sequence and outputs the cleaned strings in the result list.\nExample: Input: ['JDSJ*(&^', 'jfds983jlk!@', '2321KJLKS', '*ALJSDKJJA', 'ksdjlskdj****']; output: ['JDSJ', 'jfds983jlk', '2321KJLKS', 'ALJSDKJJA', 'ksdjlskdj']"}
{"id": "212-9", "oq_id": 212, "desc": "Input: a list of string values, with HTML tags containing text.\nOutput: a list of strings without HTML tags.\nFunctionality: The transformation removes HTML tags from each element in the given sequence and concatenates the remaining text, outputting a clean string in the result list.\nExample: Input: ['<b>New message</b><br/><i>Details</i>']; output: ['New message Details']"}
{"id": "212-8", "oq_id": 212, "desc": "Input: a list of strings containing HTML tags.\nOutput: a list of strings without HTML tags.\nFunctionality: The transformation removes HTML tags from each element in the given sequence and outputs the clean text content.\nExample: Input: ['<p>Lorem ipsum dolor sit amet</p>']; output: ['Lorem ipsum dolor sit amet']"}
{"id": "212-3", "oq_id": 212, "desc": "Input: a list of strings containing HTML tags.\nOutput: a list of strings containing extracted text.\nFunctionality: The transformation removes HTML tags and extracts the text content inside the `<p>` tag from each element in the given sequence, outputting the extracted text as a list.\nExample: Input: ['<div class=\"container\"><p>Content here</p></div>']; output: ['Content here']"}
{"id": "212-2", "oq_id": 212, "desc": "Input: a list of string values containing HTML tags.\nOutput: a list of strings without HTML tags.\nFunctionality: The transformation removes HTML tags from each element in the given sequence and outputs the cleaned text as a list.\nExample: Input: ['<h1>Welcome</h1><p>This is a paragraph</p>']; output: ['Welcome This is a paragraph']"}
{"id": "212-0", "oq_id": 212, "desc": "Input: a list of strings with HTML tags.\nOutput: a list of strings without HTML tags.\nFunctionality: The transformation removes HTML tags from each element in the given sequence and outputs the result as a list.\nExample: Input: ['<i>Testing 1, 2, 3</i>']; output: ['Testing 1, 2, 3']"}
{"id": "212-1", "oq_id": 212, "desc": "Input: a list of strings containing HTML tags.\nOutput: a list of strings without HTML tags.\nFunctionality: The transformation removes HTML tags from each element in the given sequence and concatenates the remaining text, outputting it as a list of strings.\nExample: Input: ['<b>This is bold text</b><br/><i>Italicized text</i>']; output: ['This is bold text Italicized text']"}
{"id": "212-5", "oq_id": 212, "desc": "Input: a list of string values containing HTML tags.\nOutput: a list of string values without HTML tags.\nFunctionality: The transformation removes HTML tags from each element in the given sequence and outputs the cleaned text as a list.\nExample: Input: ['<h2>Title</h2><p>Paragraph</p>']; output: ['Title Paragraph']"}
{"id": "212-4", "oq_id": 212, "desc": "Input: a list of strings with HTML tags.\nOutput: a list of strings without HTML tags.\nFunctionality: The transformation removes HTML tags from each element in the given sequence and outputs the cleaned text as a list.\nExample: Input: ['<b>Testing bold</b><br/><i>Italicized text</i>']; output: ['Testing bold Italicized text']"}
{"id": "212-6", "oq_id": 212, "desc": "Input: a list of strings containing HTML tags.\nOutput: a list of strings without HTML tags.\nFunctionality: The transformation removes HTML tags from each element in the given sequence and outputs the cleaned strings in the result list.\nExample: Input: ['<span style=\"color:red;\">Red text</span>']; output: ['Red text']"}
{"id": "212-7", "oq_id": 212, "desc": "Input: a list of strings containing HTML tags.\nOutput: a list of strings with HTML tags removed.\nFunctionality: The transformation removes HTML tags from each element in the given sequence and outputs the cleaned strings.\nExample: Input: ['<b>Important</b><br/><i>Details</i>']; output: ['Important Details']"}
{"id": "213-9", "oq_id": 213, "desc": "Input: a list of string values, with math expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each math expression in the given sequence and output the result as a list of numerical values.\nExample: Input: ['11+3', '25-5', '2*8', '16/4', '1+7-3', '6+2*2']; output: [14, 20, 16, 4, 5, 10]"}
{"id": "213-8", "oq_id": 213, "desc": "Input: a list of string values, with math expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each math expression in the given sequence and output the result as a list of numerical values.\nExample: Input: ['6+10', '35-5', '4*9', '27/3', '3+9-4', '15/5+3']; output: [16, 30, 36, 9, 8, 6]"}
{"id": "213-0", "oq_id": 213, "desc": "Input: a list of string values, with math expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each math expression from the given sequence and output the result as a list of numerical values.\nExample: Input: ['5+7', '20-10', '3*9', '15/3', '8+4-2', '10-2*5']; output: [12, 10, 27, 5, 10, 0]"}
{"id": "213-1", "oq_id": 213, "desc": "Input: a list of string values, with math expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each math expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['9+8', '50-25', '4*5', '12/4', '6+5-3', '9+6/3']; output: [17, 25, 20, 3, 8, 11]"}
{"id": "213-3", "oq_id": 213, "desc": "Input: a list of string values, with mathematical expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each mathematical expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['15+6', '60-20', '9*2', '18/2', '9+5-3', '10/2+3']; output: [21, 40, 18, 9, 11, 8]"}
{"id": "213-2", "oq_id": 213, "desc": "Input: a list of string values, with math expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each math expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['12+4', '36-12', '7*3', '21/7', '4+8-3', '6/2+3']; output: [16, 24, 21, 3, 9, 6]"}
{"id": "213-6", "oq_id": 213, "desc": "Input: a list of string values, with mathematical expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each mathematical expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['8+8', '45-15', '8*4', '24/4', '8+3-1', '12/3+2']; output: [16, 30, 32, 6, 10, 6]"}
{"id": "213-7", "oq_id": 213, "desc": "Input: a list of string values, with math expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each math expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['4+11', '80-40', '3*10', '30/6', '6+7-2', '18/6+3']; output: [15, 40, 30, 5, 11, 6]"}
{"id": "213-5", "oq_id": 213, "desc": "Input: a list of string values, with mathematical expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each mathematical expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['10+5', '70-35', '6*7', '49/7', '5+4-1', '8+2*3']; output: [15, 35, 42, 7, 8, 14]"}
{"id": "213-4", "oq_id": 213, "desc": "Input: a list of string values, with mathematical expressions in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation evaluates each mathematical expression in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['7+9', '30-15', '5*8', '32/4', '7+6-2', '12/6+2']; output: [16, 15, 40, 8, 11, 4]"}
{"id": "214-9", "oq_id": 214, "desc": "Input: a list of string values, representing numerical values.\nOutput: a list of strings representing the same numerical values in words.\nFunctionality: The transformation converts each numerical value from the given sequence into words and outputs the result as a list.\nExample: Input: ['1000', '2000', '10000', '20000']; output: ['one thousand', 'two thousand', 'ten thousand', 'twenty thousand']"}
{"id": "214-8", "oq_id": 214, "desc": "Input: a list of string values, representing numerical values in digit form.\nOutput: a list of string values, representing numerical values in words.\nFunctionality: The transformation converts each element from the input sequence from digit form to words.\nExample: Input: ['7890', '14567', '23579', '12345']; output: ['seven thousand eight hundred and ninety', 'fourteen thousand five hundred and sixty-seven', 'twenty-three thousand five hundred and seventy-nine', 'twelve thousand three hundred and forty-five']"}
{"id": "214-5", "oq_id": 214, "desc": "Input: a list of string values, each representing a number in numerical form.\nOutput: a list of string values, each representing the number in words.\nFunctionality: The transformation converts each numerical value in the input list to words, representing the number in word form, and outputs the result as a list.\nExample: Input: ['13579', '2468', '369258', '482910']; output: ['thirteen thousand five hundred and seventy-nine', 'two thousand four hundred and sixty-eight', 'three hundred and sixty-nine thousand two hundred and fifty-eight', 'four hundred and eighty-two thousand nine hundred and ten']"}
{"id": "214-4", "oq_id": 214, "desc": "Input: a list of string values, with numerical values represented as strings.\nOutput: a list of string values, with numerical values represented as words.\nFunctionality: The transformation converts each numerical value from string format to words format in the given sequence, and output the result as a list.\nExample: Input: ['111', '222', '333', '444', '555']; output: ['one hundred and eleven', 'two hundred and twenty-two', 'three hundred and thirty-three', 'four hundred and forty-four', 'five hundred and fifty-five']"}
{"id": "214-6", "oq_id": 214, "desc": "Input: a list of string values, each containing a numerical value as a string.\nOutput: a list of strings representing the numerical values in words.\nFunctionality: The transformation converts each numerical value in the given sequence from numeric digits to words, and outputs the result as a list of strings.\nExample: Input: ['87654', '8765', '76543', '6543']; output: ['eighty-seven thousand six hundred and fifty-four', 'eight thousand seven hundred and sixty-five', 'seventy-six thousand five hundred and forty-three', 'six thousand five hundred and forty-three']"}
{"id": "214-7", "oq_id": 214, "desc": "Input: a list of string values, representing numerical values in digits.\nOutput: a list of string values, representing numerical values in words.\nFunctionality: The transformation converts each numerical value in digits from the input sequence to words and outputs the result as a list.\nExample: Input: ['5656', '1234', '5678', '9856']; output: ['five thousand six hundred and fifty-six', 'one thousand two hundred and thirty-four', 'five thousand six hundred and seventy-eight', 'nine thousand eight hundred and fifty-six']"}
{"id": "214-3", "oq_id": 214, "desc": "Input: a list of string values, representing numerical values as digits.\nOutput: a list of string values, representing numerical values as words.\nFunctionality: The transformation converts each element from the input sequence from digits to words using the appropriate English number naming convention, and outputs the result as a list of strings.\nExample: Input: ['9999', '12345', '6789', '54321']; output: ['nine thousand nine hundred and ninety-nine', 'twelve thousand three hundred and forty-five', 'six thousand seven hundred and eighty-nine', 'fifty-four thousand three hundred and twenty-one']"}
{"id": "214-2", "oq_id": 214, "desc": "Input: a list of numerical values in string format.\nOutput: a list of corresponding numbers in words.\nFunctionality: The transformation converts each numerical value in string format to its equivalent number in words.\nExample: Input: ['987654', '321', '1000000', '505050']; output: ['nine hundred and eighty-seven thousand six hundred and fifty-four', 'three hundred and twenty-one', 'one million', 'five hundred and five thousand and fifty']"}
{"id": "214-0", "oq_id": 214, "desc": "Input: a list of string values, representing numerical values in digits.\nOutput: a list of string values, representing numerical values in words.\nFunctionality: The transformation converts each numerical value in digits to words in the given sequence and outputs the result as a list.\nExample: Input: ['555', '456', '7890', '2019']; output: ['five hundred and fifty-five', 'four hundred and fifty-six', 'seven thousand eight hundred and ninety', 'two thousand and nineteen']"}
{"id": "214-1", "oq_id": 214, "desc": "Input: a list of string values, each representing a numerical value.\nOutput: a list of string values, each representing the numerical value in words.\nFunctionality: The transformation converts each numeric string in the input sequence into words representing the number, and outputs the result as a list of strings.\nExample: Input: ['123456', '7890', '1001', '2020', '303030']; output: ['one hundred and twenty-three thousand four hundred and fifty-six', 'seven thousand eight hundred and ninety', 'one thousand and one', 'two thousand and twenty', 'three hundred and three thousand and thirty']"}
{"id": "215-9", "oq_id": 215, "desc": "Input: a list of DNA sequences (strings).\nOutput: a list of DNA sequences (strings).\nFunctionality: The transformation converts each DNA sequence in the given list from seq_a to its complementary sequence in seq_b.\nExample: Input: ['TACGA', 'CTGCA', 'TGCAT', 'GACGG', 'CGTAG']; output: ['ATGCT', 'GACGT', 'ACGTA', 'CTGCC', 'GCATC']"}
{"id": "215-8", "oq_id": 215, "desc": "Input: a list of DNA sequences (strings).\nOutput: a list of DNA sequences (strings).\nFunctionality: The transformation replaces each nucleotide in the given sequences according to the template provided.\nExample: Input: ['ATGAA', 'CTCGC', 'TGCTG', 'GACCT', 'CAGAA']; output: ['TACTT', 'GAGCG', 'ACGAC', 'CTGGA', 'GTCTT']"}
{"id": "215-6", "oq_id": 215, "desc": "Input: a list of DNA sequences represented as strings.\nOutput: a list of DNA sequences represented as strings.\nFunctionality: The transformation changes each DNA sequence in the input list to its complementary sequence in the output list. In DNA complementary sequence, A <-> T, C <-> G.\nExample: Input: ['TAGCA', 'CTGAT', 'CGTCA', 'GAGGA', 'TACGT']; output: ['ATCGT', 'GACTA', 'GCAGT', 'CTCCT', 'ATGCA']"}
{"id": "215-7", "oq_id": 215, "desc": "Input: a list of DNA sequences represented as strings.\nOutput: a list of DNA sequences represented as strings.\nFunctionality: The transformation reverses each DNA sequence in the given list.\nExample: Input: ['AGCTC', 'CGTAG', 'TAACG', 'GAGGT', 'CGGCT']; output: ['TCGAG', 'GCATC', 'ATTGC', 'CTCCA', 'GCCGA']"}
{"id": "215-5", "oq_id": 215, "desc": "Input: a list of strings representing DNA sequences.\nOutput: a list of strings representing DNA sequences.\nFunctionality: The transformation converts each nucleotide in the DNA sequence according to the complementary base pair (A to T, T to A, C to G, G to C), resulting in a new DNA sequence.\nExample: Input: ['ATCGA', 'CATCA', 'GTACC', 'GAGGT', 'CAGTC']; Output: ['TAGCT', 'GTAGT', 'CATGG', 'CTCCA', 'GTCAG']"}
{"id": "215-4", "oq_id": 215, "desc": "Input: a list of DNA sequences (strings).\nOutput: a list of DNA sequences (strings).\nFunctionality: The transformation converts each DNA sequence in the input list into its complementary sequence according to the base pairing rules (A with T, C with G, and vice versa), and outputs the result as a list.\nExample: Input: ['TACGT', 'CGGTA', 'ACGGT', 'GAGTC', 'TACAA']; output: ['ATGCA', 'GCCAT', 'TGCCA', 'CTCAG', 'ATGTT']"}
{"id": "215-0", "oq_id": 215, "desc": "Input: a list of DNA sequences (strings).\nOutput: a list of DNA sequences (strings).\nFunctionality: The transformation converts each DNA sequence in the input list into its complementary sequence according to the base pairing rules (A-T, C-G), resulting in a list of complementary DNA sequences.\nExample: Input: ['ATGTC', 'CTTCA', 'TAGGC', 'CGAGT', 'TAGCA']; output: ['TACAG', 'GAAGT', 'ATCCG', 'GCTCA', 'ATCGT']"}
{"id": "215-1", "oq_id": 215, "desc": "Input: a list of DNA sequences (strings).\nOutput: a list of DNA sequences (strings).\nFunctionality: The transformation reverses each DNA sequence in the given list.\nExample: Input: ['AGTAC', 'CTCGA', 'CATGC', 'GACCT', 'GCCAT']; output: ['CATGA', 'AGCTG', 'CGTAC', 'TGGAC', 'TACCG']"}
{"id": "215-3", "oq_id": 215, "desc": "Input: a list of DNA sequences (strings).\nOutput: a list of DNA sequences (strings).\nFunctionality: The transformation replaces each nucleotide in the given DNA sequences with its complement according to the base pairing rules (A with T, C with G, G with C, T with A), and outputs the resulting sequences as a list.\nExample: Input: ['AGAAA', 'CTCGT', 'TGCAG', 'GACTT', 'CGAAA']; output: ['TCTTT', 'GAGCA', 'ACGTC', 'CTGAA', 'GCTTT']"}
{"id": "215-2", "oq_id": 215, "desc": "Input: a list of DNA sequences (strings).\nOutput: a list of DNA sequences (strings).\nFunctionality: The transformation converts each nucleotide in the given sequences according to the complementary base pair rule (A-T, C-G, T-A, G-C) and outputs the resulting sequences.\nExample: Input: ['TAAGC', 'CGTAC', 'ACGTA', 'GAGCT', 'TGCGA']; output: ['ATTCG', 'GCATG', 'TGCAT', 'CTCGA', 'ACGCT']"}
{"id": "216-8", "oq_id": 216, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds the prefix \"a\" to each element in the given sequence and output the result as a list.\nExample: Input: ['mountain view', 'peaceful lake', 'sunny day', 'pencil', 'pen']; output: ['a mountain view', 'a peaceful lake', 'a sunny day', 'a pencil', 'a pen']"}
{"id": "216-9", "oq_id": 216, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds 'a' in front of each element in the given sequence and outputs the modified list.\nExample: Input: ['happy birthday', 'beautiful butterfly', 'magical moment', 'coffee', 'cup']; output: ['a happy birthday', 'a beautiful butterfly', 'a magical moment', 'a coffee', 'a cup']"}
{"id": "216-7", "oq_id": 216, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds \"a \" before each element in the given sequence and output the result as a list.\nExample: Input: ['tight dress', 'beautiful song', 'fresh pineapple', 'desk', 'book']; output: ['a tight dress', 'a beautiful song', 'a fresh pineapple', 'a desk', 'a book']"}
{"id": "216-6", "oq_id": 216, "desc": "Input: a list of string values, each containing a noun phrase.\nOutput: a list of string values, each containing a noun phrase preceded by an article ('a' or 'an').\n\nFunctionality: The transformation adds the appropriate article ('a' or 'an') before each noun phrase in the given sequence, and outputs the result as a list.\n\nExample: Input: ['young child', 'creative idea', 'blue sky', 'apartment', 'nose']; output: ['a young child', 'a creative idea', 'a blue sky', 'an apartment', 'a nose']"}
{"id": "216-4", "oq_id": 216, "desc": "Input: a list of strings, each containing a noun phrase.\nOutput: a list of strings, each noun phrase preceded by \"a\" or \"an\" depending on the initial sound of the noun.\nFunctionality: The transformation adds \"a\" or \"an\" before each noun phrase in the given sequence, based on the initial sound of the noun.\nExample: Input: ['small dog', 'excellent job', 'green grass', 'television', 'ocean']; output: ['a small dog', 'an excellent job', 'a green grass', 'a television', 'an ocean']"}
{"id": "216-5", "oq_id": 216, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds \"a \" before each element in the given sequence and output the result as a list.\nExample: Input: ['white paper', 'perfect match', 'purple flower', 'keyboard', 'moon']; output: ['a white paper', 'a perfect match', 'a purple flower', 'a keyboard', 'a moon']"}
{"id": "216-1", "oq_id": 216, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds 'a' or 'an' in front of each element in the given sequence if it does not already have an article.\nExample: Input: ['beautiful painting', 'accurate answer', 'electric guitar', 'umbrella', 'ice cream']; output: ['a beautiful painting', 'an accurate answer', 'an electric guitar', 'an umbrella', 'an ice cream']"}
{"id": "216-0", "oq_id": 216, "desc": "Input: a list of string values, each representing a noun.\nOutput: a list of string values, each representing a noun preceded by an article \"a\" or \"an\".\nFunctionality: The transformation adds the appropriate indefinite article \"a\" or \"an\" before each noun in the given sequence, based on the initial sound of the noun.\nExample: Input: ['old book', 'large tank', 'happy family', 'smartphone', 'apple']; output: ['an old book', 'a large tank', 'a happy family', 'a smartphone', 'an apple']"}
{"id": "216-2", "oq_id": 216, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds \"a\" or \"an\" before each element in the given sequence based on the first letter of the word.\nExample: Input: ['big house', 'important project', 'yellow sun', 'telephone', 'ear']; output: ['a big house', 'an important project', 'a yellow sun', 'a telephone', 'an ear']"}
{"id": "216-3", "oq_id": 216, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds 'a' or 'an' before each element in the given sequence.\nExample: Input: ['clean room', 'interesting story', 'red apple', 'bicycle', 'eye']; output: ['a clean room', 'an interesting story', 'a red apple', 'a bicycle', 'an eye']"}
{"id": "217-8", "oq_id": 217, "desc": "Input: a list of string values, each containing a list of comma-separated numerical values.\nOutput: a list of numerical values.\n\nFunctionality: The transformation extracts the median value from each element in the given sequence, and outputs the result as a list of numerical values. If the number of elements in a sequence is odd, the median is the middle value when the elements are sorted. If the number of elements is even, the median is the average of the two middle values.\n\nExample: Input: ['2,3,5,7,11,13,17', '1,2,3,4,5,6,7,8,9,10', '4,6,8,10,12,14,16', '7,9,11,13,15,17,19', '1,3,5,7,9']; output: [7, 5, 10, 13, 5]"}
{"id": "217-9", "oq_id": 217, "desc": "Input: a list of strings with comma-separated numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the median value from each element in the given sequence, and outputs the result as a list of numerical values.\nExample: Input: ['3,6,9,12,15', '2,4,6,8,10,12,14', '1,3,5,7,9,11,13', '11,13,15,17,19,21', '2,3,4']; output: ['9', '8', '7', '16', '3']"}
{"id": "217-4", "oq_id": 217, "desc": "Input: a list of string values, each containing a comma-separated list of numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the second largest number from each element in the given sequence and outputs it as a list of numerical values.\nExample: Input: ['2,4,6,8,10,12,14', '1,3,5,7,9,11,13', '9,10,11', '4,6,8,10,12,14,16', '3,5,7,9,11,13']; output: [8, 7, 10, 10, 8]"}
{"id": "217-5", "oq_id": 217, "desc": "Input: a list of string values with comma-separated numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the median value from each element in the given sequence and outputs it as a list of numerical values.\nExample: Input: ['1,2,3,4,5,6,7,8,9,10', '3,5,7,9', '5,6,7', '2,4,6,8,10', '1,2,3,4']; output: ['5', '6', '6', '6', '2']"}
{"id": "217-7", "oq_id": 217, "desc": "Input: a list of string values, each containing a comma-separated list of numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the median value from each element in the given sequence and outputs it as a list of numerical values.\nExample: Input: ['1,4,7,10', '2,5,8,11', '3,6,9,12', '4,5,6,7,8,9', '1,2,3,4']; output: ['5', '6', '7', '6', '2']"}
{"id": "217-6", "oq_id": 217, "desc": "Input: a list of string values, each containing comma-separated numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the median number from each element in the given sequence, and outputs it as a list of numerical values.\nExample: Input: ['1,2,3,4,5,6', '3,4,5,6,7,8,9', '1,2,3,4,5,6,7', '5,7,9,11,13,15', '4,9,14']; output: ['3', '6', '4', '10', '9']"}
{"id": "217-2", "oq_id": 217, "desc": "Input: a list of string values with comma-separated numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the median value from each element in the given sequence, and outputs the result as a list of numbers.\nExample: Input: ['1,3,5,7', '2,4,6,8,10,12', '10', '6,7,8,9,10,11,12', '1,2,3,4,5,6,8,10']; output: ['4', '7', '10', '9', '4']"}
{"id": "217-3", "oq_id": 217, "desc": "Input: a list of string values, each containing a comma-separated list of numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the middle number from each element in the given sequence (assuming the middle number is the median), and outputs the result as a list.\nExample: Input: ['2,3,4,5', '7,8,9,10', '12,13,14,15', '11,12,13,14,15', '6,7,8,9,10']; output: ['3', '8', '13', '13', '8']"}
{"id": "217-1", "oq_id": 217, "desc": "Input: a list of string values, each containing a comma-separated sequence of numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the median value from each comma-separated sequence in the input list and outputs it as a numerical value in the result list.\nExample: Input: ['3,5,7,9,11,13', '2,4,8,10,12,14', '1,3,5,7,9,11,13', '4,5,6,7,8,9,10,11,12', '2,4,6,8']; output: [7, 8, 7, 9, 6]"}
{"id": "217-0", "oq_id": 217, "desc": "Input: a list of string values with comma-separated numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the middle number (median) from each element in the given sequence, and outputs it as a list of numerical values.\nExample: Input: ['1,4,6,7,8,9,10', '2,4,6,8,10', '3,4,5', '1,2,3,4,5,6,7,8,9', '9,10']; output: [7, 6, 4, 5, 9]"}
{"id": "218-1", "oq_id": 218, "desc": "Input: a list of string values in the format 'YYYY-MM-DD', representing dates.\nOutput: a list of string values in the format 'YYYY-MM-DD', representing dates.\nFunctionality: The transformation increments each date in the given sequence by one day, and outputs the result as a list.\nExample: Input: ['2011-03-21', '2014-07-04', '2016-09-30', '2017-12-25', '2019-01-01']; output: ['2011-03-22', '2014-07-05', '2016-10-01', '2017-12-26', '2019-01-02']"}
{"id": "218-0", "oq_id": 218, "desc": "Input: a list of date strings in 'YYYY-MM-DD' format.\nOutput: a list of date strings in 'YYYY-MM-DD' format.\nFunctionality: The transformation increments each date by one day in the given sequence, and outputs the result as a list of date strings.\nExample: Input: ['2010-05-15', '2012-08-25', '2013-11-19', '2018-04-02', '2020-10-10']; output: ['2010-05-16', '2012-08-26', '2013-11-20', '2018-04-03', '2020-10-11']"}
{"id": "218-2", "oq_id": 218, "desc": "Input: a list of date strings in 'YYYY-MM-DD' format.\nOutput: a list of date strings in 'YYYY-MM-DD' format.\nFunctionality: The transformation increments each date by one day in the given sequence, and outputs the updated dates in the result list.\nExample: Input: ['2022-06-08', '2024-09-17', '2025-12-10', '2026-02-14', '2028-11-05']; output: ['2022-06-09', '2024-09-18', '2025-12-11', '2026-02-15', '2028-11-06']"}
{"id": "218-3", "oq_id": 218, "desc": "Input: a list of date strings in 'YYYY-MM-DD' format.\nOutput: a list of date strings in 'YYYY-MM-DD' format.\nFunctionality: The transformation increments each date by one day in the given sequence, and outputs the updated dates in the result list.\nExample: Input: ['2030-03-29', '2031-05-20', '2033-08-06', '2035-11-01', '2036-01-10']; output: ['2030-03-30', '2031-05-21', '2033-08-07', '2035-11-02', '2036-01-11']"}
{"id": "218-7", "oq_id": 218, "desc": "Input: a list of date strings in 'YYYY-MM-DD' format.\nOutput: a list of date strings in 'YYYY-MM-DD' format.\nFunctionality: The transformation increments each date by one day in the given sequence, and outputs the updated dates in the result list.\nExample: Input: ['2058-09-10', '2060-12-25', '2062-04-30', '2064-08-14', '2065-10-20']; output: ['2058-09-11', '2060-12-26', '2062-05-01', '2064-08-15', '2065-10-21']"}
{"id": "218-6", "oq_id": 218, "desc": "Input: a list of string values in date format 'YYYY-MM-DD'.\nOutput: a list of string values in date format 'YYYY-MM-DD'.\nFunctionality: The transformation increments each date by one day in the given sequence, and outputs the result as a list of dates.\nExample: Input: ['2050-06-01', '2053-10-05', '2055-03-15', '2056-05-28', '2057-08-01']; output: ['2050-06-02', '2053-10-06', '2055-03-16', '2056-05-29', '2057-08-02']"}
{"id": "218-4", "oq_id": 218, "desc": "Input: a list of date strings in 'YYYY-MM-DD' format.\nOutput: a list of date strings in 'YYYY-MM-DD' format.\nFunctionality: The transformation increments each date by one day in the given sequence, and outputs the result as a list of date strings.\nExample: Input: ['2037-04-15', '2038-06-30', '2039-09-23', '2040-12-19', '2042-02-25']; output: ['2037-04-16', '2038-07-01', '2039-09-24', '2040-12-20', '2042-02-26']"}
{"id": "218-5", "oq_id": 218, "desc": "Input: a list of date strings in 'YYYY-MM-DD' format.\nOutput: a list of date strings in 'YYYY-MM-DD' format.\nFunctionality: The transformation increments each date by one day in the given sequence, and outputs the result as a list of date strings.\nExample: Input: ['2044-07-12', '2045-09-28', '2046-12-21', '2048-02-29', '2049-04-04']; output: ['2044-07-13', '2045-09-29', '2046-12-22', '2048-03-01', '2049-04-05']"}
{"id": "218-8", "oq_id": 218, "desc": "Input: a list of date strings in 'YYYY-MM-DD' format.\nOutput: a list of date strings in 'YYYY-MM-DD' format.\nFunctionality: The transformation increments each date by one day in the given sequence, and outputs the result as a list of date strings.\nExample: Input: ['2067-01-05', '2068-03-22', '2069-06-14', '2071-09-30', '2073-02-08']; output: ['2067-01-06', '2068-03-23', '2069-06-15', '2071-10-01', '2073-02-09']"}
{"id": "218-9", "oq_id": 218, "desc": "Input: a list of date strings in 'YYYY-MM-DD' format.\nOutput: a list of date strings in 'YYYY-MM-DD' format.\nFunctionality: The transformation increments each date by one day in the given sequence, and outputs the result as a list of date strings.\nExample: Input: ['2074-04-03', '2075-06-20', '2077-09-05', '2079-12-31', '2081-02-17']; output: ['2074-04-04', '2075-06-21', '2077-09-06', '2080-01-01', '2081-02-18']"}
{"id": "219-2", "oq_id": 219, "desc": "Input: a list of string values with dates in the format \"y-m-d\".\nOutput: a list of string values with dates in the format \"m/d/y\".\nFunctionality: The transformation converts each date from the input sequence from \"y-m-d\" to \"m/d/y\" format, and output the result as a list.\nExample: Input: ['2018/12/4', '2006/9/19', '2012/11/3', '2004/3/15', '2011/1/22']; output: ['12/4/2018', '9/19/2006', '11/3/2012', '3/15/2004', '1/22/2011']"}
{"id": "219-3", "oq_id": 219, "desc": "Input: a list of string values with dates in the format \"y-m-d\".\nOutput: a list of string values with dates in the format \"m/d/y\".\nFunctionality: The transformation rearranges the date format from year-month-day to month/day/year.\nExample: Input: ['2002/3/29', '2017/5/6', '2009/10/12', '2013/1/7', '2015/8/28']; output: ['3/29/2002', '5/6/2017', '10/12/2009', '1/7/2013', '8/28/2015']"}
{"id": "219-1", "oq_id": 219, "desc": "Input: a list of string values with dates in the format y-m-d.\nOutput: a list of string values with dates in the format m/d/y.\nFunctionality: The transformation converts the date format from y-m-d to m/d/y for each element in the given sequence.\nExample: Input: ['2003/7/14', '2010/4/25', '2016/2/11', '2013/10/5', '2007/8/27']; output: ['7/14/2003', '4/25/2010', '2/11/2016', '10/5/2013', '8/27/2007']"}
{"id": "219-0", "oq_id": 219, "desc": "Input: a list of string values with dates in the format y-m-d.\nOutput: a list of string values with dates in the format m/d/y.\nFunctionality: The transformation converts the date format from y-m-d to m/d/y for each element in the given sequence.\nExample: Input: ['1999/5/10', '2008/1/30', '2015/6/8', '2005/11/17', '2019/9/3']; output: ['5/10/1999', '1/30/2008', '6/8/2015', '11/17/2005', '9/3/2019']"}
{"id": "219-4", "oq_id": 219, "desc": "Input: a list of string values with dates in the format \"y-m-d\".\nOutput: a list of string values with dates in the format \"m/d/y\".\nFunctionality: The transformation rearranges the date format from \"y-m-d\" to \"m/d/y\" for each element in the given sequence.\nExample: Input: ['2010/8/16', '2008/6/23', '2014/4/2', '2016/11/29', '2005/12/8']; output: ['8/16/2010', '6/23/2008', '4/2/2014', '11/29/2016', '12/8/2005']"}
{"id": "219-5", "oq_id": 219, "desc": "Input: a list of string values with dates in the format y-m-d.\nOutput: a list of string values with dates in the format m/d/y.\nFunctionality: The transformation converts each date from y-m-d format to m/d/y format in the result list.\nExample: Input: ['2006/2/25', '2014/9/1', '2019/7/7', '2008/4/13', '2013/10/20']; output: ['2/25/2006', '9/1/2014', '7/7/2019', '4/13/2008', '10/20/2013']"}
{"id": "219-7", "oq_id": 219, "desc": "Input: a list of string values with dates in the format y-m-d.\nOutput: a list of string values with dates in the format m/d/y.\nFunctionality: The transformation converts the date format from y-m-d to m/d/y for each element in the given sequence.\nExample: Input: ['2010/6/30', '2005/4/23', '2013/1/19', '2004/8/7', '2011/9/14']; output: ['6/30/2010', '4/23/2005', '1/19/2013', '8/7/2004', '9/14/2011']"}
{"id": "219-6", "oq_id": 219, "desc": "Input: a list of string values with dates in the format y-m-d.\nOutput: a list of string values with dates in the format m/d/y.\nFunctionality: The transformation converts each date from y-m-d format to m/d/y format in the result list.\nExample: Input: ['2007/7/3', '2015/11/11', '2009/2/18', '2016/4/27', '2011/3/6']; output: ['7/3/2007', '11/11/2015', '2/18/2009', '4/27/2016', '3/6/2011']"}
{"id": "219-8", "oq_id": 219, "desc": "Input: a list of string values with dates in the format y-m-d.\nOutput: a list of string values with dates in the format m/d/y.\nFunctionality: The transformation converts each date from y-m-d format to m/d/y format in the result list.\nExample: Input: ['2003/10/8', '2007/1/16', '2014/5/23', '2012/11/2', '2016/8/30']; output: ['10/8/2003', '1/16/2007', '5/23/2014', '11/2/2012', '8/30/2016']"}
{"id": "219-9", "oq_id": 219, "desc": "Input: a list of string values with dates in the format y-m-d.\nOutput: a list of string values with dates in the format m/d/y.\nFunctionality: The transformation converts the date format from y-m-d to m/d/y for each element in the given sequence.\nExample: Input: ['2019/3/30', '2006/12/10', '2011/5/24', '2008/7/19', '2013/9/14']; output: ['3/30/2019', '12/10/2006', '5/24/2011', '7/19/2008', '9/14/2013']"}
{"id": "220-6", "oq_id": 220, "desc": "Input: a list of string values in the format 'mm/dd/yyyy'.\nOutput: a list of string values representing month names.\nFunctionality: The transformation extracts the month from each date in the given sequence and converts it into the corresponding month name.\nExample: Input: ['08/05/2012', '07/03/2020', '04/29/2015', '12/10/2013']; output: ['August', 'July', 'April', 'December']"}
{"id": "220-7", "oq_id": 220, "desc": "Input: a list of string values representing dates in the format 'MM/DD/YYYY'.\nOutput: a list of string values representing the month names.\nFunctionality: The transformation extracts the month name from each date in the given sequence and outputs the month name in the result list.\nExample: Input: ['06/06/2014', '01/23/2017', '09/19/2010', '03/04/2012']; output: ['June', 'January', 'September', 'March']"}
{"id": "220-5", "oq_id": 220, "desc": "Input: a list of string values representing dates in 'mm/dd/yyyy' format.\nOutput: a list of string values representing month names.\nFunctionality: The transformation extracts the month name from each date in the given sequence and outputs the month names as strings in the result list.\nExample: Input: ['07/17/2016', '03/22/2013', '09/07/2018', '11/28/2019']; output: ['July', 'March', 'September', 'November']"}
{"id": "220-4", "oq_id": 220, "desc": "Input: a list of string values representing dates in mm/dd/yyyy format.\nOutput: a list of string values representing months.\nFunctionality: The transformation extracts the month name from each date in the given sequence and outputs the month name as a string in the result list.\nExample: Input: ['02/14/2008', '05/31/2010', '10/11/2015', '12/30/2011']; output: ['February', 'May', 'October', 'December']"}
{"id": "220-0", "oq_id": 220, "desc": "Input: a list of string values representing dates in mm/dd/yyyy format.\nOutput: a list of string values representing months.\nFunctionality: The transformation extracts the month name from each date in the given sequence and outputs the month name as a string in the result list.\nExample: Input: ['02/28/2020', '07/15/2019', '11/30/2018', '09/03/2017']; output: ['February', 'July', 'November', 'September']"}
{"id": "220-1", "oq_id": 220, "desc": "Input: a list of string values representing dates in 'mm/dd/yyyy' format.\nOutput: a list of string values representing month names.\nFunctionality: The transformation extracts the month name from each date in the given sequence and outputs the result as a list of month names.\nExample: Input: ['06/22/2010', '04/01/2011', '08/19/2012', '10/05/2013']; output: ['June', 'April', 'August', 'October']"}
{"id": "220-3", "oq_id": 220, "desc": "Input: a list of string values representing dates in the format 'MM/DD/YYYY'.\nOutput: a list of string values representing the month names.\nFunctionality: The transformation extracts the month name from each date in the given sequence and outputs the month name in the result list.\nExample: Input: ['04/02/2019', '08/08/2020', '11/20/2013', '06/16/2014']; output: ['April', 'August', 'November', 'June']"}
{"id": "220-2", "oq_id": 220, "desc": "Input: a list of string values representing dates in mm/dd/yyyy format.\nOutput: a list of string values representing months.\nFunctionality: The transformation extracts the month name from each date in the given sequence and outputs it in the result list.\nExample: Input: ['01/31/2015', '03/10/2016', '12/25/2017', '09/14/2018']; output: ['January', 'March', 'December', 'September']"}
{"id": "220-9", "oq_id": 220, "desc": "Input: a list of string values representing dates in 'mm/dd/yyyy' format.\nOutput: a list of string values representing month names.\nFunctionality: The transformation extracts the month name from each date in the given sequence and outputs the result as a list of month names.\nExample: Input: ['01/07/2013', '04/18/2013', '11/22/2015', '08/30/2017']; output: ['January', 'April', 'November', 'August']"}
{"id": "220-8", "oq_id": 220, "desc": "Input: a list of string values representing dates in the format 'MM/DD/YYYY'.\nOutput: a list of string values representing the month names.\nFunctionality: The transformation extracts the month name from each date in the given sequence and outputs the month name in the result list.\nExample: Input: ['05/20/2019', '11/12/2011', '07/26/2014', '02/09/2016']; output: ['May', 'November', 'July', 'February']"}
{"id": "221-5", "oq_id": 221, "desc": "Input: a list of strings containing person names.\nOutput: a list of strings containing abbreviated person names.\nFunctionality: The transformation extracts the first letter of the first name and combines it with the last name to form an abbreviated name in the result list.\nExample: Input: ['Stephanie Wright', 'Nicholas Flores', 'Rebecca King', 'Ethan White', 'Hannah Allen']; output: ['S. Wright', 'N. Flores', 'R. King', 'E. White', 'H. Allen']"}
{"id": "221-4", "oq_id": 221, "desc": "Input: a list of string values, where each element represents a person's full name.\nOutput: a list of string values, where each element represents the person's name initials followed by last name.\nFunctionality: The transformation extracts the first letter of the first name and combines it with the last name, separated by a period.\nExample: Input: ['Matthew Perez', 'Ashley Turner', 'Andrew Coleman', 'Madison Bailey', 'Jason Evans']; output: ['M. Perez', 'A. Turner', 'A. Coleman', 'M. Bailey', 'J. Evans']"}
{"id": "221-6", "oq_id": 221, "desc": "Input: a list of string values, each containing a full name.\nOutput: a list of string values, each containing the initial of the first name followed by the last name.\nFunctionality: The transformation extracts the initial of the first name and combines it with the last name in each element of the given sequence, then outputs the result as a list.\nExample: Input: ['Ryan Carter', 'Alexandra Hill', 'Patrick Hughes', 'Sophia Nelson', 'Benjamin Parker']; output: ['R. Carter', 'A. Hill', 'P. Hughes', 'S. Nelson', 'B. Parker']"}
{"id": "221-7", "oq_id": 221, "desc": "Input: a list of strings, each containing a full name.\nOutput: a list of strings, each containing initials followed by last name.\n\nFunctionality: The transformation extracts the initials (first letter of the first name and last name) from each full name in the given sequence, followed by the last name, and outputs the result as a list.\n\nExample: Input: ['Gabrielle Stewart', 'Jonathan Morris', 'Diana Russell', 'Peter Cook', 'Lauren Foster']; output: ['G. Stewart', 'J. Morris', 'D. Russell', 'P. Cook', 'L. Foster']"}
{"id": "221-3", "oq_id": 221, "desc": "Input: a list of string values, each containing a full name.\nOutput: a list of string values, each containing the abbreviated first name and last name initial.\nFunctionality: The transformation extracts the first letter of the first name and combines it with the last name initial for each element in the given sequence, resulting in an abbreviated form of the full name.\nExample: Input: ['Amanda Moore', 'Brandon Young', 'Victoria Garcia', 'Daniel Thomas', 'Natalie Rodriguez']; output: ['A. Moore', 'B. Young', 'V. Garcia', 'D. Thomas', 'N. Rodriguez']"}
{"id": "221-2", "oq_id": 221, "desc": "Input: a list of string values, where each element represents a person's full name.\nOutput: a list of string values, where each element represents the person's name initials followed by last name.\nFunctionality: The transformation extracts the first letter of the first name and combines it with the last name, separated by a period.\nExample: Input: ['Robert Wilson', 'Emma Jones', 'William Martinez', 'Olivia Taylor', 'Samuel Anderson']; output: ['R. Wilson', 'E. Jones', 'W. Martinez', 'O. Taylor', 'S. Anderson']"}
{"id": "221-0", "oq_id": 221, "desc": "Input: a list of strings representing person names.\nOutput: a list of strings representing person names in abbreviated format.\nFunctionality: The transformation abbreviates each person's name by using the first letter of their first name followed by a period and their last name.\nExample: Input: ['John Doe', 'Mary Smith', 'David Johnson', 'Sarah Lee', 'Michael Brown']; output: ['J. Doe', 'M. Smith', 'D. Johnson', 'S. Lee', 'M. Brown']"}
{"id": "221-1", "oq_id": 221, "desc": "Input: a list of string values, where each element represents a person's full name.\nOutput: a list of string values, where each element represents the person's name initials followed by last name.\nFunctionality: The transformation extracts the first letter of the first name and combines it with the last name, formatting it as \"F. Lastname\" in the result list.\nExample: Input: ['Samantha White', 'Joseph Davis', 'Laura Clark', 'Kevin Harris', 'Jennifer Miller']; output: ['S. White', 'J. Davis', 'L. Clark', 'K. Harris', 'J. Miller']"}
{"id": "221-9", "oq_id": 221, "desc": "Input: a list of string values, each containing a person's full name.\nOutput: a list of string values, each containing the person's initials followed by their last name.\nFunctionality: The transformation extracts the first letter of the first name and combines it with a period and the last name, outputting the result as a list of formatted strings.\nExample: Input: ['Julia Sanchez', 'Timothy Reed', 'Chelsea Murphy', 'Mark Scott', 'Vanessa Gonzalez']; output: ['J. Sanchez', 'T. Reed', 'C. Murphy', 'M. Scott', 'V. Gonzalez']"}
{"id": "221-8", "oq_id": 221, "desc": "Input: a list of string values, each containing a full name.\nOutput: a list of string values, each containing the abbreviated first name and last name initial.\nFunctionality: The transformation extracts the first letter of the first name and combines it with the last name initial to create an abbreviation, outputted as a list.\nExample: Input: ['George Bell', 'Carolyn Ward', 'Jeremy Rivera', 'Melissa Simmons', 'Lucas Powell']; output: ['G. Bell', 'C. Ward', 'J. Rivera', 'M. Simmons', 'L. Powell']"}
{"id": "222-4", "oq_id": 222, "desc": "Input: a list of string values, each containing a sequence of numerical characters.\nOutput: a list of strings, where each element contains sets of 4 numerical characters separated by commas.\nFunctionality: The transformation splits each element in the given sequence into sets of 4 numerical characters, separated by commas, and outputs the result as a list of strings.\nExample: Input: ['1234432158765432', '786543347654', '1234432', '786543546', '1']; output: ['1234,4321,5876,5432', '7865,4334,7654', '1234,432', '7865,4354,6', '1']"}
{"id": "222-5", "oq_id": 222, "desc": "Input: a list of string values, each containing a sequence of numbers.\nOutput: a list of strings with the numbers split into groups of 4 digits.\nFunctionality: The transformation splits each sequence of numbers in the given list into groups of 4 digits, separated by commas, and outputs the result as a list.\nExample: Input: ['1357913579135791', '357913579135', '1357913', '357913579', '1']; output: ['1357,9135,7913,5791', '3579,1357,9135', '1357,913', '3579,1357,9', '1']"}
{"id": "222-7", "oq_id": 222, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation splits each element from the given sequence into sizes of 4, separated by commas, and outputs the result as a list of formatted strings.\nExample: Input: ['1357913579135791', '579135791135', '1357913', '579135791', '1']; output: ['1357,9135,7913,5791', '5791,3579,1135', '1357,913', '5791,3579,1', '1']"}
{"id": "222-6", "oq_id": 222, "desc": "Input: a list of string values, representing numerical sequences.\nOutput: a list of string values, split into sizes of 4 digits.\nFunctionality: The transformation splits each element in the input sequence into chunks of 4 digits and formats the chunks in the output list.\nExample: Input: ['2468024680204680', '024680246802', '2468024', '024680246', '2']; output: ['2468,0246,8020,4680', '0246,8024,6802', '2468,024', '0246,8024,6', '2']"}
{"id": "222-2", "oq_id": 222, "desc": "Input: a list of string values, each containing a sequence of numerical characters.\nOutput: a list of strings, where each element contains numerical characters split into groups of 4.\nFunctionality: The transformation splits each sequence of numerical characters into groups of 4, separated by commas, in the resulting list.\nExample: Input: ['9999888877776666', '889998899998', '9999888', '889998876', '9']; output: ['9999,8888,7777,6666', '8899,9889,9998', '9999,888', '8899,9887,6', '9']"}
{"id": "222-3", "oq_id": 222, "desc": "Input: a list of string values, each containing a sequence of numbers.\nOutput: a list of strings with numbers separated by commas.\nFunctionality: The transformation splits each string in the given sequence into chunks of 4 numbers and separates them by commas in the output list.\nExample: Input: ['4444555566667777', '455545555645', '4444555', '455545654', '4']; output: ['4444,5555,6666,7777', '4555,4555,5645', '4444,555', '4555,4565,4', '4']"}
{"id": "222-1", "oq_id": 222, "desc": "Input: a list of string values, each containing a sequence of numbers with varying lengths.\nOutput: a list of string values, each containing numbers split into groups of 4 digits separated by commas.\nFunctionality: The transformation splits each sequence of numbers in the given sequence into groups of 4 digits, separated by commas, and output the result as a list.\nExample: Input: ['5555666677778888', '565657665756', '5555666', '565657654', '5']; output: ['5555,6666,7777,8888', '5656,5766,5756', '5555,666', '5656,5765,4', '5']"}
{"id": "222-0", "oq_id": 222, "desc": "Input: a list of string values, representing numerical sequences.\nOutput: a list of string values, with each element containing numbers split into sizes of 4.\nFunctionality: The transformation splits each numeric value in the given sequence into sizes of 4 digits, and formats the result as a comma-separated string in the output list.\nExample: Input: ['9876987698769876', '876587658765', '9876987', '876587654', '9']; output: ['9876,9876,9876,9876', '8765,8765,8765', '9876,987', '8765,8765,4', '9']"}
{"id": "222-8", "oq_id": 222, "desc": "Input: a list of string values, each containing a sequence of characters.\nOutput: a list of strings with characters grouped in sizes of 4.\nFunctionality: The transformation splits each sequence of characters into groups of 4 characters and formats them as strings in the output list.\nExample: Input: ['1111222233334444', '222333444555', '1111222', '222333444', '1']; output: ['1111,2222,3333,4444', '2223,3344,4555', '1111,222', '2223,3344,4', '1']"}
{"id": "222-9", "oq_id": 222, "desc": "Input: a list of string values, each containing a sequence of numbers.\nOutput: a list of strings with numbers separated by commas.\nFunctionality: The transformation splits each string in the sequence into sizes of 4 numbers, separated by commas, and output the result as a list of formatted strings.\nExample: Input: ['1234512345123451', '453214523412', '1234512', '453214523', '1']; output: ['1234,5123,4512,3451', '4532,1452,3412', '1234,512', '4532,1452,3', '1']"}
{"id": "223-7", "oq_id": 223, "desc": "Input: a list of string values with special characters and parentheses.\nOutput: a list of string values with special characters removed.\nFunctionality: The transformation removes all special characters from each element in the given sequence and outputs the modified strings in a list.\nExample: Input: ['!@#$', '%^&*', '(())', '[]{}']; output: ['!@#$', '%^&*', '()', '[]{}']"}
{"id": "223-6", "oq_id": 223, "desc": "Input: a list of string values, each containing a mixture of numbers and alphabets.\nOutput: a list of string values.\nFunctionality: The transformation removes alphabets from each element in the given sequence, and outputs the modified elements in a new list.\nExample: Input: ['123abc', '456def', '789ghi', '101jkl']; output: ['123', '456', '789', '10']"}
{"id": "223-4", "oq_id": 223, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts unique characters from each element in the given sequence, and outputs the result as a list without duplicates.\nExample: Input: ['XYZ', 'ABC', 'LMNO', 'PQRS']; output: ['XYZ', 'ABC', 'LMNO', 'PQRS']"}
{"id": "223-5", "oq_id": 223, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes duplicate characters within each string in the given sequence and outputs the modified strings in a new list.\nExample: Input: ['apple', 'orange', 'banana', 'kiwi']; output: ['aple', 'orange', 'ban', 'kiw']"}
{"id": "223-1", "oq_id": 223, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts distinct characters from the beginning of each element in the given sequence and outputs them as a list of strings.\nExample: Input: ['KEKE', 'PQPQ', 'LMN', 'NOP']; output: ['KE', 'PQ', 'LMN', 'NOP']"}
{"id": "223-0", "oq_id": 223, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts unique characters from each element in the given sequence, maintaining the order of appearance, and outputs a list of strings.\nExample: Input: ['ABC', 'DEF', 'GHI', 'JKL']; output: ['ABC', 'DEF', 'GHI', 'JKL']"}
{"id": "223-2", "oq_id": 223, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation gets the distinct characters from each element in the given sequence, and output the unique characters as a list of strings.\nExample: Input: ['AAA', 'BBB', 'CCC', 'DDD']; output: ['A', 'B', 'C', 'D']"}
{"id": "223-3", "oq_id": 223, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation keeps all distinct characters in each element of the given sequence as they are, and outputs the result as a list.\nExample: Input: ['12345', '67890', '54321', '09876']; output: ['12345', '67890', '54321', '09876']"}
{"id": "223-8", "oq_id": 223, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation gets distinct characters of each element in the given sequence and outputs them as a string in the result list.\nExample: Input: ['AABBCC', '112233', 'XYZXYZ', '787878']; output: ['ABC', '123', 'XYZ', '78']"}
{"id": "223-9", "oq_id": 223, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation removes duplicate characters from each element in the given sequence, and output the modified strings in a list.\nExample: Input: ['Hello', 'World', 'Python', 'Programming']; output: ['Helo', 'World', 'Python', 'Progamin']"}
{"id": "224-2", "oq_id": 224, "desc": "Input: a list of string values, with numerical values separated by commas in each element.\nOutput: a list of numerical values.\nFunctionality: The transformation extracts the first number from each element in the given sequence, converts it to a float, and outputs the result as a list.\nExample: Input: ['15,16,17,15', '25,25,28,18,15', '20,20', '1,10,5', '5,50,10,2']; output: [15.0, 25.0, 20.0, 1.0, 5.0]"}
{"id": "224-3", "oq_id": 224, "desc": "Input: a list of string values, where each element contains a comma-separated list of numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation calculates the standard deviation for each element in the given sequence and outputs the result as a list of numbers.\nExample: Input: ['6,7,8,6', '10,8,9,10,10', '16,16', '10,100,11', '11,110,12,100']; output: [0.957, 0.894, 0, 51.675, 54.138]"}
{"id": "224-1", "oq_id": 224, "desc": "Input: a list of string values, where each element contains a comma-separated list of numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation calculates the standard deviation of the numbers within each element of the given sequence, and outputs the result as a list formatted as strings rounded to three decimal places.\nExample: Input: ['9,10,11,8', '18,19,20,18,13', '15,15', '10,5,2', '4,40,9,30']; output: ['1.291', '2.702', '0', '4.041', '17.076']"}
{"id": "224-0", "oq_id": 224, "desc": "Input: a list of string values, where each element consists of comma-separated numerical values.\nOutput: a list of numerical values.\nFunctionality: The transformation calculates the standard deviation for each element in the given sequence, and output the result as a list of numerical values.\nExample: Input: ['8,9,10,7', '20,21,22,20,15', '18,18', '5,50,10', '3,30,7,40']; output: [1.291, 2.702, 0, 24.664, 17.87]"}
{"id": "224-4", "oq_id": 224, "desc": "Input: a list of string values, where each element contains a comma-separated list of numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation calculates the standard deviation of each element in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['25,26,27,28', '29,30,31,28,30', '22,23', '15,16,17', '18,19,20,5']; output: ['1.291', '1.14', '0.707', '1', '7.047']"}
{"id": "224-5", "oq_id": 224, "desc": "Input: a list of string values, each containing a comma-separated list of numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation calculates the standard deviation of each set of numbers in the given sequence and outputs the result as a numerical list.\nExample: Input: ['3,4,5,3', '7,8,9,5,10', '3,4', '2,20,3', '1,10,2,50']; output: [0.957, 1.924, 0.707, 10.116, 23.186]"}
{"id": "224-7", "oq_id": 224, "desc": "Input: a list of string values, where each element contains a comma-separated list of numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation calculates the standard deviation of each element in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['13,14,15,16', '32,33,34,32,35', '21,22', '20,25,30', '20,30,40,50']; output: ['1.291', '1.304', '0.707', '5', '12.91']"}
{"id": "224-6", "oq_id": 224, "desc": "Input: a list of string values, where each element contains a comma-separated list of numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation calculates the standard deviation of the numbers within each element of the given sequence, and outputs the result as a list formatted as strings rounded to three decimal places.\nExample: Input: ['17,18,19,20', '18,19,20,21,22', '25,26', '50,51,52', '49,50,100,1']; output: ['1.291', '1.581', '0.707', '1', '40.423']"}
{"id": "224-8", "oq_id": 224, "desc": "Input: a list of string values, where each element contains a comma-separated list of numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation calculates the standard deviation of each element in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['22,23,24,25', '18,19,20,22,25', '12,13', '13,14,12', '5,6,7,8']; output: [1.291, 2.775, 0.707, 1, 1.291]"}
{"id": "224-9", "oq_id": 224, "desc": "Input: a list of string values, where each element contains a comma-separated list of numbers.\nOutput: a list of numerical values.\nFunctionality: The transformation calculates the standard deviation of each element in the given sequence and outputs the result as a list of numerical values.\nExample: Input: ['11,12,13,14', '17,18,19,20,21', '16,17', '19,20,21', '1,2,3,100']; output: ['1.291', '1.581', '0.707', '1', '49.007']"}
{"id": "226-0", "oq_id": 226, "desc": "Input: a list of string values representing years.\nOutput: a list of string values representing common or leap years.\nFunctionality: The transformation checks if each year in the given sequence is a leap year or not, and outputs 'leap' for leap years and 'common' for common years.\nExample: Input: ['1987', '1988', '1989', '1990', '1991', '1992', '1996', '1997']; output: ['common', 'leap', 'common', 'common', 'common', 'leap', 'leap', 'common']"}
{"id": "226-1", "oq_id": 226, "desc": "Input: a list of string values representing years.\nOutput: a list of string values indicating whether the corresponding year is a common year or a leap year.\nFunctionality: The transformation determines if each year in the given sequence is a leap year or a common year based on the rules of leap years, and outputs the result as a list of strings.\nExample: Input: ['1975', '1976', '1977', '1978', '1979', '1980', '1984', '1985']; output: ['common', 'leap', 'common', 'common', 'common', 'leap', 'leap', 'common']"}
{"id": "226-3", "oq_id": 226, "desc": "Input: a list of string values representing years.\nOutput: a list of string values indicating whether each year is a common year or a leap year.\nFunctionality: The transformation classifies each year in the given sequence as a common year or a leap year based on the rules of leap year calculation, and outputs the result as a list of strings.\nExample: Input: ['1943', '1944', '1945', '1946', '1947', '1948', '1952', '1953']; output: ['common', 'leap', 'common', 'common', 'common', 'leap', 'leap', 'common']"}
{"id": "226-2", "oq_id": 226, "desc": "Input: a list of string values representing years.\nOutput: a list of string values indicating whether the corresponding year is a common year or a leap year.\nFunctionality: The transformation determines if each year in the given sequence is a leap year or a common year based on the rules of leap years, and outputs the result as a list of strings.\nExample: Input: ['1955', '1956', '1957', '1958', '1959', '1960', '1964', '1965']; output: ['common', 'leap', 'common', 'common', 'common', 'leap', 'leap', 'common']"}
{"id": "226-6", "oq_id": 226, "desc": "Input: a list of string values, representing years.\nOutput: a list of string values, representing whether the year is common or a leap year.\n\nFunctionality: The transformation checks each year in the input sequence and determines if it is a leap year or a common year based on the leap year rules. The result is formatted as a string indicating whether the year is common or leap.\n\nExample: Input: ['1899', '1900', '1901', '1902', '1903', '1904', '1908', '1909']; output: ['common', 'common', 'common', 'common', 'common', 'leap', 'leap', 'common']"}
{"id": "226-7", "oq_id": 226, "desc": "Input: a list of string values, representing years.\nOutput: a list of string values, representing whether the year is common or a leap year.\n\nFunctionality: The transformation checks each year in the input sequence and determines if it is a leap year or a common year based on the leap year rules. The result is formatted as a string indicating whether the year is common or leap.\n\nExample: Input: ['1873', '1874', '1875', '1876', '1877', '1880', '1881', '1882']; output: ['common', 'common', 'common', 'leap', 'common', 'leap', 'common', 'common']"}
{"id": "226-5", "oq_id": 226, "desc": "Input: a list of string values representing years.\nOutput: a list of string values indicating whether the corresponding year is a leap year or a common year.\nFunctionality: The transformation determines if each year in the given sequence is a leap year or a common year based on the rules of leap years (divisible by 4 with exceptions) and outputs the result as a list of strings.\nExample: Input: ['1904', '1905', '1906', '1907', '1908', '1912', '1913', '1914']; output: ['leap', 'common', 'common', 'common', 'leap', 'leap', 'common', 'common']"}
{"id": "226-4", "oq_id": 226, "desc": "Input: a list of string values representing years.\nOutput: a list of string values indicating whether each year is a leap year or a common year.\nFunctionality: The transformation classifies each year in the given sequence as a leap year or a common year based on the rules of leap years (divisible by 4, except for years divisible by 100 unless also divisible by 400).\nExample: Input: ['1920', '1921', '1922', '1923', '1924', '1928', '1929', '1930']; output: ['leap', 'common', 'common', 'common', 'leap', 'leap', 'common', 'common']"}
{"id": "226-9", "oq_id": 226, "desc": "Input: a list of string values, representing years.\nOutput: a list of string values, representing whether the year is common or a leap year.\n\nFunctionality: The transformation checks each year in the input sequence and determines if it is a leap year or a common year based on the leap year rules. The result is a list with the corresponding label for each year.\n\nExample: Input: ['1800', '1801', '1802', '1803', '1804', '1808', '1809', '1810']; output: ['common', 'common', 'common', 'common', 'leap', 'leap', 'common', 'common']"}
{"id": "226-8", "oq_id": 226, "desc": "Input: a list of string values, representing years.\nOutput: a list of string values, representing whether the year is common or a leap year.\n\nFunctionality: The transformation checks each year in the input sequence and determines if it is a leap year or a common year based on the leap year rules. The result is formatted as a string indicating whether the year is common or leap.\n\nExample: Input: ['1833', '1834', '1835', '1836', '1837', '1840', '1841', '1842']; output: ['common', 'common', 'common', 'leap', 'common', 'leap', 'common', 'common']"}
{"id": "227-3", "oq_id": 227, "desc": "Input: a list of string values, with email addresses in each element.\nOutput: a list of string values, with valid email addresses in each element.\nFunctionality: The transformation validates each element in the given sequence to ensure it is a valid email address, removing any invalid entries from the result list.\nExample: Input: ['example@test.com', 'test@example.com', 'email@example.com', '12345@678.com', 'invalidemail.com']; output: ['example@test.com', 'test@example.com', 'email@example.com', '12345@678.com', 'invalid']"}
{"id": "227-2", "oq_id": 227, "desc": "Input: a list of string values, each representing an email address.\nOutput: a list of string values, where invalid email addresses are removed.\nFunctionality: The transformation extracts and validates email addresses from each element in the given sequence, excluding any invalid emails, and outputs the valid email addresses as strings in the result list.\nExample: Input: ['abc@xyz.com', '12345@678.com', 'testing@123.com', 'invalidemail.com', '123@abc.xyz']; output: ['abc@xyz.com', '12345@678.com', 'testing@123.com', '123@abc.xyz']"}
{"id": "227-0", "oq_id": 227, "desc": "Input: a list of string values, with email addresses mixed with invalid formats.\nOutput: a list of valid email addresses as strings.\nFunctionality: The transformation validates each element in the given sequence to check if it follows the email address format. Only valid email addresses are included in the output list.\nExample: Input: ['email@test.com', 'invalid@invalid.com', '12345@email.com', 'invalidemail.com', 'valid@email.com']; output: ['email@test.com', 'invalid@invalid.com', '12345@email.com', 'valid@email.com']"}
{"id": "227-1", "oq_id": 227, "desc": "Input: a list of strings, representing email addresses.\nOutput: a list of strings, representing valid email addresses.\nFunctionality: The transformation extracts valid email addresses from each element in the given sequence based on the presence of '@' and '.' in the string, outputting only valid email addresses in the result list.\nExample: Input: ['name@email.com', 'user@mail.com', 'validemail.com', '12345@123.com', 'invalid.com']; output: ['name@email.com', 'user@mail.com', 'invalid', '12345@123.com', 'invalid']"}
{"id": "227-5", "oq_id": 227, "desc": "Input: a list of strings representing email addresses.\nOutput: a list of strings representing valid email addresses.\nFunctionality: The transformation extracts valid email addresses from each element in the given sequence based on the standard email format, and outputs them as a list.\nExample: Input: ['123@456.com', 'test@test.com', 'example@example.com', 'invalid@123.com', 'invalid.com']; output: ['123@456.com', 'test@test.com', 'example@example.com', 'invalid@123.com', 'invalid']"}
{"id": "227-4", "oq_id": 227, "desc": "Input: a list of email addresses in string format.\nOutput: a list of email addresses in string format.\nFunctionality: The transformation validates each email address in the given sequence to ensure they follow the correct format (contain '@' and '.') and outputs the valid addresses, while replacing invalid ones with an indication of 'invalid'.\nExample: Input: ['validemail@test.com', 'email@123.com', 'invalidemail.com', 'test@123.com', 'email@example.com']; output: ['validemail@test.com', 'email@123.com', 'invalid', 'test@123.com', 'email@example.com']"}
{"id": "227-6", "oq_id": 227, "desc": "Input: a list of email addresses as strings.\nOutput: a list of valid email addresses as strings.\nFunctionality: The transformation checks each element in the given sequence for valid email address format using regular expressions, and outputs only the valid email addresses in a new list.\nExample: Input: ['name@email.com', 'email@123.com', 'invalid@invalid.com', '123@456.com', '12345@789.com']; output: ['name@email.com', 'email@123.com', '123@456.com', '12345@789.com']"}
{"id": "227-7", "oq_id": 227, "desc": "Input: a list of email addresses.\nOutput: a list of email addresses.\nFunctionality: The transformation validates each email address in the given sequence, and outputs the valid email addresses in the result list.\nExample: Input: ['abc@123.com', 'email@456.com', 'test@example.com', 'user@test.com', '12345@678.com']; output: ['abc@123.com', 'email@456.com', 'test@example.com', 'user@test.com', '12345@678.com']"}
{"id": "227-9", "oq_id": 227, "desc": "Input: a list of strings representing email addresses.\nOutput: a list of strings representing valid email addresses.\n\nFunctionality: The transformation validates each email address in the given sequence to check if it follows the standard email format. Outputs the valid email addresses.\nExample: Input: ['test@123.com', '123@email.com', 'email@123.com', 'test@example.com', 'invalid@123.com']; output: ['test@123.com', '123@email.com', 'email@123.com', 'test@example.com', 'invalid@123.com']"}
{"id": "227-8", "oq_id": 227, "desc": "Input: a list of email addresses in string format.\nOutput: a list of valid email addresses in string format.\nFunctionality: The transformation validates each email address in the given sequence and outputs only the valid ones.\nExample: Input: ['name@example.com', 'email@user.com', '123@456.com', 'invalid@example.com', '123@test.com']; output: ['name@example.com', 'email@user.com', '123@456.com', '123@test.com']"}
{"id": "228-9", "oq_id": 228, "desc": "Input: a list of strings representing phone numbers in the format XXX-XXX-XXXX.\nOutput: a list of strings representing phone numbers with the area code replaced by \"425\".\nFunctionality: The transformation replaces the area code of each phone number in the given sequence with \"425\", and outputs the result as a list.\nExample: Input: ['567-567-8901', '678-9012', '345-3451', '091-234-5678', '234-3456']; output: ['567-567-8901', '425-678-9012', '425-345-3451', '091-234-5678', '425-234-3456']"}
{"id": "228-8", "oq_id": 228, "desc": "Input: a list of strings representing phone numbers in the format XXX-XXX-XXXX.\nOutput: a list of strings representing phone numbers with the area code defaulting to 425.\nFunctionality: The transformation replaces the area code in each phone number from the given sequence with the default area code 425, and output the modified phone number.\nExample: Input: ['876-543-2109', '123-4567', '098-7654', '567-890-1234', '111-2222']; output: ['876-543-2109', '425-123-4567', '425-098-7654', '567-890-1234', '425-111-2222']"}
{"id": "228-6", "oq_id": 228, "desc": "Input: a list of strings representing phone numbers in the format \"###-###-####\".\nOutput: a list of strings representing phone numbers with the area code \"425-\" added to numbers that do not already have it.\nFunctionality: The transformation checks each element in the given sequence and adds \"425-\" to phone numbers that do not start with it, preserving those that already do.\nExample: Input: ['777-777-7777', '222-3333', '555-6666', '444-444-4444', '888-8888']; output: ['777-777-7777', '425-222-3333', '425-555-6666', '444-444-4444', '425-888-8888']"}
{"id": "228-7", "oq_id": 228, "desc": "Input: a list of strings representing phone numbers in the format XXX-XXX-XXXX.\nOutput: a list of strings representing phone numbers with the area code defaulting to 425.\nFunctionality: The transformation updates the area code in each phone number from the given sequence to 425 and outputs the result as a list.\nExample: Input: ['112-222-3344', '223-3344', '556-6677', '778-899-0112', '445-4453']; output: ['112-222-3344', '425-223-3344', '425-556-6677', '778-899-0112', '425-445-4453']"}
{"id": "228-5", "oq_id": 228, "desc": "Input: a list of strings representing phone numbers.\nOutput: a list of strings representing phone numbers.\nFunctionality: The transformation adds the default area code '425' to any phone numbers in the given sequence that do not already have an area code.\nExample: Input: ['888-888-8888', '444-4444', '111-1111', '999-999-9999', '666-6666']; output: ['888-888-8888', '425-444-4444', '425-111-1111', '999-999-9999', '425-666-6666']"}
{"id": "228-4", "oq_id": 228, "desc": "Input: a list of strings representing phone numbers in the format \"XXX-XXX-XXXX\".\nOutput: a list of strings representing phone numbers with the area code \"425-\" added to numbers that do not already have it.\nFunctionality: The transformation checks each phone number in the given sequence. If the number does not start with \"425-\", it adds \"425-\" to the beginning of the number. The result is output as a list of strings.\nExample: Input: ['666-123-4567', '888-8888', '222-2222', '333-444-5555', '777-7777']; output: ['666-123-4567', '425-888-8888', '425-222-2222', '333-444-5555', '425-777-7777']"}
{"id": "228-0", "oq_id": 228, "desc": "Input: a list of strings representing phone numbers in the format \"###-###-####\".\nOutput: a list of strings representing phone numbers in the format \"###-###-####\".\n\nFunctionality: The transformation replaces the first occurrence of any phone number in the given sequence that does not start with \"425\" with \"425\", and output the result as a list.\n\nExample: Input: ['123-456-7890', '987-6543', '111-2222', '456-789-0123', '333-4444']; output: ['123-456-7890', '425-987-6543', '425-111-2222', '456-789-0123', '425-333-4444']"}
{"id": "228-1", "oq_id": 228, "desc": "Input: a list of strings representing phone numbers.\nOutput: a list of strings representing phone numbers.\nFunctionality: The transformation adds the default area code '425' to any phone numbers in the given sequence that do not already have an area code.\nExample: Input: ['555-555-5555', '777-7777', '999-9999', '123-456-7891', '987-6543']; output: ['555-555-5555', '425-777-7777', '425-999-9999', '123-456-7891', '425-987-6543']"}
{"id": "228-3", "oq_id": 228, "desc": "Input: a list of string values representing phone numbers.\nOutput: a list of string values representing formatted phone numbers with a default area code of 425.\nFunctionality: The transformation adds a default area code of 425 to each phone number in the given sequence.\nExample: Input: ['123-123-1234', '456-7890', '987-6543', '111-2222', '555-5555']; output: ['123-123-1234', '425-456-7890', '425-987-6543', '425-111-2222', '425-555-5555']"}
{"id": "228-2", "oq_id": 228, "desc": "Input: a list of string values representing phone numbers.\nOutput: a list of string values representing phone numbers.\nFunctionality: The transformation adds the default area code '425' to any phone numbers in the given sequence that do not already have an area code.\nExample: Input: ['111-222-3333', '444-555', '666-7777', '888-999-0000', '555-6666']; output: ['111-222-3333', '425-444-555', '425-666-7777', '888-999-0000', '425-555-6666']"}
{"id": "229-9", "oq_id": 229, "desc": "Input: a list of string values, representing phone numbers in various formats.\nOutput: a list of string values, formatted as 'xxx-xxx-xxxx'.\nFunctionality: The transformation extracts the numeric digits from each element in the given sequence, rearranges them into the 'xxx-xxx-xxxx' format, and outputs the result as a list.\nExample: Input: ['1234567', '9876543210', '(111)222-3333', '789-4567', '425-3334444', '(555) 6667777']; output: ['425-123-4567', '987-654-3210', '111-222-3333', '425-789-4567', '425-333-4444', '555-666-7777']"}
{"id": "229-8", "oq_id": 229, "desc": "Input: a list of string values, each representing a formatted phone number.\nOutput: a list of string values, with a modified phone number format.\nFunctionality: The transformation reformats the phone numbers in the given sequence by removing any special characters, such as parentheses or hyphens, and adding the default area code \"425\" if it's missing.\nExample: Input: ['987-6543', '765-432-1098', '(543)-210-9876', '543-6789', '425-9876543', '(321) 5438760']; output: ['425-987-6543', '765-432-1098', '543-210-9876', '425-543-6789', '425-987-6543', '321-543-8760']"}
{"id": "229-5", "oq_id": 229, "desc": "Input: a list of string values, representing phone numbers in various formats.\nOutput: a list of string values, formatted as 'xxx-xxx-xxxx'.\nFunctionality: The transformation reformats each phone number in the given sequence to follow the 'xxx-xxx-xxxx' format, and outputs the formatted phone numbers as a list.\nExample: Input: ['1234567', '9876543210', '(111)-222-3333', '789-4567', '425-3334444', '(555) 6667777']; output: ['425-123-4567', '987-654-3210', '111-222-3333', '425-789-4567', '425-333-4444', '555-666-7777']"}
{"id": "229-4", "oq_id": 229, "desc": "Input: a list of string values, each representing a phone number in different formats.\nOutput: a list of string values, each representing a phone number in a standardized format.\nFunctionality: The transformation extracts only the numerical digits from each element in the given sequence and formats them as a standard xx-xxx-xxxx phone number format.\nExample: Input: ['333-4444', '555-666-7777', '(888) 9990000', '222-3333', '425-4445555', '(999) 0001111']; output: ['425-333-4444', '555-666-7777', '888-999-0000', '425-222-3333', '425-444-5555', '999-000-1111']"}
{"id": "229-6", "oq_id": 229, "desc": "Input: a list of string values, each representing a formatted phone number.\nOutput: a list of string values, with a modified format for each phone number.\nFunctionality: The transformation removes any non-numeric characters from each phone number in the given sequence and updates the format to match the desired output format.\nExample: Input: ['999-8888', '777-666-5555', '(444) 3332222', '111-0000', '425-7778888', '(222) 1110000']; output: ['425-999-8888', '777-666-5555', '444-333-2222', '425-111-0000', '425-777-8888', '222-111-0000']"}
{"id": "229-7", "oq_id": 229, "desc": "Input: a list of string values, each representing a formatted phone number.\nOutput: a list of string values, with a modified format for each phone number.\nFunctionality: The transformation removes any non-numeric characters from each phone number in the given sequence and updates the format to match the desired output format.\nExample: Input: ['234-5678', '876-543-2109', '(543)-654-7654', '098-7654', '425-6787654', '(432) 5698760']; output: ['425-234-5678', '876-543-2109', '543-654-7654', '425-098-7654', '425-678-7654', '432-569-8760']"}
{"id": "229-3", "oq_id": 229, "desc": "Input: a list of strings containing various formats of phone numbers.\nOutput: a list of strings with phone numbers formatted as '###-###-####'.\n\nFunctionality: The transformation extracts the numerical digits from each element in the given sequence, and then formats them as a standard phone number with dashes.\n\nExample: Input: ['2223334', '4445556666', '(777)8889999', '1112222', '4253334444', '(888) 9990000']; output: ['425-222-3334', '444-555-6666', '777-888-9999', '425-111-2222', '425-333-4444', '888-999-0000']"}
{"id": "229-2", "oq_id": 229, "desc": "Input: a list of string values, each representing a formatted phone number.\nOutput: a list of string values, with a modified phone number format.\nFunctionality: The transformation reformats the phone numbers in the given sequence by removing any special characters, such as parentheses, hyphens, and spaces, and standardizing the format to ###-###-####.\nExample: Input: ['111-2222', '333-444-5555', '(777) 8889999', '999-0000', '425-1112222', '(888) 9990000']; output: ['425-111-2222', '333-444-5555', '777-888-9999', '425-999-0000', '425-111-2222', '888-999-0000']"}
{"id": "229-0", "oq_id": 229, "desc": "Input: a list of string values, representing phone numbers in various formats.\nOutput: a list of string values, formatted as 'xxx-xxx-xxxx'.\nFunctionality: The transformation reformats each phone number in the given sequence to follow the 'xxx-xxx-xxxx' format, and outputs the formatted phone numbers as a list.\nExample: Input: ['1234567', '9876543210', '(111)222-3333', '789-4567', '425-3334444', '(555) 6667777']; output: ['425-123-4567', '987-654-3210', '111-222-3333', '425-789-4567', '425-333-4444', '555-666-7777']"}
{"id": "229-1", "oq_id": 229, "desc": "Input: a list of string values, each representing a phone number in different formats.\nOutput: a list of string values, each representing a phone number in a standardized format.\nFunctionality: The transformation extracts only the numerical digits from each element in the given sequence and formats them as a standardized phone number format.\nExample: Input: ['555-1234', '111-222-3333', '(333) 4445555', '777-8888', '425-9990000', '(999) 0001111']; output: ['425-555-1234', '111-222-3333', '333-444-5555', '425-777-8888', '425-999-0000', '999-000-1111']"}
{"id": "230-8", "oq_id": 230, "desc": "Input: a list of complex text values in the format of nested sets.\nOutput: a list of strings.\nFunctionality: The transformation extracts the first element from the second set in each nested set of the given sequence and outputs them as a list of strings.\nExample: Input: ['{{breakfast, lunch}, {dinner, dessert}}', '{{snack, appetizer}, {main course, side dish}}', '{{beverage, soup}, {salad, fruit}}', '{{meat, seafood}, {vegetable, pasta}}']; output: ['dinner', 'main course', 'salad', 'vegetable']"}
{"id": "230-9", "oq_id": 230, "desc": "Input: a list of complex text values with nested sets.\nOutput: a list of strings extracted from the nested sets.\nFunctionality: The transformation extracts the first element from the second set in each nested set of the given sequences, and outputs them as a list of strings.\nExample: Input: ['{{study, work}, {rest, play}}', '{{exercise, relax}, {meditate, socialize}}', '{{create, organize}, {solve, analyze}}', '{{learn, teach}, {inspire, motivate}}']; output: ['rest', 'meditate', 'solve', 'inspire']"}
{"id": "230-4", "oq_id": 230, "desc": "Input: a list of complex text values, containing multiple groups of strings.\nOutput: a list of single string values.\nFunctionality: The transformation extracts the first element from each group in the given sequence, and outputs it as a single string in the result list.\nExample: Input: ['{{Monday, Tuesday, Wednesday}, {Thursday, Friday}}', '{{Saturday, Sunday}, {January, February}}', '{{March, April, May}, {June, July}}', '{{August, September, October}, {November, December}}']; output: ['Thursday', 'January', 'June', 'November']"}
{"id": "230-5", "oq_id": 230, "desc": "Input: a list of complex text values containing nested groups of items.\nOutput: a list of string values.\nFunctionality: The transformation extracts the first element from each nested group in the given sequence, and outputs them as strings in a new list.\nExample: Input: ['{{car, bike}, {bus, train}}', '{{plane, ship}, {subway, taxi}}', '{{motorcycle, scooter}, {van, truck}}', '{{helicopter, boat}, {bicycle, roller skating}}']; output: ['bus', 'subway', 'van', 'bicycle']"}
{"id": "230-7", "oq_id": 230, "desc": "Input: a list of complex text values containing multiple sets of words within curly braces.\nOutput: a list of text values representing the first word in the second set of each element.\n\nFunctionality: The transformation extracts the first word from the second set in each element of the given sequence and outputs it as a list.\n\nExample: Input: ['{{morning, afternoon}, {evening, night}}', '{{sunrise, sunset}, {midnight, noon}}', '{{dawn, dusk}, {twilight, daybreak}}', '{{noon, sunset}, {midmorning, afternoon}}']; output: ['evening', 'midnight', 'twilight', 'midmorning']"}
{"id": "230-6", "oq_id": 230, "desc": "Input: a list of complex text values representing sets of weather conditions.\nOutput: a list of string values representing single weather conditions.\nFunctionality: The transformation extracts the first element from each set within the given sequence and outputs it as a string value in the result list.\nExample: Input: ['{{sunny, cloudy}, {rainy, snowy}}', '{{windy, stormy}, {foggy, icy}}', '{{hot, warm}, {cool, cold}}', '{{dry, humid}, {freezing, scorching}}']; output: ['rainy', 'foggy', 'cool', 'freezing']"}
{"id": "230-2", "oq_id": 230, "desc": "Input: a list of complex text strings containing nested lists of fruits.\nOutput: a list of strings representing individual fruits.\nFunctionality: The transformation extracts the specific fruit mentioned in the input sequence, and outputs the result as a list of strings.\nExample: Input: ['{{apple, banana, cherry}, {date, fig}}', '{{grape, kiwi}, {lemon, mango}}', '{{nectarine, orange}, {pear, quince}}', '{{raspberry, strawberry}, {tangerine, watermelon}}']; output: ['date', 'lemon', 'pear', 'tangerine']"}
{"id": "230-3", "oq_id": 230, "desc": "Input: a list of strings containing nested groups of animals.\nOutput: a list of strings with a single animal from each group.\n\nFunctionality: The transformation extracts the first animal from the second group in each element of the given sequence and outputs it as a list of strings.\n\nExample: Input: ['{{dog, cat, bird}, {rabbit, hamster}}', '{{fish, turtle}, {snake, lizard}}', '{{parrot, guinea pig}, {ferret, horse}}', '{{frog, mouse}, {rat, gerbil}}']; output: ['rabbit', 'snake', 'ferret', 'rat']"}
{"id": "230-1", "oq_id": 230, "desc": "Input: a list of complex text values, containing color groups in curly braces.\nOutput: a list of string values representing individual colors.\n\nFunctionality: The transformation extracts the color mentioned in the first set of curly braces in each element and outputs it as a string in the resulting list.\n\nExample: Input: ['{{red, blue, green}, {yellow, orange}}', '{{purple, pink}, {black, white}}', '{{gray, brown}, {cyan, magenta}}', '{{teal, lavender}, {peach, lime}}']; output: ['yellow', 'black', 'cyan', 'peach']"}
{"id": "230-0", "oq_id": 230, "desc": "Input: a list of complex text values containing nested lists and text strings.\nOutput: a list of text strings.\nFunctionality: The transformation extracts the specific text element from each nested list in the given sequence, and outputs the extracted text strings in a list.\nExample: Input: ['{{alpha, beta}, {gamma, delta}}', '{{epsilon, zeta}, {eta, theta}}', '{{iota, kappa}, {lambda, mu}}', '{{nu, xi}, {omicron, pi}}']; output: ['gamma', 'eta', 'lambda', 'omicron']"}
{"id": "231-8", "oq_id": 231, "desc": "Input: a list of strings containing words.\nOutput: a list of strings, where each element is a comma-separated list of words from the input string.\nFunctionality: The transformation splits each element in the input sequence into individual words, and constructs a new string where each word is separated by a comma.\nExample: Input: ['THE MOON SHINES BRIGHTLY TONIGHT', 'THE STARS TWINKLE IN THE SKY']; output: ['THE, MOON, SHINES, BRIGHTLY, TONIGHT', 'THE, STARS, TWINKLE, IN, THE, SKY']"}
{"id": "231-9", "oq_id": 231, "desc": "Input: a list of string values, each containing words separated by spaces.\nOutput: a list of string values, each containing words separated by commas.\nFunctionality: The transformation splits each element in the given sequence into individual words and combines them with commas in the output list.\nExample: Input: ['I HAVE A DREAM THAT ONE DAY WE WILL ALL BE EQUAL', 'THE EARTH REVOLVES AROUND THE SUN']; output: ['HAVE, DREAM, THAT, ONE, DAY, WE, WILL, ALL, BE, EQUAL', 'THE, EARTH, REVOLVES, AROUND, THE, SUN']"}
{"id": "231-7", "oq_id": 231, "desc": "Input: a list of string values, each containing words separated by spaces.\nOutput: a list of string values, each containing words separated by commas.\nFunctionality: The transformation splits each element in the given sequence by spaces and joins them with commas, outputting the result as a list of strings.\nExample: Input: ['MY DOG LOVES TO PLAY IN THE PARK', 'DO YOU LIKE TO GO SWIMMING?']; output: ['MY, DOG, LOVES, TO, PLAY, IN, THE, PARK', 'DO, YOU, LIKE, TO, GO, SWIMMING']"}
{"id": "231-6", "oq_id": 231, "desc": "Input: a list of strings containing phrases.\nOutput: a list of strings containing individual words from each phrase.\nFunctionality: The transformation splits each phrase in the given sequence into individual words, and outputs a list of words for each phrase.\nExample: Input: ['I HAVE A MEETING AT 2 PM TOMORROW', 'THE SKY IS CLEAR TODAY']; output: ['HAVE, MEETING, AT, PM, TOMORROW', 'THE, SKY, IS, CLEAR, TODAY']"}
{"id": "231-4", "oq_id": 231, "desc": "Input: a list of string values, each containing multiple words.\nOutput: a list of string values, with each word separated by commas.\nFunctionality: The transformation splits each sentence into individual words, and then joins them back together with commas, outputting the result as a new list of strings.\nExample: Input: ['MY GRANDMOTHER MAKES THE BEST APPLE PIE', 'THE SUN RISES IN THE EAST']; output: ['MY, GRANDMOTHER, MAKES, THE, BEST, APPLE, PIE', 'THE, SUN, RISES, IN, THE, EAST']"}
{"id": "231-5", "oq_id": 231, "desc": "Input: a list of string values.\nOutput: a list of strings with words separated by commas.\nFunctionality: The transformation splits each sentence into individual words and formats them as strings separated by commas in the result list.\nExample: Input: ['THE TRAIN WILL DEPART AT 9 AM SHARP', 'PLEASE BE ON TIME']; output: ['THE, TRAIN, WILL, DEPART, AT, AM, SHARP', 'PLEASE, BE, ON, TIME']"}
{"id": "231-1", "oq_id": 231, "desc": "Input: a list of string values containing multiple words.\nOutput: a list of strings where each word is separated by a comma.\nFunctionality: The transformation splits each sentence into individual words and formats them as a comma-separated string in the output list.\nExample: Input: ['THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG', 'HAPPY BIRTHDAY TO YOU']; Output: ['THE, QUICK, BROWN, FOX, JUMPS, OVER, THE, LAZY, DOG', 'HAPPY, BIRTHDAY, TO, YOU']"}
{"id": "231-0", "oq_id": 231, "desc": "Input: a list of strings containing sentences.\nOutput: a list of strings with individual words separated by commas.\nFunctionality: The transformation splits each sentence into individual words, and combines them into a single string with words separated by commas in the output list.\nExample: Input: ['I LOVE TO EAT PIZZA, IT IS MY FAVORITE FOOD', 'IS THE WEATHER GOING TO BE NICE TODAY?']; output: ['LOVE, TO, EAT, PIZZA, IT, IS, MY, FAVORITE, FOOD', 'IS, THE, WEATHER, GOING, TO, BE, NICE, TODAY']"}
{"id": "231-2", "oq_id": 231, "desc": "Input: a list of strings with multiple words in each element.\nOutput: a list of strings with each word separated by a comma.\n\nFunctionality: The transformation splits each element in the given sequence into individual words, and then formats those words as a comma-separated string in the result list.\nExample: Input: ['I CANNOT BELIEVE HOW EXPENSIVE THIS IS', 'THE CAT MEOWS LOUDLY AT NIGHT']; output: ['CANNOT, BELIEVE, HOW, EXPENSIVE, THIS, IS', 'THE, CAT, MEOWS, LOUDLY, AT, NIGHT']"}
{"id": "231-3", "oq_id": 231, "desc": "Input: a list of strings with sentences.\nOutput: a list of strings with words separated by commas.\nFunctionality: The transformation splits each sentence in the given sequence into individual words and formats them with commas in the result list.\nExample: Input: ['WE WILL BE TRAVELING TO EUROPE NEXT SUMMER', 'CAN YOU PASS ME THE SALT?']; output: ['WE, WILL, BE, TRAVELING, TO, EUROPE, NEXT, SUMMER', 'CAN, YOU, PASS, ME, THE, SALT']"}
{"id": "232-9", "oq_id": 232, "desc": "Input: a list of strings representing dates in the format 'yyyy/m/d'.\nOutput: a list of strings representing dates in the format 'mm/dd/yyyy'.\nFunctionality: The transformation converts the dates from 'yyyy/m/d' format to 'mm/dd/yyyy' format, adding a leading zero if necessary for month or day.\nExample: Input: ['1973/8/2', '2008/9/9', '2001/6/11', '2019/1/31', '2015/4/24']; output: ['08/02/1973', '09/09/2008', '06/11/2001', '01/31/2019', '04/24/2015']"}
{"id": "232-8", "oq_id": 232, "desc": "Input: a list of strings representing dates in the format year/month/day.\nOutput: a list of strings representing dates in the format month/day/year.\nFunctionality: The transformation reformats the date from year/month/day to month/day/year in the given sequence.\nExample: Input: ['1980/12/24', '2010/5/8', '1992/3/16', '2018/7/28', '2007/10/20']; output: ['12/24/1980', '05/08/2010', '03/16/1992', '07/28/2018', '10/20/2007']"}
{"id": "232-6", "oq_id": 232, "desc": "Input: a list of strings representing dates in the format 'yyyy/mm/dd'.\nOutput: a list of strings representing dates in the format 'mm/dd/yyyy'.\nFunctionality: The transformation converts the dates from 'yyyy/mm/dd' format to 'mm/dd/yyyy' format, adding a leading zero if necessary for months or days below 10.\nExample: Input: ['1997/10/3', '2000/1/14', '2016/2/1', '1989/7/21', '2006/3/25']; output: ['10/03/1997', '01/14/2000', '02/01/2016', '07/21/1989', '03/25/2006']"}
{"id": "232-7", "oq_id": 232, "desc": "Input: a list of strings representing dates in the format year/month/day.\nOutput: a list of strings representing dates in the format month/day/year.\nFunctionality: The transformation reformats the date from year/month/day to month/day/year.\nExample: Input: ['1978/9/13', '2005/4/3', '2017/12/19', '1994/2/11', '2014/11/6']; output: ['09/13/1978', '04/03/2005', '12/19/2017', '02/11/1994', '11/06/2014']"}
{"id": "232-5", "oq_id": 232, "desc": "Input: a list of strings representing dates in the format 'yyyy/m/d'.\nOutput: a list of strings representing dates in the format 'm/d/yyyy'.\nFunctionality: The transformation converts the dates from 'yyyy/m/d' format to 'm/d/yyyy' format, adding a leading zero if necessary for months or days below 10.\nExample: Input: ['1985/4/10', '2011/11/28', '2003/8/30', '1993/9/23', '2010/8/17']; output: ['04/10/1985', '11/28/2011', '08/30/2003', '09/23/1993', '08/17/2010']"}
{"id": "232-4", "oq_id": 232, "desc": "Input: a list of strings representing dates in the format 'yyyy/m/d'.\nOutput: a list of strings representing dates in the format 'mm/dd/yyyy'.\nFunctionality: The transformation converts the dates from 'yyyy/m/d' format to 'mm/dd/yyyy' format, adding a leading zero if necessary for months and days.\nExample: Input: ['1970/6/5', '2009/3/19', '2012/1/30', '1996/5/10', '2004/12/7']; output: ['06/05/1970', '03/19/2009', '01/30/2012', '05/10/1996', '12/07/2004']"}
{"id": "232-0", "oq_id": 232, "desc": "Input: a list of strings representing dates in the format 'yyyy/m/d'.\nOutput: a list of strings representing dates in the format 'mm/dd/yyyy'.\nFunctionality: The transformation converts the dates from 'yyyy/m/d' format to 'mm/dd/yyyy' format, adding a leading zero if necessary for months and days.\nExample: Input: ['1995/7/15', '2000/10/25', '2018/5/6', '2010/2/14', '2005/9/30']; output: ['07/15/1995', '10/25/2000', '05/06/2018', '02/14/2010', '09/30/2005']"}
{"id": "232-1", "oq_id": 232, "desc": "Input: a list of strings representing dates in the format 'yyyy/m/d'.\nOutput: a list of strings representing dates in the format 'mm/dd/yyyy'.\nFunctionality: The transformation converts the dates from 'yyyy/m/d' format to 'mm/dd/yyyy' format, adding a leading zero if necessary for months and days.\nExample: Input: ['1987/3/18', '1999/11/4', '2008/6/30', '2015/9/22', '2006/7/19']; output: ['03/18/1987', '11/04/1999', '06/30/2008', '09/22/2015', '07/19/2006']"}
{"id": "232-3", "oq_id": 232, "desc": "Input: a list of strings representing dates in the format year/month/day.\nOutput: a list of strings representing dates in the format month/day/year.\nFunctionality: The transformation reformats the date from year/month/day to month/day/year.\nExample: Input: ['1982/11/9', '2002/2/8', '2019/4/13', '1998/6/26', '2017/9/1']; output: ['11/09/1982', '02/08/2002', '04/13/2019', '06/26/1998', '09/01/2017']"}
{"id": "232-2", "oq_id": 232, "desc": "Input: a list of strings representing dates in the format 'y/m/d'.\nOutput: a list of strings representing dates in the format 'm/d/y'.\nFunctionality: The transformation converts the dates from 'y/m/d' format to 'm/d/y' format, adding a leading zero if necessary for months and days.\nExample: Input: ['1975/1/27', '2016/8/12', '2007/4/5', '2013/10/17', '1990/12/8']; output: ['01/27/1975', '08/12/2016', '04/05/2007', '10/17/2013', '12/08/1990']"}
{"id": "233-9", "oq_id": 233, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds 20 to each numerical value in the input sequence and outputs the result as a new sequence.\nExample: Input: ['5', '15', '40', '49', '59']; output: ['25', '35', '60', '69', '79']"}
{"id": "233-8", "oq_id": 233, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds 20 to each numerical value extracted from the elements in the given sequence and outputs the result as a list of strings.\nExample: Input: ['18', '28', '53', '2', '12']; output: ['38', '48', '73', '22', '32']"}
{"id": "233-5", "oq_id": 233, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds 20 to each numerical value extracted from the input sequence and outputs as a string in the result list.\nExample: Input: ['12', '22', '47', '56', '66']; output: ['32', '42', '67', '76', '86']"}
{"id": "233-4", "oq_id": 233, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds 20 to each numerical value in the input sequence and outputs the result as a new sequence.\nExample: Input: ['40', '55', '20', '11', '51']; Output: ['60', '75', '40', '31', '71']"}
{"id": "233-6", "oq_id": 233, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds 20 to each numerical value extracted from the input sequence and formats it as a string in the output list.\nExample: Input: ['7', '17', '42', '51', '61']; output: ['27', '37', '62', '71', '81']"}
{"id": "233-7", "oq_id": 233, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation replaces the second character in each element with '3' in the given sequence and outputs the modified elements in a new list.\nExample: Input: ['33', '23', '48', '57', '67']; output: ['53', '43', '68', '77', '87']"}
{"id": "233-3", "oq_id": 233, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds 20 to each numerical value extracted from the given sequence, and outputs the result as a list.\nExample: Input: ['3', '13', '28', '37', '47']; output: ['23', '33', '48', '57', '67']"}
{"id": "233-2", "oq_id": 233, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds 20 to each numerical value extracted from the given sequence, and outputs the result as a list.\nExample: Input: ['48', '38', '13', '46', '22']; output: ['68', '58', '33', '66', '42']"}
{"id": "233-0", "oq_id": 233, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds 20 to each numerical value in the input sequence and outputs the result as a new sequence.\nExample: Input: ['50', '60', '30', '31', '41']; output: ['70', '80', '50', '51', '61']"}
{"id": "233-1", "oq_id": 233, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation adds 20 to each numerical value in the input sequence and outputs the result as a list of strings.\nExample: Input: ['15', '25', '50', '5', '16']; output: ['35', '45', '70', '25', '36']"}
{"id": "234-9", "oq_id": 234, "desc": "Input: a list of string values, with website URLs.\nOutput: a list of string values, with simplified domain names.\n\nFunctionality: The transformation extracts the main domain name from each URL in the given sequence and outputs the result as a list of simplified domain names.\n\nExample: Input: ['aliexpress.com', 'www.aliexpress.com', 'http://aliexpress.com', 'http://www.aliexpress.com', 'alibaba.com', 'www.alibaba.com', 'http://alibaba.com', 'http://www.alibaba.com', 'youtube.com', 'www.youtube.com', 'http://youtube.com', 'http://www.youtube.com']; Output: ['aliexpress.com', 'aliexpress.com', 'aliexpress.com', 'aliexpress.com', 'alibaba.com', 'alibaba.com', 'alibaba.com', 'alibaba.com', 'youtube.com', 'youtube.com', 'youtube.com', 'youtube.com']"}
{"id": "234-8", "oq_id": 234, "desc": "Input: a list of strings representing URLs.\nOutput: a list of strings consisting of the domain names only.\n\nFunctionality: The transformation extracts the domain names from each URL in the given sequence, removing any prefixes like \"www.\" or \"http://\".\nExample: Input: ['craigslist.org', 'www.craigslist.org', 'http://craigslist.org', 'http://www.craigslist.org', 'weather.com', 'www.weather.com', 'http://weather.com', 'http://www.weather.com', 'espn.com', 'www.espn.com', 'http://espn.com', 'http://www.espn.com']; Output: ['craigslist.org', 'craigslist.org', 'craigslist.org', 'craigslist.org', 'weather.com', 'weather.com', 'weather.com', 'weather.com', 'espn.com', 'espn.com', 'espn.com', 'espn.com']"}
{"id": "234-0", "oq_id": 234, "desc": "Input: a list of string values.\nOutput: a list of string values.\nFunctionality: The transformation extracts the domain name from each element in the given sequence, and outputs the result as a list of domain names.\nExample: Input: ['example.com', 'www.example.com', 'http://example.com', 'http://www.example.com', 'yahoo.com', 'www.yahoo.com', 'http://yahoo.com', 'http://www.yahoo.com', 'bing.com', 'www.bing.com', 'http://bing.com', 'http://www.bing.com']; Output: ['example.com', 'example.com', 'example.com', 'example.com', 'yahoo.com', 'yahoo.com', 'yahoo.com', 'yahoo.com', 'bing.com', 'bing.com', 'bing.com', 'bing.com']"}
{"id": "234-1", "oq_id": 234, "desc": "Input: a list of strings containing URLs.\nOutput: a list of strings with simplified URLs.\n\nFunctionality: The transformation removes unnecessary prefixes (http://, www.) from each URL in the given sequence and outputs the simplified version as a list.\n\nExample: Input: ['github.com', 'www.github.com', 'http://github.com', 'http://www.github.com', 'twitter.com', 'www.twitter.com', 'http://twitter.com', 'http://www.twitter.com', 'linkedin.com', 'www.linkedin.com', 'http://linkedin.com', 'http://www.linkedin.com']; output: ['github.com', 'github.com', 'github.com', 'github.com', 'twitter.com', 'twitter.com', 'twitter.com', 'twitter.com', 'linkedin.com', 'linkedin.com', 'linkedin.com', 'linkedin.com']"}
{"id": "234-3", "oq_id": 234, "desc": "Input: a list of string values with URLs.\nOutput: a list of string values with domain names extracted from the URLs.\n\nFunctionality: The transformation extracts the domain name from each URL in the given sequence and outputs the domain names as strings in the result list.\n\nExample: Input: ['nytimes.com', 'www.nytimes.com', 'http://nytimes.com', 'http://www.nytimes.com', 'bbc.com', 'www.bbc.com', 'http://bbc.com', 'http://www.bbc.com', 'reddit.com', 'www.reddit.com', 'http://reddit.com', 'http://www.reddit.com']; output: ['nytimes.com', 'nytimes.com', 'nytimes.com', 'nytimes.com', 'bbc.com', 'bbc.com', 'bbc.com', 'bbc.com', 'reddit.com', 'reddit.com', 'reddit.com', 'reddit.com']"}
{"id": "234-2", "oq_id": 234, "desc": "Input: a list of string values with website URLs.\nOutput: a list of string values with simplified website URLs.\n\nFunctionality: The transformation removes any prefixes (such as \"www.\" and \"http://\") from each element in the given sequence, and outputs the simplified URLs.\nExample: Input: ['amazon.com', 'www.amazon.com', 'http://amazon.com', 'http://www.amazon.com', 'ebay.com', 'www.ebay.com', 'http://ebay.com', 'http://www.ebay.com', 'cnn.com', 'www.cnn.com', 'http://cnn.com', 'http://www.cnn.com']; \noutput: ['amazon.com', 'amazon.com', 'amazon.com', 'amazon.com', 'ebay.com', 'ebay.com', 'ebay.com', 'ebay.com', 'cnn.com', 'cnn.com', 'cnn.com', 'cnn.com']"}
{"id": "234-6", "oq_id": 234, "desc": "Input: a list of strings containing URLs.\nOutput: a list of strings with the domain name extracted from each URL.\n\nFunctionality: The transformation extracts the domain name from each URL in the given sequence and outputs the domain name as a string in the result list.\nExample: Input: ['instagram.com', 'www.instagram.com', 'http://instagram.com']; Output: ['instagram.com', 'instagram.com', 'instagram.com']"}
{"id": "234-7", "oq_id": 234, "desc": "Input: a list of strings representing URLs.\nOutput: a list of strings with domain names only.\n\nFunctionality: The transformation extracts the domain name from each URL in the given sequence, removing any prefixes (such as 'www.' or 'http://') and outputs the result as a list.\n\nExample: Input: ['spotify.com', 'www.spotify.com', 'http://spotify.com', 'http://www.spotify.com', 'buzzfeed.com', 'www.buzzfeed.com', 'http://buzzfeed.com', 'http://www.buzzfeed.com', 'stackoverflow.com', 'www.stackoverflow.com', 'http://stackoverflow.com', 'http://www.stackoverflow.com']; output: ['spotify.com', 'spotify.com', 'spotify.com', 'spotify.com', 'buzzfeed.com', 'buzzfeed.com', 'buzzfeed.com', 'buzzfeed.com', 'stackoverflow.com', 'stackoverflow.com', 'stackoverflow.com', 'stackoverflow.com']"}
{"id": "234-5", "oq_id": 234, "desc": "Input: a list of string values, representing URLs.\nOutput: a list of string values, containing cleaned domain names.\n\nFunctionality: The transformation extracts the domain names from each URL in the given sequence, removing any prefixes like \"www.\" or \"http://\". The result is a list of cleaned domain names.\nExample: Input: ['wikipedia.org', 'www.wikipedia.org', 'http://wikipedia.org', 'http://www.wikipedia.org', 'imdb.com', 'www.imdb.com', 'http://imdb.com', 'http://www.imdb.com', 'quora.com', 'www.quora.com', 'http://quora.com', 'http://www.quora.com']; output: ['wikipedia.org', 'wikipedia.org', 'wikipedia.org', 'wikipedia.org', 'imdb.com', 'imdb.com', 'imdb.com', 'imdb.com', 'quora.com', 'quora.com', 'quora.com', 'quora.com']"}
{"id": "234-4", "oq_id": 234, "desc": "Input: a list of strings representing URLs.\nOutput: a list of strings with domain names only.\n\nFunctionality: The transformation extracts the domain name from each URL in the given sequence, removing any prefixes like \"www.\" or \"http://\".\nExample: Input: ['microsoft.com', 'www.microsoft.com', 'http://microsoft.com', 'http://www.microsoft.com', 'apple.com', 'www.apple.com', 'http://apple.com', 'http://www.apple.com', 'netflix.com', 'www.netflix.com', 'http://netflix.com', 'http://www.netflix.com']; output: ['microsoft.com', 'microsoft.com', 'microsoft.com', 'microsoft.com', 'apple.com', 'apple.com', 'apple.com', 'apple.com', 'netflix.com', 'netflix.com', 'netflix.com', 'netflix.com']"}
{"id": "235-9", "oq_id": 235, "desc": "Input: a list of strings with a specific pattern.\nOutput: a list of strings with a specific pattern.\nFunctionality: The transformation extracts the substring between the number and '.helpdesk.com' in each element of the input sequence and outputs them as separate strings in the result list.\nExample: Input: ['help1.helpdesk.com', 'help2.helpdesk.com', 'help3.helpdesk.com', 'help4.helpdesk.com', 'help5.helpdesk.com']; output: ['help1', 'help2', 'help3', 'help4', 'help5']"}
{"id": "235-8", "oq_id": 235, "desc": "Input: a list of string values, each representing a URL with a specific pattern.\nOutput: a list of string values, each representing a specific portion of the input URL.\nFunctionality: The transformation extracts the substring between the first dot and the second dot from each element in the given sequence, and outputs the extracted substring as a list.\nExample: Input: ['forum1.forumsite.com', 'forum2.forumsite.com', 'forum3.forumsite.com', 'forum4.forumsite.com', 'forum5.forumsite.com']; output: ['forumsite', 'forumsite', 'forumsite', 'forumsite', 'forumsite']"}
{"id": "235-3", "oq_id": 235, "desc": "Input: a list of string values, each representing a subdomain followed by a domain name.\nOutput: a list of string values, each representing just the subdomain.\nFunctionality: The transformation extracts the subdomain from each element in the given sequence by splitting the string at the first dot.\nExample: Input: ['sub.example.com', 'sub.test.com', 'sub.demo.com', 'sub.sample.com', 'sub.mock.com']; output: ['example', 'test', 'demo', 'sample', 'mock']"}
{"id": "235-2", "oq_id": 235, "desc": "Input: a list of string values, each representing a domain name.\nOutput: a list of string values, each representing a domain name without subdomains.\n\nFunctionality: The transformation extracts the subdomain from each domain name in the given sequence, and formats the result as a list of domain names without subdomains.\n\nExample: Input: ['example1.google.com', 'example1.facebook.com', 'example1.sina.cn', 'example1.cs.uwaterloo.ca', 'example1.abc.com']; output: ['google', 'facebook', 'sina', 'cs.uwaterloo', 'abc']"}
{"id": "235-0", "oq_id": 235, "desc": "Input: a list of string values, each representing a subdomain.\nOutput: a list of string values, each representing the main domain name.\nFunctionality: The transformation extracts the main domain name from each element in the given sequence by removing everything before the first dot and after the second dot, then outputs the result as a list.\nExample: Input: ['subdomain.google.com', 'subdomain.facebook.com', 'subdomain.sina.cn', 'subdomain.cs.uwaterloo.ca', 'subdomain.abc.com']; output: ['google', 'facebook', 'sina', 'cs.uwaterloo', 'abc']"}
{"id": "235-1", "oq_id": 235, "desc": "Input: a list of string values, each representing a domain name.\nOutput: a list of string values, each representing a specific domain name.\nFunctionality: The transformation extracts a specific subdomain from each element in the given sequence and output as a list.\nExample: Input: ['test1.google.com', 'test1.facebook.com', 'test1.sina.cn', 'test1.cs.uwaterloo.ca', 'test1.abc.com']; output: ['google', 'facebook', 'sina', 'cs.uwaterloo', 'abc']"}
{"id": "235-5", "oq_id": 235, "desc": "Input: a list of strings with website URLs.\nOutput: a list of strings with website domains.\nFunctionality: The transformation extracts the domain name from each URL in the input sequence, storing them in the output list.\nExample: Input: ['blog1.blogger.com', 'blog2.blogger.com', 'blog3.blogger.com', 'blog4.blogger.com', 'blog5.blogger.com']; output: ['blogger', 'blogger', 'blogger', 'blogger', 'blogger']"}
{"id": "235-4", "oq_id": 235, "desc": "Input: a list of string values, containing website URLs in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the middle part of each URL (between \"web\" and \".com\") and outputs it as a list.\nExample: Input: ['web1.website.com', 'web2.website.com', 'web3.website.com', 'web4.website.com', 'web5.website.com']; output: ['1', '2', '3', '4', '5']"}
{"id": "235-6", "oq_id": 235, "desc": "Input: a list of string values, containing website URLs with a specific format.\nOutput: a list of string values.\nFunctionality: The transformation extracts the specific keyword 'shopping' from each element in the given sequence, and outputs the keyword as a string in the result list.\nExample: Input: ['shop1.shopping.com', 'shop2.shopping.com', 'shop3.shopping.com', 'shop4.shopping.com', 'shop5.shopping.com']; output: ['shopping', 'shopping', 'shopping', 'shopping', 'shopping']"}
{"id": "235-7", "oq_id": 235, "desc": "Input: a list of strings containing information in a specific format.\nOutput: a list of strings with extracted information.\nFunctionality: The transformation extracts the specific information between the first dot and the last dot in each element of the given sequence and outputs the extracted information as a list.\nExample: Input: ['info1.information.com', 'info2.information.com', 'info3.information.com', 'info4.information.com', 'info5.information.com']; output: ['information', 'information', 'information', 'information', 'information']"}
{"id": "236-8", "oq_id": 236, "desc": "Input: a list of string values, where each string represents a URL.\nOutput: a list of string values.\nFunctionality: The transformation extracts the domain name from each URL in the given sequence and outputs it as a list of strings.\nExample: Input: ['http://www.example.org/page1.html', 'https://www.microsoft.com/en-us/', 'ftp://ftp.example.net/file1.txt']; output: ['example.org', 'microsoft.com', 'example.net']"}
{"id": "236-9", "oq_id": 236, "desc": "Input: a list of strings containing URLs.\nOutput: a list of strings representing domain names.\nFunctionality: The transformation extracts the domain name from each URL in the given sequence, removing the protocol and any path or file information, and outputs the result as a list of strings.\nExample: Input: ['https://www.google.com/', 'http://www.example.net', 'ftp://ftp.example.com/file2.txt']; output: ['google.com', 'example.net', 'example.com']"}
{"id": "236-2", "oq_id": 236, "desc": "Input: a list of string values, each representing a URL.\nOutput: a list of string values, each representing a domain name extracted from the URL.\nFunctionality: The transformation extracts the domain name from each URL in the given sequence, removing the \"http://\" and \"www.\" prefixes, and outputting the result as a list of domain names.\nExample: Input: ['http://www.test.com/', 'ftp://ftp.example.org', 'http://www.example.net/index.html']; output: ['test.com', 'example.org', 'example.net']"}
{"id": "236-3", "oq_id": 236, "desc": "Input: a list of string values, each representing a URL.\nOutput: a list of string values, each representing a domain name extracted from the URL.\nFunctionality: The transformation extracts the domain name from each URL in the given sequence and outputs the domain names as strings in the result list.\nExample: Input: ['https://www.amazon.co.uk/', 'http://www.example.com/about.html', 'ftp://ftp.example.net']; output: ['amazon.co.uk', 'example.com', 'example.net']"}
{"id": "236-1", "oq_id": 236, "desc": "Input: a list of strings containing URLs.\nOutput: a list of strings representing domain names.\nFunctionality: The transformation extracts the domain name from each URL in the given sequence, removing the protocol, subdomains, and path, and outputs the result as a list.\nExample: Input: ['http://www.example.com/path/page.htm', 'https://www.google.com/', 'http://www.yahoo.com']; output: ['example.com', 'google.com', 'yahoo.com']"}
{"id": "236-0", "oq_id": 236, "desc": "Input: a list of string values, with URLs in each element.\nOutput: a list of string values.\nFunctionality: The transformation extracts the domain name from each URL in the given sequence and outputs the result as a list of domain names.\nExample: Input: ['https://www.amazon.com/search?q=books&ref=nav_search_box', 'http://www.example.org/page.html', 'ftp://ftp.example.com/file.txt']; output: ['amazon.com', 'example.org', 'example.com']"}
{"id": "236-4", "oq_id": 236, "desc": "Input: a list of string values, representing URLs.\nOutput: a list of string values, representing domain names.\nFunctionality: The transformation extracts the domain name from each URL in the given sequence, and outputs the domain names as a list.\nExample: Input: ['http://www.example.com/contact_us.html', 'https://www.amazon.ca/', 'ftp://ftp.example.co.uk']; output: ['example.com', 'amazon.ca', 'example.co.uk']"}
{"id": "236-5", "oq_id": 236, "desc": "Input: a list of string values, each element representing a URL.\nOutput: a list of string values, each element containing the domain name from the URL.\n\nFunctionality: The transformation extracts the domain name from each URL in the given sequence and outputs it as a string in the result list.\n\nExample: Input: ['https://www.google.co.uk/', 'http://www.example.co.uk', 'ftp://ftp.example.com']; output: ['google.co.uk', 'example.co.uk', 'example.com']"}
{"id": "236-7", "oq_id": 236, "desc": "Input: a list of string values, representing URLs.\nOutput: a list of string values, representing domain names.\n\nFunctionality: The transformation extracts the domain name from each URL in the given sequence by removing the protocol and \"www.\" if present, and outputs the domain name as a string in the result list.\n\nExample: Input: ['https://www.apple.com/', 'http://www.example.co', 'ftp://ftp.example.org']; output: ['apple.com', 'example.co', 'example.org']"}
{"id": "236-6", "oq_id": 236, "desc": "Input: a list of string values containing URLs.\nOutput: a list of domain names extracted from the input URLs.\nFunctionality: The transformation extracts the domain name from each URL in the given sequence by removing the protocol (http, https, ftp) and 'www.', and output the domain names as strings in the result list.\nExample: Input: ['http://www.amazon.com/', 'https://www.example.com/index.htm', 'ftp://ftp.example.net/file.txt']; output: ['amazon.com', 'example.com', 'example.net']"}
{"id": "237-8", "oq_id": 237, "desc": "Input: a list of strings containing HTML markup.\nOutput: a list of strings containing HTML markup.\nFunctionality: The transformation removes excess spaces between HTML tags in each element of the given sequence using HTML source formatting.\nExample: Input: ['<button>Click Me</button>', '<form action=\"/submit\" method=\"post\"> <input type=\"text\" name=\"input_text\"> <input type=\"submit\" value=\"Submit\"> </form>', '<fieldset> <legend>Legend</legend> <input type=\"checkbox\" name=\"check\"> Check</fieldset>', '<kbd>Keyboard Input</kbd>']; output: ['<button>Click Me</button>', '<form action=\"/submit\" method=\"post\"><input type=\"text\" name=\"input_text\"><input type=\"submit\" value=\"Submit\"></form>', '<fieldset><legend>Legend</legend><input type=\"checkbox\" name=\"check\"> Check</fieldset>', '<kbd>Keyboard Input</kbd>']"}
{"id": "237-9", "oq_id": 237, "desc": "Input: a list of strings with HTML markup.\nOutput: a list of strings with formatted HTML markup.\nFunctionality: The transformation removes spaces within HTML tags in each element of the given sequence to match the desired format, and output the result as a list.\nExample: Input: ['<textarea rows=\"4\" cols=\"50\">Text Area</textarea>', '<tt>Teletype Text</tt>', '<select> <option value=\"option1\">Option 1</option> <option value=\"option2\">Option 2</option> </select>', '<header>Header</header> <nav>Navigation</nav> <section>Section</section>']; output: ['<textarea rows=\"4\" cols=\"50\">Text Area</textarea>', '<tt>Teletype Text</tt>', '<select><option value=\"option1\">Option 1</option><option value=\"option2\">Option 2</option></select>', '<header>Header</header><nav>Navigation</nav><section>Section</section>']"}
{"id": "237-1", "oq_id": 237, "desc": "Input: a list of complex text elements in HTML format.\nOutput: a list of complex text elements in HTML format.\nFunctionality: The transformation removes any spaces between HTML markup tags in the given sequence, resulting in a cleaned version of the HTML elements in the output list.\nExample: Input: ['<a href=\"https://www.example.com\">Link One</a>', '<img src=\"image.jpg\" alt=\"Image\">', '<h4>Subheading Four</h4> <p>Paragraph Two</p>', '<strong>Strong Text</strong>']; output: ['<a href=\"https://www.example.com\">Link One</a>', '<img src=\"image.jpg\" alt=\"Image\">', '<h4>Subheading Four</h4><p>Paragraph Two</p>', '<strong>Strong Text</strong>']"}
{"id": "237-0", "oq_id": 237, "desc": "Input: a list of strings containing HTML markup.\nOutput: a list of strings with spaces removed between HTML tags.\nFunctionality: The transformation removes spaces between HTML tags in each element of the given sequence and outputs the result as a list.\nExample: Input: ['<h1>Heading One</h1> <h2>Heading Two</h2>', '<div> <p>Paragraph One</p> </div>', '<span> <ul> <li>Item One</li> <li>Item Two</li> </ul> </span>', '<h3>Subheading Three</h3>']; output: ['<h1>Heading One</h1><h2>Heading Two</h2>', '<div><p>Paragraph One</p></div>', '<span><ul><li>Item One</li><li>Item Two</li></ul></span>', '<h3>Subheading Three</h3>']"}
{"id": "237-2", "oq_id": 237, "desc": "Input: a list of strings containing HTML markup.\nOutput: a list of strings with spaces removed between HTML tags.\nFunctionality: The transformation removes spaces between HTML tags in each element of the given sequence and output the result as a list.\nExample: Input: ['<b>Bold Text</b> <i>Italic Text</i>', '<table> <tr> <td>Row 1, Cell 1</td> <td>Row 1, Cell 2</td> </tr> </table>', '<em>Emphasized Text</em>', '<h5>Subheading Five</h5>']; output: ['<b>Bold Text</b><i>Italic Text</i>', '<table><tr><td>Row 1, Cell 1</td><td>Row 1, Cell 2</td></tr></table>', '<em>Emphasized Text</em>', '<h5>Subheading Five</h5>']"}
{"id": "237-3", "oq_id": 237, "desc": "Input: a list of strings containing HTML markup.\nOutput: a list of strings without spaces between HTML tags.\nFunctionality: The transformation removes spaces between HTML tags in each element of the given sequence and outputs the result as a list.\nExample: Input: ['<h6>Subheading Six</h6> <p>Lorem ipsum dolor sit amet</p>', '<code>Code Snippet</code>', '<pre>Preformatted Text</pre>', '<kbd>Keyboard Input</kbd>']; Output: ['<h6>Subheading Six</h6><p>Lorem ipsum dolor sit amet</p>', '<code>Code Snippet</code>', '<pre>Preformatted Text</pre>', '<kbd>Keyboard Input</kbd>']"}
{"id": "237-7", "oq_id": 237, "desc": "Input: a list of complex text strings with HTML markup.\nOutput: a list of complex text strings with HTML markup.\nFunctionality: The transformation removes spaces in between HTML tags in each element of the given sequence to generate the result list.\nExample: Input: ['<sup>Superscript</sup> <sub>Subscript</sub>', '<ol> <li>Item One</li> <li>Item Two</li> </ol>', '<dl> <dt>Term One</dt> <dd>Definition One</dd> </dl>', '<bdo dir=\"rtl\">Right-to-Left Text</bdo>']; output: ['<sup>Superscript</sup><sub>Subscript</sub>', '<ol><li>Item One</li><li>Item Two</li></ol>', '<dl><dt>Term One</dt><dd>Definition One</dd></dl>', '<bdo dir=\"rtl\">Right-to-Left Text</bdo>']"}
{"id": "237-6", "oq_id": 237, "desc": "Input: a list of strings containing HTML markup.\nOutput: a list of strings with spaces removed from HTML markups.\nFunctionality: The transformation removes spaces in HTML markups from each element in the given sequence.\nExample: Input: ['<abbr title=\"Abbreviation\">Abbr</abbr> <q>Short Quote</q>', '<dfn>Definition</dfn>', '<ruby> <rb>Base Text</rb> <rt>Ruby Text</rt> </ruby>', '<sub>Subscript</sub>']; output: ['<abbr title=\"Abbreviation\">Abbr</abbr><q>Short Quote</q>', '<dfn>Definition</dfn>', '<ruby><rb>Base Text</rb><rt>Ruby Text</rt></ruby>', '<sub>Subscript</sub>']"}
{"id": "237-4", "oq_id": 237, "desc": "Input: a list of strings with HTML elements.\nOutput: a list of strings without spaces between HTML elements.\n\nFunctionality: The transformation removes spaces between HTML elements in each string in the given sequence and outputs the formatted strings in the result list.\nExample: Input: ['<sup>Superscript</sup> <sub>Subscript</sub>', '<blockquote>Quoted Text</blockquote>', '<del>Deleted Text</del>', '<ins>Inserted Text</ins>']; output: ['<sup>Superscript</sup><sub>Subscript</sub>', '<blockquote>Quoted Text</blockquote>', '<del>Deleted Text</del>', '<ins>Inserted Text</ins>']"}
{"id": "237-5", "oq_id": 237, "desc": "Input: a list of strings containing HTML markup.\nOutput: a list of strings with HTML markup removed.\nFunctionality: The transformation removes all spaces between HTML tags in each element of the given sequence and outputs the modified strings in a list.\nExample: Input: ['<mark>Highlighted Text</mark> <small>Small Text</small>', '<kbd>Keyboard Input</kbd>', '<samp>Sample Text</samp>', '<var>Variable Text</var>']; output: ['<mark>Highlighted Text</mark><small>Small Text</small>', '<kbd>Keyboard Input</kbd>', '<samp>Sample Text</samp>', '<var>Variable Text</var>']"}
