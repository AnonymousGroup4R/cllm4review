```python
import pandas as pd
import numpy as np

def transform_polar_to_rectangular(seq_a):
    # Convert string sequence to a DataFrame with numeric values
    polar_df = pd.DataFrame(seq_a, columns=['polar'])
    polar_df['radius'] = polar_df['polar'].apply(lambda x: float(x.split(",")[0][1:]))
    polar_df['theta'] = polar_df['polar'].apply(lambda x: float(x.split(",")[1][:-1]))
    
    # Convert degrees to radians for computation
    polar_df['theta'] = np.deg2rad(polar_df['theta'])
    
    # Calculate rectangular coordinates
    polar_df['x'] = polar_df.apply(lambda row: round(row['radius'] * np.cos(row['theta']), 5), axis=1)
    polar_df['y'] = polar_df.apply(lambda row: round(row['radius'] * np.sin(row['theta']), 5), axis=1)
    
    # Prepare the final sequence
    seq_b = polar_df.apply(lambda row: f"({row['x']:.5f}, {row['y']:.5f})", axis=1).tolist()
    
    return seq_b

# Define polar coordinates
seq_a = ['(2, 4)', '(4, 60)', '(10, 30)', '(23, 35)', '(11, 22)']

# Get the transformed sequence
transformed_seq = transform_polar_to_rectangular(seq_a)

# Display the converted sequence
print(transformed_seq)
```