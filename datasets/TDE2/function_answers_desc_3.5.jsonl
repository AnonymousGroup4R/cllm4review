{"id": 0, "desc": "Input: a list of strings containing Greek characters.\nOutput: a list of strings with Greek characters transliterated to Latin characters based on predefined rules.\nFunctionality: Transliterates Greek characters to Latin characters according to the specified replacements.\nExample: Input: ['\u03b1\u03b9\u03bd\u03c3\u03ca', 'aeiou', 'ae\u03bdouxyz', 'ae\u03bdo', 'ae\u03bdou\u03bd\u03c3\u03caz']; Output: ['aeio', 'aeiou', 'aeiouvxyz', 'aeio', 'aeiou\u03bdozi']"}
{"id": 1, "desc": "Input: a list of strings.\nOutput: a list of strings representing abbreviations.\n\nFunctionality: The function takes a list of strings and generates abbreviations by taking the first character of each word in the input string and concatenating them. The abbreviations are converted to lowercase.\nExample: \nInput: ['association computing machinery', 'principle of programming languages', 'special interest group management of data']\nOutput: ['acm', 'popl', 'sigmod']"}
{"id": 2, "desc": "Input: a list of strings representing movie titles.\nOutput: a list of strings representing transformed movie titles.\n\nFunctionality: The function takes a list of movie titles and extracts a shorter version of the title by searching for the text after \"aka\" and removing \"New \". The transformed movie titles are returned as a list of strings.\n\nExample: \nInput: ['Harry Potter 4 aka Harry Potter and the Goblet of Fire', 'Indy 4 aka Indiana Jones and the Kingdom of the Crystal Skull', 'New Star Trek aka Star Trek Into Darkness', 'The Hunger Games 3 aka the hunger games mockingjay part 1', 'New X man aka X-Men: Days of Future Past']\nOutput: ['Harry Potter and the Goblet of Fire', 'Indiana Jones and the Kingdom of the Crystal Skull', 'Star Trek Into Darkness', 'the hunger games mockingjay part 1', 'X-Men: Days of Future Past']"}
{"id": 3, "desc": "Input: a list of strings.\nOutput: a list of integers representing square footage values.\nFunctionality: extract the square footage values from the input strings that contain the information.\nExample: Input: ['Mar 18 Beautiful One bedroom Available. Schedule your appointment today $1410 / 1br - 938ft2 - (Downtown Tacoma, Theater District) pic map', 'Mar 18 1. Warm sunsets, Lake Washington, Downtown Seattle Skyline. Act fast! $2829 / 3br - 1535ft2 - (Renton, WA) pic map']; Output: [938, 1535]"}
{"id": 4, "desc": "Input: a list of strings containing apartment rental information.\nOutput: a list of strings representing prices.\n\nFunctionality: Extract the prices from the apartment rental information provided in the input list and return a list of prices.\nExample: \nInput: ['Mar 18 Beautiful One bedroom Available. Schedule your appointment today $1410 / 1br - 938ft2 - (Downtown Tacoma, Theater District) pic map',\n        'Mar 18 1. Warm sunsets, Lake Washington, Downtown Seattle Skyline. Act fast! $2829 / 3br - 1535ft2 - (Renton, WA) pic map',\n        'Mar 18 New AVAILABLE NOW FURNISHED $1650 / 1br - 750ft2 - (Bellevue) pic',\n        'Mar 1 Lake Washington, Bellevue $1234 / 3br - 1899ft2 - (Bellevue, WA) pic map',\n        'Mar 23 Downtown Seattle Skyline. Act fast! $2829 / 3br - 355ft2 - (Seattle, WA) pic map']\nOutput: ['$1410', '$2829', '$1650', '$1234', '$2829']"}
{"id": 5, "desc": "Input: a list of strings representing dates in the format 'YYYYMMDD'.\nOutput: a list of strings representing dates in the format 'MM-DD-YYYY'.\n\nFunctionality: The function `transform_date_format` takes a list of strings representing dates in the format 'YYYYMMDD', converts them into datetime objects using pandas, and then formats them into the desired format 'MM-DD-YYYY'. Finally, it returns a list of strings representing the dates in the new format.\n\nExample: \nInput: ['19610223', '19700101', '19330212', '19221213', '19111122']\nOutput: ['02-23-1961', '01-01-1970', '02-12-1933', '12-13-1922', '11-22-1911']"}
{"id": 6, "desc": "Input: a list of strings.\nOutput: a list of strings after text extraction.\n\nFunctionality: extracts specific text patterns from each string in the input list and returns a new list with the extracted text.\nExample: Input: ['| style=\"text-align: center;\"| {{Sort|01|[[Super Bowl I|I]]}}', '| style=\"text-align: center;\"| {{Sort|02|[[Super Bowl II|II]]}}']; Output: ['Super Bowl I', 'Super Bowl II']"}
{"id": 7, "desc": "Input: a list of strings representing text.\nOutput: a list of strings representing team names extracted using regular expressions.\nFunctionality: Extract the team names from the input text by applying a regular expression pattern and return them as a list.\nExample: Input: [\"| styple = \"background #d0e7ff;\"|{{Sort|Green Bay Packers 01|[[1966 Green Bay Packers season|Green Bay Packers]]<sup>^</sup>}}\", \"| styple = \"background #d0e7ff;\"|{{Sort|Green Bay Packers 02|[[1967 Green Bay Packers season|Green Bay Packers]]<sup>^</sup>}}\"]; Output: [\"Green Bay Packers\", \"Green Bay Packers\"]"}
{"id": 8, "desc": "Input: a list of strings representing filenames.\nOutput: a list of strings representing dates in the format \"mm/dd/yyyy\".\n\nFunctionality: extract the date parts from the filenames in the input list and transform them into the specified date format \"mm/dd/yyyy\".\nExample: Input: ['03_2005_XXX.xls', '12_2011_xaz.xls', '04_2015_rrrrr.xls', '03_2015_rrrrr.xls', '11_2012_rrrrr.xls']; Output: ['03/01/2005', '12/01/2011', '04/01/2015', '03/01/2015', '11/01/2012']"}
{"id": 9, "desc": "Input: a list of strings.\nOutput: a list of strings representing the first 3 characters of each string in the input list.\nFunctionality: extracts the first 3 characters of each string in the input list and creates a new list.\nExample: Input: ['aaaaaaaa', 'bb', 'ccc', 'ddddd', 'eeeeeee']; Output: ['aaa', 'bb', 'ccc', 'ddd', 'eee']"}
{"id": 10, "desc": "Input: a list of strings containing text entries.\nOutput: a list of strings representing names extracted from the text entries.\nFunctionality: Extracts names enclosed in double square brackets \"[[ ]]\" from each text entry in the input list.\nExample: Input: [\"* '''1953 [[Meena Kumari]] \\x96 ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\", \"* '''1954 [[Meena Kumari]] ...\"]; Output: [\"Meena Kumari\", \"Meena Kumari\", \"Kamini Kaushal\", \"Geeta Bali\", \"Meena Kumari\", \"Nutan\", \"Nargis Dutt\", \"Vyjayanthimala\", \"Meena Kumari\", \"Vyjayanthimala\", \"Nutan\", \"Mala Sinha\", \"Meena Kumari\"]"}
{"id": 11, "desc": "Input: a list of strings.\nOutput: a list of strings representing film titles extracted using a regular expression.\nFunctionality: Extract film titles from each string in the input list using a regular expression pattern.\nExample: Input: [\"* '''1953 [[Meena Kumari]] - ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\", \"* '''1954 [[Meena Kumari]] - ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\" ]; Output: [\"Baiju Bawra\", \"Parineeta\"]"}
{"id": 12, "desc": "Input: a list of strings containing character names within single quotes.\nOutput: a list of strings representing extracted character names without quotes.\nFunctionality: extract character names enclosed in single quotes from the input list of strings.\nExample: \nInput: [\n    \"* '''1953 [[Meena Kumari]] \\x96 ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\",\n    \"* '''1954 [[Meena Kumari]] \\x96 ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\",\n    \"...(remaining inputs)...\"\n]\nOutput: [\"Gauri\", \"Lalita\", \"Biraj Chakravorty\", \"Gauri\", \"Radha\", \"Champabai / Rajani\", \"Sujata\", ...]"}
{"id": 13, "desc": "Input: a list of strings.\nOutput: a list of strings representing the longest element from the second set of curly braces in each input string.\nFunctionality: extract the longest string from the second set of curly braces in each input string.\nExample: Input: ['{{a, b}, {cccc, d}, {e, f}}', '{{x, aaay}, {aaaz, d}}']; Output: ['cccc', 'aaaz']"}
{"id": 14, "desc": "Input: a list of strings.\nOutput: a list of strings representing extracted values.\nFunctionality: Extract and return the first element after splitting each string by ';'.\nExample: Input: ['a, b; cccc, d; e, f', 'x, aaay; aaaz, d', 'a; ffeaa; aa, aaa, aaa, aaa', 'ajfj, ajfie, ajaj, aj; jwi, ajaj, aj, a; aj, ajiw, ajif, jfi', 'ccc; aaa, bbb, ccc, ddd; xyz']; Output: ['b', 'aaay', 'ffeaa', 'ajfie', 'aaa']"}
{"id": 15, "desc": "Input: a list of strings representing full names in \"first_name\\tlast_name\" format.\nOutput: a list of strings representing short names by taking the first character of the first name and concatenating it with the last name.\nFunctionality: The code splits the full names into first and last names, then creates short names by taking the first character of the first name and concatenating it with the last name.\nExample: Input: ['john\\tsmith', 'adam\\twilliams', 'james\\tjohnson', 'alice\\tbob', 'charlie\\tdenis']; Output: ['jsmith', 'awilliams', 'jjohnson', 'abob', 'cdenis']"}
{"id": 16, "desc": "Input: a list of strings representing names in the format \"lastname, firstname\".\nOutput: a list of strings representing names in the format \"flastname\", where the first letter of the firstname is lowercase.\nFunctionality: For each name in the input list, split it into lastname and firstname, then modify the name to have the first letter of firstname in lowercase, followed by the lastname in lowercase.\nExample: Input: ['smith, john', 'williams, adam', 'johnson, james', 'denis, alice', 'smith, bob']; Output: ['jsmith', 'awilliams', 'jamesjohnson', 'adenis', 'bsmith']"}
{"id": 17, "desc": "Input: a list of strings.\nOutput: a list of strings representing names in \"Last name, First name Initial.\" format.\nFunctionality: Split the strings in the input list by tabs, reorder the elements to create a new name format, and return a list of the new names.\nExample: Input: ['Freehafer\\tDrew\\tNancy', 'Cencini\\tA\\tAndrew']; Output: ['Freehafer, Nancy D.', 'Cencini, Andrew A.']"}
{"id": 18, "desc": "Input: a list of strings representing phone numbers.\nOutput: a list of strings representing phone numbers formatted as \"(###) ###-####\".\nFunctionality: transform the input phone numbers into a standardized format with parentheses for the area code and hyphens for the rest of the number.\nExample: Input: ['1235550102', '4254423457', '4251239876', '1231239876', '4259876543']; Output: ['(123) 555-0102', '(425) 442-3457', '(425) 123-9876', '(123) 123-9876', '(425) 987-6543']"}
{"id": 19, "desc": "Input: a list of strings representing phone numbers with various formats.\nOutput: a list of formatted phone numbers in the format \"###-###-####\".\n\nFunctionality: The `transform_phone_numbers` function takes a list of phone numbers in different formats, removes all non-numeric characters such as spaces, dashes, and dots, standardizes the phone numbers to a 10-digit format, and then formats them into \"###-###-####\" format. If the original number is missing area code or has an extra digit, it adds a default area code \"425\". \n\nExample: \nInput: ['323-708-7700', '(425)-706-7709', '510.220.5586', '235 7654', '745-8139', '111-222-3333', '888 9999'] \nOutput: ['323-708-7700', '425-706-7709', '510-220-5586', '425-235-7654', '425-745-8139', '111-222-3333', '888-9999']"}
{"id": 20, "desc": "Input: a list of strings representing phone numbers.\nOutput: a list of strings representing standardized phone numbers.\nFunctionality: The function takes a list of phone numbers and standardizes them by removing all non-digit characters, then formats them based on their length. If the phone number has 7 digits, it adds the area code '425-', if it has 10 digits, it formats as 'xxx-xxx-xxxx', and if it has 11 digits, it formats as 'xxx-xxx-xxxx'. Any other length phone number is returned as is.\nExample: Input: ['4259990200', '390-9292', '499-999-2020']; Output: ['425-999-0200', '425-390-9292', '499-999-2020']"}
{"id": 21, "desc": "Input: a list of strings representing phrases.\nOutput: a list of strings containing acronyms extracted from the input phrases.\nFunctionality: Extract the acronyms from the input phrases by taking the first character of each word where the first character is uppercase.\nExample: \nInput: ['Association Computing Machinery', 'Principle Of Programming Languages', 'Special Interest Group on Management Of Data', 'Relational Data Base Management System', 'Table Extraction by Global Record Alignment']\nOutput: ['ACM', 'POPL', 'SIGMOD', 'RDBMS', 'TEGRA']"}
{"id": 22, "desc": "Input: a list of strings.\nOutput: a list of cleaned strings with removed punctuation and leading/trailing whitespace.\nFunctionality: Remove punctuation at the start and end of each string in the input list and strip any remaining leading and trailing whitespace.\nExample: Input: ['\"Do you like this site?\",', '\"--cool--\",', '\"...ok!\",', '\"None\",', '\"test if this works\"?']; Output: ['Do you like this site', '--cool--', 'ok', 'None', 'test if this works']"}
{"id": 23, "desc": "Input: a list of strings (text).\nOutput: a list of strings representing text without surrounding quotes.\n\nFunctionality: The function takes a list of strings with surrounding quotes and removes the quotes. It returns a new list with the quotes removed.\n\nExample: \nInput: ['\"Do you like this site?\"', '\"--cool--\"', '\"...ok!\"', '\"None\"', '\"test if this works\"']\nOutput: ['Do you like this site?', '--cool--', '...ok!', 'None', 'test if this works']"}
{"id": 24, "desc": "Input: a list of strings.\nOutput: a list of strings with extra spaces removed.\nFunctionality: The function `clean_spaces_in_list` takes a list of strings as input, removes any extra spaces within each string element, and returns a new list with the cleaned strings.\nExample: Input: ['a bb  cc    dd ee', 'a b  c   d    e', 'a b     e', 'a b c d e  f', 'aaa  bbb  ccc  ddd']; Output: ['a bb cc dd ee', 'a b c d e', 'a b e', 'a b c d e f', 'aaa bbb ccc ddd']"}
{"id": 25, "desc": "Input: a list of strings containing comma-separated values.\nOutput: a list of strings representing the last element after splitting each input string by commas.\nFunctionality: Extract the last element from each input string after splitting by commas.\nExample: Input: ['a, b, c, d', 'x, y, z', '1, 2, 3', 'o, p', '1, 2, 3, 4, 5, 6, 7']; Output: ['d', 'z', '3', 'p', '7']"}
{"id": 26, "desc": "Input: a list of strings containing nested lists of strings.\nOutput: a list of strings representing the second to last element in each nested list.\nFunctionality: Parse the input strings to extract the second to last element in each nested list and return them as a new list.\nExample: Input: ['{{a, b}, {cccc, d}, {e, f}}', '{{x, aaay}, {aaaz, d}}']; Output: ['cccc', 'aaaz']"}
{"id": 27, "desc": "Input: a list of strings.\nOutput: a list of strings created by extracting specific characters from each string and combining them.\nFunctionality: Split each string in the input list by underscore, extract the first two characters from the first part and the last two characters from the third part, and then join them together to form a new string.\nExample: Input: ['abc_def_xyz_8922ksd', 'all_i23saii_jjk_fhdkaj']; Output: ['aby', 'alj']"}
{"id": 28, "desc": "Input: a list of strings representing phone numbers.\nOutput: a list of strings representing phone numbers with dashes inserted.\nFunctionality: Takes a list of phone numbers as input, inserts dashes at specified positions, and returns a new list of phone numbers with dashes inserted.\nExample: Input: ['1922123456', '9822135882', '8332213215']; Output: ['192-212-3456', '982-213-5882', '833-221-3215']"}
{"id": 29, "desc": "Input: a list of strings in the format \"first_name\\tlast_name\".\nOutput: a list of strings representing formatted names.\n\nFunctionality: The code takes a list of strings where each string contains a first name and last name separated by a tab character. It then splits each string into the first name and last name, creates a new formatted name by taking the first letter of the first name in uppercase and the last name capitalized, and finally returns a list of the newly formatted names.\n\nExample: \nInput: ['james\\tsmith', 'jane\\tjohnson', 'bob\\twhite', 'alice\\tjohnson', 'charlie\\tdenis']\nOutput: ['JSmith', 'JJohnson', 'BWhite', 'AJohnson', 'CDenis']"}
{"id": 30, "desc": "Input: a list of strings containing movie names.\nOutput: a list of strings representing extracted movie names.\n\nFunctionality: This code takes a list of strings, each containing information about a movie. It extracts the movie names from the strings using regular expressions and returns a list of extracted movie names.\n\nExample: \nInput: \\[*list of strings containing movie names*\\]\nOutput: \\[*list of extracted movie names*\\]"}
{"id": 31, "desc": "Input: a list of dictionaries in string format.\nOutput: a list of strings representing the \"useful\" values extracted from the dictionaries.\nFunctionality: Extract the \"useful\" values from each dictionary in the input list and store them as strings in a new list.\nExample: Input: ['{\"funny\": 0, \"useful\": 2, \"cool\": 1}', '{\"funny\": 0, \"useful\": 2, \"cool\": 0}', '{\"funny\": 0, \"useful\": 0, \"cool\": 0}', '{\"funny\": 0, \"useful\": 1, \"cool\": 1}', '{\"funny\": 0, \"useful\": 3, \"cool\": 1}']; Output: ['2', '2', '0', '1', '3']"}
{"id": 32, "desc": "Input: a list of strings representing addresses.\nOutput: a list of strings representing zip codes extracted from the addresses.\n\nFunctionality: The function takes a list of addresses and extracts the zip codes from each address using regular expressions. It then returns a list of zip codes.\n\nExample:\nInput: ['2 N Central Avenue Phoenix, AZ 85004', 'University Ave Middleton, WI 53562', 'Farwell St Mc Farland, WI 53558', '1 Microsoft Way, Redmond, WA 98052', '14820 36th ST NE, Redmond, WA 98052']\nOutput: ['85004', '53562', '53558', '98052', '98052']"}
{"id": 33, "desc": "Input: a list of strings representing reviews.\nOutput: a list of strings showing the number of exclamation marks in each review.\nFunctionality: Extracts the sequence of exclamation marks from each review in the input list and returns them as a comma-separated string.\nExample: Input: [\"This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!\", \"Went here for lunch with two co-workers, checked Yelp before we went and the reviews were very positive so we decided to give it a try.\\n\\Yikes! How can the reviews be 4-5 stars and the service at best \\\"average\\\", the food was terrible and myself and my co-workers all agreed, this restaurant doesn't rate two stars.\\n\\I had one of the special Friday offerings, Smelt. It came with a salad (very average but fresh), fries (ordinary) and the Smelt. After a 20-25 minute wait our server came with our orders. I looked at my plate and was shocked! There was 12-15 so-called Smelt about 3\\\" long and deep fried. They looked like little fat cigarettes! I bit into one and it was all batter, I tried another and it was the same!! I had deep fried batter for lunch!!\", \"Test example!!! This is a test!!!\", \"Test one!\", \"one! two!! three!!!\"]; Output: [\"!\", \"!!\", \"!!!\", \"!\", \"!!\", \"!!!\"]"}
{"id": 34, "desc": "Input: a list of strings.\nOutput: a list of strings representing capitalized words extracted from the input strings.\nFunctionality: extract capitalized words (words with all uppercase letters) from each string in the input list and return a list of extracted capitalized words.\nExample: Input: ['This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!', 'When she asked if we had reservations, I replied no,  and she commented NO?  You KNOW IT IS SATURDAY.  I wanted to say yes, yesterday was Friday and tomorrow is Sunday.  Instead I replied that I was TERRIBLY sorry i did not realize i needed a reservation', 'This is a TEST, NOT a real line', 'test ONE, test TWO, test THREE', 'This is a TEST, not a real line']; Output: ['THIS, IS, BEST, IS, ABSOLUTELY, IT, OMG, NO, NO, KNOW, IT, SATURDAY, TERRIBLY, TEST, NOT, TEST, TEST, TEST, TEST, TEST, THIS, TEST, NOT']"}
{"id": 35, "desc": "Input: a list of strings representing lengths with 'cm' unit.\nOutput: a list of strings representing lengths with 'centimeter' unit.\nFunctionality: This function takes a list of strings representing lengths with 'cm' unit and converts them into strings with 'centimeter' unit.\nExample: Input: ['1.2 cm', '1.3 cm', '6.4 cm', '1.4 cm', '1.5 cm']; Output: ['1.2 centimeter', '1.3 centimeter', '6.4 centimeter', '1.4 centimeter', '1.5 centimeter']"}
{"id": 36, "desc": "Input: a list of strings.\nOutput: a list of strings after splitting and converting to uppercase.\n\nFunctionality: The code takes a list of strings, splits each string by the tab character \"\\t\", selects the first part, converts it to uppercase, and returns a new list with the transformed strings.\n\nExample: \nInput: ['abc\\txyz', 'azzz\\tttt', 'xyz\\tttttt', 'cccc\\tabc', 'abcdefg\\tuvw']\nOutput: ['ABC', 'AZZZ', 'XYZ', 'CCCC', 'ABCDEFG']"}
{"id": 37, "desc": "Input: a list of strings containing Greek characters.\nOutput: a list of strings with Greek characters replaced by their corresponding English characters.\nFunctionality: The function replaces specific Greek characters with their corresponding English characters and transforms the input strings to uppercase.\nExample: Input: ['\u03b1\u03b9\u03bd\u03c3\u03ca', 'aeiou', 'ae\u03bdouxyz', 'ae\u03bdo', 'ae\u03bdou\u03bd\u03c3\u03caz']; Output: ['AEINOUI', 'AEIOU', 'AEIOUXYZ', 'AENO', 'AEIOUNOUIZ']"}
{"id": 38, "desc": "Input: a list of strings containing actress names.\nOutput: a list of actress names extracted from the input list.\n\nFunctionality: The code extracts the actress names enclosed within double square brackets from each string in the input list and appends them to a new list.\n\nExample: Input: [\"* '''1953 [[Meena Kumari]] \\x96 ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\", \"* '''1954 [[Meena Kumari]] \\x96 ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\"]; Output: [\"Meena Kumari\", \"Meena Kumari\"]"}
{"id": 39, "desc": "Input: a list of strings containing film titles with associated information.\nOutput: a list of strings representing the second film title extracted from the input strings.\nFunctionality: Extract the second film title enclosed in double square brackets from each input string.\nExample: Input: [\"* '''1953 [[Meena Kumari]] \\x96 ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\", \"* '''1954 [[Meena Kumari]] \\x96 ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\"]; Output: [\"Baiju Bawra\", \"Parineeta\"]"}
{"id": 40, "desc": "Input: a list of strings.\nOutput: a list of extracted character names.\nFunctionality: Extract the character names from the input list of strings by using regular expressions.\nExample: Input: [\"* '''1953 [[Meena Kumari]] \\x96 ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\", ...]; Output: [\"Gauri\", \"Lalita\", \"Biraj Chakravorty\", \"Kamla\", \"Shobha\", \"Gauri\", \"Radha\", \"Champabai / Rajani\", \"Leela\", \"Madhumati / Madhavi / Radha\", \"Sujata\", \"Meena Khosla\", \"Ratna\"]"}
{"id": 41, "desc": "Input: a list of JSON strings.\nOutput: a list of extracted business IDs.\nFunctionality: extract the \"business_id\" field from each JSON string in the input list.\nExample: Input: ['{\"checkin_info\": {\"3-4\": 1, \"13-5\": 1, \"6-6\": 1, \"14-5\": 1, \"14-6\": 1, \"14-2\": 1, \"14-3\": 1, \"19-0\": 1, \"11-5\": 1, \"13-2\": 1, \"11-6\": 2, \"11-3\": 1, \"12-6\": 1, \"6-5\": 1, \"5-5\": 1, \"9-2\": 1, \"9-5\": 1, \"9-6\": 1, \"5-2\": 1, \"7-6\": 1, \"7-5\": 1, \"7-4\": 1, \"17-5\": 1, \"8-5\": 1, \"10-2\": 1, \"10-5\": 1, \"10-6\": 1}, \"type\": \"checkin\", \"business_id\": \"JwUE5GmEO-sH1FuwJgKBlQ\"}', '{\"checkin_info\": {\"9-3\": 1, \"12-5\": 1, \"15-3\": 1, \"15-5\": 1, \"7-6\nOutput: ['JwUE5GmEO-sH1FuwJgKBlQ', 'uGykseHzyS5xAMWoN6YUqA', 'LRKJF43s9-3jG9Lgx4zODg', 'AMWoN6YUqA-sH1FuwJgKBlQ', 'sH1FuwJgKBlQ5xAMWoN6YUqA']"}
{"id": 42, "desc": "Input: a list of strings representing JSON objects.\nOutput: a list of strings representing the values of the \"useful\" key in the JSON objects.\nFunctionality: Extract the values of the \"useful\" key from each JSON object in the input list.\nExample: Input: ['{\"funny\": 0, \"useful\": 2, \"cool\": 1}', '{\"funny\": 0, \"useful\": 2, \"cool\": 0}', '{\"funny\": 0, \"useful\": 0, \"cool\": 0}', '{\"funny\": 0, \"useful\": 1, \"cool\": 1}', '{\"funny\": 3, \"useful\": 3, \"cool\": 6}']; Output: ['2', '2', '0', '1', '3']"}
{"id": 43, "desc": "Input: a list of strings containing multiple exclamation marks \"!\".\nOutput: a list of strings where the exclamation marks are concatenated.\nFunctionality: find all sequences of two or more exclamation marks \"!!\", and concatenate them together for each input string.\nExample: Input: ['one! two!! three!!!', 'Test example!!! This is a test!!!']; Output: ['!!', '!!!!']"}
{"id": 44, "desc": "Input: a list of strings.\nOutput: a list of strings representing the count of consecutive exclamation marks in each input string.\nFunctionality: extract and count consecutive exclamation marks in each input string and return them as a comma-separated string.\nExample: Input: ['This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!', 'Went here for lunch with two co-workers, checked Yelp before we went and the reviews were very positive so we decided to give it a try. Yikes! How can the reviews be 4-5 stars and the service at best \"average\", the food was terrible and myself and my co-workers all agreed, this restaurant doesn't rate two stars. I had one of the special Friday offerings, Smelt. It came with a salad (very average but fresh), fries (ordinary) and the Smelt. After a 20-25 minute wait our server came with our orders. I looked at my plate and was shocked! There was 12-15 so-called Smelt about 3\" long and deep fried. They looked like little fat cigarettes! I bit into one and it was all batter, I tried another and it was the same!! I had deep fried batter for lunch!!', 'Test example!!! This is a test!!!', 'Test one!', 'one! two!! three!!!']\nOutput: ['!', '!!', '!!!', '!', '!!']"}
{"id": 45, "desc": "Input: a list of strings.\nOutput: a list of strings representing uppercase words found in each input string.\nFunctionality: extract uppercase words with 2 or more characters from each string in the input list.\nExample: Input: ['This is one of the best breakfasts...', 'When she asked if we had reservations...']; Output: ['This', 'Is', 'NO', 'KNOW', 'IT', 'IS', 'SATURDAY', 'TERRIBLY', 'TEST', 'NOT', 'ONE', 'TWO', 'THREE', 'TEST', 'NOT']"}
{"id": 46, "desc": "Input: a list of strings representing time durations (HH:MM:SS).\nOutput: a list of strings representing time durations in decimal hours.\nFunctionality: convert the input time durations into decimal hours format.\nExample: Input: ['02:45:45', '1:30:25', '12:10:02', '03:22:45', '22:22:22']; Output: ['2.7625 hours', '1.5069 hours', '12.1672 hours', '3.3792 hours', '22.3728 hours']"}
{"id": 47, "desc": "Input: a list of binary strings.\nOutput: a list of hexadecimal strings.\n\nFunctionality: Convert each binary string in the input list to its hexadecimal equivalent.\nExample: Input: ['101010', '11111111', '0000101', '11', '111']; Output: ['2A', 'FF', '5', '3', '7']"}
{"id": 48, "desc": "Input: a list of Roman numeral strings.\nOutput: a list of strings representing the corresponding integer value of the Roman numerals.\n\nFunctionality: The function takes a list of Roman numeral strings as input, converts each Roman numeral to its integer equivalent using a conversion dictionary, and returns a list of strings containing the integer values.\n\nExample: \nInput: ['III', 'CCXXXIII', 'C', 'CCXXII', 'MCCXXXIV']\nOutput: ['3', '233', '100', '222', '1234']"}
{"id": 49, "desc": "Input: a list of string values representing slopes in percentage.\nOutput: a list of strings representing slopes in degrees.\n\nFunctionality: The function takes a list of string values representing slopes in percentage, removes the '%' sign, converts them to float, then converts the slope values from percentage to degrees using the arctangent formula, and finally formats the degrees to two decimal points with the \"Degrees\" suffix.\n\nExample: \nInput: ['4%', '30%', '45%', '24%', '12%']\nOutput: ['1.79 Degrees', '28.07 Degrees', '41.19 Degrees', '24.68 Degrees', '11.31 Degrees']"}
{"id": 50, "desc": "Input: a list of strings representing time in 12-hour clock format.\nOutput: a list of strings representing time in 24-hour (military) clock format.\n\nFunctionality: The code takes a list of time values in 12-hour clock format and converts them to 24-hour (military) clock format using pandas library. The input list is converted to a pandas series, then to datetime format, and finally to military time format using strftime function.\n\nExample: Input: ['1:00 PM', '6:00 PM', '11:00 PM', '8:00 AM', '11:00 AM']; Output: ['1300', '1800', '2300', '0800', '1100']"}
{"id": 51, "desc": "Input: a list of strings representing latitude and longitude coordinates.\nOutput: a list of strings representing UTM coordinates.\nFunctionality: Convert the latitude and longitude coordinates in the input list to UTM coordinates.\nExample: Input: ['32.44, 44.11', '36.11, 80.22', '10.82, 20.21', '23.11, 39.33', '10.22, -39.33']; Output: ['742452mE, 3583895mN', '610435mE, 1896420mN', '558630mE, 1199307mN', '587687mE, 2557866mN', '430492mE, 1131093mN']"}
{"id": 52, "desc": "Input: a list of strings representing RGB values.\nOutput: a list of strings representing CMYK values.\n\nFunctionality: The function takes a list of RGB values in the format \"R,G,B\" as input, converts them to CMYK values, and returns a list of strings representing CMYK values in the format \"C,M,Y,K\". The RGB values are normalized to the range 0-1, converted to CMY values, and then the key (black component) is calculated using the minimum CMY value. The resulting CMYK values are formatted as strings and any trailing zeros are removed.\n\nExample: \nInput: ['3,4,5', '0,0,0', '33,44,55', '255,0,255', '0,255,0']\nOutput: ['0.667,0.2,0.0,0.8', '0.0,0.0,0.0,1.0', '0.4,0.2,0.0,0.8', '0.0,1.0,0.0,0.0', '1.0,0.0,1.0,0.0']"}
{"id": 53, "desc": "Input: a list of strings representing military time values (24-hour format).\nOutput: a list of strings representing standard time values (12-hour format).\nFunctionality: Convert the input military time values to standard time values (12-hour format).\nExample: Input: ['0100', '1800', '1400', '1300', '1600', '0200']; Output: ['1:00 AM', '6:00 PM', '2:00 PM', '1:00 PM', '4:00 PM', '2:00 AM']"}
{"id": 54, "desc": "Input: a list of strings representing colors in CMYK format.\nOutput: a list of strings representing colors in RGB format.\nFunctionality: convert the CMYK color format to RGB color format using the provided formula.\nExample: Input: ['0,0,0,1', '0.16,0.67,0.61,0.73', '0,1,1,0', '0,1,0,0', '0.53,0.42,0.38,0.55']; Output: ['255,255,255', '34,108,61', '255,0,0', '255,0,0', '120,109,109']"}
{"id": 55, "desc": "Input: a list of binary strings.\nOutput: a list of decimal strings.\n\nFunctionality: The function `binary_to_decimal` converts each binary string in the input list `seq_a` to its equivalent decimal representation. It achieves this by calling the `base_two_to_ten` function which converts a single binary string to decimal. The converted decimal strings are stored in `seq_b`.\n\nExample: \nInput: ['11111', '10101001', '100001101', '111', '101010']\nOutput: ['31', '169', '205', '7', '42']"}
{"id": 56, "desc": "Input: a list of strings representing time values.\nOutput: a list of strings representing time values in the format \"hrs, mins, secs\".\nFunctionality: converts a list of time strings with milliseconds into hours, minutes, and seconds representation.\nExample: \nInput: ['00:06:32.4458750', '11:12:13.7458750', '23:01:09.0988712', '12:21:09.2988712', '23:31:21.4322211']\nOutput: ['0 hrs, 6 mins, 32 secs', '11 hrs, 12 mins, 14 secs', '23 hrs, 1 mins, 9 secs', '12 hrs, 21 mins, 9 secs', '23 hrs, 31 mins, 21 secs']"}
{"id": 57, "desc": "Input: a list of strings representing numerical values.\nOutput: a list of strings representing the numbers in scientific notation.\nFunctionality: takes a list of numerical strings, converts them to scientific notation with 4 decimal points, and returns them as a list of strings.\nExample: \nInput: ['1234', '23912000', '98100', '110', '12345']\nOutput: ['1.234E+03', '2.3912E+07', '9.8100E+04', '1.1000E+02', '1.2345E+04']"}
{"id": 58, "desc": "Input: a list of strings containing HTML tags.\nOutput: a list of strings with HTML tags removed.\n\nFunctionality: This code snippet defines a function `transform_html_to_text` that takes a list of strings containing HTML tags as input. It applies the `html_to_text` function to convert each HTML string to plain text. The `html_to_text` function uses BeautifulSoup to parse HTML and extract plain text from it. Finally, the function returns a list of strings without HTML tags.\n\nExample: \nInput: \n['<b>Hello World.</b><br/><p><i>Is there anyone out there?</i><p>', \n'<b>hello world!</b><br /><i>it is me</i>', \n'<b>hello, </b><b>hi.</b><b>welcome</b>', \n'<b>test</b>', \n'<b>this</b><b> is</b><b> a</b><b> test</b>']\n\nOutput: \n['Hello World.Is there anyone out there?', \n'hello world!it is me', \n'hello, hi.welcome', \n'test', \n'this is a test']"}
{"id": 59, "desc": "Input: a list of strings representing hexadecimal values.\nOutput: a list of strings representing binary values.\nFunctionality: Convert each hexadecimal string in the input list into a binary string.\nExample: Input: ['123A', '469E', 'AAE352', '123', '3333']; Output: ['0001 0010 0011 1010', '0100 0110 1001 1110', '1010 1010 1110 0011 0101 0010', '0001 0010 0011', '0011 0011 0011 0011']"}
{"id": 60, "desc": "Input: a list of strings representing time in PT (Pacific Time) format.\nOutput: a list of strings representing time in ET (Eastern Time) format.\nFunctionality: The function converts the input time strings from PT to ET by adding 3 hours to each time and then formatting it in a specific way.\nExample: Input: ['2:30 AM,Mon,Aug 17,2015', '11:00 PM,Sun,Aug 2,2015']; Output: ['5:30 AM,Mon,Aug 17,2015', '2:00 AM,Mon,Aug 3,2015']"}
{"id": 62, "desc": "Input: a list of strings containing hexadecimal color values.\nOutput: a list of strings representing RGB values in the format \"r,g,b\".\n\nFunctionality: The function `hex_to_rgb_list` takes a list of hexadecimal color values as input, converts them to RGB tuples, and then formats the RGB tuples into strings in the format \"r,g,b\".\nExample: Input: ['#000000', '#00FF00', '#FF00FF', '#FFFF3F', '#223344']; Output: ['0,0,0', '0,255,0', '255,0,255', '255,255,63', '34,51,68']"}
{"id": 63, "desc": "Input: a list of strings representing Hijri dates.\nOutput: a list of strings representing Gregorian dates.\n\nFunctionality: This code snippet takes a list of strings that represent dates in the Hijri calendar format and converts them to dates in the Gregorian format. It uses the ummalqura python package to handle the conversion and then formats the resulting date in a readable format. The converted dates are then returned in a list.\n\nExample: \nInput: ['11 Shawwal 1430', '19 Rajab 1460', '1 Muharram 1431']\nOutput: ['Tuesday 22 September 2009 C.E', 'Tuesday 6 October 2039 C.E', 'Thursday 17 December 2009 C.E']"}
{"id": 64, "desc": "Input: a list of strings representing characters.\nOutput: a list of strings representing hexadecimal values of characters.\n\nFunctionality: this function takes a list of strings, converts each character to its corresponding hexadecimal value, and returns a list of strings representing those hexadecimal values.\n\nExample: \nInput: ['DC2', 'RS', '#', 'D', '\"']\nOutput: ['12', '1E', '23', '44', '22']"}
{"id": 65, "desc": "Input: a list of strings representing pressure values in psia.\nOutput: a list of strings representing pressure values in psig.\nFunctionality: Remove ' psia' suffix, convert to float, convert psia values to psig by subtracting atmospheric pressure, and format the result with specific precision.\nExample: Input: ['33 psia', '17 psia', '100 psia', '22 psia', '3 psia']; Output: ['18.304051 psig', '2.304051 psig', '85.304051 psig', '7.304051 psig', '-11.695949 psig']"}
{"id": 66, "desc": "Input: a list of strings representing minutes.\nOutput: a list of strings representing time in \"hh:mm:ss\" format.\n\nFunctionality: The code takes a list of strings representing minutes as input, converts them to integers, then converts those minutes into a time format represented in \"hh:mm:ss\" where hours vary according to the input minutes. The output is a list of formatted time strings reflecting the converted minutes.\n\nExample: Input: ['1439', '60', '95', '64', '91']; Output: ['23:59:00', '01:00:00', '01:35:00', '01:04:00', '01:31:00']"}
{"id": 67, "desc": "Input: a list of strings representing decimal degree values.\nOutput: a list of strings representing degree-minute-second (DMS) format.\n\nFunctionality: The code converts each decimal degree value to degree-minute-second (DMS) format where degrees represent the whole number part, minutes represent the integer part of the decimal part, and seconds represent the rounded decimal part.\nExample: \nInput: ['4', '11.35', '129.45', '23'];\nOutput: [\"4 0' 0\\\"\", \"11 21' 0\\\"\", \"129 27' 0\\\"\", \"23 0' 0\\\"\"]"}
{"id": 68, "desc": "Input: a list of decimal strings.\nOutput: a list of strings representing fractions.\n\nFunctionality: Convert each decimal string in the input list into a fractional representation.\nExample: Input: ['0.003', '0.125', '4.5', '0.25', '0.2']; Output: ['3/1000', '1/8', '9/2', '1/4', '1/5']"}
{"id": 69, "desc": "Input: a list of latitude and longitude strings.\nOutput: a list of MGRS (Military Grid Reference System) codes with precision 5.\nFunctionality: using the MGRS library, convert latitude and longitude values to MGRS codes with a precision of 1m grid.\nExample: Input: ['23.11, -39.33', '44.11, -77.33', '66.99, -33.11', '23.33, -39.55', '44.22, -77.44']; Output: ['24NWJ3044222431', '18SVJ8605228930', '17TFN3455218664', '24NWJ4337924383', '18TUK1100100821']"}
{"id": 70, "desc": "Input: a list of strings representing women's shoe sizes.\nOutput: a list of strings representing men's shoe sizes.\n\nFunctionality: Converts women's shoe sizes to men's shoe sizes by subtracting 1.5 from each size, handling half sizes correctly.\n\nExample: \nInput: ['7.5', '14', '8', '7', '9']\nOutput: ['6.0', '12.5', '6.5', '5.5', '7.5']"}
{"id": 71, "desc": "Input: a list of strings representing Excel serial date numbers.\nOutput: a list of strings representing dates in the format \"MM/DD/YYYY\".\n\nFunctionality: The function takes a list of strings representing Excel serial date numbers, converts them to integers, converts the Excel serial dates to datetime format using the specified origin date, and then formats the datetimes as strings in the 'MM/DD/YYYY' format.\n\nExample: \nInput: ['39938', '39934', '39958', '36557', '39270']\nOutput: ['07/29/2009', '07/25/2009', '08/18/2009', '08/21/2000', '07/14/2007']"}
{"id": 72, "desc": "Input: a list of string representing decimal values.\nOutput: a list of string representing octal values.\n\nFunctionality: The code takes a list of decimal values in string format, converts each value to octal format, and returns a list of string representing the octal values.\n\nExample: \nInput: ['2358', '198645', '33', '232', '1234']\nOutput: ['4466', '605115', '41', '350', '2322']"}
{"id": 73, "desc": "Input: a list of strings representing RGB values.\nOutput: a list of strings representing Pantone color codes.\n\nFunctionality: The function takes a list of RGB values and converts them into Pantone color codes based on a pre-defined mapping. It creates a DataFrame with RGB and corresponding Pantone values, then converts the RGB values in the input list to Pantone values using this mapping.\n\nExample: Input: ['244,237,124', '244,237,71', '249,232,20', '249,214,22', '198,160,12']; Output: ['100', '101', '102', '109', '117']"}
{"id": 74, "desc": "Input: a list of strings representing dates in the format 'yyyyMMdd'.  \nOutput: a list of strings representing dates in the format 'Mon dd, YYYY'.  \nFunctionality: The function takes a list of date strings in the format 'yyyyMMdd', converts them to date objects, and then formats them into the desired output format 'Month dd, YYYY'.  \nExample: Input: ['19851231', '19811120', '20110301']; Output: ['Dec 31, 1985', 'Nov 20, 1981', 'Mar 01, 2011']"}
{"id": 75, "desc": "Input: a list of strings representing month numbers.\nOutput: a list of strings representing month names.\n\nFunctionality: The function takes a list of month numbers as strings (e.g., '4' for April) and transforms them into month names. It uses a dictionary that maps each month number to its corresponding name. The function then converts each month number in the input list to its corresponding month name and returns a new list with month names.\n\nExample: \nInput: ['4', '7', '12', '10', '3']\nOutput: ['April', 'July', 'December', 'October', 'March']"}
{"id": 76, "desc": "Input: a list of strings representing speeds in meters per second.\nOutput: a list of strings representing speeds in miles per hour.\n\nFunctionality: The function takes a list of speeds in meters per second, converts them to miles per hour using a conversion factor, and returns a list of strings with the speeds in miles per hour expressed with four decimal points precision.\nExample: Input: ['2 m/s', '89 m/s', '123 m/s', '12 m/s', '33 m/s']; Output: ['4.4730 mph', '199.1562 mph', '274.0587 mph', '26.8345 mph', '73.9496 mph']"}
{"id": 77, "desc": "Input: a list of strings representing MGRS coordinates.\nOutput: a list of strings representing latitude and longitude coordinates.\nFunctionality: Convert the MGRS coordinates in the input list to latitude and longitude coordinates and return them in the format \"lat lon\".\nExample: Input: ['12U UA 84323 40791', '15S WC 80817 51205', '19T DJ 38588 97366', '12U UA 87466 40791', '15S WC 40817 12345']; Output: ['49.06345 -123.23824', '3.23432 -56.68734', '40.78675 -73.94256', '49.06345 -123.23824', '34.76589 -88.12345']"}
{"id": 78, "desc": "Input: a list of strings containing mixed numbers, fractions, or whole numbers.\nOutput: a list of strings representing the parsed values in decimal format with up to 3 decimal places, excluding trailing zeros.\n\nFunctionality: The function `transform_values` takes a list of strings with mixed numbers, fractions, or whole numbers, parses them into decimal format, and removes trailing zeros to return a refined list of strings.\n\nExample: \nInput: ['2 1/2', '51 3/4', '112', '7 2/5', '3 1/4', '1/8']\nOutput: ['2.5', '51.75', '112', '7.4', '3.25', '0.125']"}
{"id": 79, "desc": "Input: a list of hexadecimal values.\nOutput: a list of ASCII characters.\n\nFunctionality: The code converts a list of hexadecimal values into corresponding ASCII characters using pandas. It creates a DataFrame from the input list, defines a function to convert each hexadecimal value to an ASCII character, applies this function to the DataFrame, and then returns the list of ASCII characters.\n\nExample: Input: ['34', '55', '74', '44', '22']; Output: ['4', 'U', 't', 'D', '\"']"}
{"id": 80, "desc": "Input: a list of binary strings.\nOutput: a list of decimal integers.\n\nFunctionality: convert each binary string in the input list into a decimal integer representation.\n\nExample: Input: ['010101', '111101', '1011010', '11', '111']; Output: ['21', '61', '90', '3', '7']"}
{"id": 82, "desc": "Input: a list of strings representing decimal numbers.\nOutput: a list of strings representing hexadecimal numbers.\n\nFunctionality: The function takes a list of decimal numbers as strings and converts them to hexadecimal numbers as strings in uppercase format.\n\nExample: Input: ['214633', '1246367', '9872031', '323', '123234']; Output: ['34539', '1304BF', '97E11F', '143', '1E7B2']"}
{"id": 83, "desc": "Input: a list of strings with values in grams format.\nOutput: a list of strings representing the equivalent weight in pounds and ounces format.\n\nFunctionality: The function takes a list of strings representing weights in grams, extracts the numeric part, converts the weight from grams to pounds and ounces, and formats the output as 'Xlb Yoz'.\n\nExample: Input: ['32g', '1000g', '3400g', '222g', '123g']; Output: ['0lb 1.411oz', '2lb 3.274oz', '7lb 7.394oz', '0lb 0.489oz', '0lb 0.271oz']"}
{"id": 84, "desc": "Input: a list of strings representing dates in US Pacific Timezone.\nOutput: a list of strings representing dates in US Eastern Timezone.\nFunctionality: Convert the input dates from US Pacific Timezone to US Eastern Timezone in the format \"%I:%M %p, %b %d, %Y\".\nExample: Input: ['9:41 PM, Aug 17, 2015', '1:00 AM, Jun 3, 2015', '10:00 AM, Mar 20, 2015', '5:00 AM, Jun 5, 2015', '11:00 AM, Mar 20, 2015']; Output: ['12:41 AM, Aug 18, 2015', '4:00 AM, Jun 3, 2015', '1:00 PM, Mar 20, 2015', '8:00 AM, Jun 5, 2015', '12:00 PM, Mar 20, 2015']"}
{"id": 85, "desc": "Input: a list of strings representing time durations in minutes.\nOutput: a list of strings representing durations in hundredths of an hour.\n\nFunctionality: The code converts the input list of time durations in minutes to hundredths of an hour. It splits the numerical part from the input string, converts the minutes to hour fractions, rounds the result to 2 decimal places, and formats the output to ensure it has 2 decimal places.\n\nExample: Input: ['13 minutes', '43 minutes', '58 minutes', '15 minutes', '44 minutes']; Output: ['0.22', '0.72', '0.97', '0.25', '0.73']"}
{"id": 86, "desc": "Input: a list of strings representing mixed fractions.\nOutput: a list of strings representing decimal numbers.\n\nFunctionality: The function takes a list of mixed fractions in the format \"x y/z\" and converts them into decimal numbers. If the input is already a decimal, it keeps it as it is. The function splits the mixed fraction into whole, numerator, and denominator parts and calculates the decimal value. It then returns a list of decimal numbers.\n\nExample: Input: ['7 1/4', '21 2/5', '129', '6 9/100', '3 4/5']; Output: ['7.25', '21.4', '129', '6.09', '3.8']"}
{"id": 87, "desc": "Input: a list of strings representing time in Central Time.\nOutput: a list of strings representing time in Eastern Time.\n\nFunctionality: Converts the input times from Central Time to Eastern Time using the specified formats and time zones.\nExample: Input: ['11:47 PM,Mon,Aug 17,2015', '7:00 AM,Tue,Jul 7,2015', '1:30 AM,Thu,May 14,2015', '3:30 AM,Thu,May 14,2015', '1:11 AM,Thu,May 21,2015']; Output: ['12:47 AM,Tue,Aug 18,2015', '8:00 AM,Tue,Jul 7,2015', '2:30 AM,Thu,May 14,2015', '4:30 AM,Thu,May 14,2015', '2:11 AM,Thu,May 21,2015']"}
{"id": 88, "desc": "Input: a list of strings representing hourly wages.\nOutput: a list of strings representing annual salaries.\n\nFunctionality: The function converts the input list of hourly wages into corresponding annual salaries by removing the currency symbol and '/hour', converting the values to float, multiplying by 2080 (assuming 2080 working hours in a year), formatting the output as currency value, and returning the list of annual salaries.\n\nExample: Input: ['$12/hour', '$15/hour', '$40/hour', '$22/hour', '$11/hour']; Output: ['$24,960.00', '$31,200.00', '$83,200.00', '$45,760.00', '$22,880.00']"}
{"id": 89, "desc": "Input: a list of strings with polar coordinates format.\nOutput: a list of strings representing rectangular coordinates.\nFunctionality: Convert polar coordinates (r, theta) to rectangular coordinates (x, y) using trigonometry calculations.\nExample: Input: ['(2, 4)', '(4, 60)', '(10, 30)', '(23, 35)', '(11, 22)']; Output: ['(2.00000, 0.00000)', '(2.00000, 3.46410)', '(8.66025, 5.00000)', '(20.72458, 20.10281)', '(5.11014, 9.43398)']"}
{"id": 90, "desc": "Input: a list of fraction strings.\nOutput: a list of strings representing decimals formatted to two decimal places.\nFunctionality: convert the given list of fraction strings to decimal values, format them with two decimal places, and remove trailing zeros and decimals.\nExample: Input: ['1/4', '200/4', '9/100', '3/4', '1/2']; Output: ['0.25', '50', '0.09', '0.75', '0.5']"}
{"id": 91, "desc": "Input: a list of strings representing Arabic numerals.\nOutput: a list of strings representing Roman numerals.\nFunctionality: convert the Arabic numerals in the input list into Roman numerals using a predefined mapping.\nExample: Input: ['4', '1350', '981', '34', '11']; Output: ['IV', 'MCCCL', 'CMLXXXI', 'XXXIV', 'XI']"}
{"id": 92, "desc": "Input: a list of strings representing RGB values.\nOutput: a list of strings representing corresponding hexadecimal color codes.\n\nFunctionality: The function takes a list of RGB values in string format, converts each RGB value into a hexadecimal color code, and appends the hex color codes to a new list.\n\nExample: Input: ['255,255,255', '238,130,238', '147,112,219', '219,112,147', '34,139,34']; Output: ['#FFFFFF', '#EE82EE', '#9370DB', '#DB7093', '#228B22']"}
{"id": 93, "desc": "Input: a list of strings representing decimal values.\nOutput: a list of strings representing hexadecimal values in uppercase.\n\nFunctionality: This code takes a list of decimal values in string format, converts them to hexadecimal values, and returns the hexadecimal values in uppercase letters.\n\nExample: Input: ['22', '2156', '9876', '323', '123234']; Output: ['16', '86C', '2694', '143', '1E2A2']"}
{"id": 95, "desc": "Input: a list of strings representing measurements in centimeters.\nOutput: a list of strings representing measurements in feet and inches.\n\nFunctionality: The input list of strings contains measurements in centimeters. The function converts these measurements into feet and inches format and returns a list of strings representing the measurements in feet and inches with four decimal places for the inches part.\n\nExample: Input: ['3 cm', '870 cm', '69 cm', '44 cm', '555 cm']; Output: ['0 feet and 1.1811 inches', '28 feet and 8.6614 inches', '2 feet and 2.8346 inches', '1 feet and 7.3228 inches', '18 feet and 3.9386 inches']"}
{"id": 96, "desc": "Input: a list of strings representing measurements in millimeters.\nOutput: a list of strings representing measurements in inches.\nFunctionality: extract the numerical value from each string, convert it from millimeters to inches, and format the result with 6 decimal places followed by \"inch\".\nExample: Input: ['1 mm', '8 mm', '17 mm', '33 mm', '22 mm']; Output: ['0.039370 inch', '0.314961 inch', '0.669291 inch', '1.299213 inch', '0.866142 inch']"}
{"id": 97, "desc": "Input: a list of strings representing distances in kilometers.\nOutput: a list of strings representing distances in miles.\nFunctionality: Extract the numeric part from each string, convert it to float, convert kilometers to miles using the conversion factor, and format the output to round to 5 decimal places with \"mile\" appended.\nExample: Input: ['15 km', '251 km', '321 km', '12 km', '44 km']; Output: ['9.32057 mile', '155.97508 mile', '199.23077 mile', '7.45645 mile', '27.34075 mile']"}
{"id": 98, "desc": "Input: a list of strings representing distances in kilometers.\nOutput: a list of strings representing distances in miles.\n\nFunctionality: The function takes a list of strings where each element represents a distance in kilometers. It converts each input distance from kilometers to miles using the conversion factor (0.6213711922) and formats the output to have a specific number of decimal places with the unit \"mile\" added. The trailing zeros in the output are removed.\n\nExample: Input: ['5 km', '18 km', '1349 km', '3 km', '33 km']; Output: ['3.106855 mi', '11.184681 mi', '838.610435 mi', '1.864114 mi', '20.505613 mi']"}
{"id": 99, "desc": "Input: a list of strings representing measurements in inches.\nOutput: a list of strings representing measurements in feet with required precision.\n\nFunctionality: The code takes a list of strings representing measurements in inches. It converts each measurement to feet and rounds it using the desired precision. The output is a list of strings representing measurements in feet.\n\nExample: Input: ['3 inch', '37 inch', '12 inch', '169 inch', '44 inch']; Output: ['0.25 feet', '3.08 feet', '1.00 feet', '14.08 feet', '3.67 feet']"}
{"id": 100, "desc": "Input: a list of strings representing weights in pounds.\nOutput: a list of strings representing weights in kilograms.\nFunctionality: Convert the input weights from pounds to kilograms with precision adjustment and format the output as strings.\nExample: \nInput: ['17 b', '39 b', '198 b', '33 b', '12 b']\nOutput: ['7.71100 kg', '17.69092 kg', '89.81191 kg', '14.96823 kg', '5.44311 kg']"}
{"id": 101, "desc": "Input: a list of strings representing weights in pounds.\nOutput: a list of strings representing weights in kilograms.\nFunctionality: convert the weights given in pounds to kilograms, rounding the result to the appropriate number of decimal places and removing trailing zeroes.\nExample: Input: ['1 b', '18 b', '101 b', '33 b', '12 b']; Output: ['0.45359237 kg', '8.16466229 kg', '45.81205836 kg', '14.96887936 kg', '5.44310841 kg']"}
{"id": 102, "desc": "Input: a list of strings representing measurements in meters.\nOutput: a list of strings representing measurements in feet.\nFunctionality: extract the numerical value from each measurement, convert it from meters to feet, and format the converted value to show relevant digits with the appropriate measurement unit.\nExample: Input: ['8 m', '259 m', '387 m', '333 m', '888 m']; Output: ['26.24672 feet', '849.73736 feet', '1268.11286 feet', '1092.22507 feet', '2910.76112 feet']"}
{"id": 103, "desc": "Input: a list of strings representing weights in grams.\nOutput: a list of strings representing weights in pounds.\nFunctionality: This code takes a list of strings representing weights in grams as input, extracts the numerical values, converts them to pounds, and appends 'b' to indicate the unit. Finally, it returns a list of strings representing weights in pounds.\nExample: Input: ['6 g', '89 g', '100 g', '66 g', '23 g']; Output: ['0.01322888 b', '0.19621150 b', '0.22046226 b', '0.14550557 b', '0.05070632 b']"}
{"id": 104, "desc": "Input: a list of strings representing volumes in liters.\nOutput: a list of strings representing volumes in gallons.\nFunctionality: Convert the input values from liters to gallons using a conversion factor, format the result as a decimal number, and remove trailing zeros.\nExample: Input: ['7 L', '15 L', '98 L', '33 L', '17 L']; Output: ['1.85 gal', '3.96 gal', '25.87 gal', '8.72 gal', '4.49 gal']"}
{"id": 106, "desc": "Input: a list of strings with 'mm' units.\nOutput: a list of strings representing lengths in inches.\n\nFunctionality: The code converts the input list of strings representing lengths in millimeters to inches and appends 'inch' unit to each value.\n\nExample: Input: ['15 mm', '39 mm', '130 mm', '4 mm', '41 mm']; Output: ['0.59055 inch', '1.53542 inch', '5.11873 inch', '0.15748 inch', '1.61417 inch']"}
{"id": 107, "desc": "Input: a list of strings representing measurements in meters.\nOutput: a list of strings representing measurements in feet.\nFunctionality: convert the given measurements in meters to feet using a conversion factor, format the output to remove unnecessary decimal places and trailing zeros, and append \"feet\" to the result.\nExample: Input: ['3 meter', '19 meter', '20 meter', '4 meter', '2 meter']; Output: ['9.84252 feet', '62.33687 feet', '65.6168 feet', '13.12336 feet', '6.56168 feet']"}
{"id": 108, "desc": "Input: a list of strings representing weights in grams.\nOutput: a list of strings representing weights in ounces.\n\nFunctionality: Convert the input weights from grams to ounces, keeping 8 decimal places.\nExample: Input: ['1 g', '30 g', '1500 g', '3 g', '23 g']; Output: ['0.03527396 oz', '1.05821896 oz', '52.91018405 oz', '0.105822 oz', '0.81130153 oz']"}
{"id": 109, "desc": "Input: a list of strings representing measurements in inches.\nOutput: a list of strings representing measurements in centimeters.\nFunctionality: convert the values in inches to centimeters and format them with two decimal points, removing trailing zeros.\nExample: Input: ['8 inch', '39 inch', '300 inch', '30 inch', '2 inch']; Output: ['20.32 cm', '99.06 cm', '762.00 cm', '76.20 cm', '5.08 cm']"}
{"id": 110, "desc": "Input: a list of strings representing volumes in milliliters.\nOutput: a list of strings representing volumes in ounces with six decimal places.\n\nFunctionality: The code extracts numerical values from the input strings, converts them from milliliters to ounces using a conversion factor of 0.033814, and then formats the output with six decimal places followed by \"oz\".\n\nExample: Input: ['10 ml', '39 ml', '200 ml', '3 ml', '30 ml']; Output: ['0.338140 oz', '1.318024 oz', '6.762800 oz', '0.101442 oz', '1.014420 oz']"}
{"id": 111, "desc": "Input: a list of strings representing measurements in centimeters.\nOutput: a list of strings representing measurements in inches with 5 decimal places rounded appropriately.\n\nFunctionality: The function takes a list of strings representing measurements in centimeters, converts them to inches, rounds the result to 5 decimal places, removes trailing zeros, and appends \"inch\" to each value.\n\nExample: \nInput: ['1 cm', '99 cm', '367 cm', '33 cm', '123 cm']\nOutput: ['0.39370 inch', '38.97638 inch', '144.40945 inch', '12.99213 inch', '48.42520 inch']"}
{"id": 112, "desc": "Input: a list of strings with values in centimeters.\nOutput: a list of strings representing the equivalent values in feet.\nFunctionality: Convert the input values from centimeters to feet and format the output to have up to 5 significant digits.\nExample: Input: ['4 cm', '17 cm', '201 cm', '3 cm', '2 cm']; Output: ['0.13123 feet', '0.55774 feet', '6.59186 feet', '0.09843 feet', '0.06562 feet']"}
{"id": 113, "desc": "Input: a list of strings representing Fahrenheit temperatures.\nOutput: a list of strings representing Celsius temperatures.\nFunctionality: convert the given Fahrenheit temperatures to Celsius using the formula (Fahrenheit - 32) * 5/9 with decimal precision and 'celsius' suffix.\nExample: Input: ['19 fahrenheit', '100 fahrenheit', '350 fahrenheit', '1 fahrenheit', '123 fahrenheit']; Output: ['-7.22 celsius', '37.78 celsius', '176.67 celsius', '-17.22 celsius', '50.56 celsius']"}
{"id": 114, "desc": "Input: a list of strings representing weights with units (grams).\nOutput: a list of strings representing weights in cups.\n\nFunctionality: extract numeric values from the input weights, convert the weights from grams to cups using a conversion factor, and format the output in cups with five decimal places.\n\nExample: Input: ['2 grams', '15 grams', '50 grams', '25 grams', '10 grams']; Output: ['0.00845 cups', '0.06340 cups', '0.21134 cups', '0.10567 cups', '0.04227 cups']"}
{"id": 115, "desc": "Input: a list of strings representing measurements in feet.\nOutput: a list of strings representing measurements in inches.\n\nFunctionality: The function takes a list of strings representing measurements in feet, converts the measurements to inches by multiplying the feet value by 12, and then returns a new list of strings representing the measurements in inches.\n\nExample: \nInput: ['2 feet', '30 feet', '53 feet', '44 feet', '23 feet']\nOutput: ['24 inches', '360 inches', '636 inches', '528 inches', '276 inches']"}
{"id": 116, "desc": "Input: a list of strings representing lengths in millimeters.\nOutput: a list of strings representing lengths in centimeters.\n\nFunctionality: The function takes a list of strings where each string represents a length in millimeters. It converts these lengths to centimeters by dividing by 10 and appends \"cm\" to the result.\nExample: Input: ['9 mm', '145 mm', '23 mm', '3 mm', '199 mm']; Output: ['0.9 cm', '14.5 cm', '2.3 cm', '0.3 cm', '19.9 cm']"}
{"id": 117, "desc": "Input: a list of strings representing area descriptions in square feet.\nOutput: a list of strings representing the same areas converted to acres with 8 decimal places.\n\nFunctionality: The code takes a list of area descriptions in square feet, extracts the numeric value from each description, converts it to acres, formats it with 8 decimal places, and returns a list of strings representing the areas in acres.\n\nExample: Input: ['45 square feet', '120 square feet', '2300 square feet', '1300 square feet', '890 square feet']; Output: ['0.00103199 acres', '0.00275482 acres', '0.05299145 acres', '0.02982202 acres', '0.02045883 acres']"}
{"id": 118, "desc": "Input: a list of strings representing Celsius temperatures.\nOutput: a list of strings representing Fahrenheit temperatures with one decimal point.\n\nFunctionality: The function takes a list of Celsius temperatures as input and converts each temperature to Fahrenheit using the conversion formula. It then removes any trailing zeros in the resulting temperature and appends \"Fahrenheit\" at the end. Finally, it returns a list of strings representing the converted Fahrenheit temperatures.\n\nExample: \nInput: ['1 Celsius', '7 Celsius', '18 Celsius', '-17.2222 Celsius', '50.5556 Celsius']\nOutput: ['33.8 Fahrenheit', '44.6 Fahrenheit', '64.4 Fahrenheit', '1.0 Fahrenheit', '122.0 Fahrenheit']"}
{"id": 119, "desc": "Input: a list of strings representing length measurements in inches.\nOutput: a list of strings representing the same length measurements converted to centimeters with precision up to 2 decimal places.\nFunctionality: The function takes each length measurement in inches, converts it to centimeters using the conversion factor of 2.54, and returns the converted lengths in a new list with the format \"X.XX cm\".\nExample: Input: ['1 inch', '23 inch', '921 inch', '13 inch', '22 inch']; Output: ['2.54 cm', '58.42 cm', '2337.34 cm', '33.02 cm', '55.88 cm']"}
{"id": 120, "desc": "Input: a list of strings representing file sizes in kilobytes.\nOutput: a list of strings representing file sizes in megabytes.\n\nFunctionality: Convert the input file sizes from kilobytes to megabytes and append 'mb' to the result.\n\nExample: \nInput: ['3 kb', '59 kb', '140 kb', '2 kb', '123 kb']\nOutput: ['0.003 mb', '0.059 mb', '0.14 mb', '0.002 mb', '0.123 mb']"}
{"id": 121, "desc": "Input: a list of strings representing ounces.\nOutput: a list of strings representing grams with 'g' appended.\nFunctionality: extract the numerical part from the input string, convert to float, multiply by 28.34952 to convert ounces to grams, format the result with four decimal places and 'g' suffix.\nExample: \nInput: ['3 oz', '19 oz', '320 oz', '11 oz', '23 oz']\nOutput: ['85.048 g', '538.64088 g', '9071.8496 g', '311.83472 g', '652.03696 g']"}
{"id": 122, "desc": "Input: a list of strings representing lengths in inches.\nOutput: a list of strings representing lengths in millimeters.\nFunctionality: Convert the input list of lengths from inches to millimeters, removing trailing zeros after the decimal point while keeping one decimal place.\nExample: Input: ['4 inch', '50 inch', '429 inch', '5 inch', '40 inch']; Output: ['101.6 mm', '1270.0 mm', '10891.6 mm', '127.0 mm', '1016.0 mm']"}
{"id": 123, "desc": "Input: a list of strings representing volumes in gallons.\nOutput: a list of strings representing volumes in cups.\n\nFunctionality: Extract the number of gallons from the input values, convert them to cups using a conversion factor of 16, and create strings representing the volumes in cups.\nExample: Input: ['1 gallons', '3 gallons', '11 gallons', '15 gallons']; Output: ['16 cups', '48 cups', '176 cups', '240 cups']"}
{"id": 125, "desc": "Input: a list of strings representing measurements in inches.\nOutput: a list of strings representing measurements in centimeters with 'cm' unit.\nFunctionality: Extract the numeric values from the input, convert inches to centimeters, format the result with 'cm' unit.\nExample: \nInput: ['9 inch', '15 inch', '911 inch', '33 inch', '16 inch']\nOutput: ['22.86 cm', '38.10 cm', '2311.94 cm', '83.82 cm', '40.64 cm']"}
{"id": 126, "desc": "Input: a list of strings representing file sizes in megabytes.\nOutput: a list of strings representing file sizes in gigabytes.\n\nFunctionality: The function takes a list of file sizes in megabytes, removes the 'mb' suffix, converts them to integers, then divides by 1000 to convert them to gigabytes, and finally formats the numbers with three decimal places followed by the 'gb' suffix.\n\nExample: Input: ['1 mb', '790 mb', '49 mb', '744 mb', '42 mb']; Output: ['0.001 gb', '0.790 gb', '0.049 gb', '0.744 gb', '0.042 gb']"}
{"id": 127, "desc": "Input: a list of strings representing temperatures in Celsius.\nOutput: a list of strings representing temperatures in Kelvin.\n\nFunctionality: The function takes a list of temperature values in Celsius, converts them to Kelvin by adding 273.15, and then formats the values with two decimal places and the unit \"Kelvin\".\n\nExample: \nInput: ['1 Celsuis', '12 Celsuis', '12.3 Celsuis', '188 Celsuis', '24 Celsuis']\nOutput: ['274.15 Kelvin', '285.15 Kelvin', '285.45 Kelvin', '461.15 Kelvin', '297.15 Kelvin']"}
{"id": 128, "desc": "Input: a list of strings representing weights in ounces.\nOutput: a list of strings representing weights in pounds.\nFunctionality: The function takes a list of strings representing weights in ounces and converts them to weights in pounds. It utilizes a conversion factor of 16 ounces per pound and formats the output with the correct number of decimal places.\nExample: Input: ['3 oz', '862 oz', '51 oz', '1 oz', '5 oz']; Output: ['0.1875 lb', '53.8750 lb', '3.1875 lb', '0.0625 lb', '0.3125 lb']"}
{"id": 129, "desc": "Input: a list of strings representing weights in kilograms.\nOutput: a list of strings representing weights in pounds.\nFunctionality: strip 'kg' from each element, convert to float, then convert weights from kilograms to pounds, and format the output by rounding to 5 decimal places and removing trailing zeros.\nExample: Input: ['3 kg', '7 kg', '11 kg', '23 kg', '1 kg']; Output: ['6.61387 lb', '15.43236 lb', '24.25084 lb', '50.70600 lb', '2.20462 lb']"}
{"id": 130, "desc": "Input: a list of strings representing lengths in meters.\nOutput: a list of strings representing lengths in miles with a precision of up to 5 decimal places.\n\nFunctionality: The function takes a list of strings representing lengths in meters, converts them to miles, and then formats the output to have up to 5 decimal places with trailing zeros removed. The output is returned as a list of strings with the appended unit \"mile\".\n\nExample: Input: ['5 meter', '180 meter', '92 meter', '23 meter', '11 meter']; Output: ['0.00311 mile', '0.11185 mile', '0.05716 mile', '0.01429 mile', '0.00684 mile']"}
{"id": 131, "desc": "Input: a list of strings representing weights in pounds.\nOutput: a list of strings representing weights in grams with precision.\nFunctionality: Convert the input weights from pounds to grams with cutting off trailing zeros after the decimal point based on precision.\nExample: Input: ['1 lb', '502 lb', '76 lb', '234 lb', '122 lb']; Output: ['453.59237 g', '227707.40074 g', '34411.16612 g', '106140.90578 g', '55338.18414 g']"}
{"id": 132, "desc": "Input: a list of strings representing amounts in ounces.\nOutput: a list of strings representing amounts in cups.\n\nFunctionality: The code converts the input values, which are amounts in ounces, to the corresponding amounts in cups based on the predefined conversion rate. It then rounds the result to three decimal places and appends \"cup\" to the value.\n\nExample: Input: ['2 oz', '1988 oz', '37 oz', '33 oz', '123 oz']; Output: ['0.25 cup', '248.5 cup', '4.625 cup', '4.125 cup', '15.375 cup']"}
{"id": 133, "desc": "Input: a list of strings representing lengths in meters.\nOutput: a list of strings representing lengths in inches.\n\nFunctionality: The function takes a list of strings representing lengths in meters, removes the 'm' part, converts it to float, then converts the lengths from meters to inches using a conversion factor. It further formats the output to round off the decimal places and includes 'inch' in the result.\n\nExample: \nInput: ['1 m', '1856 m', '200 m', '188 m', '33 m']\nOutput: ['39.37 inch', '73072.05 inch', '7874.02 inch', '74.02 inch', '12.99 inch']"}
{"id": 135, "desc": "Input: a list of strings representing areas in square meters.\nOutput: a list of strings representing areas in square feet.\nFunctionality: Convert the given areas in square meters to square feet and format them with the desired precision.\nExample: Input: ['4 square meters', '560 square meters', '2000 square meters', '42 square meters', '323 square meters']; Output: ['43.06 square feet', '6027.44 square feet', '21527.82 square feet', '452.08 square feet', '3481.66 square feet']"}
{"id": 136, "desc": "Input: a list of strings representing areas in square feet.\nOutput: a list of strings representing areas in square yards.\n\nFunctionality: The function takes a list of strings representing areas in square feet, extracts the numerical values, divides each value by 9 to convert it to square yards, formats the result to remove trailing zeros, and appends \"square yards\" to each value.\n\nExample: \nInput: ['9 square feet', '390 square feet', '2456 square feet', '123 square feet', '872 square feet']\nOutput: ['1 square yards', '43.3 square yards', '273.11111111 square yards', '13.66666667 square yards', '96.88888889 square yards']"}
{"id": 137, "desc": "Input: a list of numerical values representing lengths in inches.\nOutput: a list of strings representing lengths in meters with a precision of 4 decimal places.\n\nFunctionality: The function converts each input value from inches to meters by multiplying it with the conversion factor of 0.0254. The result is rounded to 4 decimal places and formatted as a string with \"m\" suffix.\n\nExample: \nInput: [4, 980, 2000, 321, 111]; \nOutput: [\"0.1016 m\", \"24.8896 m\", \"50.8 m\", \"8.1534 m\", \"2.8194 m\"]"}
{"id": 138, "desc": "Input: a list of strings representing areas in acres.\nOutput: a list of strings representing areas in square feet.\n\nFunctionality: This code takes a list of strings representing areas in acres as input, extracts the numerical values from the strings, converts them to square feet by applying a conversion factor of 43560, and returns a list of strings representing areas in square feet with the format \"{int} square feet\".\n\nExample: \nInput: ['2 acres', '0.5 acres', '15 acres', '1 acres', '4 acres']\nOutput: ['87120 square feet', '21780 square feet', '653400 square feet', '43560 square feet', '174240 square feet']"}
{"id": 139, "desc": "Input: a list of strings representing volume in liters (e.g., '1 L', '5870 L').\nOutput: a list of strings representing volume in ounces (e.g., '33.814 oz', '198605.819 oz').\nFunctionality: Convert the input volume from liters to ounces and format the output to include the unit 'oz'.\nExample: Input: ['1 L', '5870 L', '35 L', '112 L', '99 L']; Output: ['33.814 oz', '198605.819 oz', '1183.365 oz', '3784.512 oz', '3320.686 oz']"}
{"id": 140, "desc": "Input: a list of strings with centimeter values.\nOutput: a list of strings representing the values in inches with formatting.\nFunctionality: Extract numeric values from the input strings representing centimeters, convert them to inches, and format them as strings with 8 decimal precision and 'inch' unit.\nExample: Input: ['1 cm', '5 cm', '6 cm', '2 cm', '3 cm']; Output: ['0.39370079 inch', '1.96850394 inch', '2.36220472 inch', '0.78740157 inch', '1.18110236 inch']"}
{"id": 141, "desc": "Input: a list of strings representing values in \"mg\" format.\nOutput: a list of strings representing values in \"ml\" format.\nFunctionality: Convert the input values from \"mg\" to \"ml\" format by multiplying the numerical part by 2 and adding \"ml\".\nExample: Input: ['1 mg', '43 mg', '211 mg', '100 mg', '304 mg']; Output: ['2 ml', '86 ml', '422 ml', '200 ml', '608 ml']"}
{"id": 142, "desc": "Input: a list of strings representing distances in feet.\nOutput: a list of strings representing distances in meters.\nFunctionality: Convert each distance value from feet to meters and return a list of strings with the converted values.\nExample: Input: ['3 feet', '7 feet', '18 feet', '4 feet', '22 feet']; Output: ['0.9144 m', '2.1336 m', '5.4864 m', '1.2192 m', '6.706 m']"}
{"id": 144, "desc": "Input: a list of strings representing measurements in inches.\nOutput: a list of strings representing the converted measurements in millimeters.\n\nFunctionality: The function takes a list of strings that include measurements in inches, extracts the numerical part, converts them to millimeters, formats the values, and appends 'mm' to the end. The final list is returned.\n\nExample: Input: ['3 inch', '17 inch', '100 inch', '13 inch', '33 inch']; Output: ['76.20 mm', '431.80 mm', '2540.00 mm', '330.20 mm', '838.20 mm']"}
{"id": 145, "desc": "Input: a list of strings representing distance in miles.\nOutput: a list of strings representing distances converted to kilometers.\nFunctionality: Extract numerical values from the input strings, convert them to kilometers using a conversion factor, format the output to round to 4 decimal places with 'km' added.\nExample: Input: ['15 mile', '19 mile', '240 mile', '33 mile', '11 mile']; Output: ['24.1401 km', '30.5775 km', '386.2426 km', '53.1086 km', '17.7031 km']"}
{"id": 146, "desc": "Input: a list of strings representing dates in the format \"yyyy/MM/dd HH:mm:ss\".\nOutput: a list of strings representing adjusted dates with one hour subtracted, in the format \"yyyy/MM/dd HH:mm:ss\".\n\nFunctionality: The function takes a list of date strings, converts them to pandas datetime objects, subtracts one hour from each datetime object, converts them back to strings in the specified format, and returns the adjusted date strings.\n\nExample: \nInput: ['2007/02/26 18:37:58', '2008/02/26 17:37:58', '2000/02/26 00:37:50', '2009/02/26 16:37:58', '2000/02/26 11:37:50']\nOutput: ['2007/02/26 17:37:58', '2008/02/26 16:37:58', '2000/02/25 23:37:50', '2009/02/26 15:37:58', '2000/02/26 10:37:50']"}
{"id": 147, "desc": "Input: a list of strings representing storage sizes.\nOutput: a list of strings representing storage sizes in bytes.\nFunctionality: convert the input storage sizes expressed in different units (B, KB, MB, GB) to bytes.\nExample: Input: ['10B', '100 KB', '1000MB', '1b', '100 B', '1GB']; Output: ['10.0 Bytes', '102400.0 Bytes', '1048576000.0 Bytes', '0.125 Bytes', '100.0 Bytes', '1073741824.0 Bytes']"}
{"id": 148, "desc": "Input: a list of strings representing byte sizes.\nOutput: a list of formatted byte sizes in Bytes.\nFunctionality: Convert the input byte sizes expressed in different units into Bytes.\nExample: Input: ['10B', '100 KB', '1000MB', '1b', '100 B', '1GB']; Output: ['10 Bytes', '102,400 Bytes', '1,048,576,000 Bytes', '1 Bytes', '100 Bytes', '1,073,741,824 Bytes']"}
{"id": 149, "desc": "Input: a list of strings representing data sizes.\nOutput: a list of strings representing data sizes in scientific notation with bytes as unit.\n\nFunctionality: The function takes a list of strings representing data sizes such as '10B', '100 KB', '1000MB', etc., and converts them into their corresponding sizes in bytes. It then converts the sizes to scientific notation with bytes as the unit.\n\nExample: \nInput: ['10B', '100 KB', '1000MB', '1b', '100 B', '1GB']\nOutput: ['1.25E+00 Bytes', '1.02E+05 Bytes', '1.05E+09 Bytes', '1.25E-01 Bytes', '1.00E+00 Bytes', '1.07E+09 Bytes']"}
{"id": 150, "desc": "Input: a list of strings representing addresses.\nOutput: a list of strings representing the city extracted from the addresses in a formatted manner.\n\nFunctionality: The code takes a list of addresses, extracts the city from each address, and then formats the city name by capitalizing the first letter of each word. It then returns a list of these formatted city names.\n\nExample: \nInput: ['1 microsoft way, redmond, wa, 98052', '1201 super commerce blvd Ste H, Richmond, VA, 23452', '100 sunset blvd, room 301, Beverley Hills California', '32 super blvd Ste H, Riverside California', '100 turing way, Redmond, wa, 98052']\nOutput: ['Redmond', 'Richmond', 'Beverley Hills', 'Riverside', 'Redmond']"}
{"id": 151, "desc": "Input: a list of strings representing addresses.\nOutput: a list of strings representing suite or room numbers extracted from the addresses.\n\nFunctionality: Extract the suite or room numbers from the given list of addresses and format them in uppercase letters. If no room or suite number is found, replace with an empty string.\n\nExample: \nInput: ['1 microsoft way, redmond, wa, 98052', '1201 super commerce blvd Ste H, Richmond, VA, 23452', '100 sunset blvd, Room 301, Sacramento California', '747 6th St, room 1010, Kirkland, WA 98033', '10 commerce way ste a, Richmond, VA, 23452']\nOutput: ['STE H', ' ', 'ROOM 301', 'ROOM 1010', 'STE A']"}
{"id": 152, "desc": "Input: a list of strings representing addresses.\nOutput: a list of strings representing state abbreviations.\n\nFunctionality: The code takes a list of strings representing addresses, extracts the state information (abbreviations) from each address, and returns a list of the extracted state abbreviations.\n\nExample: \nInput: ['1 microsoft way, redmond, wa, 98052', '1201 super commerce blvd Ste H, Richmond, VA, 23452', '100 sunset blvd, room 301, Sacramento California', '747 6th St S, Kirkland, WA 98033', '10 commerce way, Richmond, VA, 23452']\nOutput: ['WA', 'VA', 'CA', 'WA', 'VA']"}
{"id": 153, "desc": "Input: a list of strings representing addresses.\nOutput: a list of strings representing street names.\n\nFunctionality: The function takes a list of addresses, extracts the street names by removing the numerical part and any extra descriptors like Suite, Room, etc., and returns a list of the extracted street names.\n\nExample:\nInput: [\n    '1 microsoft way, redmond, wa, 98052',\n    '5 super commerce place blvd Ste H, Richmond, VA, 23452',\n    '1001 sunset blvd, Room 301, Sacramento California',\n    '747 6th St room 111, Kirkland, WA 98033',\n    '10 commerce way, Richmond, VA, 23452'\n]\nOutput: ['microsoft way', 'super commerce place blvd', 'sunset blvd', '6th St', 'commerce way']"}
{"id": 154, "desc": "Input: a list of string addresses.\nOutput: a list of cleaned street names extracted from the addresses.\n\nFunctionality: The function `transform_addresses` extracts the street name from the input addresses by cleaning them. It removes extra descriptors such as Suite, Room, etc., by splitting the address strings based on specific patterns.\n\nExample:\nInput: \n['1 microsoft way, redmond, wa, 98052',\n'5 super commerce place blvd Ste H, Richmond, VA, 23452',\n'1001 sunset blvd, Room 301, Sacramento California',\n'1730 Minor Ave, Seattle, WA 98101',\n'100 main street, redmond, wa, 98052']\n\nOutput:\n['1 microsoft way', '5 super commerce place blvd', '1001 sunset blvd', '1730 Minor Ave', '100 main street']"}
{"id": 155, "desc": "Input: a list of strings representing dates.\nOutput: a list of strings with formatted dates.\nFunctionality: transform the input list of dates strings into a new list with a format of '%B %-d', where %B is the full month name and %d is the zero-padded day of the month.\nExample: Input: ['2011-09-21', '2011-Jan-12', '7/1/2009', '2012-02-12', '6/1/2009 12:01:01']; Output: ['September 21', 'January 12', 'July 1', 'February 12', 'June 1']"}
{"id": 156, "desc": "Input: a list of strings representing dates.\nOutput: a list of strings with a modified date format.\nFunctionality: Convert the input list of dates from one format to another format with a specific time offset of 12 hours and 30 minutes.\nExample: Input: ['August 20, 2015, 16:11', 'April 11, 2015, 15:14']; Output: ['August 20, 2015, 04:41', 'April 11, 2015, 03:44']"}
{"id": 157, "desc": "Input: a list of strings representing names.\nOutput: a list of strings representing names in \"initial + last name\" format.\nFunctionality: Takes a list of names and converts them to the format where the first name is represented by its initial followed by the last name.\nExample: Input: ['Doe, John', 'James Smith', 'Mr. Charles P. Wooten, III', 'John Johnson', 'Alice C. Doe']; Output: ['J. Doe', 'J. Smith', 'C. Wooten', 'J. Johnson', 'A. Doe']"}
{"id": 158, "desc": "Input: a list of strings representing full names.\nOutput: a list of strings representing the initials extracted from the full names.\n\nFunctionality: The function extracts the initials from the input full names by considering various formats and edge cases, such as handling prefixes like \"Mr.\" and special characters like \",\" and \"III\".\n\nExample: \nInput: ['Doe, John', 'James Smith', 'Mr. Charles P. Wooten, III', 'John Johnson', 'Alice Bob Doe']\nOutput: ['JD', 'JS', 'CW', 'JJ', 'AD']"}
{"id": 159, "desc": "Input: a list of strings representing names.\nOutput: a list of strings representing last names.\n\nFunctionality: Extract the last name from each full name in the input list. The extraction process involves removing titles, suffixes, and other irrelevant parts from the names. If the full name is in \"last_name, first_name\" format, extract the last name directly; otherwise, extract the last name as the last word in the name. The final list contains only the last names.\n\nExample: Input: ['Doe, John', 'James Smith', 'Mr. Charles P. Wooten, III', 'John Johnson']; Output: ['Doe', 'Smith', 'Wooten', 'Johnson']"}
{"id": 160, "desc": "Input: a list of strings.\nOutput: a list of single characters representing middle initials derived from the input names.\nFunctionality: extracts the middle initial from the input names by removing prefixes, suffixes, and splitting the names into parts.\nExample: Input: ['Mr. Charles P. Wooten, III', 'John Adam Johnson', 'Doe, John', 'James Bob Smith', 'Charlie Denis Edwards']; Output: ['P', 'A', '', 'B', 'D']"}
{"id": 161, "desc": "Input: a list of strings containing cookie information.\nOutput: a list of strings representing domains extracted from the cookie information.\n\nFunctionality: Extracts the domain name from each cookie string in the input list.\nExample: \nInput: ['username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/', 'skin=noskin; path=/; domain=.amazon.com; expires=Mon, 22-Mar-2010 18:40:34 GMT', 'path=/; expires=Wed, 13 Jan 2021 22:23:01 GMT; domain=.foo.com', 'path=/; domain=.microsoft.com; expires=Mon, 1-Mar-2010 18:40:34 GMT', 'path=/; expires=Wed, 13 Jan 2021 22:23:01 GMT; domain=.abc.com;']\nOutput: ['.amazon.com', '.foo.com', '.microsoft.com', '.abc.com']"}
{"id": 162, "desc": "Input: a list of strings representing dates in the format 'mm/dd/yyyy'.\nOutput: a list of strings representing the weekday names corresponding to the dates.\n\nFunctionality: Converts the input dates into weekday names using the pandas library.\n\nExample: \nInput: ['05/13/2015', '05/12/2015', '01/21/2014', '03/01/2013', '01/01/2014'] \nOutput: ['Wednesday', 'Tuesday', 'Tuesday', 'Friday', 'Wednesday']"}
{"id": 163, "desc": "Input: a list of strings representing dates in various formats.\nOutput: a list of strings representing the month names extracted from the input dates.\nFunctionality: extract the month names from the input list of dates in various formats using pandas Series.\nExample: Input: ['2011-10-11', '2011-Jan-12', '7/1/2009', '2012-02-12', '6/1/2009 12:01:01']; Output: ['October', 'January', 'July', 'February', 'June']"}
{"id": 164, "desc": "Input: a list of strings representing dates in various formats.\nOutput: a list of strings representing the month extracted from the input dates.\n\nFunctionality: The function takes a list of dates in different formats, converts them to datetime format, extracts the month from each date, converts the month integers to string values, and finally returns a list of strings representing the month extracted from each input date.\n\nExample: \nInput: ['2014-08-03', '2011-04-01', '01/31/2014', '2/21/2009 10:35 PM', 'February 26, 2009', 'March 26, 2009']\nOutput: ['8', '4', '1', '2', '2', '3']"}
{"id": 165, "desc": "Input: a list of strings representing URLs.\nOutput: a list of strings representing primary domains.\n\nFunctionality: The function takes a list of URLs as input and extracts the primary domain for each URL. The primary domain is considered as the second last section of the URL split by '.' unless 'co' is present in the second last part, then it takes the third last part.\n\nExample: \nInput: ['www.news.cnn.com', 'cnn.co.uk', 'drive.google.ca', 'photos.twitter.com', 'www.photos.abc.com']\nOutput: ['cnn', 'co', 'google', 'twitter', 'abc']"}
{"id": 166, "desc": "Input: a list of strings representing domain names.\nOutput: a list of strings representing top-level domains (TLDs) extracted from the input domain names.\n\nFunctionality: The code takes a list of domain names, converts them to URLs by adding \"http://\" to each element, extracts the top-level domain (TLD) using the get_tld function, and returns a list of TLDs.\n\nExample: \nInput: ['photos.facebook.co.uk', 'photos.twitter.com', 'cnn.com.au', 'news.abc.com.ca', 'cnbc.com']\nOutput: ['co.uk', 'com', 'com.au', 'com.ca', 'com']"}
{"id": 167, "desc": "Input: a list of email addresses as strings.\nOutput: a list of strings representing the validity of each email address.\n\nFunctionality: The code defines a function `transform_email_addresses` that takes a list of email addresses as input and checks the validity of each email address based on a simple criteria (having one '@', '.' present in the domain part, and '@' not present in the local part or domain's last part). It returns a list of strings indicating whether each email address is valid ('true') or not ('false').\n\nExample: Input: ['Abcdef@example.com', 'very.common@example.com', 'A@b@c@example.com', 'good@example.com', 'A@b.com@example.com']; Output: ['true', 'true', 'false', 'true', 'false']"}
{"id": 168, "desc": "Input: a list of strings containing simple arithmetic expressions.\nOutput: a list of strings representing the result of the arithmetic expressions evaluated.\n\nFunctionality: The code takes a list of strings with simple arithmetic expressions, evaluates them using eval() in Python, converts the numeric results to integers, and then returns a list of strings representing the evaluated results.\n\nExample:\nInput: ['1 + 23', '6/2', '(1+3)/2', '3 + 4', '2 / 2 + 1']\nOutput: ['24', '3', '2', '7', '2']"}
{"id": 169, "desc": "Input: a list of strings representing CIDR (Classless Inter-Domain Routing) notation.\nOutput: a list of strings representing the Inter-Domain Routing information extracted from the CIDR notation.\n\nFunctionality: Extract the Inter-Domain Routing information from the given CIDR strings by splitting the string based on specific delimiters and returning the last component of the split.\nExample: Input: ['192.168.70.30-192.168.70.31', 'fe80::/10', 'fe80::d501:4ee:3882:c586-fe80::d502:4ee:3882:c586', '192.168.100.0/22', '192.168.100.14/24']; Output: ['31', 'fe80::/10', 'fe80::d502:4ee:3882:c586', '22', '24']"}
{"id": 170, "desc": "Input: a list of strings representing IP ranges or CIDR notation.\nOutput: a list of strings representing the last IP address in each range or CIDR block.\n\nFunctionality: The function `extract_last_address_from_ip_range_or_cidr` takes a list of strings representing IP ranges or CIDR notations as input. It then extracts the last IP address from each range or CIDR block. If the input is an IP range (specified by the presence of a hyphen \"-\"), it extracts the end IP address. If the input is a CIDR block, it finds the last IP address within the block.\n\nExample: \nInput: ['192.168.70.30-192.168.70.31', 'fe80::/10', 'fe80::d501:4ee:3882:c586-fe80::d502:4ee:3882:c586', '2001:db8::/48']\nOutput: ['192.168.70.31', 'fe80::ffff:ffff:ffff:ffff:ffff:ffff', 'fe80::d502:4ee:3882:c586', '2001:db8::ffff:ffff:ffff:ffff:ffff:ffff']"}
{"id": 171, "desc": "Input: a list of IPv4 addresses in string format.\nOutput: a list of IPv6 addresses in string format.\n\nFunctionality: The function takes a list of IPv4 addresses and transforms them into IPv6 addresses using the '::ffff:' prefix. Leading zeros in the IPv6 address are removed before returning the final list of IPv6 addresses.\n\nExample: \nInput: ['102.3.1.2', '102.31.1.244', '20.55.255.255', '39.91.29.11', '39.255.255.255']\nOutput: ['::ffff:662:102', '::ffff:66:1f4', '::ffff:14:ffff', '::ffff:27b:1b', '::ffff:27:ffff']"}
{"id": 172, "desc": "Input: a list of strings representing ISBN-10 codes.\nOutput: a list of strings representing ISBN-13 codes.\nFunctionality: convert each ISBN-10 code to its equivalent ISBN-13 code by following the algorithmic rules.\nExample: Input: ['0830818030', '316148410X', '1566199093', '0198526636', '1861972717']; Output: ['978-0-83081803-0', '978-3-16148410-3', '978-1-56619909-6', '978-0-19852663-5', '978-1-86197271-5']"}
{"id": 173, "desc": "Input: a list of strings representing GPS data.\nOutput: a list of course values extracted from the GPS data.\nFunctionality: extract the eighth column of each GPS data string which contains the course values.\nExample: \nInput: ['$GPRMC,084752.000,A,5152.4175,N,00832.5083,W,11.90,62.01,231110,,*12', '$GPRMC,155123.000,A,4043.8432,N,07359.7653,W,0.15,83.25,200407,,*28', '$GPRMC,235947.000,V,0000.0000,N,00000.0000,E,,,041299,,*1D', '$GPRMC,092204.999,A,4250.5589,S,14718.5084,E,0.00,89.68,211200,,*25', '$GPRMC,155123.000,A,4043.8432,N,07359.7653,W,0.15,83.25,200407,,*28']\nOutput: ['62.01', '83.25', '0', '89.68', '83.25']"}
{"id": 174, "desc": "Input: a list of strings representing NMEA data with speed information.\nOutput: a list of strings representing speed information converted to kilometers per hour.\nFunctionality: Extract the speed in knots from the NMEA data, convert it to kilometers per hour, and format the result as a string with the unit 'km/h'.\nExample: Input: ['$GPRMC,084752.000,A,5152.4175,N,00832.5083,W,11.90,62.01,231110,,*12', '$GPRMC,235947.000,V,0000.0000,N,00000.0000,E,,,041299,,*1D', '$GPRMC,155123.000,A,4043.8432,N,07359.7653,W,0.15,83.25,200407,,*28', '$GPRMC,092204.999,A,4250.5589,S,14718.5084,E,0.00,89.68,211200,,*25', '$GPRMC,084752.000,A,5152.4175,N,00832.5083,W,11.90,62.01,231110,,*12']; Output: ['22.0280 km/h', '0 km/h', '0.2778 km/h', '0 km/h', '22.0280 km/h']"}
{"id": 175, "desc": "Input: a list of strings representing lengths in feet.\nOutput: a list of strings representing lengths in meters.\nFunctionality: Converts the input values from feet to meters by multiplying by 0.3048, rounding to 1 decimal place, and appending 'm' to the result.\nExample: \nInput: ['1 ft', '3 ft', '10.5 ft', '11 ft', '12 ft']\nOutput: ['0.3 m', '0.9 m', '3.2 m', '3.4 m', '3.7 m']"}
{"id": 176, "desc": "Input: a list of strings (user agent information).\nOutput: a list of strings representing the operating system extracted from the user agent information.\n\nFunctionality: The function extracts the operating system information from each user agent string in the input list using regular expressions and returns a list of extracted operating systems.\n\nExample: \nInput: ['Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)', 'Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0) Gecko/20100101 Firefox/33.0']\nOutput: ['Windows NT 6.1', 'Windows', 'X11', 'Windows NT 6.1', 'Macintosh']"}
{"id": 177, "desc": "Input: a list of strings representing ISBN-10 numbers.\nOutput: a list of strings representing ISBN-13 numbers.\n\nFunctionality: The code takes a list of ISBN-10 numbers and converts them to ISBN-13 format using a specific formula. It then formats the resulting ISBN-13 numbers and returns a list of ISBN-13 numbers.\n\nExample: \nInput: ['0830818030', '316148410X', '1566199093', '0198526636', '1861972717']\nOutput: ['978-0-83081830-9', '978-3-16148410-3', '978-1-56619909-5', '978-0-19852663-0', '978-1-86197271-1']"}
{"id": 178, "desc": "Input: a list of strings representing names.\nOutput: a list of strings representing formatted names in the format \"X. LastName\".\n\nFunctionality: The function takes a list of names, removes unnecessary words or characters, extracts the first letter of the first name and combines it with the last name to create a formatted name with the initial followed by the last name. This formatted name is then added to a new list.\n\nExample: \nInput: [\"'Doe, John'\", \"'James Smith'\", \"'Mr. Charles P. Wooten, III'\", \"'John Johnson'\", \"'Alice C. Doe'\"]\nOutput: [\"J. Doe\", \"J. Smith\", \"C. Wooten\", \"J. Johnson\", \"A. Doe\"]"}
{"id": 179, "desc": "Input: a list of string numerical values.\nOutput: a list of string numerical values with trimmed trailing zeros.\nFunctionality: Convert the input list of string numerical values into a new list of formatted strings by trimming the trailing zeros.\nExample: Input: ['2.431', '0.15857', '123', '13.4', '1.234']; Output: ['2.431', '0.15857', '123', '13.4', '1.234']"}
{"id": 181, "desc": "Input: a list of strings representing Celsius temperature values.\nOutput: a list of strings representing Fahrenheit temperature values.\n\nFunctionality: This code defines a function that takes a list of Celsius temperature values as input, converts them to Fahrenheit using a predefined dictionary, and returns a list of strings representing the Fahrenheit values. The conversion is done based on the key-value pairs in the dictionary.\n\nExample: \nInput: ['10\u0392\u038aC', '33\u0392\u038aC', '46\u0392\u038aC', '3\u0392\u038aC', '6\u0392\u038aC']\nOutput: ['50\u0392\u038aF', '91.4\u0392\u038aF', '114.8\u0392\u038aF', '37.4\u0392\u038aF', '42.8\u0392\u038aF']"}
{"id": 182, "desc": "Input: a list of strings representing numerical values.\nOutput: a list of strings representing numerical values multiplied by 3.\nFunctionality: Convert each string element of the input list to an integer, multiply by 3, and convert it back to string, returning a list of these modified strings.\nExample: Input: ['1', '3', '5', '8', '9']; Output: ['3', '9', '15', '24', '27']"}
{"id": 183, "desc": "Input: a list of strings representing numerical values.\nOutput: a list of strings where each element is padded with zeros to be five characters long.\n\nFunctionality: This code snippet defines a function that takes a list of strings representing numerical values and pads each element with zeros at the beginning, making them five characters long. It returns the modified list. \n\nExample: Input: ['2', '144', '12345', '789', '99']; Output: ['00002', '00144', '12345', '00789', '00099']"}
{"id": 184, "desc": "Input: a list of strings representing numerical values in different formats.\nOutput: a list of strings representing numerical values quantized to one decimal place.\nFunctionality: Converts the input numerical values to Decimal, quantizes them to one decimal place using the ROUND_HALF_UP method, and then converts them back to strings.\nExample: Input: ['2.431', '1.5857E+0', '1234567890', '13.33e-11', '23.45']; Output: ['2.4', '1.6', '1234567890.0', '0.0', '23.5']"}
{"id": 185, "desc": "Input: a list of strings representing numerical values.\nOutput: a list of strings representing values in scientific notation with 1 decimal place.\nFunctionality: The code converts the input numerical values into scientific notation with 1 decimal place and returns a list of these formatted strings.\nExample: Input: ['2.431', '1.55', '1293.3', '0.0013', '123']; Output: ['2.4E+00', '1.6E+00', '1.3E+03', '1.3E-03', '1.2E+02']"}
{"id": 186, "desc": "Input: a list of strings representing numerical values.\nOutput: a list of strings in scientific notation format.\nFunctionality: transform the input numerical values into strings with scientific notation format.\nExample: Input: ['2.431', '1.5857E+0', '1234567890', '13.33e-11', '12.34']; Output: ['2.43E+00', '1.59E+00', '1.23E+09', '1.33E-10', '1.23E+01']"}
{"id": 187, "desc": "Input: a list of strings in snake_case format.\nOutput: a list of strings converted to camelCase format.\nFunctionality: The function takes a list of strings in snake_case format and converts them into camelCase format.\nExample: Input: ['active_record', 'good_spirit', 'a_string_var', 'num_hit_count_curr', 'a_bc_de_fg_hi_jk']; Output: ['activeRecord', 'goodSpirit', 'aStringVar', 'numHitCountCurr', 'aBcDeFgHiJk']"}
{"id": 188, "desc": "Input: a list of strings.\nOutput: a list of strings with padding.\nFunctionality: Pad each string in the input list to have a minimum width of 5 characters by adding spaces on the left.\nExample: Input: ['xxx', 'yy', 'zzzzz', 'abcdefg', 'c']; Output: ['  xxx', '   yy', 'zzzzz', 'abcdefg', '    c']"}
{"id": 189, "desc": "Input: a list of strings.\nOutput: a list of strings with all letters converted to uppercase.\n\nFunctionality: This function takes a list of strings as input, converts all letters in each string to uppercase using the upper() method, and returns a list of strings with uppercase letters.\n\nExample: \nInput: ['xxx', 'this is well', 'In my backpack, There is a monkey', 'test', 'Test Is Good']\nOutput: ['XXX', 'THIS IS WELL', 'IN MY BACKPACK, THERE IS A MONKEY', 'TEST', 'TEST IS GOOD']"}
{"id": 190, "desc": "Input: a list of numerical values in string format representing floating point numbers.\nOutput: a list of strings formatted based on custom rules, including scientific notation and fixed decimal places.\nFunctionality: Convert the input numerical values to custom formatted strings based on their values.\nExample: Input: ['.2367', '.00367', '22.3', '3364.0', '11']; Output: ['2.37E-01', '3.67E-03', '22.30', '33.64', '11.00']"}
{"id": 191, "desc": "Input: a list of strings representing weights in kilograms.\nOutput: a list of strings representing weights in pounds.\n\nFunctionality: This function takes a list of strings representing weights in kilograms, converts each weight into pounds by multiplying it by the conversion factor of 2.20462, rounds the weights to one decimal place, and returns a list of strings representing weights in pounds.\n\nExample: Input: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']; Output: ['2.2', '4.4', '6.6', '8.8', '11.0', '13.2', '15.4', '17.6', '19.8', '22.0', '24.2', '26.5']"}
{"id": 192, "desc": "Input: a list of numerical values in string format.\nOutput: a list of formatted numerical values in string format with commas.\nFunctionality: transforms the input numerical values into a formatted string with commas added for thousands separator.\nExample: Input: ['1234567890', '2134', '1234.123\\t1,234.123', '123456789', '1234']; Output: ['1,234,567,890', '2,134', '1,234.1231,234.123', '123,456,789', '1,234']"}
{"id": 193, "desc": "Input: a list of strings representing numerical values.\nOutput: a list of strings representing formatted numerical values in K, M, or B.\nFunctionality: The function takes a list of numerical values as input, formats them into K (thousands), M (millions), or B (billions) based on their magnitude, and returns a list of formatted numerical values.\nExample: \nInput: ['10000', '212321', '9876549', '7321876984', '1111111111', '12123123123', '10001', '212341', '9876149', '7321176984', '2111111111', '22123123123']\nOutput: ['10K', '212K', '9M', '7B', '1B', '12B', '10K', '212K', '9M', '7B', '2B', '22B']"}
{"id": 194, "desc": "Input: a list of strings representing numerical values.\nOutput: a list of strings where the input values are formatted to have commas and are rounded off to two decimal places.\nFunctionality: Takes a list of strings representing numerical values, converts them to float, formats them to include commas and round off to two decimal places, and returns the transformed values in a new list.\nExample: \nInput: ['432324', '12334.13', '12334.133', '12334.137']\nOutput: ['432,324.00', '12,334.13', '12,334.13', '12,334.13']"}
{"id": 195, "desc": "Input: a list of strings representing numerical values.\nOutput: a list of strings with zero padding to have a minimum width of 2 characters.\n\nFunctionality: This code snippet takes a list of strings representing numerical values, then pads each string with zeros to ensure a minimum width of 2 characters. It uses pandas library to achieve this by converting the input list to a Pandas Series and then applying the zfill() method to pad each string. Finally, it returns the transformed list.\n\nExample: \nInput: ['2', '3', '12', '1', '5']\nOutput: ['02', '03', '12', '01', '05']"}
{"id": 196, "desc": "Input: a list of strings.\nOutput: a list of integers extracted from the strings.\n\nFunctionality: extracts integers from each string in the input list and returns them in a new list.\nExample: Input: ['1', '42 ', '3 -x..', '2 3 4 5', '3 1 4 1', '21 asg']; Output: [1, 42, 3, 2, 3, 1, 4, 1, 21]"}
{"id": 197, "desc": "Input: a list of strings representing dates.\nOutput: a list of strings representing months.\nFunctionality: Extract the month component from the input dates and return a list of month names.\nExample: Input: ['Thursday, 1st January, 1970', 'Wednesday, 2nd March, 1980']; Output: ['January', 'March']"}
{"id": 198, "desc": "Input: a list of strings.\nOutput: a list of strings where spaces are inserted before capitals in each word.\nFunctionality: Inserts a space before each capital letter in a given list of strings.\nExample: Input: ['SampleText', 'DoesNotMatterHowManyWords', 'WhatIf', 'SunInTheRain', 'TestIsGood']; Output: ['Sample Text', 'Does Not Matter How Many Words', 'What If', 'Sun In The Rain', 'Test Is Good']"}
{"id": 199, "desc": "Input: a list of strings.\nOutput: a list of strings where each word is transformed into camel case.\n\nFunctionality: The function takes a list of strings and transforms each word from the original strings into camel case, where the first letter is in lowercase and the following letters are in uppercase.\n\nExample: Input: ['Hello there everyone', 'What is wrong', 'Wait for a while', 'Main page', 'Test is good for everyone']; Output: ['helloThereEveryone', 'whatIsWrong', 'waitForAWhile', 'mainPage', 'testIsGoodForEveryone']"}
{"id": 200, "desc": "Input: a list of strings.\nOutput: a list of strings where each element is transformed to uppercase.\nFunctionality: This code takes a list of strings as input, converts it into a pandas Series, transforms each element to uppercase, and converts the modified Series back to a list.\nExample: Input: ['What is the matter', 'Something is wrong', 'Background color', 'Everyday activity', 'Test is good for everyone']; Output: ['WHAT IS THE MATTER', 'SOMETHING IS WRONG', 'BACKGROUND COLOR', 'EVERYDAY ACTIVITY', 'TEST IS GOOD FOR EVERYONE']"}
{"id": 201, "desc": "Input: a list of strings representing characters.\nOutput: a list of strings representing URL encoded characters.\nFunctionality: URL encode the characters in the input list, handling special cases such as '%20' preservation.\nExample: Input: ['%20', '!', '\"', '#', '$', '%', '&', \"'\", '(', ')']; Output: ['%20', '%21', '%22', '%23', '%24', '%25', '%26', '%27', '%28', '%29']"}
{"id": 202, "desc": "Input: a list of strings.  \nOutput: a list of strings with multiple spaces replaced by a single space.  \nFunctionality: The function takes a list of strings as input, and for each string, it replaces multiple spaces with a single space.  \nExample:  \nInput: ['1 2 3 4   5', 'How are    you', 'What   is the   matter', '1   2  4  4', 'How   fun']  \nOutput: ['1 2 3 4 5', 'How are you', 'What is the matter', '1 2 4 4', 'How fun']"}
{"id": 203, "desc": "Input: a list of strings representing titles.\nOutput: a list of strings representing SEO-friendly URLs.\n\nFunctionality: The function takes a list of titles as input, converts them to lowercase, removes special characters, replaces spaces with dashes, and creates SEO-friendly URLs from the titles. The result is returned as a list of SEO-friendly URLs.\n\nExample:\nInput: [\n    'How do you change a title to be part of the URL like Stack Overflow',\n    'Built-In Character Casing functions in .Net',\n    \"What's the difference between String and string\",\n    'Asp.Net Routing - Replace white spaces %20 with dashes from URLs generated',\n    '.NET method to convert a string to sentence case'\n]\nOutput: [\n    'how-do-you-change-a-title-to-be-part-of-the-url-like-stack-overflow',\n    'built-in-character-casing-functions-in-net',\n    'whats-the-difference-between-string-and-string',\n    'asp-net-routing-replace-white-spaces-20-with-dashes-from-urls-generated',\n    'net-method-to-convert-a-string-to-sentence-case'\n]"}
{"id": 204, "desc": "Input: a list of strings representing phone numbers (including special characters).\nOutput: a list of strings with only numerical characters representing phone numbers.\n\nFunctionality: The function removes any non-numeric characters from the input phone numbers and returns a list of phone numbers with only numerical digits.\n\nExample: \nInput: ['519-781-8816', '(913)-444-5555', '509-791-8816', '(912)-444-5555', '4654764768']\nOutput: ['5197818816', '9134445555', '5097918816', '9124445555', '4654764768']"}
{"id": 205, "desc": "Input: a list of strings representing phone numbers.\nOutput: a list of strings with phone numbers formatted as '###-###-####'.\n\nFunctionality: The function takes a list of phone numbers, splits them into area code, exchange code, and subscriber number, then puts them back together with dashes in between. It returns the formatted phone numbers as a list.\n\nExample: Input: ['5197818816', '9134445555', '5097918816', '9124445555', '4654764768']; Output: ['519-781-8816', '913-444-5555', '509-791-8816', '912-444-5555', '465-476-4768']"}
{"id": 206, "desc": "Input: a list of strings.\nOutput: a list of strings with digits and letters alternately sorted within each string.\n\nFunctionality: The function takes a list of strings as input and applies a transformation where the digits and letters in each string are sorted separately and then concatenated to form a new string with the digits and letters sorted alternately.\n\nExample: \nInput: ['D4C3B2A1', 'E7C3B2A1', 'ABCDE12345', 'AB12345CDE', 'E12HY5']\nOutput: ['A1B2C3D4', 'A1B2C3E7', 'A1B2C3E4D5', 'A1B2C3D5E4', 'E1H2Y5']"}
{"id": 207, "desc": "Input: a list of strings representing months.\nOutput: a list of strings representing months in numerical format.\n\nFunctionality: This code snippet takes a list of month names as input and transforms them into their corresponding numerical representation based on a dictionary mapping. Empty strings are handled as well.\n\nExample: Input: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', '']; Output: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '']"}
{"id": 208, "desc": "Input: a list of strings representing XML tags with attributes.\nOutput: a list of strings representing XML tags with attributes removed.\nFunctionality: Removes XML attributes from the input strings using regular expressions.\nExample: Input: ['<sample1 xns:id=\"e7b014d9-6271-4e32-921d-7488edfd6ea4\">a</sample1>', '<sample2 xns:id=\"d3450e86-7264-4512-9891-6c7183257741\">b</sample2>', '<sample3 xns:id=\"abc\">xyz</sample3>', '<sample3 xns:id=\"7f04f178-f235-4647-8584-c4e77f73fecf\">c</sample3>', '<sample6 xns:id=\"test\">b</sample6>']; Output: ['<sample1>a</sample1>', '<sample2>b</sample2>', '<sample3>xyz</sample3>', '<sample3>c</sample3>', '<sample6>b</sample6>']"}
{"id": 209, "desc": "Input: a list of string representing Fahrenheit values.  \nOutput: a list of string representing Celsius values.  \nFunctionality: convert Fahrenheit temperatures to Celsius and round to the nearest integer.  \nExample: Input: ['40', '45', '50', '55', '60']; Output: ['4', '7', '10', '13', '16']"}
{"id": 210, "desc": "Input: a list of strings\nOutput: a list of strings where all special characters are removed.\nFunctionality: The function removes any special characters from the strings in the input list, using regular expressions.\nExample: Input: ['BA(kfa1237fdn', '*9kk12jf7eYTk1', '()kjfdsk13^$$*A', '092378LLLL111', '11PP))(*(&^%%&*']; Output: ['BAkfa1237fdn', '9kk12jf7eYTk1', 'kjfdsk13A', '092378LLLL111', '11PP']"}
{"id": 212, "desc": "Input: a list of strings containing HTML tags.\nOutput: a list of strings with HTML tags removed.\nFunctionality: Removes HTML tags from the input strings using regular expressions to clean the text.\nExample: Input: ['<b>Hello World.</b><br/><p><i>Is there anyone out there?</i><p>', '<html><body>bla bla</td><td>bla bla<body><html>', '<b>hello world!</b><br /><i>it is me! !</i>', '<b>hello world!</b><br /><i>it is me! !</i>', '<b>test</b>']; Output: ['Hello World. Is there anyone out there?', 'bla bla bla bla', 'hello world! it is me! !', 'hello world! it is me! !', 'test']"}
{"id": 213, "desc": "Input: a list of strings representing mathematical expressions.\nOutput: a list of strings representing the evaluated mathematical expressions as integers (rounded).\n\nFunctionality: The code takes a list of strings representing mathematical expressions, evaluates each expression, rounds the result to avoid floating-point precision issues, and returns a new list of strings with the evaluated expressions as integers.\n\nExample: \nInput: ['3+6', '40-9', '2*6', '9/3', '1+9-2', '1+4/2']\nOutput: ['9', '31', '12', '3', '8', '3']"}
{"id": 214, "desc": "Input: a list of strings representing numbers.\nOutput: a list of strings representing the same numbers but in words.\n\nFunctionality: The code takes a list of string numbers, converts them to integers, and then converts the integers to words using the \"num2words\" library. It removes any commas in the words representation.\nExample: \nInput: ['10183', '90', '5888', '100000', '999999', '1000001', '10000007']\nOutput: ['ten thousand one hundred and eighty-three', 'ninety', 'five thousand eight hundred and eighty-eight', 'one hundred thousand', 'nine hundred and ninety-nine thousand nine hundred and ninety-nine', 'one million one', 'ten million seven']"}
{"id": 215, "desc": "Input: a list of DNA sequences (strings).\nOutput: a list of reverse complementary DNA sequences.\nFunctionality: The function takes a list of DNA sequences and returns a list of their reverse complementary sequences using the rules of base pairing (A-T, T-A, C-G, G-C).\nExample: Input: ['TAGTC', 'CGCAT', 'ACCAG', 'GACTA', 'CGCAA']; Output: ['GACTA', 'GCGTA', 'TGGTC', 'TAGTC', 'GCGTT']"}
{"id": 216, "desc": "Input: a list of strings representing words.\n\nOutput: a list of strings with appropriate articles (\"a\" or \"an\") prefixed to certain words.\n\nFunctionality: This code takes a list of words and prefixes the appropriate article (\"a\" or \"an\") based on the word's starting letter or an exception rule. If the word is in the exception list, a specific article is assigned to it.\n\nExample: Input: ['used car', 'honest mistake', 'computer', 'orange', 'hour']; Output: ['a used car', 'an honest mistake', 'a computer', 'an orange', 'an hour']"}
{"id": 217, "desc": "Input: a list of strings representing sequences of numerical values separated by commas.\nOutput: a list of strings representing the medians of each sequence.\nFunctionality: calculate the median of each sequence provided in the input list of strings and return a list of strings representing these medians.\nExample: Input: ['2,2,3,4,7,8,9', '1,2,3,5,6,7,8', '1,2,3', '4,5,6,7,8,9,10,11,12', '1,2,3,4,5']; Output: ['4', '5', '2', '8', '3']"}
{"id": 218, "desc": "Input: a list of strings representing dates.\nOutput: a list of strings representing dates incremented by one day.\nFunctionality: Increment each date in the input list by one day and return a list of strings representing the new dates in \"yyyy-MM-dd\" format.\nExample: Input: ['2007-01-01', '2008-12-12', '2009-03-31']; Output: ['2007-01-02', '2008-12-13', '2009-04-01']"}
{"id": 219, "desc": "Input: a list of strings representing dates in the format 'yyyy/mm/dd'.\nOutput: a list of strings representing dates in the format 'm/d/yyyy'.\nFunctionality: takes a list of dates as input, converts them to a pandas Series, converts the string sequence to datetime format, formats the dates into a new format, and finally converts them back to a list.\nExample: Input: ['2009/8/19', '2001/12/12', '2014/3/20', '2011/12/22', '2012/4/11']; Output: ['8/19/2009', '12/12/2001', '3/20/2014', '12/22/2011', '4/11/2012']"}
{"id": 220, "desc": "Input: a list of strings representing dates in the format \"MM/dd/yyyy\".\nOutput: a list of strings representing the month names extracted from the input dates.\n\nFunctionality: The function takes a list of date strings, converts them to a pandas Series, and then extracts the month names from the dates using the strftime method. The month names are then returned as a list.\n\nExample: Input: ['10/11/2009', '01/12/2012', '03/14/2013', '05/09/2014', '12/12/2012']; Output: ['October', 'January', 'March', 'May', 'December']"}
{"id": 221, "desc": "Input: a list of full names (strings).\nOutput: a list of initials (strings).\n\nFunctionality: The function takes a list of full names, splits them into first and last names, and creates initials using the first letter of the first name followed by a period and the last name. The initials are then returned as a list.\n\nExample: \nInput: ['Jack Bauer', 'Charles Wooten', 'Kim Lee', 'Lucy Goodman', 'Rachel Green']\nOutput: ['J. Bauer', 'C. Wooten', 'K. Lee', 'L. Goodman', 'R. Green']"}
{"id": 222, "desc": "Input: a list of strings.\nOutput: a list of strings with chunks of 4 characters separated by commas.\nFunctionality: Split each string element in the input list into chunks of 4 characters separated by commas.\nExample: Input: ['1111222233334444', '123412341234', '1111222', '123412345', '1']; Output: ['1111,2222,3333,4444', '1234,1234,1234', '1111,2222', '1234,1234,5', '1']"}
{"id": 223, "desc": "Input: a list of strings.\nOutput: a list of strings with distinct characters maintaining the order they appear in.\nFunctionality: For each string in the input list, the function removes duplicates in the characters while preserving the order they appear in.\nExample: Input: ['DHCH', 'KLKLHHMO', 'XUCHU', '123123', '9090']; Output: ['DHC', 'KLHMO', 'XUCH', '123', '90']"}
{"id": 224, "desc": "Input: a list of strings containing comma-separated numerical values.\nOutput: a list of strings representing the standard deviation values of the input numerical sequences with three decimal places.\n\nFunctionality: The function takes a list of strings where each string contains comma-separated numerical values. The function then converts these strings into numerical lists, calculates the standard deviation of each list using pandas, and formats the result as a string with three decimal places cutting off any trailing zeros.\n\nExample: \nInput: ['12,13,14,12', '12,13,14,12,5', '12,12', '1,100,2', '1,100,2,50']\nOutput: ['0.982', '3.429', '0.000', '46.812', '45.630']"}
{"id": 226, "desc": "Input: a list of strings representing years.\nOutput: a list of strings representing year type (leap or common year).\n\nFunctionality: The function takes a list of strings representing years, converts them to integers, checks if each year is a leap year or a common year, and returns a list of strings representing the year type (leap or common).\n\nExample: \nInput: ['2007', '2008', '2009', '2010', '2011', '2012', '2016', '2017']\nOutput: ['common', 'leap', 'common', 'common', 'common', 'leap', 'leap', 'common']"}
{"id": 227, "desc": "Input: a list of strings representing email addresses.\nOutput: a list of strings with valid email addresses only.\n\nFunctionality: The code defines a function that validates email addresses using a simple regex pattern. It then creates a DataFrame from the input email addresses, applies the validation function to each email, and returns a list of valid email addresses.\n\nExample: \nInput: ['testing@invalid@email.com', 'walter@xyz.com', 'tom@qq.com', 'asdf', 'ab@xyz.xyz', 'wa@lter@xyz.com']\nOutput: ['invalid', 'walter@xyz.com', 'tom@qq.com', 'invalid', 'ab@xyz.xyz', 'invalid']"}
{"id": 228, "desc": "Input: a list of strings representing phone numbers.\nOutput: a list of strings representing phone numbers with an area code \"425-\" added if there is only one dash in the phone number.\nFunctionality: Append an area code \"425-\" to phone numbers if they have only one dash, otherwise leave them unchanged.\nExample: Input: ['499-999-2020', '999-2020', '390-9292', '299-398-0003', '321-2020']; Output: ['499-999-2020', '425-999-2020', '390-9292', '299-398-0003', '425-321-2020']"}
{"id": 229, "desc": "Input: a list of string phone numbers.\nOutput: a list of string phone numbers formatted as \"XXX-XXX-XXXX\".\nFunctionality: clean and format the input phone numbers by removing non-digit characters, adding missing area codes if necessary, and adding hyphens to format as XXX-XXX-XXXX.\nExample: \nInput: ['390-9292', '499-999-2020', '(299)-398-0003', '(288) 3998888', '999-2020', '425-9990200', '(288) 3998888', '499-999-2020', '(299)-398-0003', '(288) 3998888']\nOutput: ['425-390-9292', '499-999-2020', '425-299-398-0003', '425-288-399-8888', '425-999-2020', '425-999-0200', '425-288-399-8888', '499-999-2020', '425-299-398-0003', '425-288-399-8888']"}
{"id": 230, "desc": "Input: a list of strings.\nOutput: a list of strings representing the first element of the first set in each string.\nFunctionality: Extract the first element of the first set from each string in the input list using regular expressions.\nExample: Input: ['{{aaa, bbb}, {ccc, ddd}, {eee, fff}}', '{{x, y}, {z, zz}}', '{{a}, {bb}, {ccc, ddd, eee, fff}}', '{{p, q}, {r, s, t}, {u, v, w}}']; Output: ['aaa', 'x', 'a', 'p']"}
{"id": 231, "desc": "Input: a list of strings.\nOutput: a list of strings containing capitalized words from each input string.\n\nFunctionality: The function extracts all words with only capital letters and possibly punctuation from each input string and returns them as a list.\n\nExample: Input: [\n    'This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!',\n    'When she asked if we had reservations, I replied no, and she commented NO? You KNOW IT IS SATURDAY. I wanted to say yes, yesterday was Friday and tomorrow is Sunday. Instead I replied that I was TERRIBLY sorry i did not realize i needed a reservation',\n    'ABC ajib DDD xyz',\n    'This is MY work',\n    'HOW ARE YOU'\n]\nOutput: ['AHhh, OMG', 'NO, KNOW, IT, SATURDAY, TERRIBLY', 'ABC, DDD', 'MY', 'HOW, YOU']"}
{"id": 232, "desc": "Input: a list of strings representing dates in the format \"yyyy/MM/dd\".\nOutput: a list of strings representing dates in the format \"mm/dd/yyyy\".\n\nFunctionality: Converts the input dates from \"yyyy/MM/dd\" format to \"mm/dd/yyyy\" format.\nExample: Input: ['2009/8/1', '2001/12/12', '2014/3/2', '2011/12/22', '2012/4/11']; Output: ['08/01/2009', '12/12/2001', '03/02/2014', '12/22/2011', '04/11/2012']"}
{"id": 233, "desc": "Input: a list of strings representing numerical values.\nOutput: a list of strings representing numerical values incremented by 20.\n\nFunctionality: Convert the input list of strings into integers, add 20 to each element, convert them back to strings, and return the new list.\n\nExample: Input: ['25', '35', '10', '1', '11']; Output: ['45', '55', '30', '21', '31']"}
{"id": 234, "desc": "Input: a list of strings representing domains.\n\nOutput: a list of strings representing domains with 'http://' and 'www.' removed.\n\nFunctionality: The function takes a list of domain names, removes 'http://' and 'www.' if they exist, and returns the modified list of domain names.\n\nExample: \nInput: ['stackoverflow.com', 'www.stackoverflow.com', 'http://stackoverflow.com', 'http://www.stackoverflow.com',\n        'facebook.com', 'www.facebook.com', 'http://facebook.com', 'http://www.facebook.com',\n        'google.com', 'www.google.com', 'http://google.com', 'http://www.google.com']\nOutput: ['stackoverflow.com', 'stackoverflow.com', 'stackoverflow.com', 'stackoverflow.com',\n         'facebook.com', 'facebook.com', 'facebook.com', 'facebook.com',\n         'google.com', 'google.com', 'google.com', 'google.com']"}
{"id": 235, "desc": "Input: a list of strings representing URLs\nOutput: a list of strings representing subdomains extracted from the URLs.\n\nFunctionality: The function `extract_subdomain` takes a list of URLs and extracts the subdomain part from each URL. It finds the start and end index of the subdomain part based on the position of '.' in the URL and then extracts that part. The extracted subdomains are added to a new list which is returned as the output.\n\nExample: Input: ['www.google.com', 'www.facebook.com', 'www.sina.cn', 'www.cs.uwaterloo.ca', 'www.abc.com']; Output: ['google', 'facebook', 'sina', 'uwaterloo', 'abc']"}
{"id": 236, "desc": "Input: a list of strings representing URLs.\nOutput: a list of strings representing domain names extracted from the URLs.\n\nFunctionality: The code takes a list of URLs as input, extracts the domain names from each URL, and returns a list of domain names.\nExample: Input: ['http://www.google.com/url?sa=t&source=web&ct=res&cd=1&ved=0CAgQFjAA&url=http://www.test.com/&rct=j&q=test&ei=G2phS-HdJJWTjAfckvHJDA&usg=AFQjCNFSEAztaqtkaIvEzxmRm2uOARn1kQ', 'http://www.beta.microsoft.com/path/page.htm']; Output: ['test.com', 'microsoft.com']"}
{"id": 237, "desc": "Input: a list of strings containing HTML content.\nOutput: a list of strings with whitespace removed between HTML tags.\nFunctionality: removes spaces between HTML tags within the input strings.\nExample: Input: ['<p>blahblahblah</p>            <p>blahblahblah</p>', '<head> <title>A Simple HTML Example</title> </head>']; Output: ['<p>blahblahblah</p><p>blahblahblah</p>', '<head><title>A Simple HTML Example</title></head>']"}
