{"id": 0, "desc": "Input: a list of boolean values.\nOutput: a list of boolean values after negation.\n\nFunctionality: Negates each boolean value in the input list."}
{"id": 1, "desc": "Input: a list of boolean values.\nOutput: a list of integer values.\n\nFunctionality: Converts each boolean value in the input list to an integer value (1 for True, 0 for False)."}
{"id": 2, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values representing the absolute values of the input sequence.\nFunctionality: Convert each numerical value in the input list to its absolute value and return a new list with the absolute values."}
{"id": 3, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values.\nFunctionality: add 10 to each number in the input list and return the updated list."}
{"id": 4, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values representing the sum of each element with its previous element.\n\nFunctionality: Takes a list of numerical values as input and returns a list where each element is the sum of the current element with its previous element (if exists)."}
{"id": 5, "desc": "Input: a list of numerical values.\nOutput: a list of integers obtained by applying the ceil function to each element.\nFunctionality: Takes a list of numerical values as input, applies the ceil function to each element, and returns a new list of integers."}
{"id": 6, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values representing the cosine of the input values.\n\nFunctionality: Apply the cosine function to each number in the input list and return a list of cosine values. This code snippet calculates the cosine of each value in the input list `seq_a` using the `apply_cos` function and stores the results in `seq_b`."}
{"id": 7, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values divided by 10.\nFunctionality: Apply division by 10 to each number in the input list and return the resulting list."}
{"id": 8, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values representing the exponential of the input values.\nFunctionality: Apply the exponential function to each number in the input list and return a list with the results."}
{"id": 9, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values representing corresponding Fibonacci numbers.\n\nFunctionality: The code generates a Fibonacci sequence up to the maximum number in the input list. Then, for each element in the input list, it computes the corresponding Fibonacci number from the generated sequence and returns a list of these Fibonacci numbers."}
{"id": 10, "desc": "Input: a list of numerical values.\nOutput: a list of integers representing the floor of the input values.\nFunctionality: Apply the floor function to each element in the input list and return a new list with the resulting integers."}
{"id": 11, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values representing log10 of the input values.\nFunctionality: apply the log10 function to each number in the input list and return a list with the results."}
{"id": 12, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values representing log base 2 of the input values.\nFunctionality: Calculate log base 2 of each number in the input list and return a new list with the results."}
{"id": 13, "desc": "Input: a list of numerical values.\nOutput: a list of normalized numerical values.\nFunctionality: Calculate the minimum and maximum values in the input sequence, then apply min-max normalization to each value in the input sequence based on these min and max values, returning the normalized sequence."}
{"id": 14, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values representing the negation of the input values.\nFunctionality: Compute the negation of each number in the input list and return a new list with the negated values."}
{"id": 15, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values representing the reciprocal of the input values.\nFunctionality: Compute the reciprocal (1/value) for each element in the input list."}
{"id": 16, "desc": "Input: a list of numerical values.\nOutput: a list of integers representing the rounded values of the input list.\n\nFunctionality: The code takes a list of numerical values as input and rounds each element to the nearest integer. It then returns a new list containing these rounded integers."}
{"id": 17, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values.\nFunctionality: Multiply each number in the input list by 10."}
{"id": 18, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values representing the sin of the input values.\n\nFunctionality: Apply the sine function to each number in the input list and return a list of sine values. This code snippet calculates the sine of each value in the input list using the math library's sin function."}
{"id": 19, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values representing square roots.\nFunctionality: computes the square root of each number in the input list using the math module in Python and produces a list of square root values."}
{"id": 20, "desc": "Input: a list of numerical values\nOutput: a list of numerical values representing the square of each input value.\nFunctionality: Computes the square of each numerical value in the input list and returns a new list with the squared values."}
{"id": 21, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values.\nFunctionality: Subtract 10 from each number in the input list and return the resulting list of numbers."}
{"id": 22, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values representing the difference between each element and its previous element.\nFunctionality: Takes an input sequence of numerical values and calculates the difference between each element and its previous element, storing the results in a new list."}
{"id": 23, "desc": "Input: a list of numerical values.\nOutput: a list of numerical values.\nFunctionality: Calculate the tangent of each number in the input list using the math.tan() function and return a list of the resulting values."}
{"id": 24, "desc": "Input: a list of numerical values.\nOutput: a list of normalized values using z-score normalization.\n\nFunctionality: The code defines a function that takes a list of numerical values as input, calculates the mean and standard deviation of the input sequence, then applies z-score normalization formula to each element in the input sequence to create an output sequence of normalized values. The normalized values are calculated by subtracting the mean from each element and dividing by the standard deviation. Finally, it returns the list of normalized values."}
{"id": 25, "desc": "Input: a list of numerical values.\nOutput: a list of strings representing Roman numerals.\n\nFunctionality: The code defines a function `int_to_roman` that converts a given integer number into its Roman numeral equivalent. It then defines another function `num_to_roman_list` that takes a list of numerical values as input and returns a list of strings representing the Roman numeral equivalents of those values. The example test case provided converts the numbers `[3, 4, 9, 58, 1994]` into Roman numerals and prints the result."}
{"id": 26, "desc": "Input: a list of strings.\nOutput: a list of boolean values.\n\nFunctionality: Check if each string in the input list contains only alphabet characters."}
{"id": 27, "desc": "Input: a list of strings.\nOutput: a list of boolean values indicating whether each string contains a space.\nFunctionality: check if space is present in each string in the input list and return a list of boolean values."}
{"id": 28, "desc": "Input: a list of strings representing boolean values.\nOutput: a list of boolean values.\n\nFunctionality: Convert each string in the input list to a corresponding boolean value based on defined mappings for truthy and falsy strings. Any string not matching the mappings will raise a ValueError."}
{"id": 29, "desc": "Input: a list of strings representing Roman numerals.\nOutput: a list of integers representing the corresponding decimal values.\n\nFunctionality: The code defines a function `roman_to_int` that converts a single Roman numeral string to its integer value. It then defines another function `transform_roman_list` that applies the `roman_to_int` function to each Roman numeral string in a list. Finally, it converts a list of Roman numeral strings into a list of integers representing their decimal values and prints the resulting list."}
{"id": 30, "desc": "Input: a list of binary strings\nOutput: a list of hexadecimal strings\nFunctionality: Convert each binary string in the input list into a hexadecimal string by padding to ensure the length is a multiple of 4 and then converting the binary to hexadecimal."}
{"id": 31, "desc": "Input: a list of binary strings.\nOutput: a list of octal strings.\n\nFunctionality: This function takes a list of binary strings as input, converts each binary string to an octal string by grouping the binary digits into groups of 3 and then converting those groups to octal numbers. It pads the binary strings if necessary to ensure the length is a multiple of 3. Finally, it returns a list of octal strings corresponding to the input binary strings."}
{"id": 32, "desc": "Input: a list of strings in camelCase format.\nOutput: a list of strings in snake_case format.\nFunctionality: Convert each string in the input list from camelCase to snake_case format by adding underscores before each capital letter and converting to lowercase."}
{"id": 33, "desc": "Input: a list of strings.\nOutput: a list of strings with the first letter capitalized.\nFunctionality: Capitalize the first letter of each string in the input list and return the modified list."}
{"id": 34, "desc": "Input: a list of strings representing URLs.\n\nOutput: a list of strings representing URLs with 'https://' protocol added if missing.\n\nFunctionality: The function `ensure_https` checks each URL in the input list and adds 'https://' if the URL does not already start with 'https://'. If the URL starts with 'http://', it replaces 'http://' with 'https://'. The modified URLs are then returned as a new list."}
{"id": 35, "desc": "Input: a list of strings containing text possibly mentioning US states.\nOutput: a list of strings representing the state abbreviations or full names.\n\nFunctionality: The function `extract_state` searches for US state abbreviations or full names in a list of input strings using regular expressions. It extracts the first match found in each input string and returns a list of the extracted state abbreviations or names. If no match is found in a string, an empty string is appended to the output list."}
{"id": 36, "desc": "Input: a list of strings with special characters.\nOutput: a list of strings with special characters converted into ASCII representation.\n\nFunctionality: The function `force_ascii` takes a list of strings as input, converts each string into its ASCII representation using the `unidecode` function from the `unidecode` library, and returns a new list with ASCII representation strings. The example usage demonstrates converting a list of strings with special characters into their ASCII representation."}
{"id": 37, "desc": "Input: a list of email addresses in string format.\nOutput: a list of email addresses with dots removed from the username field.\n\nFunctionality: This function takes a list of email addresses as input, splits each address into username and domain, removes dots from the username, and then reconstructs the email address with the modified username. The function returns a list of email addresses with dots removed from the usernames."}
{"id": 38, "desc": "Input: a list of strings representing phone numbers in various formats.\nOutput: a list of strings representing phone numbers in the format \"(xxx) xxx-xxxx\".\nFunctionality: Remove non-digit characters from each phone number string and format it as \"(xxx) xxx-xxxx\"."}
{"id": 39, "desc": "Input: a list of strings containing HTML code.\nOutput: a list of strings representing plain text.\n\nFunctionality: The function `html_to_text` takes a list of HTML strings as input and uses BeautifulSoup to extract the plain text content from each HTML string. It then returns a list of strings containing the extracted plain text content."}
{"id": 40, "desc": "Input: a list of strings with alphanumeric and special characters.\nOutput: a list of strings containing only alphabetic letters and spaces.\n\nFunctionality: Removes any non-alphabetic characters (including digits and special symbols) from each string in the input list and returns a new list with only alphabetic letters and spaces."}
{"id": 41, "desc": "Input: a list of strings containing Markdown formatted text.\nOutput: a list of strings containing HTML formatted text.\n\nFunctionality: Converts each Markdown string in the input list to its corresponding HTML format using the markdown library."}
{"id": 42, "desc": "Input: a list of strings.\nOutput: a list of strings representing MD5 hashed values.\n\nFunctionality: Generate MD5 hash values for each string in the input list using the hashlib library in Python and return a list of MD5 hashed strings."}
{"id": 43, "desc": "Input: a list of strings containing ASCII characters.\nOutput: a list of strings where each ASCII character in the input strings is converted to the next ASCII character.\n\nFunctionality: The function `ascii_to_next_ascii` takes a list of strings as input and converts each ASCII character in the strings to the next ASCII character. It then returns a list of strings with the updated ASCII characters."}
{"id": 44, "desc": "Input: a list of strings containing ASCII characters.\nOutput: a list of strings where each ASCII character in the input strings is converted to the previous ASCII value.\n\nFunctionality: The function `ascii_to_prev_ascii` takes a list of strings as input and converts each ASCII character in the strings to its previous ASCII value. It then returns a list of strings with the updated ASCII values."}
{"id": 45, "desc": "Input: a list of strings containing alphabetic letters and other characters.\nOutput: a list of strings with alphabetic letters removed.\n\nFunctionality: The function takes a list of strings as input and removes all alphabetic letters from each string using regular expressions. The output is a new list of strings with only numerical values or special characters left."}
{"id": 46, "desc": "Input: a list of strings containing various types of brackets.\nOutput: a list of strings with all brackets removed.\n\nFunctionality: The function removes all types of brackets (parentheses, square brackets, curly brackets) from each string in the input list and returns a new list with the modified strings where all brackets are eliminated."}
{"id": 47, "desc": "Input: a list of strings.\nOutput: a list of strings with content within brackets removed.\nFunctionality: Removes all content within brackets (square, round, curly brackets) for each string in the input list."}
{"id": 48, "desc": "Input: a list of strings with possible blank characters (spaces, tabs, newlines).\nOutput: a list of strings without any blank characters.\n\nFunctionality: This function takes a list of strings as input, removes all blank characters (spaces, tabs, newlines) from each string in the list, and returns a new list with the cleaned strings."}
{"id": 49, "desc": "Input: a list of strings.\n\nOutput: a list of strings where each string has its characters reversed.\n\nFunctionality: Reverses the characters of each string in the input list of strings and returns a new list with the reversed strings."}
{"id": 50, "desc": "Input: a list of strings.\nOutput: a list of strings with reversed word order in each string.\n\nFunctionality: The function `reverse_word_order` takes a list of strings as input, reverses the order of words in each string, and returns a new list of strings with the reversed word order. The example usage demonstrates this functionality by reversing the word order in each string in the provided list `seq_a` and printing the updated list."}
{"id": 51, "desc": "Input: a list of strings.\nOutput: a list of strings with words in each string reversed.\nFunctionality: Reverse the order of letters within each word in the input strings."}
{"id": 52, "desc": "Input: a list of strings.\nOutput: a list of SHA-1 hashed strings.\n\nFunctionality: The function `apply_sha1_hash` takes a list of strings as input, applies the SHA-1 hashing algorithm to each string in the list, and returns a new list containing the SHA-1 hashed strings. The hashlib library is used to perform the hashing operation."}
{"id": 53, "desc": "Input: a list of strings in snake_case format.\nOutput: a list of strings in camelCase format.\n\nFunctionality: Convert each string in the input list from snake_case to camelCase format by capitalizing the first letter of each word after the first one and joining them."}
{"id": 54, "desc": "Input: a list of strings.\nOutput: a list of strings with spaces replaced by hyphens.\nFunctionality: Replaces spaces with hyphens in each string of the input list."}
{"id": 55, "desc": "Input: a list of strings.\nOutput: a list of strings with spaces replaced by underscores.\nFunctionality: Replace spaces with underscores in each string within the input list."}
{"id": 56, "desc": "Input: a list of strings.\nOutput: a list of strings with leading and trailing whitespace removed.\nFunctionality: The function `strip_whitespace` takes a list of strings as input, removes any leading and trailing whitespace from each string, and returns the list of strings with stripped whitespace."}
{"id": 57, "desc": "Input: a list of strings.\nOutput: a list of strings with the first letter of each word capitalized.\n\nFunctionality: The function takes a sequence of strings as input and returns a new sequence where the first letter of each word in the original strings is capitalized."}
{"id": 58, "desc": "Input: a list of strings.\nOutput: a list of strings in lowercase.\n\nFunctionality: Convert each string in the input list to lowercase and return the updated list."}
{"id": 59, "desc": "Input: a list of strings.\nOutput: a list of strings in uppercase.\nFunctionality: Convert each string in the input list to uppercase and return the modified list."}
